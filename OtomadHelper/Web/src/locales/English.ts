export default {
	javascript: {
		metadata: {
			__translator__: "",
			name: "English",
			culture: "en-US",
		},
		colon: ": ",
		semicolon: "; ",
		titles: {
			home: "Home",
			source: "Source",
			score: "Score",
			audio: "Audio",
			visual: "Visual",
			track: "Track",
			track_other: "Tracks",
			sonar: "Sonar",
			lyrics: "Lyrics",
			shupelunker: "Shupelunker",
			shupelunker_full: "Shupelunker Tactics",
			ytp: "YTP",
			ytp_full: "YouTube Poop",
			mosh: "Mosh",
			mosh_other: "Moshes",
			mosh_full: "Datamoshes",
			tools: "Tools",
			settings: "Settings",
			prve: "PV Rhythm Visual Effect",
			staff: "Staff Visualizer",
			pixelScaling: "Pixel Scaling",
			customEffect: "Custom Effect",
			customEffect_other: "Custom Effects",
		},
		source: {
			trackEvent: "Track event",
			projectMedia: "Project media",
			browseFile: "Browse file",
			trim: "Trim",
			startTime: {
				_: "Start time",
				projectStart: "Project start",
				cursor: "Cursor",
			},
			preferredTrack: {
				_: "Preferred track",
				index: "Preferred track index",
				top: "Top",
				ordinal: "Below the {{count, ordinal}} track",
				belowAdjustmentTracks: "If one or more adjustment tracks are below this track, select the next track that none of them",
				newTrack: "New track",
			},
			afterCompletion: {
				_: "After completion",
				removeSourceClips: "Remove source track clips",
				selectSourceClips: "Select source track clips",
				selectGeneratedAudioClips: "Select all audio clips generated",
				selectGeneratedVideoClips: "Select all video clips generated",
			},
			randomOffsetForTracks: "Use random offsets for different tracks",
		},
		on: "On",
		off: "Off",
		custom: "Custom",
		enabled: "Enabled",
		enable: "Enable",
		learnMore: "Learn more",
		condition: "Condition",
		underConstruction: "Under construction…",
		allFiles: "All Files",
		systemDefault: "System default",
		complete: "Complete",
		dragToImport: "Drag and drop to import as {{item, lowercase}}",
		save: "Save",
		auto: "Auto",
		back: "Back",
		navigation: "Navigation",
		selectAll: "Select all",
		invertSelection: "Invert selection",
		variableBeginWith: "Variable from {{first, lowercase}}",
		reset: "Reset",
		infoBar: {
			warning: "Warning",
		},
		selectionMode: {
			single: "Single",
			multiple: "Multiple",
		},
		subheaders: {
			moreOptions: "More options",
			advanced: "Advanced",
			config: "Configuration",
			parameters: "Parameters",
			effects: "Effects",
		},
		score: {
			midi: "MIDI",
			midiFile: "MIDI Sequence Files",
			st: "Sequence text",
			stFile: "All Supported Sequence Text Files",
			ustFile: "UTAU/OpenUTAU Sequence Text Files",
			vsqFile: "Vocaloid Sequence Files",
			refOtherTracks: "Refer to other tracks",
			tts: "Text to speech",
			pureNotes: "Pure notes",
			encoding: "Encoding",
			bpm: {
				_: "BPM",
				variableMidi: "Variable MIDI tempo",
				constantMidi: "Constant MIDI tempo",
				project: "Project tempo",
			},
			timeSignature: "Time signature",
			constraint: {
				_: "Constraint note length",
				none: "Unconstrained",
				max: "Max length",
				fixed: "Fixed length",
			},
			musicalTrack: "Track",
			musicalTrack_other: "Tracks",
			noteCount: "Note count",
			beginNote: "Begin note",
			pan: {
				_: "Pan",
				left: "Left",
				right: "Right",
				center: "Center",
			},
			instrument: "Instrument",
			drumKit: "Drum kit",
		},
		stream: {
			preview: "Preview",
			stretch: {
				_: "Stretch",
				noStretching: "No stretching",
				flexingAndExtending: "Flexing & extending",
				extendingOnly: "Extending only",
				flexingOnly: "Flexing only",
			},
			loop: "Loop",
			normalize: "Normalize",
			staticVisual: "Static visual",
			noLengthening: {
				_: "No lengthening",
				lengthenable: "Lengthenable",
				freezeEndFrames: "Freeze end frames",
				trimEndFrames: "Trim end frames",
				splitThenFreeze: "Split then freeze",
				freezeToGray: "Freeze to gray",
				freezeToEffect: "Freeze to effect",
			},
			legato: {
				_: "Legato",
				portato: "Portato",
				upToOneBeat: "Up to 1 beat",
				upToOneBar: "Up to 1 bar",
				unlimited: "Unlimited",
			},
			multitrackForChords: "Multitrack for chords",
			createGroups: "Create groups",
			glissando: {
				_: "Glissando",
				amount: "Amount",
			},
			autoPan: "Auto pan",
			transformMethod: {
				_: "Transform method",
				panCrop: "Pan/Crop",
				transformOfx: "TransformOFX",
			},
			tuning: {
				_: "Tuning",
				tuningMethod: {
					_: "Tuning method",
					noTuning: "No Tuning",
					pitchShift: "Pitch Shift",
					elastic: "Élastique",
					classic: "Classic",
					scaleless: "Scaleless",
				},
				stretchAttributes: {
					_: "Stretch attributes",
				},
				alternativeForExceedsTheRange: {
					_: "If exceeds the range",
					multiple: "Use multiple Audio Effect Plugin",
					plugin: "Switch to Audio Effect Plugin",
					octave: "Higher or lower octaves",
					dock: "Dock at the edge",
					silent: "Silent",
				},
				resample: "Resample",
				preserveFormant: "Preserve formant",
				basePitch: "Base pitch",
				prelisten: {
					_: "Prelisten",
					engine: "Engine",
					waveform: {
						_: "Waveform",
						sinusoid: "Sinusoid",
						triangle: "Triangle",
						square: "Square",
						sawtooth: "Sawtooth",
					},
					duration: "Duration",
					adjustAudioToBasePitch: "Adjust audio to base pitch",
				},
			},
			mapping: {
				_: "Mapping",
			},
			parameters: {
				copyFromAnotherParameterScheme: "Copy from another parameter scheme here",
			},
		},
		track: {
			layout: "Layout",
			grid: "Grid Layout",
			box3d: "3D Box Layout",
			gradient: "Gradient Tracks",
			applyToSelectedTracks: "Apply to selected tracks",
			legato: {
				_: "Legato",
			},
			clear: {
				_: "Clear",
				motion: "Clear track motions",
				effect: "Clear track effects",
			},
		},
		ytp: {
			constraint: "Constraint length",
			clips: "Clips",
			effects: "YTP Effects",
		},
		mosh: {
			datamosh: "Datamosh",
			datamix: "Datamix",
			layer: "Layer",
			render: "Render",
			scramble: "Scramble",
			automator: "Automator",
			stutter: "Stutter",
			shake: "Shake",
			specifyClipsFolder: "Specify Datamosh clips folder",
			install: "Download Datamosh Extension Pack",
		},
		tools: {
			flow: "Flow",
			selectorAndReplacer: "Selector & Replacer",
			normalizer: "Normalizer",
			subtitles: "Subtitles",
			effector: "Effector",
			fader: "Fader",
			exportScore: "Export Score",
			converters: "Converters",
			clawer: "Clawer",
		},
		selectInfo: {
			source: "{{count}} media source has been selected",
			source_other: "{{count}} media sources have been selected",
			track: "{{count}} track has been selected",
			track_other: "{{count}} tracks have been selected",
			videoTrack: "{{count}} video track has been selected",
			videoTrack_other: "{{count}} video tracks have been selected",
			audioTrack: "{{count}} audio track has been selected",
			audioTrack_other: "{{count}} audio tracks have been selected",
			trackEvent: "{{count}} track event has been selected",
			trackEvent_other: "{{count}} track events have been selected",
			videoEvent: "{{count}} video track event has been selected",
			videoEvent_other: "{{count}} video track events have been selected",
			audioEvent: "{{count}} audio track event has been selected",
			audioEvent_other: "{{count}} audio track events have been selected",
			trackEventOnlyOne: "You must select ONE and only ONE track event, no more and no less",
			videoEventOnlyOne: "You must select ONE and only ONE video track event, no more and no less",
			audioEventOnlyOne: "You must select ONE and only ONE audio track event, no more and no less",
		},
		prve: {
			classes: {
				flip: "Flip Class",
				rotation: "Rotation Class",
				scale: "Scale Class",
				mirror: "Mirror Class",
				invert: "Invert Class",
				hue: "Hue Class",
				chromatic: "Monochrome Class",
				time: "Time Class",
				time2: "Time Class 2",
				ec: "Expansion & Compression Class",
				swing: "Swing Class",
				blur: "Blur Class",
				wipe: "Wipe Class",
			},
		},
		pixelScaling: {
			scaleFactor: "Scale factor",
			replaceSourceMedia: "Replace source media",
		},
		settings: {
			about: {
				checkForUpdates: "Check for updates",
				repositoryLink: "Repository link",
				documentation: "Documentation",
				translation: "Contribute translation",
				feedback: "Feedback",
				version: "Version",
				author: "Author",
				__author__: "Ranne",
				originalAuthor: "Original author",
				__originalAuthor__: "Chaosinism",
				translator: "Translator",
			},
			language: {
				_: "Language",
				en: "English",
				"zh-CN": "Simplified Chinese",
				ja: "Japanese",
				vi: "Vietnamese",
			},
			appearance: {
				_: "Appearance",
				colorScheme: {
					_: "Color scheme",
					light: "Light",
					dark: "Dark",
					auto: "Auto",
				},
				uiScale: "UI scale",
			},
			config: {
				hideUsageTips: "Hide usage tips",
			},
			dev: {
				_: "Dev",
				devMode: "Developer mode",
				rtl: "Layout direction right-to-left",
			},
		},
		descriptions: {
			condition: "Specifies when to apply the following configuration",
			source: {
				trim: "Adjusts the start or end time of the specified source",
				startTime: "Specifies when to start generating from the project",
				preferredTrack: {
					_: "Allows you to specify an existing track to generate (except multitrack)",
					fillingInstructions: "If 0, then generated above all tracks;\nIf positive, then generated below the nth track;\nIf negative, then generated below the nth-to-last track.\nIf any preferred track is specified in the Audio or Visual configuration, it will override this option.",
					belowAdjustmentTracks: {
						versionRequest: "Note: This feature requires VEGAS Pro ≥ 19. The current version is {{version}}.",
					},
				},
				randomOffsetForTracks: "When on, this can result in randomly selected source clips having different base pitches, making it useful only for creating funny videos for entertainment purposes, and barely used for creating high-caliber videos",
			},
			score: {
				trim: "Intercepts the generation time range of the score",
				bpm: "Specifies the beats per minute",
				constraint: "Controls the output length of notes from the score",
				encoding: "Specifies the text encoding to use when reading the file",
			},
			stream: {
				stretch: "When on, stretches the clip instead of changing its duration",
				loop: "When the clip is lengthened to the end of the source media, playback starts over",
				normalize: "Normalizes the audio, useful for quiet audio",
				staticVisual: "Freezes the frame at the beginning of the clip",
				noLengthening: "Handles the clip if the note is longer than it",
				legato: "Fills in the gaps between the notes",
				multitrackForChords: "Creates multiple tracks for chords",
				createGroups: "Creates groups for video and audio clips represented by one note",
				glissando: {
					_: "Creates a swirl effect when the note pitch bends or slides",
					amount: "Specifies the amount of the swirl twist amplitude",
				},
				autoPan: "Pans the audio using envelope automation",
				transformMethod: "Specifies target properties for transformed keyframes",
				tuning: {
					stretchAttributes: "More configuration about the selected tuning method",
					alternativeForExceedsTheRange: "Handles out-of-range notes with an alternative method",
					resample: "Locks stretch and pitch, adjusts stretch to change pitch",
					preserveFormant: "Maintains voice tone while tuning",
					basePitch: "Specifies the base pitch of the audio clip",
					prelisten: {
						_: "Compares the clip to the base pitch for easy adjustment",
						adjustAudioToBasePitch: "Match the audio of the clip to the base pitch instead of the other way around, useful for older styles of remixes",
					},
				},
				effects: {
					prve: "Makes your visuals more rhythmic",
					staff: "Uses custom patterns as notes to draw visuals similar fashion to piano staff sheets",
					pixelScaling: "Scaling using nearest neighbor hard edge amplification and interpolation algorithms",
					customEffect: "Apply custom effect presets to all clips and tracks",
				},
				mapping: {
					_: "Maps the properties of notes to the specified item",
				},
			},
			track: {
				gradient: "Gives the video tracks a gradient color effect in your layout",
				legato: "Fills in the gaps between the track clips",
			},
			sonar: {
				_: "Sonar is a visual effect that utilizes Cookie Cutter shapes to create beat-style visual motion graphics. This feature allows you to assign different shapes or effects to various percussion instruments of a drum kit (channel 10) in the score.\nA common Otomad genre is to create Motion Graphics (Mograph) by adding various shapes, such as diffuse circles, to the visual based on the beats. Mograph is a product between graphic design and animation design, a form of visual expression based on the flow of time, and a kind of video art. The term “motion graphics” refers to graphics that are deformed by the flow of time. A single Otomad video containing only mographs is often titled “Graphs” or “Shapes”.",
				// The name of this effect, “Sonar”, was coined by Motosai.
			},
			shupelunker: {
				_: "Shupelunker Tactics is an unpitched YTPMV/Otomad tactic. It is used to play the melody by using a clip of the source (usually a vocal) at the same pitch as the melody, i.e. the source clip itself is pitched to match the melody.\nIf the pitch of the clip does not match the melody, “Tartar Tactics” is generated. It is also unpitched and allows you to choose where the clip is cut (usually at a dialog), often using audio stretching and rewinding, as well as adding sixteenth to sixty-fourth rests. During production, the clips are matched to the rhythm for vocal sense.",
				// The name of this tactic originated in Otomad, whose first creation using this tactic had the title of being a parody of Shu (Shuzo Matsuoka) netaed with Spelunker (game), hence the name. This method was also used in early YTPMV, but it never had an official name or method title, it is more like a meme to use this method in a similar way that most YTPMV from the late 2000s to mid 2010s would use.
			},
			ytp: {
				_: "YouTube Poop (YTP) is used to create nonsensical videos using various effects known in the YTP genre. YTP supports multisource.\nYTP is a Neo-Dada art form that consists of absurd remixes that imitate and mock the lowest technical and aesthetic standards of remix culture in order to comment on remix culture itself. It consists of video remixes edited from a variety of video clips to confuse, stun, or amuse the viewer. The sources can be mashed all together into a nonsensical crossover story, or simply repeated footage of the characters gesticulating oddly.",
				constraint: "Controls the length of the clips to be generated",
				clips: "Sets the number of the clips to generate",
				effects: "Specifies the effects for YTP",
			},
			mosh: {
				normal: "Datamosh is a technique of damaging clips to create glitchy effects.",
				// cspell:disable-next-line
				glitchy: "Ða̵̝̻͔͎͋̇͑̆ƭą̬͉̫̐͑̓̄ͅa̸͎͇͗̌͂̈̀ą̸̝̼̦̤̇̐ǎ̛͍́̑a̸̲͙͛̐̄̎̚͜a̢̨̝̟͎̾̔̊ǎ̤̞͈͑a͈̪̣̍₥o̻̪̬̘̲͆͂͠o̸͍̞͔̓̆̊̀o̗͊̇̇̈́̇ǫ͇͗̏̕͜ơ̬͍͚̦̯̓̊͌ò͈̦̫̈́̓o̦̣̲̊̀o̪̪͚̺̘͛̽̏̈́ƨλ ïƨ á ƭèçλñï9úè ôƒ δá₥áϱïñϱ çℓïƥƨ ƭô çřèáƭè ϱℓïƭçλ¥ èƒƒèçƭƨ.",
				additional: "In video art, there is a technique called datamoshing. Where two videos are interleaved so that intermediate frames are interpolated from two separate sources. And it exploits the difference in how the separate video codecs process motion and color information.",
				datamosh: "Datamoshes the video, preferably on the timeline with lots of moving visuals",
				datamix: "Applies the motion of one clip to the visual of another clip",
				layer: "Makes multilayering by copying the video clip repeatedly",
				render: "Prerenders a portion of the timeline which may contain very complex video edits, and replaces it with a single video clip",
				scramble: "Splits the clips into lots of clip fragments and shuffles them",
				automator: "Adds random keyframes to each frame automatically for each effect you have added to the video clips",
				stutter: "Stutters the clips by forwarding and reversing them in randomized intervals",
				shake: "Shakes or wiggles the clips by using Pan/Crop",
				notInstalled: "The Datamosh Extension Pack is not installed and will not be available for full features until it is downloaded.",
			},
			tools: {
				_: "These QoL features make creating YTPMVs a little less painful to work with or setup. They do not require adjustments to any of the previous parameters.",
				flow: "Creates stunning animations using Beziér Curves",
				selectorAndReplacer: "Finds and selects all clips that match the specified criteria, and then can replace them with the specified new clips",
				normalizer: "Normalizes the volume of all selected audio clips",
				subtitles: "Presets the “Titles & Text” preset, then add multiple lines of text here",
				effector: "Applies effects to the selected clips",
				fader: "Adjusts gain (volume/opacity) for selected clips using the specified rules",
				exportScore: "Exports the clips in the selected tracks to a score sequence file",
				converters: {
					tuningMethod: "Changes the tuning algorithm for the selected audio clips",
					transformMethod: "Changes the target properties of the transformed keyframes to be applied to the selected video clips",
					clawer: "Changes the music beats or time signatures to create interesting new rhythms",
				},
			},
			staff: {
				_: "Staff Visualizer is designed to use custom patterns as notes to draw visuals similar fashion to piano staff sheets based on the melody of the score.\nThis visual effect style mimics the videos of YouTuber @grantwoolard, who showed the use of musician avatars to draw the piano staff sheets of classical music.",
			},
			pixelScaling: {
				_: "Pixel Scaling feature can enlarge the pixel image of the source to avoid the pixel distortion problem caused by rescaling the original pixel image using smooth gradient algorithm due to VEGAS Pan/Crop. To use it, you can add FFmpeg to the system environment variable, or you can install Datamosh Extension Pack directly.\nPixel Scaling feature will use FFmpeg to enlarge the source file using the nearest neighbor interpolation algorithm to fit the current project size, and then replace the source media file in VEGAS with the newly generated media file. The newly generated file will be identified by adding the suffix “_Scaled” to its name. This feature theoretically supports any image/video file format, including image sequence files imported into VEGAS using conventional methods.",
			},
			settings: {
				about: "Otomad Helper is a YTPMV/YTP extension for VEGAS Pro that enables VEGAS to accept scores such as MIDI sequence files as input and automatically generate YTPMV tracks.",
			},
		},
		empty: {
			disabled: {
				title: "{{name, capitalize}} disabled",
				details: "Enable to generate the {{name, lowercase}}",
			},
			ytpEnabled: {
				title: "YTP enabled, all other related parameters unavailable",
				details: "Disable YTP feature to use and adjust other parameters",
				disableYtp: "Disable YTP",
				gotoYtp: "Go to YTP",
			},
		},
	},
	csharp: {
		mainDock: {
			toolTip: {
				importToHere: "Import %1",
			},
		},
		coreWebView: {
			menuItem: {
				delete: "&Delete",
			},
		},
		contentDialog: {
			button: {
				ok: "&OK",
				cancel: "&Cancel",
				close: "&Close",
			},
			expander: {
				expandDetails: "Expand details",
				collapseDetails: "Collapse details",
			},
			showError: {
				title: "Error",
			},
		},
	},
} as const;
