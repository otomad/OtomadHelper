export default {
	javascript: {
		metadata: {
			__translator__: "",
			name: "English",
			culture: "en-US",
		},
		colon: ": ",
		semicolon: "; ",
		titles: {
			home: "Home",
			source: "Source",
			score: "Score",
			audio: "Audio",
			visual: "Visual",
			track: "Track",
			track_other: "Tracks",
			sonar: "Sonar",
			lyrics: "Lyrics",
			shupelunker: "Shupelunker",
			shupelunker_full: "Shupelunker Tactics",
			ytp: "YTP",
			ytp_full: "YouTube Poop",
			mosh: "Mosh",
			mosh_other: "Moshes",
			mosh_full: "Datamoshes",
			tools: "Tools",
			settings: "Settings",
			effect: "Effect",
			effect_other: "Effects",
			prve: "PV Rhythm Visual Effect",
			staff: "Staff",
			staff_full: "Staff Visualizer",
			pixelScaling: "Pixel Scaling",
			parameters: "Parameters",
			management: "Management",
		},
		source: {
			trackEvent: "Track event",
			projectMedia: "Project media",
			browseFile: "Browse file",
			trim: "Trim",
			startTime: {
				_: "Start time",
				projectStart: "Project start",
				cursor: "Cursor",
			},
			preferredTrack: {
				_: "Preferred track",
				index: "Preferred track index",
				top: "Top",
				ordinal: "Below the {{count, ordinal}} track",
				belowAdjustmentTracks: "If one or more adjustment tracks are below this track, select the next track that none of them",
				newTrack: "New track",
			},
			afterCompletion: {
				_: "After completion",
				removeSourceClips: "Remove source track clips",
				selectSourceClips: "Select source track clips",
				selectGeneratedClips: "Select all clips generated",
			},
			blindBox: {
				_: "Blind box",
				track: "For each track or channel",
				marker: "Switch once per marker",
			},
			trackGroup: {
				_: "Grouping tracks",
				collapse: "Collapse track groups by default",
			},
			trackName: {
				_: "Name for tracks",
				track: "Score track name",
				trackIndex: "Score track index",
				instrument: "Score instrument name",
				channel: "Score channel number",
				clip: "Source clip name",
				media: "Source media name",
				score: "Score file name",
				unnamed: "Unnamed",
			},
		},
		on: "On",
		off: "Off",
		custom: "Custom",
		enabled: "Enabled",
		enable: "Enable",
		learnMore: "Learn more",
		condition: "Condition",
		underConstruction: "Under construction…",
		allFiles: "All Files",
		systemDefault: "System default",
		complete: "Complete",
		dragToImport: "Drag and drop to import as {{item, lowercase}}",
		save: "Save",
		auto: "Auto",
		back: "Back",
		navigation: "Navigation",
		selectAll: "Select all",
		invertSelection: "Invert selection",
		variableBeginWith: "Variable from {{first, lowercase}}",
		reset: "Reset",
		preset: "Preset",
		preset_other: "Presets",
		new: "New",
		etc: "{{examples}}, etc.",
		offset: "Offset",
		curve: "Interpolation curve",
		unselected: "Unselected",
		topPriority: "{{item, capitalize}} first",
		browse: "Browse",
		ok: "OK",
		infoBar: {
			warning: "Warning",
		},
		selectionMode: {
			single: "Single",
			multiple: "Multiple",
		},
		subheaders: {
			moreOptions: "More options",
			advanced: "Advanced",
			config: "Configuration",
			parameters: "Parameters",
			seeAlso: "See also",
		},
		units: {
			pieces: "",
			milliseconds: "ms",
			percents: "%",
			pixels: "px",
			beatsPerMinute: "BPM",
			semitones: "st",
			degrees: "°",
		},
		confirm: {
			delete: {
				backgroundImage: "Are you sure you want to delete this background image?",
			},
		},
		fileFormats: {
			allFiles: "All Files",
			txt: "Text Documents",
			midi: "MIDI Sequence Files",
			singthesis: "All Supported Singthesis (Text Synthesis / Singing Voice Synthesizer Software Project) Files",
			ust: "UTAU/OpenUTAU Sequence Text Files",
			vsq: "Vocaloid Sequence Files",
		},
		score: {
			midi: "MIDI",
			singthesis: "Singthesis",
			refOtherTracks: "Refer to other tracks",
			tts: "Text to speech",
			pureNotes: "Pure notes",
			encoding: "Encoding",
			bpm: {
				_: "BPM",
				variableMidi: "Variable MIDI tempo",
				constantMidi: "Constant MIDI tempo",
				project: "Project tempo",
			},
			timeSignature: "Time signature",
			constraint: {
				_: "Constraint note length",
				none: "Unconstrained",
				max: "Max length",
				fixed: "Fixed length",
			},
			musicalTrack: "Track",
			musicalTrack_other: "Tracks",
			noteCount: "Note count",
			beginNote: "Begin note",
			pan: {
				_: "Pan",
				left: "Left",
				right: "Right",
				center: "Center",
			},
			instrument: "Instrument",
			drumKit: "Drum kit",
		},
		stream: {
			preview: "Preview",
			stretch: {
				_: "Stretch",
				noStretching: "No stretching",
				flexingAndExtending: "Flexing & extending",
				extendingOnly: "Extending only",
				flexingOnly: "Flexing only",
			},
			loop: "Loop",
			normalize: "Normalize",
			staticVisual: "Static visual",
			unlengthen: {
				_: "Unlengthen",
				lengthenable: "Lengthenable",
				freezeEndFrames: "Freeze end frames",
				trimEndFrames: "Trim end frames",
				splitThenFreeze: "Split then freeze",
				freezeToGray: "Freeze to gray",
				freezeToPreset: "Freeze to preset",
			},
			legato: {
				_: "Legato",
				portato: "Portato",
				upToOneBeat: "Up to 1 beat",
				upToOneBar: "Up to 1 bar",
				unlimited: "Unlimited",
			},
			multitrackForChords: "Multitrack for chords",
			createGroups: "Create groups",
			autoPan: "Auto pan",
			timeUnremapping: "Time unremapping",
			resampleImitatively: "Resample imitatively",
			transformMethod: {
				_: "Transform method",
				panCrop: "Pan/Crop",
				pictureInPicture: "Picture in Picture",
				transformOfx: "TransformOFX",
			},
			playingTechniques: {
				_: "Playing techniques",
				applyCustomPreset: "Apply custom preset",
				glissando: {
					_: "Glissando",
					swirl: "Swirl",
					pingpong: "Ping-Pong",
					swirlAmount: "Swirl amount",
				},
				appoggiatura: {
					_: "Appoggiatura",
				},
				arpeggio: {
					_: "Arpeggio",
				},
			},
			tuning: {
				_: "Tuning",
				tuningMethod: {
					_: "Tuning method",
					noTuning: "No Tuning",
					pitchShift: "Pitch Shift",
					elastic: "Élastique",
					classic: "Classic",
					scaleless: "Scaleless",
				},
				stretchAttributes: {
					_: "Stretch attributes",
				},
				alternativeForExceedsTheRange: {
					_: "If exceeds the range",
					multiple: "Use multiple Audio Effect Plugin",
					plugin: "Switch to Pitch Shift Audio Effect Plugin",
					octave: "Higher or lower octaves",
					dock: "Dock at the edge",
					silent: "Silent",
				},
				resample: "Resample",
				preserveFormant: "Preserve formant",
				basePitch: "Base pitch",
				prelisten: {
					_: "Prelisten",
					basePitch: "Prelisten base pitch",
					audio: "Prelisten audio",
					stop: "Stop prelistening",
					engine: "Engine",
					waveform: {
						_: "Waveform",
						sine: "Sinusoid",
						triangle: "Triangle",
						square: "Square",
						sawtooth: "Sawtooth",
					},
					duration: "Duration",
					volume: "Volume",
					adjustAudioToBasePitch: "Adjust audio to base pitch",
				},
			},
			mapping: {
				_: "Mapping",
				velocity: "Velocity",
				pitch: "Pitch",
				duration: "Duration",
				pan: "Pan",
				progress: "Progress",
			},
			preset: {
				add: "Add to custom presets",
			},
			parameters: {
				copyFromAnotherParameterScheme: "Copy from another parameter scheme here",
				copyAttributesFromSelectedClip: "Copy attributes from selected clip",
			},
		},
		track: {
			layout: "Layout",
			grid: "Grid Layout",
			box3d: "3D Box Layout",
			gradient: "Gradient Tracks",
			applyToSelectedTracks: "Apply to selected tracks",
			deactivate: "Deactivate",
			deactivateAll: "Deactivate all",
			legato: {
				_: "Legato",
			},
			clear: {
				_: "Clear",
				motion: "Clear track motions",
				effect: "Clear track effects",
			},
		},
		sonar: {
			separateDrums: "Separate drums",
			differenceCompositeMode: "Difference composite mode",
			shadow: "Shadow",
			graphs: "Graphs",
		},
		lyrics: {
			useStaticText: "Insert subtitles directly from static text",
			sampleLyrics: "Spicy chicken",
			presetTemplate: "Preset template",
			enableMode: "Enable {{mode, lowercase}} mode",
			karaoke: {
				_: "Karaoke",
				futureFill: "Will play text fill color",
				pastFill: "Played text fill color",
			},
			pitchNotation: {
				_: "Pitch notation",
				type: "Pitch notation type",
				scientific: "Scientific Pitch Notation",
				helmholtz: "Helmholtz Pitch Notation",
				solfeggio: "Solfeggio Syllable",
				numbered: "Numbered Musical Notation",
				gongche: "Gongche Notation",
			},
		},
		shupelunker: {
			affix: {
				_: "Match pitch affix position",
				prefix: "Prefix",
				suffix: "Suffix",
			},
			unallocated: {
				_: "Unallocated",
				octaves: "Octaves",
				lowerNeighbors: "Lower neighbors",
				higherNeighbors: "Higher neighbors",
				default: "Default full coverage",
			},
			exclusiveTrack: "Exclusive track",
			keyMappingZones: "Key mapping zones",
		},
		ytp: {
			constraint: "Constraint length",
			clips: "Clips",
			effects: "YTP Effects",
		},
		mosh: {
			datamosh: "Datamosh",
			datamix: "Datamix",
			layer: "Layer",
			render: "Render",
			scramble: "Scramble",
			automator: "Automator",
			stutter: "Stutter",
			shake: "Shake",
			specifyClipsFolder: "Specify Datamosh clips folder",
			install: "Download Datamosh Extension Pack",
		},
		tools: {
			flow: "Flow",
			selectorAndReplacer: "Selector & Replacer",
			normalizer: "Normalizer",
			subtitles: "Subtitles",
			effector: "Effector",
			fader: "Fader",
			exportScore: "Export Score",
			converters: "Converters",
			clawer: "Clawer",
		},
		selectInfo: {
			source: "{{count}} media source has been selected",
			source_other: "{{count}} media sources have been selected",
			track: "{{count}} track has been selected",
			track_other: "{{count}} tracks have been selected",
			videoTrack: "{{count}} video track has been selected",
			videoTrack_other: "{{count}} video tracks have been selected",
			audioTrack: "{{count}} audio track has been selected",
			audioTrack_other: "{{count}} audio tracks have been selected",
			trackEvent: "{{count}} track event has been selected",
			trackEvent_other: "{{count}} track events have been selected",
			videoEvent: "{{count}} video track event has been selected",
			videoEvent_other: "{{count}} video track events have been selected",
			audioEvent: "{{count}} audio track event has been selected",
			audioEvent_other: "{{count}} audio track events have been selected",
			trackEventOnlyOne: "You must select ONE and only ONE track event, no more and no less",
			videoEventOnlyOne: "You must select ONE and only ONE video track event, no more and no less",
			audioEventOnlyOne: "You must select ONE and only ONE audio track event, no more and no less",
		},
		prve: {
			initialValue: "Initial value",
			control: {
				general: "General",
				general_full: "General control",
				samePitch: "Same pitch",
				samePitch_full: "Consecutive same pitch control",
				differentSyllables: "Different syllables",
				differentSyllables_full: "Consecutive different syllables control",
			},
			classes: {
				_: "Classes",
				flip: "Flip Class",
				rotation: "Rotation Class",
				scale: "Scale Class",
				mirror: "Mirror Class",
				invert: "Invert Class",
				hue: "Hue Class",
				chromatic: "Monochrome Class",
				time: "Time Class",
				time2: "Time Class 2",
				ec: "Expansion & Compression Class",
				swing: "Swing Class",
				blur: "Blur Class",
				wipe: "Wipe Class",
			},
			effects: {
				normal: "Normal",
				hFlip: "Horizontal Flip",
				vFlip: "Vertical Flip",
				ccwFlip: "Counterclockwise Flip",
				cwFlip: "Clockwise Flip",
				ccwRotate: "Counterclockwise Rotation",
				cwRotate: "Clockwise Rotation",
				turned: "Turned",
				zoomOutIn: "Zoom Out In",
				hMirror: "Horizontal Mirror",
				vMirror: "Vertical Mirror",
				ccwMirror: "Counterclockwise Mirror",
				cwMirror: "Clockwise Mirror",
				negative: "Negative",
				luminInvert: "Luminance Invert",
				hueInvert: "Hue Invert",
				stepChangeHue: "{{count}} Step Chromatic Aberration",
				stepChangeHue_other: "{{count}} Steps Chromatic Aberration",
				chromatic: "Chromatic and Monochrome",
				pingpong: "Ping-Pong Effect",
				whirl: "The Magic of Love Whirls, Spins, Turns in Circles",
				sharpRewind: "Sharp Rewind",
				wobblePeriod: "Wobble Period",
				vExpansion: "Vertical Expansion",
				vExpansionBounce: "Vertical Expansion with Bounce",
				vCompression: "Vertical Compression",
				vCompressionBounce: "Vertical Compression with Bounce",
				vBounce: "Vertical Bounce",
				slantDown: "Slant Down",
				slantUp: "Slant Up",
				puyo: "Puyo Puyo",
				pendulum: "Play Pendulum",
				gaussianBlur: "Gaussian Blur",
				radialBlur: "Radial Blur",
				wipeRight: "Wipe in the Right",
				wipeRight1: "1 Step Wipe in the Right",
				splitVOut: "Split Vertical Out",
			},
		},
		pixelScaling: {
			scaleFactor: "Scale factor",
			replaceSourceMedia: "Replace source media",
		},
		settings: {
			about: {
				checkForUpdates: "Check for updates",
				repositoryLink: "Repository",
				documentation: "Documentation",
				translation: "Contribute translation",
				feedback: "Feedback",
				changeLog: "Changelog",
				license: "License",
				version: "Version",
				author: "Author",
				__author__: "Rantetsu Inori",
				originalAuthor: "Original author",
				__originalAuthor__: "Chaosinism",
				translator: "Translator",
				translators: "Translators",
			},
			language: {
				_: "Language",
				en: "English",
				"zh-CN": "Simplified Chinese",
				ja: "Japanese",
				vi: "Vietnamese",
			},
			appearance: {
				_: "Appearance",
				colorScheme: {
					_: "Color scheme",
					light: "Light",
					dark: "Dark",
					auto: "Auto",
				},
				uiScale: "UI scale",
				backgroundImage: {
					_: "Background image",
					opacity: "Opacity",
					tint: "Tint",
					blur: "Blur intensity",
				},
			},
			config: {
				hideUsageTips: "Hide usage tips",
			},
			dev: {
				_: "Dev",
				devMode: "Developer mode",
				rtl: "Layout direction right-to-left",
			},
		},
		descriptions: {
			condition: "Specifies when to apply this configuration",
			curve: "Specifies the interpolation curve of the keyframe type",
			source: {
				trim: "Adjusts the in or out point time of the specified source",
				startTime: "Specifies when to start generating from the project",
				preferredTrack: {
					_: "Allows you to specify an existing track to generate (except multitrack)",
					fillingInstructions: "If 0, then generated above all tracks;\nIf positive, then generated below the nth track;\nIf negative, then generated below the nth-to-last track.\nIf any preferred track is specified in Audio or Visual, that will override this option.",
					belowAdjustmentTracks: {
						versionRequest: "Note: This feature requires VEGAS Pro ≥ 19. The current version is {{version}}.",
					},
				},
				blindBox: {
					_: "Uses random in points for the source.\nThis can result in randomly selected source clips having different base pitches, making it useful only for creating funny videos for entertainment purposes, and barely used for creating high-caliber videos.",
					track: "Whether track or channel depends on the Score",
					marker: "When a marker is encountered in the score, the in point of the source will be changed once. If several markers have the same non-empty name, they will use the same in point of the source.",
				},
				trackGroup: {
					_: "Groups tracks by score track",
				},
				trackName: {
					_: "Specifies the name for the generated tracks or track groups",
				},
			},
			score: {
				trim: "Intercepts the generation time range of the score",
				bpm: "Specifies the beats per minute",
				constraint: "Controls the output length of notes from the score",
				encoding: "Specifies the text encoding to use when reading the file",
				ytpEnabled: "YTP feature is enabled, it does not depend on the score, so all settings here have no effect.",
			},
			stream: {
				stretch: "Stretches the clip instead of changing its duration",
				loop: "When the clip is lengthened to the end of the source media, playback starts over",
				normalize: "Normalizes the audio, useful for quiet audio",
				staticVisual: "Freezes the frame at the beginning of the clip",
				unlengthen: "Attempts to freeze at the out point of the clip to avoid accidentally playing the part beyond the trimming time when some notes are too long",
				legato: "Fills in the gaps between the notes",
				unlengthenAndLegatoConflictInAudio: "Unlengthening and Legato are conflicting in Audio, you cannot enable them simultaneously!",
				multitrackForChords: "Creates multiple tracks for chords",
				createGroups: "Creates groups for video and audio clips represented by one note",
				autoPan: "Pans the audio using envelope automation",
				timeUnremapping: "The clips will not reset their in point time when note on occurs, but will continue playing, useful if you want to apply the effects to the source only",
				resampleImitatively: {
					_: "Imitate the resampling behavior in the Visual, causing the stretching to flexing as the pitch increases",
					auto: "This will depend on whether resampling is enabled in Audio to ensure that the visual is sync with the audio",
				},
				transformMethod: "Specifies the priority order of target properties for applying transformation keyframes",
				playingTechniques: {
					glissando: {
						_: "Produces an effect when playing pitch bends, slides, or glissandi.",
						swirlAmount: "Specifies the amount of the swirl twist amplitude",
					},
					appoggiatura: {
						_: "Produces an effect when playing appoggiaturas.\nWhen there are one to two sixteenth notes or shorter consecutively, they are considered as appoggiaturas.",
					},
					arpeggio: {
						_: "Produces an effect when playing arpeggios.\nWhen there are three or more sixteenth notes or shorter consecutively, they are considered as arpeggios.",
						negative: "Typically uses negative to represent arpeggios",
					},
				},
				tuning: {
					tuningMethod: {
						noTuning: "No pitch effect",
						pitchShift: "Uses the Pitch Shift Audio Effect Plugin, which is slow, and ineffective when changing the playback rate, but can work out of range, and is the only method accessible to the scripting API in VEGAS Pro ≤ 15",
						elastic: "Uses the Elastic Pitch Change Method, just is the default method that directly pressing the +/- keys, which cannot work out of range",
						classic: "Uses the Classic Pitch Change Method, which cannot work out of range, and is the only method available in VEGAS Pro ≤ 8",
						scaleless: "Locks stretch and pitch, and change the stretch to get the corresponding pitch regardless of the note pitches, just for fun",
					},
					stretchAttributes: "More configuration about the selected tuning method",
					alternativeForExceedsTheRange: "Handles out of range notes with an alternative method",
					resample: "Locks stretch and pitch, adjusts stretch to change pitch",
					preserveFormant: "Maintains voice tone characteristics while tuning",
					basePitch: "Specifies the base pitch of the audio clip",
					prelisten: {
						_: "Compares the clip to the base pitch for easy adjustment",
						adjustAudioToBasePitch: "Match the audio of the clip to the base pitch instead of the other way around, useful for older styles of remixes",
					},
				},
				effects: {
					prve: "Makes your visuals more rhythmic",
					staff: "Uses custom patterns as notes to draw visuals similar fashion to piano staff sheets",
					pixelScaling: "Scaling using nearest neighbor hard edge amplification and interpolation algorithms",
				},
				mapping: {
					_: "Maps the properties of notes to the specified item",
				},
				preset: {
					_: "Uses or saves predefined parameter schemes for your convenience",
				},
			},
			track: {
				_: "Layout is one of the core points in the visual production process of YTPMV. Learn about composition, knowing how to make a good visual layout for a YTPMV will make it much more enjoyable to watch than you would expect.\nBasically, make sure your melody sample is the most prominent thing in the visuals.",
				gradient: "Gives the video tracks a gradient color effect in your layout",
				legato: "Fills in the gaps between the track clips",
				deactivate: "Reset the status of this layout to deactivate it",
			},
			sonar: {
				_: "Sonar is a visual effect that utilizes Cookie Cutter shapes to create beat-style visual motion graphics. This feature allows you to assign different shapes or effects to various percussion instruments of a drum kit (channel 10) in the score.\nA common Otomad genre is to create Motion Graphics (Mograph) by adding various shapes, such as diffuse circles, to the visual based on the beats. Mograph is a product between graphic design and animation design, a form of visual expression based on the flow of time, and a kind of video art. The term “motion graphics” refers to graphics that are deformed by the flow of time. A single Otomad video containing only mographs is often titled “Graphs” or “Shapes”.",
				// The name of this effect, “Sonar”, was coined by Motosai.
				enabled: "Enables sonar effects if the active tracks in the score contain drum kits",
				separateDrums: "Places each drum on its own track",
				differenceCompositeMode: "Makes the tracks created with difference blend, this will present a shadow puppet style",
				shadow: "Adds shadows to graphs",
			},
			lyrics: {
				_: "When the score contains lyrics, such as sequence text, lyrics subtitles can be automatically generated at the same time.\nIf the score does not contain lyrics, you can still generate the pitch notation for use.",
				presetTemplate: "Select a Title & Text Media Generator preset to use as a template for lyrics",
				karaoke: {
					_: "Uses karaoke style subtitles, the color indicator would reflect the progress of the current phrase",
					futureFill: "Specifies the text fill color for the lyrics that have not yet been sung",
					pastFill: "Specifies the text fill color for the lyrics that have been being sung",
				},
				pitchNotation: {
					_: "Visualizes the pitch of the current note as text",
					type: "There are several ways to express musical notation in the world, choose the one you prefer",
				},
			},
			shupelunker: {
				_: "Shupelunker Tactics is an unpitched YTPMV/Otomad tactic. It is used to play the melody by using a clip of the source (usually a vocal) at the same pitch as the melody, i.e. the source clip itself is pitched to match the melody.\nIf the pitch of the clip does not match the melody, “Tartar Tactics” is generated. It is also unpitched and allows you to choose where the clip is cut (usually at a dialog), often using audio stretching and rewinding, as well as adding sixteenth to sixty-fourth rests. During production, the clips are matched to the rhythm for vocal sense.",
				// The name of this tactic originated in Otomad, whose first creation using this tactic had the title of being a parody of Shu (Shuzo Matsuoka) netaed with Spelunker (game), hence the name. This method was also used in early YTPMV, but it never had an official name or method title, it is more like a meme to use this method in a similar way that most YTPMV from the late 2000s to mid 2010s would use.
				affix: "The base pitches of the clips need to be detected by naming them, please specify whether the pitch info should be a prefix or suffix to the clip name",
				unallocated: {
					_: "Specifies how to fill the vacancies if the sources do not cover all keys",
					octaves: "Uses the clips with the nearest higher or lower octave, this has the highest priority, useful for sources with sung solfeggios",
					lowerNeighbors: "Uses lower neighbors, but the lowest keys are filled from their nearest higher neighbor, this has higher priority than the higher neighbors",
					higherNeighbors: "Uses higher neighbors, but the highest keys are filled from their nearest lower neighbor",
					default: "Uses the first clip without any affixes to cover all remaining vacancies, this has the lowest priority",
				},
				exclusiveTrack: "Ensure that each clip of the source remains in the same position, but if there are too many clips, they will take up too much space",
				offset: "Offsets the clips corresponding to the keys as a whole",
			},
			ytp: {
				_: "YouTube Poop (YTP) is used to create nonsensical videos using various effects known in the YTP genre. YTP supports multisource.\nYTP is a Neo-Dada art form that consists of absurd remixes that imitate and mock the lowest technical and aesthetic standards of remix culture in order to comment on remix culture itself. It consists of video remixes edited from a variety of video clips to confuse, stun, or amuse the viewer. The sources can be mashed all together into a nonsensical crossover story, or simply repeated footage of the characters gesticulating oddly.",
				constraint: "Controls the length of the clips to be generated",
				clips: "Sets the number of the clips to generate",
				effects: "Specifies the effects for YTP",
			},
			mosh: {
				normal: "Datamosh is a technique of damaging clips to create glitchy effects.",
				// cspell:disable-next-line
				glitchy: "Ða̵̝̻͔͎͋̇͑̆ƭą̬͉̫̐͑̓̄ͅa̸͎͇͗̌͂̈̀ą̸̝̼̦̤̇̐ǎ̛͍́̑a̸̲͙͛̐̄̎̚͜a̢̨̝̟͎̾̔̊ǎ̤̞͈͑a͈̪̣̍₥o̻̪̬̘̲͆͂͠o̸͍̞͔̓̆̊̀o̗͊̇̇̈́̇ǫ͇͗̏̕͜ơ̬͍͚̦̯̓̊͌ò͈̦̫̈́̓o̦̣̲̊̀o̪̪͚̺̘͛̽̏̈́ƨλ ïƨ á ƭèçλñï9úè ôƒ δá₥áϱïñϱ çℓïƥƨ ƭô çřèáƭè ϱℓïƭçλ¥ èƒƒèçƭƨ.",
				additional: "In video art, there is a technique called datamoshing. Where two videos are interleaved so that intermediate frames are interpolated from two separate sources. And it exploits the difference in how the separate video codecs process motion and color information.",
				datamosh: "Datamoshes the video, preferably on the timeline with lots of moving visuals",
				datamix: "Applies the motion of one clip to the visual of another clip",
				layer: "Makes multilayering by copying the video clip repeatedly",
				render: "Prerenders a portion of the timeline which may contain very complex video edits, and replaces it with a single video clip",
				scramble: "Splits the clips into lots of clip fragments and shuffles them",
				automator: "Adds random keyframes to each frame automatically for each effect you have added to the video clips",
				stutter: "Stutters the clips by forwarding and reversing them in randomized intervals",
				shake: "Shakes or wiggles the clips by using Pan/Crop",
				notInstalled: "The Datamosh Extension Pack is not installed and will not be available for full features until it is downloaded.",
			},
			tools: {
				_: "These QoL features make creating YTPMVs a little less painful to work with or setup. They do not require adjustments to any of the previous parameters.",
				flow: "Creates stunning animations using Beziér Curves",
				selectorAndReplacer: "Finds and selects all clips that match the specified criteria, and then can replace them with the specified new clips",
				normalizer: "Normalizes the volume of all selected audio clips",
				subtitles: "Presets the “Titles & Text” preset, then add multiple lines of text here",
				effector: "Applies effects to the selected clips",
				fader: "Adjusts gain (volume/opacity) for selected clips using the specified rules",
				exportScore: "Exports the clips in the selected tracks to a score sequence file",
				converters: {
					tuningMethod: "Changes the tuning algorithm for the selected audio clips",
					transformMethod: "Changes the target properties of the transformed keyframes to be applied to the selected video clips",
					clawer: "Changes the music beats or time signatures to create interesting new rhythms",
				},
			},
			staff: {
				_: "Staff Visualizer is designed to use custom patterns as notes to draw visuals similar fashion to piano staff sheets based on the melody of the score.\nThis visual effect style mimics the videos of YouTuber @grantwoolard, who showed the use of musician avatars to draw the piano staff sheets of classical music.",
			},
			prve: {
				control: {
					general: "Normal condition controls for nonconsecutive events and consecutive events of different pitches and the same syllable in YTPMV or Sentence Mixing mode.\nIf other separate controls are off, they are also included in the case.",
					samePitch: "Separate controls for consecutive events of the same pitch in YTPMV or Sentence Mixing mode.",
					differentSyllables: "Separate controls for consecutive events of different syllables in Sentence Mixing mode.",
				},
				forceStretch: "The PV Rhythm Visual Effects you are currently using contain Time Class effects, which will cause the stretch to be forcibly set to “$t(stream.stretch.flexingAndExtending)” when in these effects, and not controlled by your settings",
			},
			pixelScaling: {
				_: "Pixel Scaling feature can enlarge the pixel image of the source to avoid the pixel distortion problem caused by rescaling the original pixel image using smooth gradient algorithm due to VEGAS Pan/Crop. To use it, you can add FFmpeg to the system environment variable, or you can install Datamosh Extension Pack directly.\nPixel Scaling feature will use FFmpeg to enlarge the source file using the nearest neighbor interpolation algorithm to fit the current project size, and then replace the source media file in VEGAS with the newly generated media file. The newly generated file will be identified by adding the suffix “_Scaled” to its name. This feature theoretically supports any image/video file format, including image sequence files imported into VEGAS using conventional methods.",
			},
			settings: {
				about: "Otomad Helper is a YTPMV/YTP extension for VEGAS Pro that enables VEGAS to accept scores such as MIDI sequence files as input and automatically generate YTPMV tracks.",
				translation: "If you would like to participate in the translation, you are welcome to join as well.",
			},
		},
		empty: {
			disabled: {
				title: "{{name, capitalize}} disabled",
				details: "Enable to generate the {{name, lowercase}}",
			},
			ytpEnabled: {
				partial: {
					title: "YTP enabled, all other related parameters unavailable",
					details: "Disable the YTP feature to use and adjust other parameters",
				},
				fully: {
					title: "YTP enabled, unable to use the {{feature, lowercase}} feature",
					details: "Disable the YTP feature to use the {{feature, lowercase}} feature",
				},
				disableYtp: "Disable YTP",
				gotoYtp: "Go to YTP",
			},
		},
		menu: {
			delete: "&Delete",
		},
	},
	csharp: {
		host: {
			toolTip: {
				importToHere: "Import %1",
			},
		},
		contentDialog: {
			button: {
				ok: "&OK",
				cancel: "&Cancel",
				close: "&Close",
				learnMore: "&Learn more",
			},
			expander: {
				expandDetails: "Expand details",
				collapseDetails: "Collapse details",
			},
			showError: {
				title: "Error",
			},
		},
		wrongOpeningMethod: {
			script: {
				title: "Hey, you misplaced the extension!",
				content: "The new version of Otomad Helper is an extension. Unlike the old version, it is not a script.\n\nPlease move the extension to the Application Extensions directory of VEGAS instead of the Script Menu directory.\n\nLocation:",
			},
		},
		textBox: {
			menu: {
				clearAll: "Clear All",
			},
		},
		colorPicker: {
			title: "Select a Color",
			eyeDropper: "Eye dropper",
		},
		flyout: {
			confirmDelete: {
				title: "Delete?",
			},
		},
		keybindings: {
			commands: {
				useTrackEventAsSource: "Use Track Event as Source",
				useProjectMediaAsSource: "Use Project Media as Source",
				enableYtp: "Enable YTP Feature",
				disableYtp: "Disable YTP Feature",
				startGenerating: "Start Generating",
			},
		},
	},
} as const;
