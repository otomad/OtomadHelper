export default {
	javascript: {
		metadata: {
			__translator__: "",
			name: "English",
			culture: "en-US",
		},
		colon: ": ",
		semicolon: "; ",
		titles: {
			home: "Home",
			source: "Source",
			score: "Score",
			audio: "Audio",
			visual: "Visual",
			track: "Track",
			track_other: "Tracks",
			sonar: "Sonar",
			lyrics: "Lyrics",
			shupelunker: "Shupelunker",
			shupelunker_full: "Shupelunker Tactics",
			ytp: "YTP",
			ytp_full: "YouTube Poop",
			mosh: "Mosh",
			mosh_other: "Moshes",
			mosh_full: "Datamoshes",
			tools: "Tools",
			settings: "Settings",
			prve: "PV Rhythm Visual Effect",
			staff: "Staff Visualizer",
			pixelScaling: "Pixel Scaling",
		},
		source: {
			trackEvent: "Track event",
			projectMedia: "Project media",
			browseFile: "Browse file",
			trim: "Trim",
			startTime: {
				_: "Start time",
				projectStart: "Project start",
				cursor: "Cursor",
			},
			preferredTrack: {
				_: "Preferred track",
				index: "Preferred track index",
				top: "Top",
				ordinal: "Below the {{count, ordinal}} track",
				belowAdjustmentTracks: "If one or more adjustment tracks below this track, select the next track that none of them",
				newTrack: "New track",
			},
			afterCompletion: {
				_: "After completion",
				removeSourceClips: "Remove source track clips",
				selectSourceClips: "Select source track clips",
				selectGeneratedAudioClips: "Select all audio clips generated",
				selectGeneratedVideoClips: "Select all video clips generated",
			},
			randomOffsetForTracks: "Use random offsets for different tracks",
		},
		on: "On",
		off: "Off",
		custom: "Custom",
		enabled: "Enabled",
		enable: "Enable",
		learnMore: "Learn more",
		condition: "Condition",
		underConstruction: "Under construction…",
		allFiles: "All Files",
		systemDefault: "System default",
		complete: "Complete",
		dragToImport: "Drag and drop to import the {{item, lowercase}}",
		save: "Save",
		auto: "Auto",
		back: "Back",
		navigation: "Navigation",
		selectAll: "Select all",
		invertSelection: "Invert selection",
		variableBeginWith: "Variable beginning with {{first, lowercase}}",
		infoBar: {
			warning: "Warning",
		},
		selectionMode: {
			single: "Single",
			multiple: "Multiple",
		},
		subheaders: {
			moreOptions: "More options",
			advanced: "Advanced",
			config: "Configuration",
			parameters: "Parameters",
			effects: "Effects",
		},
		score: {
			midi: "MIDI",
			midiFile: "MIDI Sequence Files",
			st: "Sequence text",
			stFile: "All Supported Sequence Text Files",
			ustFile: "UTAU/OpenUTAU Sequence Text Files",
			vsqFile: "Vocaloid Sequence Files",
			refOtherTracks: "Refer to other tracks",
			tts: "Text to speech",
			pureNotes: "Pure notes",
			encoding: "Encoding",
			bpm: {
				_: "BPM",
				variableMidi: "Variable MIDI tempo",
				constantMidi: "Constant MIDI tempo",
				project: "Project tempo",
			},
			timeSignature: "Time signature",
			constraint: {
				_: "Constraint note length",
				none: "Unconstrained",
				max: "Max length",
				fixed: "Fixed length",
			},
			musicalTrack: "Track",
			musicalTrack_other: "Tracks",
			noteCount: "Note count",
			beginNote: "Begin note",
			pan: {
				_: "Pan",
				left: "Left",
				right: "Right",
				center: "Center",
			},
			instrument: "Instrument",
			drumKit: "Drum kit",
		},
		stream: {
			preview: "Preview",
			stretch: {
				_: "Stretch",
				noStretching: "No stretching",
				flexingAndExtending: "Flexing & extending",
				extendingOnly: "Extending only",
				flexingOnly: "Flexing only",
			},
			loop: "Loop",
			normalize: "Normalize",
			staticVisual: "Static visual",
			noLengthening: {
				_: "No lengthening",
				lengthenable: "Lengthenable",
				freezeEndFrames: "Freeze end frames",
				trimEndFrames: "Trim end frames",
				splitThenFreeze: "Split then freeze",
				freezeInGray: "Freeze in gray",
			},
			legato: {
				_: "Legato",
				portato: "Portato",
				upToOneBeat: "Up to 1 beat",
				upToOneBar: "Up to 1 bar",
				unlimited: "Unlimited",
			},
			multitrackForChords: "Multi-track for chords",
			createGroups: "Create groups",
			glissando: "Glissando",
			autoPan: "Auto pan",
			transformMethod: {
				_: "Transform method",
				panCrop: "Pan/Crop",
				transformOfx: "TransformOFX",
			},
			tuning: {
				_: "Tuning",
				tuningMethod: {
					_: "Tuning method",
					noTuning: "No Tuning",
					pitchShift: "Pitch Shift",
					elastic: "Élastique",
					classic: "Classic",
					scaleless: "Scaleless",
				},
				stretchAttributes: {
					_: "Stretch attributes",
				},
				alternativeForExceedsTheRange: {
					_: "If exceeds the range",
					multiple: "Use multiple Audio Effect Plugin",
					plugin: "Switch to Audio Effect Plugin",
					octave: "Higher or lower octaves",
					dock: "Dock at the edge",
					silent: "Silent",
				},
				resample: "Resample",
				preserveFormant: "Preserve formant",
				basePitch: "Base pitch",
				prelisten: {
					_: "Prelisten",
					engine: "Engine",
					waveform: {
						_: "Waveform",
						sinusoid: "Sinusoid",
						triangle: "Triangle",
						square: "Square",
						sawtooth: "Sawtooth",
					},
					duration: "Duration",
					adjustAudioToBasePitch: "Adjust audio to base pitch",
				},
			},
			mapping: {
				_: "Mapping",
			},
			parameters: {
				copyFromAnotherParameterScheme: "Copy from another parameter scheme to here",
			},
		},
		track: {
			layout: "Layout",
			grid: "Grid Layout",
			box3d: "3D Box Layout",
			gradient: "Gradient Tracks",
			applyToSelectedTracks: "Apply to selected tracks",
			legato: {
				_: "Legato",
			},
			clear: {
				_: "Clear",
				motion: "Clear track motions",
				effect: "Clear track effects",
			},
		},
		ytp: {
			constraint: "Constraint length",
			clips: "Clips",
			effects: "YTP Effects",
		},
		mosh: {
			datamosh: "Datamosh",
			datamix: "Datamix",
			layer: "Layer",
			render: "Render",
			scramble: "Scramble",
			automator: "Automator",
			stutter: "Stutter",
			shake: "Shake",
			specifyClipsFolder: "Specify Datamosh clips folder",
			install: "Download Datamosh Extension Pack",
		},
		tools: {
			flow: "Flow",
			selector: "Selector",
			replacer: "Replacer",
			normalizer: "Normalizer",
			subtitles: "Subtitles",
			visualizer: "Visualizer",
			fader: "Fader",
			exportScore: "Export Score",
			converters: "Converters",
			clawMachine: "Claw Machine",
		},
		selectInfo: {
			source: "{{count}} media source has been selected",
			source_other: "{{count}} media sources have been selected",
			track: "{{count}} track has been selected",
			track_other: "{{count}} tracks have been selected",
			videoTrack: "{{count}} video track has been selected",
			videoTrack_other: "{{count}} video tracks have been selected",
			audioTrack: "{{count}} audio track has been selected",
			audioTrack_other: "{{count}} audio tracks have been selected",
			trackEvent: "{{count}} track event has been selected",
			trackEvent_other: "{{count}} track events have been selected",
			videoEvent: "{{count}} video track event has been selected",
			videoEvent_other: "{{count}} video track events have been selected",
			audioEvent: "{{count}} audio track event has been selected",
			audioEvent_other: "{{count}} audio track events have been selected",
			trackEventOnlyOne: "You must select exactly ONE track event, not more or less",
			videoEventOnlyOne: "You must select exactly ONE video track event, not more or less",
			audioEventOnlyOne: "You must select exactly ONE audio track event, not more or less",
		},
		prve: {
			classes: {
				flip: "Flip Class",
				rotation: "Rotation Class",
				scale: "Scale Class",
				mirror: "Mirror Class",
				invert: "Invert Class",
				hue: "Hue Class",
				chromatic: "Monochrome Class",
				time: "Time Class",
				time2: "Time Class 2",
				ec: "Expansion & Compression Class",
				swing: "Swing Class",
				blur: "Blur Class",
				wipe: "Wipe Class",
			},
		},
		pixelScaling: {
			scaleFactor: "Scale factor",
			replaceSourceMedia: "Replace source media",
		},
		settings: {
			about: {
				checkForUpdates: "Check for updates",
				repositoryLink: "Repository link",
				documentation: "Documentation",
				translation: "Contribute translation",
				feedback: "Feedback",
				version: "Version",
				author: "Author",
				__author__: "Ranne",
				originalAuthor: "Original author",
				__originalAuthor__: "Chaosinism",
				translator: "Translator",
			},
			language: {
				_: "Language",
				en: "English",
				"zh-CN": "Simplified Chinese",
				ja: "Japanese",
				vi: "Vietnamese",
			},
			appearance: {
				_: "Appearance",
				colorScheme: {
					_: "Color scheme",
					light: "Light",
					dark: "Dark",
					auto: "Auto",
				},
				uiScale: "UI scale",
			},
			config: {
				hideUseTips: "Hide use tips",
			},
			dev: {
				_: "Dev",
				devMode: "Developer mode",
				rtl: "Layout direction right-to-left",
			},
		},
		descriptions: {
			condition: "Specify when the following configuration will be applied",
			source: {
				trim: "Adjusts start or end time of the specified source",
				startTime: "Specifies when to start generating from the project",
				preferredTrack: {
					_: "Allows you to specify an existing track for generation (except multi-track)",
					fillingInstructions: "If 0, then generated above all tracks;\nIf positive, then generated below the nth track;\nIf negative, then generated below the nth to last track.\nIf a preferred track is specified in audio or visual, this will be overridden.",
					belowAdjustmentTracks: {
						versionRequest: "Note: This feature requires VEGAS Pro ≥ 19. Current version is {{version}}.",
					},
				},
				randomOffsetForTracks: "When on, this may result in randomly selected source clips having different base pitches, making it only useful for creating funny videos, and barely for creating high-caliber videos",
			},
			score: {
				trim: "Intercepts the generation time range of the score",
				bpm: "Specifies the beats per minute",
				constraint: "Controls the note output length from the score",
				encoding: "Specifies the text encoding for reading the file",
			},
			stream: {
				stretch: "When on, the clip will be stretched instead of changing its duration",
				loop: "When the clip is lengthened to the end of the source media, playback will start over",
				normalize: "Normalizes the audio, useful if the audio is quiet",
				staticVisual: "Freezes the frame at the start of the clip",
				noLengthening: {
					visual: "Freezes the frame at the end of the clip if the note is longer than it",
					audio: "Does not lengthen the clip if the note is longer than it",
				},
				legato: "Fills the gaps between notes",
				multitrackForChords: "Generates multiple tracks for chords",
				createGroups: "Creates groups for video and audio clips represented by one note",
				glissando: "Creates a swirl effect if the note pitch bends or slides",
				autoPan: "Pans the audio using envelope automation",
				transformMethod: "Specifies which target properties to apply the transformed keyframes",
				tuning: {
					stretchAttributes: "More config about the select tuning method",
					resample: "Locks stretch and pitch, adjust the stretch to change the pitch",
					preserveFormant: "Keeps the voice tone while tuning",
					basePitch: "Specifies the base pitch of the audio clip",
				},
				effects: {
					prve: "Makes your visuals more rhythmic",
					staff: "Uses custom patterns as notes to draw visuals similar fashion to piano staff sheets",
					pixelScaling: "Scaling using nearest neighbor hard edges amplification and interpolation algorithms",
				},
				mapping: {
					_: "Maps the properties of notes to the specified item",
				},
			},
			track: {
				gradient: "Makes the video tracks have a gradient style color effect in your layout",
				legato: "Fills the gaps between the track clips",
			},
			sonar: {
				_: "Sonar is a visual effect that utilizes the shapes of Cookie Cutter to create beat-style visuals motion graphics. This feature allows you to dispatch different shapes or effects to various percussion instruments of a drum kit (channel 10) in the score.\nA common Otomad genre is to create Motion Graphics (Mograph) by adding various shapes, such as diffused circles, to the visual based on the beats. Mograph is a product between graphic design and animation design, a form of visual expression based on the flow of time, and a type of video art. The term “motion graphics” refers to graphics that are deformed by the flow of time. A single Otomad video that contains only mographs is often titled “Graphs” or “Shapes”.",
			},
			shupelunker: {
				_: "Shupelunker Tactics is an non-tuned YTPMV tactics. It is used to play the melody by using a clip of the source (usually a vocal) at the same pitch as the melody, that is, the source clip itself is pitched to match the melody.\nIf the pitch of the clip does not match the melody, “Tartar Tactics” will be generated. It is also non-tuned, and allows you to choose where the clip is cut (usually at a dialogue), with audio stretching and rewinding often used, as well as adding sixteenth to sixty-fourth rest notes. During the production, the clips will be aligned with the rhythm for singing sense.",
			},
			ytp: {
				_: "YouTube Poop (YTP) is for creating nonsensical videos using various effects known in the YTP genre. YTP supports multi-source.\nYTP is a Neo-Dada art form, which is absurdist remixes that ape and mock the lowest technical and aesthetic standards of remix culture to comment on remix culture itself. It consists of video remixes that are edited from a large array of video clips in order to confuse, stun or amuse the viewer. The sources can be mashed all together into a nonsensical Crossover story, or just repeat footage of the characters gesticulating oddly.",
				constraint: "Controls the length for the clip to generate",
				clips: "The value of clips generated",
				effects: "Specify the effects for YTP",
			},
			mosh: {
				normal: "Datamosh is a technique of damaging clips to create glitchy effects.",
				// cspell:disable-next-line
				glitchy: "Ða̵̝̻͔͎͋̇͑̆ƭą̬͉̫̐͑̓̄ͅa̸͎͇͗̌͂̈̀ą̸̝̼̦̤̇̐ǎ̛͍́̑a̸̲͙͛̐̄̎̚͜a̢̨̝̟͎̾̔̊ǎ̤̞͈͑a͈̪̣̍₥o̻̪̬̘̲͆͂͠o̸͍̞͔̓̆̊̀o̗͊̇̇̈́̇ǫ͇͗̏̕͜ơ̬͍͚̦̯̓̊͌ò͈̦̫̈́̓o̦̣̲̊̀o̪̪͚̺̘͛̽̏̈́ƨλ ïƨ á ƭèçλñï9úè ôƒ δá₥áϱïñϱ çℓïƥƨ ƭô çřèáƭè ϱℓïƭçλ¥ èƒƒèçƭƨ.",
				additional: "In video art, there is a technique called datamoshing. Where two videos are interleaved so intermediate frames are interpolated from two separate sources. And exploits the difference in how the separate video codecs process motion and color information.",
				datamosh: "Datamoshes the video, preferably on the timeline with a lot of movement visuals",
				datamix: "Applies the movement of a clip to the visual of another clip",
				layer: "Does multi-layering, by copying the video clip many times",
				render: "Prerenders a part of the timeline which may contains very complex video edits, and replaces it with a single video clip",
				scramble: "Cuts the clips into a lot of subclips, and shuffling the subclips",
				automator: "Adds random keyframes every frame automatically for each effect you added to the video clips",
				stutter: "Stutters the clips by forwarding and reversing them in randomized intervals",
				shake: "Shakes or wiggles the clips by using Pan/Crop",
				notInstalled: "The Datamosh Extension Pack is not installed and will not be available for full features until it is downloaded.",
			},
			tools: {
				_: "These QoL functions make creating YTPMVs a little less painful for working with or setting up. These don’t require any adjustments to any of the previous parameters.",
				flow: "Creates stunning animations using Beziér Curves",
				selector: "Finds and selects all clips that match the specified",
				replacer: "Replaces multiple clips with specified new clips",
				normalizer: "Normalizes all selected audio clips volume",
				subtitles: "Presets the “Titles & Text” preset, and then add multiple lines of text here",
				visualizer: "Applies the PV Rhythm Visual Effects to the selected video clips",
				fader: "Adjusts gain (volume/opacity) for selected clips with the specified rules",
				exportScore: "Exports the clips in the selected tracks to a score sequence file",
				converters: {
					tuningMethod: "Changes the tuning algorithm to the selected audio clips",
					transformMethod: "Changes the target properties of the transformed keyframes are applied to the selected video clips.",
					clawMachine: "Changes the music beats or time signatures to create interesting new rhythms",
				},
			},
			staff: {
				_: "Staff Visualizer is to use custom patterns as notes to draw visuals similar fashion to piano staff sheets based on the melody of the score.\nThis visual effect style mimics the videos of YouTuber @grantwoolard, who featured the use of musicians’ avatars to draw the piano staff sheets of classical music.",
			},
			pixelScaling: {
				_: "Pixel Scaling feature can enlarge and replace the pixel image of the source with a new image to avoid the pixel distortion problem caused by the original pixel image rescaling using smooth gradients algorithm due to VEGAS Pan/Crop. To use it, you could add FFmpeg to system environment variable, or you could directly install Datamosh Extension Pack.\nPixel Scaling feature will use FFmpeg to enlarge the source file using the nearest neighbor interpolation algorithm to fit the current project size, and then replace the source media file in VEGAS with the newly generated media file. The newly generated file will be identified by adding the suffix “_Scaled” to its name. The feature theoretically supports any image/video file format, and also supports image sequence files imported into VEGAS through conventional methods.",
			},
			settings: {
				about: "Otomad Helper, a YTPMV/YTP extension for VEGAS Pro, designed to allow VEGAS to accept scores like MIDI sequence files as input, and automatically generate YTPMV tracks.",
			},
		},
		empty: {
			disabled: {
				title: "{{name, capitalize}} disabled",
				details: "Enable to generate the {{name, lowercase}}",
			},
			ytpEnabled: {
				title: "YTP enabled, all other related parameters are unavailable",
				details: "Disable YTP feature to use and adjust other parameters",
				disableYtp: "Disable YTP",
				gotoYtp: "Go to YTP",
			},
		},
	},
	csharp: {
		mainDock: {
			toolTip: {
				importToHere: "Import %1",
			},
		},
		coreWebView: {
			menuItem: {
				delete: "&Delete",
			},
		},
		contentDialog: {
			button: {
				ok: "&OK",
				cancel: "&Cancel",
				close: "&Close",
			},
			expander: {
				expandDetails: "Expand details",
				collapseDetails: "Collapse details",
			},
			showError: {
				title: "Error",
			},
		},
	},
} as const;
