const English = {
	javascript: {
		metadata: {
			__translator__: "",
			name: "English",
			culture: "en-US",
		},
		colon: ": ",
		semicolon: "; ",
		titles: {
			home: "Home",
			source: "Source",
			score: "Score",
			audio: "Audio",
			visual: "Visual",
			track: "Track",
			track_other: "Tracks",
			sonar: "Sonar",
			lyrics: "Lyrics",
			shupelunker: "Shupelunker",
			shupelunker_full: "Shupelunker Tactics",
			ytp: "YTP",
			ytp_full: "YouTube Poop",
			mosh: "Mosh",
			mosh_other: "Moshes",
			mosh_full: "Datamoshes",
			tools: "Tools",
			settings: "Settings",
			prve: "PV Rhythm Visual Effect",
			staff: "Staff Visualizer",
		},
		source: {
			trackEvent: "Track event",
			projectMedia: "Project media",
			browseFile: "Browse file",
			trim: "Trim",
			startTime: {
				_: "Start time",
				projectStart: "Project start",
				cursor: "Cursor",
			},
			belowTopAdjustmentTracks: "Below top adjustment tracks",
			removeSourceEventsAfterCompletion: "Remove source events after completion",
			selectAllEventsGenerated: "Select all events generated",
			randomOffsetForTracks: "Use random offsets for different tracks",
		},
		on: "On",
		off: "Off",
		custom: "Custom",
		enabled: "Enabled",
		enable: "Enable",
		learnMore: "Learn more",
		condition: "Condition",
		underConstruction: "Under construction…",
		allFiles: "All Files",
		systemDefault: "System default",
		complete: "Complete",
		dragToImport: "Drag and drop to import the {{item, lowercase}}",
		save: "Save",
		subheaders: {
			moreOptions: "More options",
			advanced: "Advanced",
			config: "Configuration",
			parameters: "Parameters",
			effects: "Effects",
		},
		score: {
			midi: "MIDI",
			midiFile: "MIDI Sequence Files",
			st: "Sequence text",
			ustFile: "UTAU/OpenUTAU Sequence Text Files",
			vsqFile: "Vocaloid Sequence Files",
			refOtherTracks: "Refer to other tracks",
			tts: "Text to speech",
			pureNotes: "Pure notes",
			encoding: "Encoding",
			bpm: {
				_: "BPM",
				dynamicMidi: "Dynamic MIDI tempo",
				midi: "MIDI tempo",
				project: "Project tempo",
			},
			timeSignature: "Time signature",
			constraint: {
				_: "Constraint note length",
				none: "Unconstrained",
				max: "Max length",
				fixed: "Fixed length",
			},
		},
		stream: {
			preview: "Preview",
			stretch: {
				_: "Stretch",
				noStretching: "No stretching",
				flexingAndExtending: "Flexing & extending",
				extendingOnly: "Extending only",
				flexingOnly: "Flexing only",
			},
			loop: "Loop",
			normalize: "Normalize",
			staticVisual: "Static",
			noLengthening: "No lengthening",
			legato: {
				_: "Legato",
				portato: "Portato",
				upToOneBeat: "Up to 1 beat",
				upToOneBar: "Up to 1 bar",
				unlimited: "Unlimited",
			},
			multitrackForChords: "Chords",
			createGroups: "Group",
			glissando: "Glissando",
			autoPan: "Pan",
			mapping: "Mapping",
			transformOfx: "TransformOFX",
			tuning: {
				_: "Tuning",
				tuningMethod: "Tuning method",
				stretchAttributes: "Stretch attributes",
				alternativeForExceedsTheRange: "If exceeds the range",
				resample: "Resample",
				preserveFormant: "Preserve formant",
				basePitch: "Base pitch",
				prelisten: {
					_: "Prelisten",
					engine: "Engine",
					waveform: {
						_: "Waveform",
						sinusoid: "Sinusoid",
						triangle: "Triangle",
						square: "Square",
						sawtooth: "Sawtooth",
					},
					duration: "Duration",
					adjustAudioToBasePitch: "Adjust audio to base pitch",
				},
			},
			newTrack: "New track",
		},
		track: {
			layout: "Layout",
			useInGeneration: "Use in generation",
			grid: "Grid Layout",
			box3d: "3D Box Layout",
			gradient: "Gradient Tracks",
			applyToSelectedTracks: "Apply to selected tracks",
			legato: {
				_: "Legato",
			},
			clear: {
				_: "Clear",
				motion: "Clear track motions",
				effect: "Clear track effects",
			},
		},
		ytp: {
			constraint: "Constraint length",
			clips: "Clips",
			effects: "YTP Effects",
		},
		mosh: {
			datamosh: "Datamoshing",
			datamix: "Datamixing",
			layer: "Layering",
			render: "Rendering",
			scramble: "Scrambling",
			automator: "Automating",
			stutter: "Stuttering",
			shake: "Shaking",
		},
		tools: {
			selector: "Selector",
			replacer: "Replacer",
			normalizer: "Normalizer",
			subtitles: "Subtitles",
			visualizer: "Visualizer",
			fader: "Fader",
			scoreExporter: "Score Exporter",
			flow: "Flow",
			converters: "Converters",
		},
		selectInfo: {
			source: "{{count}} media source has been selected",
			source_other: "{{count}} media sources have been selected",
			track: "{{count}} track has been selected",
			track_other: "{{count}} tracks have been selected",
			videoTrack: "{{count}} video track has been selected",
			videoTrack_other: "{{count}} video tracks have been selected",
			audioTrack: "{{count}} audio track has been selected",
			audioTrack_other: "{{count}} audio tracks have been selected",
			trackEvent: "{{count}} track event has been selected",
			trackEvent_other: "{{count}} track events have been selected",
			videoEvent: "{{count}} video track event has been selected",
			videoEvent_other: "{{count}} video track events have been selected",
			audioEvent: "{{count}} audio track event has been selected",
			audioEvent_other: "{{count}} audio track events have been selected",
			trackEventOnlyOne: "You must select exactly ONE track event, not more or less",
			videoEventOnlyOne: "You must select exactly ONE video track event, not more or less",
			audioEventOnlyOne: "You must select exactly ONE audio track event, not more or less",
			trackGenerated: "{{count}} track will be generated",
			trackGenerated_other: "{{count}} tracks will be generated",
			videoTrackGenerated: "{{count}} video track will be generated",
			videoTrackGenerated_other: "{{count}} video tracks will be generated",
			audioTrackGenerated: "{{count}} audio track will be generated",
			audioTrackGenerated_other: "{{count}} audio tracks will be generated",
			trackGeneratedGeq: "{{count}} or more tracks will be generated",
			trackGeneratedGeq_zero: "{{count}} tracks will be generated",
			videoTrackGeneratedGeq: "{{count}} or more video tracks will be generated",
			videoTrackGeneratedGeq_zero: "{{count}} video tracks will be generated",
			audioTrackGeneratedGeq: "{{count}} or more audio tracks will be generated",
			audioTrackGeneratedGeq_zero: "{{count}} audio tracks will be generated",
		},
		prve: {
			classes: {
				flip: "Flip Class",
				rotation: "Rotation Class",
				scale: "Scale Class",
				mirror: "Mirror Class",
				invert: "Invert Class",
				hue: "Hue Class",
				chromatic: "Monochrome Class",
				time: "Time Class",
				time2: "Time Class 2",
				ec: "Expansion & Compression Class",
				swing: "Swing Class",
				blur: "Blur Class",
				wipe: "Wipe Class",
			},
		},
		settings: {
			about: {
				checkForUpdates: "Check for updates",
				repositoryLink: "Repository link",
				documentation: "Documentation",
				version: "Version",
				author: "Author",
				__author__: "Ranne",
				originalAuthor: "Original author",
				__originalAuthor__: "Chaosinism",
				translator: "Translator",
			},
			language: {
				_: "Language",
				en: "English",
				"zh-CN": "Simplified Chinese",
				ja: "Japanese",
				vi: "Vietnamese",
			},
			appearance: {
				_: "Appearance",
				colorScheme: {
					_: "Color scheme",
					light: "Light",
					dark: "Dark",
					auto: "Auto",
				},
				uiScale: "UI scale",
			},
			config: {
				hideUseTips: "Hide use tips",
			},
			dev: {
				_: "Dev",
				devMode: "Developer mode",
			},
		},
		descriptions: {
			condition: "Specify when the following configuration will be applied",
			source: {
				trim: "Adjust start or end time of the specified source",
				startTime: "Specify when to start generating from the project",
			},
			score: {
				trim: "Intercept the generation time range of the score",
				bpm: "Specify the beats per minute",
				constraint: "Controls the note output length from the score",
				encoding: "Specify the text encoding for reading the file",
			},
			stream: {
				stretch: "When on, the clip will be stretched instead of changing its duration",
				loop: "When the clip is lengthened to the end of the source media, playback will start over",
				normalize: "Normalize the audio, useful if the audio is quiet",
				staticVisual: "Freeze the frame at the start of the clip",
				noLengthening: {
					visual: "Freeze the frame at the end of the clip if the note is longer than it",
					audio: "Do not lengthen the clip if the note is longer than it",
				},
				legato: "Fill the gaps between notes",
				multitrackForChords: "Generates multiple tracks for chords",
				createGroups: "Create groups for video and audio clips represented by one note",
				glissando: "Creates a swirl effect if the note pitch bends or slides",
				autoPan: "Pans the audio using envelope automation",
				mapping: "Map the properties of notes to the specified item",
				transformOfx: "Miscz is a pixel hard edge plugin, enable to add keyframe properties to TransformOFX of this plugin",
				tuning: {
					stretchAttributes: "More config about the select tuning method",
					resample: "Lock stretch and pitch, adjust the stretch to change the pitch",
					preserveFormant: "Keep the voice tone while tuning",
					basePitch: "Specify what is the base pitch of the audio event",
				},
				effects: {
					prve: "Make your visuals more rhythmic",
					staff: "Use custom patterns as notes to draw visuals similar fashion to piano staff sheets",
				},
			},
			track: {
				useInGeneration: "Use in generated tracks instead of selected tracks",
				gradient: "Makes the video tracks have a gradient style color effect in your layout",
				legato: "Fills the gaps in the track clips",
			},
			sonar: {
				_: "Sonar is utilizing the shapes of Cookie Cutter to create beat-style visuals for drum kits.",
			},
			shupelunker: {
				_: "Shupelunker Tactics are an untuned otomad tactic. It is used to play the melody by using a clip of the source (usually a vocal) at the same pitch as the melody, that is, the source clip itself is pitched to match the melody.\nIf the pitch of the clip does not match the melody, “Tartar Tactics” will be generated. It is also untuned, and allows you to choose where the clip is cut (usually at a dialogue), with audio stretching and rewinding often used, as well as adding sixteenth to sixty-fourth rest notes. During the production, the clips will be aligned with the rhythm for singing sense.",
			},
			ytp: {
				_: "YouTube Poop (YTP) is for creating nonsensical videos using various effects known in the YTP genre. YTP supports multisource.\nYTP is a Neo-Dada art form, which is absurdist remixes that ape and mock the lowest technical and aesthetic standards of remix culture to comment on remix culture itself. It consists of video remixes that are edited from a large array of video clips in order to confuse, stun or amuse the viewer. The sources can be mashed all together into a nonsensical Crossover story, or just repeat footage of the characters gesticulating oddly.",
				constraint: "Controls the length for the clip to generate",
				clips: "The value of clips generated",
				effects: "Specify the effects for YTP",
			},
			mosh: {
				normal: "Datamosh is a technique of damaging clips to create glitchy effects.",
				// cspell:disable-next-line
				glitchy: "Ða̵̝̻͔͎͋̇͑̆ƭą̬͉̫̐͑̓̄ͅa̸͎͇͗̌͂̈̀ą̸̝̼̦̤̇̐ǎ̛͍́̑a̸̲͙͛̐̄̎̚͜a̢̨̝̟͎̾̔̊ǎ̤̞͈͑a͈̪̣̍₥o̻̪̬̘̲͆͂͠o̸͍̞͔̓̆̊̀o̗͊̇̇̈́̇ǫ͇͗̏̕͜ơ̬͍͚̦̯̓̊͌ò͈̦̫̈́̓o̦̣̲̊̀o̪̪͚̺̘͛̽̏̈́ƨλ ïƨ á ƭèçλñï9úè ôƒ δá₥áϱïñϱ çℓïƥƨ ƭô çřèáƭè ϱℓïƭçλ¥ èƒƒèçƭƨ.",
				additional: "In video art, there is a technique called datamoshing. Where two videos are interleaved so intermediate frames are interpolated from two separate sources. And exploits the difference in how the separate video codecs process motion and color information.",
				datamosh: "Datamoshes the video, preferably on the timeline with a lot of movement visuals",
				datamix: "Applies the movement of a clip to the visual of another clip",
				layer: "Does multilayering, by copying the video clip many times",
				render: "Prerenders a part of the timeline which may contains very complex video edits, and replaces it with a single video clip",
				scramble: "Cuts the clips into a lot of subclips, and shuffling the subclips",
				automator: "Adds random keyframes every frame automatically for each effect you added to the video clips",
				stutter: "Stutters the clips by forwarding and reversing them in randomized intervals",
				shake: "Shakes or wiggles the clips by using Pan/Crop",
			},
			tools: {
				_: "These QoL functions make creating YTPMVs/Otomads a little less painful for working with or setting up. These don’t require any adjustments to any of the previous parameters.",
				selector: "Finds and selects all clips that match the specified",
				replacer: "Replaces multiple clips with specified new clips",
				normalizer: "Normalizes all selected audio clips volume",
				subtitles: "Presets the “Titles & Text” preset, and then add multiple lines of text here",
				visualizer: "Applies the PV Rhythm Visual Effects to the selected video clips",
				fader: "Adjusts gain (volume/opacity) for selected clips with the specified rules",
				scoreExporter: "Exports the clips in the selected tracks to a score sequence file",
				flow: "Creates stunning animations using Beziér Curves",
				converters: {
					tuningMethod: "Switches the tuning algorithm to the selected audio clips",
					timeSignature: "Converts the selected music time signatures between 4/4, 3/4, 6/8, etc",
					transformOfx: "Converts all Pan/Crop keyframes to TransformOFX keyframes for use by the Miscz plugin",
				},
			},
			staff: {
				_: "Staff Visualizer is to use custom patterns as notes to draw visuals similar fashion to piano staff sheets based on the melody of the score.\nThis visual effect style mimics the videos of YouTuber @grantwoolard, who featured the use of musicians’ avatars to draw the piano staff sheets of classical music.",
			},
			settings: {
				about: "Otomad Helper, a YTPMV / YTP / Otomad extension for Vegas Pro, designed to allow Vegas to accept scores like MIDI files as input, and automatically generate YTPMV / Otomad tracks.",
			},
		},
		empty: {
			disabled: {
				title: "{{name, capitalize}} disabled",
				details: "Enable to generate the {{name, lowercase}}",
			},
			ytpEnabled: {
				title: "YTP enabled, all other related parameters are unavailable",
				details: "Disable YTP feature to use and adjust other parameters",
				disableYtp: "Disable YTP",
				gotoYtp: "Go to YTP",
			},
		},
	},
	csharp: {
		ImportToHere: "Import %1",
	},
} as const;

export default English;
