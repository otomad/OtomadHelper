diff --git a/esm/middleware.js b/esm/middleware.js
index c2c91bcd61428dbeb0b265eabdd6fa650ba18f9f..e41f53c19df2597b96d1181056ac9e45695010ec 100644
--- a/esm/middleware.js
+++ b/esm/middleware.js
@@ -313,10 +313,16 @@ const oldImpl = (config, baseOptions) => (set, get, api) => {
     deserialize: JSON.parse,
     partialize: (state) => state,
     version: 0,
-    merge: (persistedState, currentState) => ({
-      ...currentState,
-      ...persistedState
-    }),
+    merge: (persistedState, currentState) => {
+      // Do not use spread operator because it does not work with the getter and setter.
+      const resultState = {};
+      for (const state of [currentState, persistedState]) {
+        for (const key in state) {
+          Reflect.defineProperty(resultState, key, Object.getOwnPropertyDescriptor(state, key));
+        }
+      }
+      return resultState;
+    },
     ...baseOptions
   };
   let hasHydrated = false;
@@ -447,10 +453,16 @@ const newImpl = (config, baseOptions) => (set, get, api) => {
     storage: createJSONStorage(() => localStorage),
     partialize: (state) => state,
     version: 0,
-    merge: (persistedState, currentState) => ({
-      ...currentState,
-      ...persistedState
-    }),
+    merge: (persistedState, currentState) => {
+      // Do not use spread operator because it does not work with the getter and setter.
+      const resultState = {};
+      for (const state of [currentState, persistedState]) {
+        for (const key in state) {
+          Reflect.defineProperty(resultState, key, Object.getOwnPropertyDescriptor(state, key));
+        }
+      }
+      return resultState;
+    },
     ...baseOptions
   };
   let hasHydrated = false;
diff --git a/esm/middleware.mjs b/esm/middleware.mjs
index ad4efa92479334abc2c54f403ad231807b96a0d3..8581c1c5d0adf844d29acdb23f8e1fac369b78d7 100644
--- a/esm/middleware.mjs
+++ b/esm/middleware.mjs
@@ -313,10 +313,16 @@ const oldImpl = (config, baseOptions) => (set, get, api) => {
     deserialize: JSON.parse,
     partialize: (state) => state,
     version: 0,
-    merge: (persistedState, currentState) => ({
-      ...currentState,
-      ...persistedState
-    }),
+    merge: (persistedState, currentState) => {
+      // Do not use spread operator because it does not work with the getter and setter.
+      const resultState = {};
+      for (const state of [currentState, persistedState]) {
+        for (const key in state) {
+          Reflect.defineProperty(resultState, key, Object.getOwnPropertyDescriptor(state, key));
+        }
+      }
+      return resultState;
+    },
     ...baseOptions
   };
   let hasHydrated = false;
@@ -447,10 +453,16 @@ const newImpl = (config, baseOptions) => (set, get, api) => {
     storage: createJSONStorage(() => localStorage),
     partialize: (state) => state,
     version: 0,
-    merge: (persistedState, currentState) => ({
-      ...currentState,
-      ...persistedState
-    }),
+    merge: (persistedState, currentState) => {
+      // Do not use spread operator because it does not work with the getter and setter.
+      const resultState = {};
+      for (const state of [currentState, persistedState]) {
+        for (const key in state) {
+          Reflect.defineProperty(resultState, key, Object.getOwnPropertyDescriptor(state, key));
+        }
+      }
+      return resultState;
+    },
     ...baseOptions
   };
   let hasHydrated = false;
diff --git a/esm/vanilla.js b/esm/vanilla.js
index 25c56467d1778ca2a63364c85e211b5061422094..17d791bb8bbe2e6abeb7d3682e5a1485f6d32525 100644
--- a/esm/vanilla.js
+++ b/esm/vanilla.js
@@ -6,6 +6,15 @@ const createStoreImpl = (createState) => {
     if (!Object.is(nextState, state)) {
       const previousState = state;
       state = (replace != null ? replace : typeof nextState !== "object" || nextState === null) ? nextState : Object.assign({}, state, nextState);
+      // copy getters
+      if (typeof state === 'object' && state !== null) {
+        for (const key in previousState) {
+          const descriptor = Object.getOwnPropertyDescriptor(previousState, key);
+          if (descriptor?.get) {
+            Reflect.defineProperty(state, key, descriptor);
+          }
+        }
+      }
       listeners.forEach((listener) => listener(state, previousState));
     }
   };
diff --git a/esm/vanilla.mjs b/esm/vanilla.mjs
index 3427839341ff0ab88e279054c5c941d0ae8c9f12..d65bed7bf131293712672c1ef2210ac77830f434 100644
--- a/esm/vanilla.mjs
+++ b/esm/vanilla.mjs
@@ -6,6 +6,15 @@ const createStoreImpl = (createState) => {
     if (!Object.is(nextState, state)) {
       const previousState = state;
       state = (replace != null ? replace : typeof nextState !== "object" || nextState === null) ? nextState : Object.assign({}, state, nextState);
+      // copy getters
+      if (typeof state === 'object' && state !== null) {
+        for (const key in previousState) {
+          const descriptor = Object.getOwnPropertyDescriptor(previousState, key);
+          if (descriptor?.get) {
+            Reflect.defineProperty(state, key, descriptor);
+          }
+        }
+      }
       listeners.forEach((listener) => listener(state, previousState));
     }
   };
