<m:CustomControlResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:c="clr-namespace:OtomadHelper.WPF.Controls"
	xmlns:s="clr-namespace:System;assembly=mscorlib"
	xmlns:m="clr-namespace:OtomadHelper.WPF.Common"
	>
	<c:ExpandButtonIsCheckedToIsExpandedTextConverter x:Key="CheckedToText" />

	<Style x:Key="DefaultExpandButtonStyle" TargetType="c:ExpandButton">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="FontSize" Value="14" />
		<Setter Property="Padding" Value="0" />
		<Setter Property="Margin" Value="-3,0,0,0" />
		<Setter Property="FocusVisualStyle" Value="{DynamicResource OuterFocusVisualStyle}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToggleButton">
					<Border
						Padding="{TemplateBinding Padding}"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						>
						<ContentPresenter
							HorizontalAlignment="Left"
							VerticalAlignment="Center"
							TextBlock.FontSize="{TemplateBinding FontSize}"
							TextBlock.Foreground="{TemplateBinding Foreground}"
							/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="ContentTemplate">
			<Setter.Value>
				<DataTemplate>
					<DataTemplate.Resources>
						<s:Double x:Key="IconBorderSize">30</s:Double>

						<Style TargetType="StackPanel">
							<Setter Property="Orientation" Value="Horizontal" />
						</Style>
						<Style TargetType="c:Icon">
							<Setter Property="Size" Value="16" />
							<Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType=ToggleButton, AncestorLevel=1}}" />
							<Setter Property="RenderTransformOrigin" Value="0.5,0.5" />
							<Setter Property="RenderTransform">
								<Setter.Value>
									<RotateTransform Angle="0" />
								</Setter.Value>
							</Setter>
							<Style.Triggers>
								<DataTrigger Binding="{Binding IsChecked, RelativeSource={RelativeSource FindAncestor, AncestorType=ToggleButton, AncestorLevel=1}}" Value="True">
									<DataTrigger.EnterActions>
										<BeginStoryboard>
											<Storyboard>
												<DoubleAnimation
													EasingFunction="{StaticResource EaseOutExpo}"
													Storyboard.TargetProperty="RenderTransform.(RotateTransform.Angle)"
													From="0"
													To="-180"
													Duration="{StaticResource BaseAnimationDuration}"
													/>
											</Storyboard>
										</BeginStoryboard>
									</DataTrigger.EnterActions>
									<DataTrigger.ExitActions>
										<BeginStoryboard>
											<Storyboard>
												<DoubleAnimation
													EasingFunction="{StaticResource EaseOutExpo}"
													Storyboard.TargetProperty="RenderTransform.(RotateTransform.Angle)"
													From="-180"
													To="0"
													Duration="{StaticResource BaseAnimationDuration}"
													/>
											</Storyboard>
										</BeginStoryboard>
									</DataTrigger.ExitActions>
								</DataTrigger>
							</Style.Triggers>
						</Style>
						<Style x:Key="IconBorder" TargetType="Border">
							<Setter Property="CornerRadius" Value="4" />
							<Setter Property="Background" Value="Transparent" />
							<Setter Property="Width" Value="{StaticResource IconBorderSize}" />
							<Setter Property="Height" Value="{StaticResource IconBorderSize}" />
							<Setter Property="VerticalAlignment" Value="Center" />
							<Style.Triggers>
								<DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType=ToggleButton, AncestorLevel=1}}" Value="True">
									<Setter Property="Background" Value="{DynamicResource SubtleSecondary}" />
								</DataTrigger>
								<DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType=ToggleButton, AncestorLevel=1}}" Value="True">
									<Setter Property="Background" Value="{DynamicResource SubtleTertiary}" />
								</DataTrigger>
							</Style.Triggers>
						</Style>
						<Style TargetType="TextBlock">
							<Setter Property="VerticalAlignment" Value="Center" />
							<Setter Property="Margin" Value="5,0,8,0" />
						</Style>
					</DataTemplate.Resources>
					<StackPanel>
						<Border Style="{StaticResource IconBorder}">
							<c:Icon Source="{StaticResource Icon:ChevronDown}" />
						</Border>
						<TextBlock Text="{Binding IsChecked, RelativeSource={RelativeSource FindAncestor, AncestorType=ToggleButton, AncestorLevel=1}, Converter={StaticResource CheckedToText}}" />
					</StackPanel>
				</DataTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Foreground">
					<Setter.Value>
						<SolidColorBrush Opacity="{DynamicResource ControlPressedOpacity}" Color="{DynamicResource ForegroundColor}" />
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style BasedOn="{StaticResource DefaultExpandButtonStyle}" TargetType="c:ExpandButton" />
</m:CustomControlResourceDictionary>
