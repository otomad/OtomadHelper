<m:CustomControlResourceDictionary
	x:Class="OtomadHelper.WPF.Controls.ContextMenuResourceDictionary"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:c="clr-namespace:OtomadHelper.WPF.Controls"
	xmlns:m="clr-namespace:OtomadHelper.WPF.Common"
	xmlns:s="clr-namespace:System;assembly=mscorlib"
	>
	<m:DebuggerConverter x:Key="debug" />
	<Style x:Key="DefaultContextMenuStyle" TargetType="ContextMenu">
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="Grid.IsSharedSizeScope" Value="true" />
		<Setter Property="Background" Value="#01000000" />
		<Setter Property="BorderBrush" Value="{DynamicResource SurfaceStrokeFlyout}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="FontFamily" Value="{Binding DefaultFont, RelativeSource={RelativeSource FindAncestor, AncestorType=c:BackdropWindow}}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ContextMenu">
					<Border
						x:Name="Border"
						Padding="0,3"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						CornerRadius="8"
						>
						<StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="m:AttachedEvents.RaiseIsVisibleChanged" Value="True" />
		<EventSetter Event="m:AttachedEvents.IsVisibleChanged" Handler="ContextMenu_IsVisibleChanged" />

		<Style.Resources>
			<Style x:Key="ShortcutKey" TargetType="TextBlock">
				<Setter Property="FontSize" Value="{StaticResource CaptionFontSize}" />
				<Setter Property="Foreground" Value="{DynamicResource TextSecondary}" />
				<Setter Property="HorizontalAlignment" Value="Right" />
				<Setter Property="VerticalAlignment" Value="Center" />
				<Style.Triggers>
					<DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource FindAncestor, AncestorType=MenuItem}}" Value="False">
						<Setter Property="Foreground" Value="{DynamicResource TextDisabled}" />
					</DataTrigger>
				</Style.Triggers>
			</Style>

			<Style TargetType="c:Icon">
				<Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType=MenuItem}, FallbackValue=Gray}" />
				<!--
					Confusing behavior, if FallbackValue is not specified, no binding color will be applied and no error will be reported.
					I accidentally specified FallbackValue, but instead of applying FallbackValue, it was successfully bound normally.
					I don't know why this happened.
				-->
			</Style>

			<Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="Separator">
				<Setter Property="Background" Value="{DynamicResource DividerStroke}" />
				<Setter Property="BorderBrush" Value="{DynamicResource DividerStroke}" />
				<Setter Property="Margin" Value="0,3" />
				<Setter Property="Focusable" Value="false" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Separator}">
							<Border
								Height="1"
								Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								SnapsToDevicePixels="true"
								/>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style TargetType="MenuItem">
				<Setter Property="SnapsToDevicePixels" Value="True" />
				<Setter Property="FontSize" Value="{StaticResource BodyFontSize}" />
				<Setter Property="MinWidth" Value="180" />
				<Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="MenuItem">
							<Border
								Name="Border"
								Margin="3,0"
								Padding="8,8"
								Background="{TemplateBinding Background}"
								BorderThickness="0"
								CornerRadius="5"
								>
								<Grid m:GridDef.Column="16,*,Auto">
									<ContentPresenter
										Grid.Column="0"
										HorizontalAlignment="Center"
										VerticalAlignment="Center"
										ContentSource="Icon"
										RecognizesAccessKey="True"
										/>
									<ContentPresenter
										Grid.Column="1"
										Margin="10,0"
										VerticalAlignment="Center"
										ContentSource="Header"
										RecognizesAccessKey="True"
										/>
									<ContentPresenter
										Grid.Column="2"
										ContentSource="InputGestureText"
										RecognizesAccessKey="True"
										>
										<ContentPresenter.ContentTemplate>
											<DataTemplate>
												<TextBlock Style="{StaticResource ShortcutKey}" Text="{Binding}" />
											</DataTemplate>
										</ContentPresenter.ContentTemplate>
									</ContentPresenter>
								</Grid>
							</Border>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Style.Triggers>
					<Trigger Property="IsMouseOver" Value="True">
						<Setter Property="Background" Value="{DynamicResource SubtleSecondary}" />
					</Trigger>
					<Trigger Property="IsPressed" Value="True">
						<Setter Property="Background" Value="{DynamicResource SubtleTertiary}" />
					</Trigger>
					<Trigger Property="IsEnabled" Value="False">
						<Setter Property="Foreground" Value="{DynamicResource TextDisabled}" />
					</Trigger>
				</Style.Triggers>
			</Style>
		</Style.Resources>
	</Style>

	<Style BasedOn="{StaticResource DefaultContextMenuStyle}" TargetType="ContextMenu" />
</m:CustomControlResourceDictionary>
