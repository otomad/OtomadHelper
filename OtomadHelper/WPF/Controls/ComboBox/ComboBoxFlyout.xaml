<c:BaseFlyout
	x:Class="OtomadHelper.WPF.Controls.ComboBoxFlyout"
	x:Name="View"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:c="clr-namespace:OtomadHelper.WPF.Controls"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
	xmlns:m="clr-namespace:OtomadHelper.WPF.Common"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:s="clr-namespace:System;assembly=mscorlib"
	MinWidth="200"
	MaxWidth="{x:Static SystemParameters.MaximizedPrimaryScreenWidth}"
	MaxHeight="{x:Static SystemParameters.MaximizedPrimaryScreenHeight}"
	Loaded="Window_Loaded"
	SizeToContent="Width"
	Height="0"
	Focusable="True"
	Topmost="True"
	mc:Ignorable="d"
	>
	<c:BaseFlyout.DataContext>
		<c:ComboBoxViewModel x:Name="ViewModel" />
	</c:BaseFlyout.DataContext>

	<i:Interaction.Triggers>
		<i:KeyTrigger FiredOn="KeyDown" Key="Return">
			<i:CallMethodAction TargetObject="{Binding}" MethodName="Close" />
		</i:KeyTrigger>
		<i:KeyTrigger FiredOn="KeyUp" Key="Space">
			<i:CallMethodAction TargetObject="{Binding}" MethodName="Close" />
		</i:KeyTrigger>
		<i:KeyTrigger FiredOn="KeyDown" Key="Up">
			<i:InvokeCommandAction Command="{Binding ArrowMoveCommand}" CommandParameter="{m:Int -1}" />
		</i:KeyTrigger>
		<i:KeyTrigger FiredOn="KeyDown" Key="Down">
			<i:InvokeCommandAction Command="{Binding ArrowMoveCommand}" CommandParameter="{m:Int 1}" />
		</i:KeyTrigger>
	</i:Interaction.Triggers>

	<c:BaseFlyout.Resources>
		<ResourceDictionary>
			<m:BooleanToVisibilityConverter x:Key="BoolToVis" />
			<m:BooleanToVisibilityConverter
				x:Key="BoolToHiddenVis"
				True="Visible"
				False="Hidden"
				/>
			<m:DoubleToThicknessConverter x:Key="DoubleToThick" />
			<m:DoubleToCornerRadiusConverter x:Key="DoubleToRadius" />
			<m:BooleanOrConverter x:Key="BoolOr" />
			<c:ComboBoxIdToIsCheckedConverter x:Key="IdToChecked" />
			<c:ComboBoxIdToOptionConverter x:Key="IdToOption" />

			<s:Double x:Key="Padding">2</s:Double>
			<s:Double x:Key="IndicatorRadius">1.5</s:Double>
			<s:Double x:Key="IndicatorHeight">16</s:Double>
			<s:Double x:Key="IndicatorPressedHeight">10</s:Double>

			<Style x:Key="ComboBoxItemButton" TargetType="RadioButton">
				<Setter Property="Background" Value="Transparent" />
				<Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
				<Setter Property="Padding" Value="0,0,12,0" />
				<Setter Property="Height" Value="{Binding ItemHeight, ElementName=View}" />
				<Setter Property="FontSize" Value="14" />
				<Setter Property="Focusable" Value="False" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="RadioButton">
							<Border Padding="{Binding Source={StaticResource Padding}, Converter={StaticResource DoubleToThick}, Mode=OneWay}" Background="Transparent">
								<Border
									Padding="{TemplateBinding Padding}"
									Background="{TemplateBinding Background}"
									BorderThickness="0"
									CornerRadius="4"
									>
									<ContentPresenter
										HorizontalAlignment="Left"
										VerticalAlignment="Center"
										TextBlock.FontSize="{TemplateBinding FontSize}"
										/>
								</Border>
							</Border>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Style.Triggers>
					<Trigger Property="IsMouseOver" Value="True">
						<Setter Property="Background" Value="{DynamicResource SubtleSecondary}" />
					</Trigger>
					<Trigger Property="IsPressed" Value="True">
						<Setter Property="Background" Value="{DynamicResource SubtleTertiary}" />
						<Setter Property="Foreground">
							<Setter.Value>
								<SolidColorBrush Opacity="{DynamicResource ControlPressedOpacity}" Color="{DynamicResource ForegroundColor}" />
							</Setter.Value>
						</Setter>
					</Trigger>
					<Trigger Property="IsChecked" Value="True">
						<Setter Property="Background" Value="{DynamicResource SubtleSecondary}" />
					</Trigger>
					<MultiTrigger>
						<MultiTrigger.Conditions>
							<Condition Property="IsChecked" Value="True" />
							<Condition Property="IsMouseOver" Value="True" />
						</MultiTrigger.Conditions>
						<Setter Property="Background" Value="{DynamicResource SubtleTertiary}" />
					</MultiTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="True" />
							<Condition Value="True">
								<Condition.Binding>
									<MultiBinding Converter="{StaticResource BoolOr}">
										<Binding Path="IsPressed" RelativeSource="{RelativeSource Self}" />
										<Binding ElementName="View" Path="IsPressingSpace" />
									</MultiBinding>
								</Condition.Binding>
							</Condition>
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" Value="{DynamicResource SubtleSecondary}" />
						<Setter Property="Foreground">
							<Setter.Value>
								<SolidColorBrush Opacity="{DynamicResource ControlPressedOpacity}" Color="{DynamicResource ForegroundColor}" />
							</Setter.Value>
						</Setter>
					</MultiDataTrigger>
				</Style.Triggers>
			</Style>

			<Style x:Key="Indicator" TargetType="Rectangle">
				<Setter Property="Width" Value="3" />
				<Setter Property="Height" Value="{StaticResource IndicatorHeight}" />
				<Setter Property="HorizontalAlignment" Value="Left" />
				<Setter Property="Fill" Value="{Binding WindowGlassBrush, ElementName=View}" />
				<Setter Property="RadiusX" Value="{StaticResource IndicatorRadius}" />
				<Setter Property="RadiusY" Value="{StaticResource IndicatorRadius}" />
				<Style.Triggers>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource AncestorType=RadioButton}}" Value="True" />
							<Condition Value="True">
								<Condition.Binding>
									<MultiBinding Converter="{StaticResource BoolOr}">
										<Binding Path="IsPressed" RelativeSource="{RelativeSource AncestorType=RadioButton}" />
										<Binding ElementName="View" Path="IsPressingSpace" />
									</MultiBinding>
								</Condition.Binding>
							</Condition>
						</MultiDataTrigger.Conditions>
						<MultiDataTrigger.EnterActions>
							<BeginStoryboard>
								<Storyboard>
									<DoubleAnimation
										EasingFunction="{StaticResource EaseOutExpo}"
										Storyboard.TargetProperty="Height"
										From="{StaticResource IndicatorHeight}"
										To="{StaticResource IndicatorPressedHeight}"
										Duration="{StaticResource BaseAnimationDuration}"
										/>
								</Storyboard>
							</BeginStoryboard>
						</MultiDataTrigger.EnterActions>
						<MultiDataTrigger.ExitActions>
							<BeginStoryboard>
								<Storyboard>
									<DoubleAnimation
										EasingFunction="{StaticResource EaseOutExpo}"
										Storyboard.TargetProperty="Height"
										From="{StaticResource IndicatorPressedHeight}"
										To="{StaticResource IndicatorHeight}"
										Duration="{StaticResource BaseAnimationDuration}"
										/>
								</Storyboard>
							</BeginStoryboard>
						</MultiDataTrigger.ExitActions>
					</MultiDataTrigger>
					<DataTrigger Binding="{Binding IsChecked, RelativeSource={RelativeSource AncestorType=RadioButton}}" Value="True">
						<DataTrigger.EnterActions>
							<BeginStoryboard>
								<Storyboard>
									<DoubleAnimation
										EasingFunction="{StaticResource EaseOutExpo}"
										FillBehavior="Stop"
										Storyboard.TargetProperty="Height"
										From="{StaticResource IndicatorPressedHeight}"
										To="{StaticResource IndicatorHeight}"
										Duration="{StaticResource BaseAnimationDuration}"
										/>
								</Storyboard>
							</BeginStoryboard>
						</DataTrigger.EnterActions>
					</DataTrigger>
				</Style.Triggers>
			</Style>

			<Style TargetType="TextBlock">
				<Setter Property="VerticalAlignment" Value="Center" />
				<Setter Property="FontSize" Value="14" />
				<Setter Property="LineHeight" Value="20" />
			</Style>

			<Style x:Key="ItemsControlWrapper" TargetType="ItemsControl">
				<Setter Property="Padding" Value="{Binding Source={StaticResource Padding}, Converter={StaticResource DoubleToThick}, Mode=OneWay}" />
				<!--<Setter Property="Visibility" Value="{Binding IsContent, ElementName=View, Converter={StaticResource BoolToHiddenVis}, Mode=OneWay}" />
				<Style.Triggers>
					<DataTrigger Binding="{Binding IsContent, ElementName=View}" Value="True">
						<Setter Property="OpacityMask">
							<Setter.Value>
								<DrawingBrush
									Stretch="None"
									Viewport="{Binding RelativeSource={RelativeSource AncestorType=ItemsControl}, Converter={StaticResource SizeToRect}, Mode=OneTime}"
									ViewportUnits="Absolute"
									>
									<DrawingBrush.Drawing>
										<DrawingGroup>
											<DrawingGroup.Children>
												<GeometryDrawing Brush="Transparent">
													<GeometryDrawing.Geometry>
														<RectangleGeometry Rect="{Binding RelativeSource={RelativeSource AncestorType=ItemsControl}, Converter={StaticResource SizeToRect}, Mode=OneTime}" />
													</GeometryDrawing.Geometry>
												</GeometryDrawing>
												<GeometryDrawing Brush="Black">
													<GeometryDrawing.Geometry>
														<RectangleGeometry
															RadiusX="6"
															RadiusY="6"
															Rect="0,0,0,0"
															/>
													</GeometryDrawing.Geometry>
												</GeometryDrawing>
											</DrawingGroup.Children>
										</DrawingGroup>
									</DrawingBrush.Drawing>
								</DrawingBrush>
							</Setter.Value>
						</Setter>
					</DataTrigger>
				</Style.Triggers>-->
			</Style>
		</ResourceDictionary>
	</c:BaseFlyout.Resources>

	<ScrollViewer VerticalScrollBarVisibility="Auto">
		<ItemsControl
			x:Name="ItemsControlWrapper"
			ItemsSource="{Binding Ids}"
			Style="{StaticResource ItemsControlWrapper}"
			Focusable="True"
			>
			<ItemsControl.ItemsPanel>
				<ItemsPanelTemplate>
					<StackPanel Orientation="Vertical" />
				</ItemsPanelTemplate>
			</ItemsControl.ItemsPanel>
			<ItemsControl.ItemTemplate>
				<DataTemplate>
					<RadioButton
						x:Name="RadioButton"
						Command="{Binding CheckRadioButtonCommand, ElementName=ViewModel}"
						CommandParameter="{Binding}"
						GroupName="ComboBoxItem"
						IsChecked="{m:Binding Converter={StaticResource IdToChecked}, ConverterParameter={Binding Selected, ElementName=ViewModel}, Mode=OneWay}"
						Style="{StaticResource ComboBoxItemButton}"
						>
						<Grid m:GridDef.Column="12,*">
							<Rectangle
								x:Name="Indicator"
								Grid.Column="0"
								Style="{StaticResource Indicator}"
								Visibility="{Binding IsChecked, ElementName=RadioButton, Converter={StaticResource BoolToVis}}"
								/>
							<TextBlock Grid.Column="1">
								<TextBlock.Text>
									<m:Binding Converter="{StaticResource IdToOption}" Mode="OneWay">
										<m:Binding.ConverterParameter>
											<MultiBinding>
												<Binding Path="Ids" ElementName="ViewModel" />
												<Binding Path="Options" ElementName="ViewModel" />
											</MultiBinding>
										</m:Binding.ConverterParameter>
									</m:Binding>
								</TextBlock.Text>
							</TextBlock>
						</Grid>
					</RadioButton>
				</DataTemplate>
			</ItemsControl.ItemTemplate>
		</ItemsControl>
	</ScrollViewer>
</c:BaseFlyout>
