<c:BaseFlyout
	x:Class="OtomadHelper.WPF.Controls.PitchPickerFlyout"
	x:Name="View"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:c="clr-namespace:OtomadHelper.WPF.Controls"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
	xmlns:m="clr-namespace:OtomadHelper.WPF.Common"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:s="clr-namespace:System;assembly=mscorlib"
	Width="200"
	Height="300"
	Loaded="Window_Loaded"
	PreviewKeyDown="Window_PreviewKeyDown"
	mc:Ignorable="d"
	>
	<c:BaseFlyout.DataContext>
		<c:PitchPickerViewModel x:Name="ViewModel" />
	</c:BaseFlyout.DataContext>

	<c:BaseFlyout.InputBindings>
		<KeyBinding Key="Space" Command="{Binding CloseKeyDownCommand}" />
		<KeyBinding Key="Return" Command="{Binding CloseKeyDownCommand}" />
	</c:BaseFlyout.InputBindings>

	<c:BaseFlyout.Resources>
		<ResourceDictionary>
			<m:DoubleToCornerRadiusConverter x:Key="DoubleToRadius" />
			<m:BooleanToVisibilityConverter x:Key="BoolToVis" />
			<m:ActualSizeToRectConverter x:Key="SizeToRect" />
			<m:RectToDrawingBrushConverter x:Key="RectToBrush" />
			<m:RelativeToAbsoluteRectConverter x:Key="RelToAbsRect" />

			<Thickness x:Key="ItemPadding">4,0</Thickness>
			<s:Double x:Key="ItemHeight">40</s:Double>
			<s:Double x:Key="ItemRadius">4</s:Double>
			<s:Int32 x:Key="SpinUpDelta">120</s:Int32>
			<s:Int32 x:Key="SpinDownDelta">-120</s:Int32>
			<s:Double x:Key="SpinnerCaretIconSize">8</s:Double>
			<s:Double x:Key="SpinnerCaretIconPressedSize">7</s:Double>

			<Style x:Key="ListView" TargetType="c:PitchPickerFlyoutListView">
				<Setter Property="Background" Value="Transparent" />
				<Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
				<Setter Property="BorderBrush" Value="{DynamicResource DividerStroke}" />
				<Setter Property="BorderThickness" Value="0" />
				<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Hidden" />
				<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
				<Setter Property="ScrollViewer.CanContentScroll" Value="False" />
				<Setter Property="Width" Value="{Binding ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorType=Canvas, AncestorLevel=1}}" />
				<Setter Property="Padding" Value="0,2" />
				<Setter Property="ItemContainerStyle">
					<Setter.Value>
						<Style TargetType="ListViewItem">
							<Setter Property="HorizontalContentAlignment" Value="Center" />
							<Setter Property="Focusable" Value="False" />
							<Setter Property="Height" Value="{StaticResource ItemHeight}" />
							<Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType=ListView, AncestorLevel=1}}" />
							<Setter Property="FontSize" Value="14" />
							<Setter Property="m:MouseDownHelper.Enabled" Value="True" />
							<Setter Property="Template">
								<Setter.Value>
									<ControlTemplate TargetType="ListBoxItem">
										<Border
											x:Name="ListBoxItemBorder"
											Margin="2,-1"
											Background="{TemplateBinding Background}"
											BorderBrush="{TemplateBinding BorderBrush}"
											BorderThickness="{TemplateBinding BorderThickness}"
											CornerRadius="{Binding Source={StaticResource ItemRadius}, Converter={StaticResource DoubleToRadius}}"
											SnapsToDevicePixels="true"
											>
											<ContentPresenter
												HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
												VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
												SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
												/>
										</Border>
										<ControlTemplate.Triggers>
											<Trigger Property="IsMouseOver" Value="True">
												<Setter TargetName="ListBoxItemBorder" Property="Background" Value="{DynamicResource SubtleSecondary}" />
											</Trigger>
											<Trigger Property="m:MouseDownHelper.IsLeftPressed" Value="True">
												<Setter TargetName="ListBoxItemBorder" Property="Background" Value="{DynamicResource SubtleTertiary}" />
											</Trigger>
										</ControlTemplate.Triggers>
									</ControlTemplate>
								</Setter.Value>
							</Setter>
						</Style>
					</Setter.Value>
				</Setter>
			</Style>
			<Style x:Key="SelectionBase" TargetType="Rectangle">
				<Setter Property="Fill" Value="{Binding WindowGlassBrush, ElementName=View}" />
				<Setter Property="Grid.ColumnSpan" Value="3" />
				<Setter Property="Height" Value="{StaticResource ItemHeight}" />
				<Setter Property="Margin" Value="{StaticResource ItemPadding}" />
				<Setter Property="RadiusX" Value="{StaticResource ItemRadius}" />
				<Setter Property="RadiusY" Value="{StaticResource ItemRadius}" />
				<Setter Property="VerticalAlignment" Value="Center" />
				<Setter Property="RenderTransform">
					<Setter.Value>
						<TranslateTransform Y="0.5" />
					</Setter.Value>
				</Setter>
			</Style>
			<Style x:Key="ListViewWrapper" TargetType="Canvas">
				<Setter Property="Background" Value="Transparent" />
				<Setter Property="Width" Value="{Binding ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorType=Canvas, AncestorLevel=1}}" />
				<Setter Property="Height" Value="{Binding ActualHeight, RelativeSource={RelativeSource FindAncestor, AncestorType=Canvas, AncestorLevel=1}}" />
				<EventSetter Event="PreviewMouseDown" Handler="ListViewWrapper_PreviewMouseDown" />
				<Style.Triggers>
					<DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType=Canvas, AncestorLevel=1}}" Value="True">
						<Setter Property="Clip">
							<Setter.Value>
								<RectangleGeometry Rect="{Binding HoverCutEdgeRect, ElementName=View}" />
							</Setter.Value>
						</Setter>
					</DataTrigger>
				</Style.Triggers>
			</Style>
			<Style x:Key="ListViewWrapperWrapper" TargetType="Canvas">
				<Setter Property="Background" Value="Transparent" />
				<Setter Property="Focusable" Value="True" />
				<Setter Property="FocusVisualStyle" Value="{StaticResource InnerFocusVisualStyle}" />
			</Style>
			<Style x:Key="ListViewSeparator" TargetType="Line">
				<Setter Property="Stretch" Value="Fill" />
				<Setter Property="Stroke" Value="{DynamicResource DividerStroke}" />
				<Setter Property="Y2" Value="1" />
				<Setter Property="Grid.Column" Value="1" />
			</Style>
			<Style
				x:Key="ListViewSelectionMasked"
				BasedOn="{StaticResource ListView}"
				TargetType="c:PitchPickerFlyoutListView"
				>
				<Setter Property="Foreground" Value="{DynamicResource TextOnAccentForegroundBrush}" />
				<Setter Property="IsHitTestVisible" Value="False" />
			</Style>
			<Style TargetType="Border">
				<Setter Property="ClipToBounds" Value="True" />
			</Style>
			<Style x:Key="ColumnGridSelectionMasked" TargetType="Grid">
				<Setter Property="IsHitTestVisible" Value="False" />
				<Setter Property="Visibility" Value="{Binding IsLightTheme, ElementName=View, Converter={StaticResource BoolToVis}, Mode=OneWay}" />
				<Setter Property="Clip">
					<Setter.Value>
						<RectangleGeometry>
							<RectangleGeometry.Rect>
								<MultiBinding Converter="{StaticResource RelToAbsRect}">
									<Binding Path="SelectionMaskRect" ElementName="View" />
									<Binding Path="ActualWidth" ElementName="View" />
									<Binding Path="ActualHeight" ElementName="View" />
								</MultiBinding>
							</RectangleGeometry.Rect>
						</RectangleGeometry>
					</Setter.Value>
				</Setter>
			</Style>
			<Style x:Key="SpinnerButton" TargetType="RepeatButton">
				<Setter Property="Width" Value="{Binding ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorType=Canvas, AncestorLevel=1}}" />
				<Setter Property="Height" Value="{StaticResource ItemHeight}" />
				<Setter Property="BorderThickness" Value="0" />
				<Setter Property="Background" Value="Transparent" />
				<Setter Property="Foreground" Value="{DynamicResource ControlStrong}" />
				<Setter Property="FontSize" Value="8" />
				<Setter Property="Focusable" Value="False" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="RepeatButton">
							<Border
								Padding="{TemplateBinding Padding}"
								Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								>
								<ContentPresenter
									HorizontalAlignment="Center"
									VerticalAlignment="Center"
									TextBlock.Foreground="{TemplateBinding Foreground}"
									TextBlock.FontSize="{TemplateBinding FontSize}"
									/>
							</Border>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Setter Property="ContentTemplate">
					<Setter.Value>
						<DataTemplate>
							<c:Icon
								Source="{Binding}"
								Size="{Binding FontSize, RelativeSource={RelativeSource FindAncestor, AncestorType=RepeatButton, AncestorLevel=1}}"
								Foreground="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType=RepeatButton, AncestorLevel=1}}"
								/>
						</DataTemplate>
					</Setter.Value>
				</Setter>
				<Style.Triggers>
					<DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType=Canvas, AncestorLevel=1}}" Value="False">
						<Setter Property="Visibility" Value="Collapsed" />
					</DataTrigger>
					<Trigger Property="IsMouseOver" Value="True">
						<Setter Property="Foreground" Value="{DynamicResource TextSecondary}" />
					</Trigger>
					<Trigger Property="IsPressed" Value="True">
						<Trigger.EnterActions>
							<BeginStoryboard>
								<Storyboard>
									<DoubleAnimation
										EasingFunction="{StaticResource EaseOutExpo}"
										Storyboard.TargetProperty="FontSize"
										From="{StaticResource SpinnerCaretIconSize}"
										To="{StaticResource SpinnerCaretIconPressedSize}"
										Duration="{StaticResource BaseAnimationDuration}"
									/>
								</Storyboard>
							</BeginStoryboard>
						</Trigger.EnterActions>
						<Trigger.ExitActions>
							<BeginStoryboard>
								<Storyboard>
									<DoubleAnimation
										EasingFunction="{StaticResource EaseOutExpo}"
										Storyboard.TargetProperty="FontSize"
										From="{StaticResource SpinnerCaretIconPressedSize}"
										To="{StaticResource SpinnerCaretIconSize}"
										Duration="{StaticResource BaseAnimationDuration}"
									/>
								</Storyboard>
							</BeginStoryboard>
						</Trigger.ExitActions>
					</Trigger>
				</Style.Triggers>
			</Style>
			<Style x:Key="SpinnerButtonUp" BasedOn="{StaticResource SpinnerButton}" TargetType="RepeatButton">
				<Setter Property="Padding" Value="0,4,0,0" />
				<Setter Property="Canvas.Top" Value="0" />
				<Setter Property="Content" Value="{StaticResource Icon:CaretUp}" />
			</Style>
			<Style x:Key="SpinnerButtonDown" BasedOn="{StaticResource SpinnerButton}" TargetType="RepeatButton">
				<Setter Property="Padding" Value="0,0,0,4" />
				<Setter Property="Canvas.Bottom" Value="0" />
				<Setter Property="Content" Value="{StaticResource Icon:CaretDown}" />
			</Style>
		</ResourceDictionary>
	</c:BaseFlyout.Resources>

	<Grid>
		<Grid m:GridDef.Column="*,1,*">
			<Rectangle Style="{StaticResource SelectionBase}" />
			<Canvas
				x:Name="NoteNameWrapper"
				Grid.Column="0"
				PreviewMouseWheel="{m:EventBinding Command=NoteNameSpinCommand, CommandParameter=$e.Delta}"
				Style="{StaticResource ListViewWrapperWrapper}"
				>
				<Canvas Style="{StaticResource ListViewWrapper}">
					<c:PitchPickerFlyoutListView
						x:Name="NoteNameListView"
						d:ItemsSource="{Binding NoteNames}"
						ItemClick="{m:EventBinding Command=NoteNameChangeCommand, CommandParameter=$this.Content}"
						ItemsSource="{Binding DisplayNoteNames, ElementName=View}"
						Style="{StaticResource ListView}"
						/>
				</Canvas>
				<RepeatButton
					Style="{StaticResource SpinnerButtonUp}"
					CommandParameter="{StaticResource SpinUpDelta}"
					Command="{Binding NoteNameSpinCommand}"
					
					/>
				<RepeatButton
					Style="{StaticResource SpinnerButtonDown}"
					CommandParameter="{StaticResource SpinDownDelta}"
					Command="{Binding NoteNameSpinCommand}"
					/>
			</Canvas>
			<Line Style="{StaticResource ListViewSeparator}" />
			<Canvas
				x:Name="OctaveWrapper"
				Grid.Column="2"
				PreviewMouseWheel="{m:EventBinding Command=OctaveSpinCommand, CommandParameter=$e.Delta}"
				Style="{StaticResource ListViewWrapperWrapper}"
				>
				<Canvas Style="{StaticResource ListViewWrapper}">
					<c:PitchPickerFlyoutListView
						x:Name="OctaveListView"
						ItemClick="{m:EventBinding Command=OctaveChangeCommand, CommandParameter=$this.Content}"
						ItemsSource="{Binding Octaves}"
						Style="{StaticResource ListView}"
						/>
				</Canvas>
				<RepeatButton
					Style="{StaticResource SpinnerButtonUp}"
					CommandParameter="{StaticResource SpinUpDelta}"
					Command="{Binding OctaveSpinCommand}"
					/>
				<RepeatButton
					Style="{StaticResource SpinnerButtonDown}"
					CommandParameter="{StaticResource SpinDownDelta}"
					Command="{Binding OctaveSpinCommand}"
					/>
			</Canvas>
		</Grid>
		<Grid Style="{StaticResource ColumnGridSelectionMasked}" m:GridDef.Column="*,1,*" d:Visibility="Collapsed">
			<Border Grid.Column="0">
				<Canvas Style="{StaticResource ListViewWrapper}" Focusable="False">
					<c:PitchPickerFlyoutListView
						d:ItemsSource="{Binding NoteNames}"
						ItemsSource="{Binding DisplayNoteNames, ElementName=View}"
						Style="{StaticResource ListViewSelectionMasked}"
						Canvas.Top="{Binding (Canvas.Top), ElementName=NoteNameListView}"
						/>
				</Canvas>
			</Border>
			<Border Grid.Column="2">
				<Canvas Style="{StaticResource ListViewWrapper}" Focusable="False">
					<c:PitchPickerFlyoutListView
						ItemsSource="{Binding Octaves}"
						Style="{StaticResource ListViewSelectionMasked}"
						Canvas.Top="{Binding (Canvas.Top), ElementName=OctaveListView}"
						/>
				</Canvas>
			</Border>
		</Grid>
	</Grid>
</c:BaseFlyout>
