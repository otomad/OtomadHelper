/**
 * 音 MAD 助手，旨在使 Vegas 接受 MIDI 序列文件作为输入，自动生成音 MAD / YTPMV 的轨道。
 * Vegas 16 及以上的版本支持所有功能，Vegas 13 及以上的版本可以兼容运行。
 * 将本脚本及其它所有附属文件放置在您 Vegas 安装目录下的 Script Menu 文件夹中。
 * 具体说明请参见下方的说明文档链接。
 * 本脚本基于原作者 Chaosinism 的开源代码二次开发，此外使用了 NAudio 库。
 *
 * 新版脚本由兰音重新编写。
 * 在此处获取最新版：https://github.com/otomad/OtomadHelper/releases/latest
 * 更多详情请见仓库地址：https://github.com/otomad/OtomadHelper
 *
 * 开工时间：公元 2021 年 9 月 5 日 星期日，上午 4:14:26
 * Copyright (c) 2021 ~, Ranne
 *
 * 本程序是一个自由的软件，你可以重新分发它，可以魔改它，但要遵守 GPL 3.0 版本或者后续其它版本。
 * 我们希望本程序是有用的，但是我们不保证它能用，不保证它好用，我们不提供任何保证。
 * 更多请见 GPL 全文，如果理解不了，找人话版看看：https://zhuanlan.zhihu.com/p/185628074
 * 按道理你在得到本软件时，应该已经得到了一份 GPL，如果你没找到，写信给自由软件基金会 (FSF)：
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 * 要是嫌运费或漫游费太贵就点击这里吧：https://www.gnu.org/licenses/
 *
 ***********************************************************************************************
 *
 * Otomad Helper for Vegas, which is designed to allow Vegas to accept MIDI files as input,
 * and automatically generate Otomad/YTPMV tracks.
 * Vegas 16 and above support all features, and Vegas 13 and above are compatible to run.
 * Place this script and all other attached files in the Script Menu folder in your Vegas installation directory.
 * See the documentation link for instructions.
 * The script is redeveloped based on the original author Chaosinism's open source code and uses the NAudio library.
 *
 * Get the latest version here: https://github.com/otomad/OtomadHelper/releases/latest
 * Repository link for more details: https://github.com/otomad/OtomadHelper
 *
 * Project start date: Sun, Sep 5th 2021 A.D., 4:14:26 a.m.
 * Copyright (c) 2021 ~, Ranne
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public
 * License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any
 * later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 **/

#define VEGAS_ENVIRONMENT // Vegas 运行环境。取消定义后避免在 Visual Studio 中调试时因缺少环境而导致报错。
#define INTERNATIONALIZED // 启用国际化翻译操作。取消定义后可暂时禁用翻译操作并锁定为简体中文，如不需要翻译时也许可以加快脚本启动速度，但其实也没快多少。
#define PRODUCTION // 用于生产环境。定义后可以吞掉一些无关紧要的错误。取消定义后可以展现一些可能会产生隐患的错误。
// 以下宏定义为版本号标记。如您的软件本体版本号低于这些标记，应注释掉它们。注意若启用高版本号的标记，比它更低的版本号标记必须同时启用。
#define VER_GEQ_16 // Vegas 版本号大于或等于 16。定义后可正常使用调音算法属性等功能。
#define VER_GEQ_14 // Vegas 版本号大于或等于 14。定义后将依赖库切换到 Magix 版本。

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Design;
using System.Drawing.Drawing2D;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Windows.Forms;
using System.Windows.Forms.VisualStyles;
using Microsoft.Win32;
using NAudio.Midi;
using NAudio.Wave;
using NAudio.Wave.SampleProviders;
#if VER_GEQ_14 || VER_GEQ_16
	using ScriptPortal.Vegas;
#else
	using Sony.Vegas;
#endif

namespace Otomad.VegasScript.OtomadHelper.V4 {

	/// <summary>
	/// Vegas 入口类。
	/// </summary>
	public class EntryPoint {
		/// <summary>版本号</summary>
		public static readonly Version VERSION = new Version(4, 27, 29, 0);
		/// <summary>修订日期</summary>
		public static readonly DateTime REVISION_DATE = new DateTime(2023, 3, 29);

		// 配置参数变量
		#region 视频属性
		/**<summary>启　　用</summary>*/ private bool VConfig { get { return configForm.VideoConfigCheck.Checked; } }
		/**<summary>视觉效果</summary>*/ private PvVisualEffectType VConfigEffect { get { return configForm.VideoEffect; } }
		/**<summary>多重效果</summary>*/ private PrveValues VConfigEffects { get { return IsVConfigEffects ? (PrveValues)configForm.VideoEffectCombo.SelectedItem : null; } }
		/**<summary>多重效吗</summary>*/ private bool IsVConfigEffects { get { return configForm.VideoEffectCombo.SelectedItem is PrveValues; } }
		/**<summary>拉　　伸</summary>*/ private StretchType VConfigScratch { get { return (StretchType)configForm.VideoScratchCombo.SelectedIndex; } }
		/**<summary>循　　环</summary>*/ private bool VConfigLoop { get { return configForm.VideoLoopCheck.Checked; } }
		/**<summary>定格首帧</summary>*/ private bool VConfigFreezeFirstFrame { get { return configForm.VideoFreezeFirstFrameCheck.Checked; } }
		/**<summary>定格尾帧</summary>*/ private bool VConfigFreezeLastFrame { get { return configForm.VideoFreezeLastFrameCheck.Checked; } }
		/**<summary>削除空隙</summary>*/ private LegatoMaxGapType VConfigLegato { get { return (LegatoMaxGapType)configForm.VideoLegatoCombo.SelectedIndex; } }
		/**<summary>映射力度</summary>*/ private bool VConfigVelocity { get { return configForm.VideoVelocityCheck.Checked; } }
		/**<summary>渐　　入</summary>*/ private double VConfigFadein { get { return configForm.VideoFadeInBox.DoubleValue; } }
		/**<summary>渐　　出</summary>*/ private double VConfigFadeout { get { return configForm.VideoFadeOutBox.DoubleValue; } }
		/**<summary>渐入时间</summary>*/ private Timecode VConfigFadeinTimecode { get { return Timecode.FromString(configForm.VideoFadeInTimeTxt.Text); } }
		/**<summary>渐出时间</summary>*/ private Timecode VConfigFadeoutTimecode { get { return Timecode.FromString(configForm.VideoFadeOutTimeTxt.Text); } }
		/**<summary>渐定形式</summary>*/ private SetFadeByType VConfigSetFadeBy { get { return configForm.VideoFadeSetAsTimecodeRadio.Checked ? SetFadeByType.TIMECODE : SetFadeByType.PERCENT; } }
		/**<summary>发　　光</summary>*/ private double VConfigGlow { get { return configForm.VideoGlowBox.DoubleValue; } }
		/**<summary>发光亮度</summary>*/ private double VConfigGlowBright { get { return configForm.VideoGlowBrightBox.DoubleValue; } }
		/**<summary>起始尺寸</summary>*/ private float VConfigStartSize { get { return configForm.VideoStartSizeBox.FloatValue; } }
		/**<summary>终止尺寸</summary>*/ private float VConfigEndSize { get { return configForm.VideoEndSizeBox.FloatValue; } }
		/**<summary>起始旋转</summary>*/ private float VConfigStartRotation { get { return (float)(configForm.VideoStartRotationBox.DoubleValue * Math.PI / 180); } }
		/**<summary>终止旋转</summary>*/ private float VConfigEndRotation { get { return (float)(configForm.VideoEndRotationBox.DoubleValue * Math.PI / 180); } }
		/**<summary>起始水平位移</summary>*/ private float VConfigStartHTrans { get { return configForm.VideoStartHorizontalTransBox.FloatValue; } }
		/**<summary>终止水平位移</summary>*/ private float VConfigEndHTrans { get { return configForm.VideoEndHorizontalTransBox.FloatValue; } }
		/**<summary>起始垂直位移</summary>*/ private float VConfigStartVTrans { get { return configForm.VideoStartVerticalTransBox.FloatValue; } }
		/**<summary>终止垂直位移</summary>*/ private float VConfigEndVTrans { get { return configForm.VideoEndVerticalTransBox.FloatValue; } }
		/**<summary>起始色相</summary>*/ private double VConfigStartHue { get { return configForm.VideoStartHueBox.DoubleValue; } }
		/**<summary>终止色相</summary>*/ private double VConfigEndHue { get { return configForm.VideoEndHueBox.DoubleValue; } }
		/**<summary>起始饱和</summary>*/ private double VConfigStartSaturation { get { return configForm.VideoStartSaturationBox.DoubleValue; } }
		/**<summary>终止饱和</summary>*/ private double VConfigEndSaturation { get { return configForm.VideoEndSaturationBox.DoubleValue; } }
		/**<summary>起始对比</summary>*/ private double VConfigStartContrast { get { return configForm.VideoStartContrastBox.DoubleValue; } }
		/**<summary>终止对比</summary>*/ private double VConfigEndContrast { get { return configForm.VideoEndContrastBox.DoubleValue; } }
		/**<summary>起始阈值</summary>*/ private double VConfigStartThreshold { get { return configForm.VideoStartThresholdBox.DoubleValue; } }
		/**<summary>终止阈值</summary>*/ private double VConfigEndThreshold { get { return configForm.VideoEndThresholdBox.DoubleValue; } }
		/**<summary>起始尺寸曲线</summary>*/ private VideoKeyframeType VConfigStartSizeCurve { get { return GetVideoKeyframeType(configForm.VideoStartSizeCurveCombo.SelectedIndex); } }
		/**<summary>渐入曲线</summary>*/ private CurveType VConfigFadeinCurve { get { return GetCurveType(configForm.VideoFadeInCurveCombo.SelectedIndex); } }
		/**<summary>渐出曲线</summary>*/ private CurveType VConfigFadeoutCurve { get { return GetCurveType(configForm.VideoFadeOutCurveCombo.SelectedIndex); } }
		/**<summary>发光曲线</summary>*/ private OFXInterpolationType VConfigGlowCurve { get { return GetOFXInterpolationType(configForm.VideoGlowCurveCombo.SelectedIndex); } }
		/**<summary>起始色相曲线</summary>*/ private OFXInterpolationType VConfigStartHueCurve { get { return GetOFXInterpolationType(configForm.VideoStartHueCurveCombo.SelectedIndex); } }
		/**<summary>起始色相曲线</summary>*/ private OFXInterpolationType VConfigStartSaturationCurve { get { return GetOFXInterpolationType(configForm.VideoStartSaturationCurveCombo.SelectedIndex); } }
		/**<summary>起始对比曲线</summary>*/ private OFXInterpolationType VConfigStartContrastCurve { get { return GetOFXInterpolationType(configForm.VideoStartContrastCurveCombo.SelectedIndex); } }
		/**<summary>起始阈值曲线</summary>*/ private OFXInterpolationType VConfigStartThresholdCurve { get { return GetOFXInterpolationType(configForm.VideoStartThresholdCurveCombo.SelectedIndex); } }
		/**<summary>视觉初值</summary>*/ private int VConfigInitialValue { get { return configForm.VideoEffectInitialValueCombo.SelectedIndex; } }
		/**<summary>复音多轨</summary>*/ private bool VConfigMultitrack { get { return configForm.VideoMultitrackForChordsCheck.Checked || SheetConfig; } }
		/**<summary>滑音效果</summary>*/ private bool VConfigGlissando { get { return configForm.VideoGlissandoCheck.Checked; } }
		/**<summary>滑音大小</summary>*/ private double VConfigGlissandoAmount { get { return (double)configForm.VideoGlissandoBox.Value; } }
		/**<summary>首选轨道</summary>*/ private PreferredTrackWrapper<VideoTrack> VConfigPreferredTrack { get { return configForm.VideoPreferredTrackCombo.SelectedItem as PreferredTrackWrapper<VideoTrack>; } }
		#endregion

		#region 音频属性
		/**<summary>启　　用</summary>*/ private bool AConfig { get { return configForm.AudioConfigCheck.Checked; } }
		/**<summary>拉　　伸</summary>*/ private StretchType AConfigScratch { get { return (StretchType)configForm.AudioScratchCombo.SelectedIndex; } }
		/**<summary>循　　环</summary>*/ private bool AConfigLoop { get { return configForm.AudioLoopCheck.Checked; } }
		/**<summary>标准音量</summary>*/ private bool AConfigNormalize { get { return configForm.AudioNormalizeCheck.Checked; } }
		/**<summary>定格尾帧</summary>*/ private bool AConfigFreezeLastFrame { get { return configForm.AudioFreezeLastFrameCheck.Checked; } }
		/**<summary>连　　奏</summary>*/ private LegatoMaxGapType AConfigLegato { get { return (LegatoMaxGapType)configForm.AudioLegatoCombo.SelectedIndex; } }
		/**<summary>自动声像</summary>*/ private bool AConfigAutoPan { get { return configForm.AudioAutoPanCheck.Checked; } }
		/**<summary>声像曲线</summary>*/ private CurveType AConfigAutoPanCurve { get { return GetCurveType(configForm.AudioAutoPanCurveCombo.SelectedIndex); } }
		/**<summary>映射力度</summary>*/ private bool AConfigVelocity { get { return configForm.AudioVelocityCheck.Checked; } }
		/**<summary>渐　　入</summary>*/ private double AConfigFadein { get { return configForm.AudioFadeInBox.DoubleValue; } }
		/**<summary>渐　　出</summary>*/ private double AConfigFadeout { get { return configForm.AudioFadeOutBox.DoubleValue; } }
		/**<summary>渐入时间</summary>*/ private Timecode AConfigFadeinTimecode { get { return Timecode.FromString(configForm.AudioFadeInTimeTxt.Text); } }
		/**<summary>渐出时间</summary>*/ private Timecode AConfigFadeoutTimecode { get { return Timecode.FromString(configForm.AudioFadeOutTimeTxt.Text); } }
		/**<summary>渐定形式</summary>*/ private SetFadeByType AConfigSetFadeBy { get { return configForm.AudioFadeSetAsTimecodeRadio.Checked ? SetFadeByType.TIMECODE : SetFadeByType.PERCENT; } }
		/**<summary>渐入曲线</summary>*/ private CurveType AConfigFadeinCurve { get { return GetCurveType(configForm.AudioFadeInCurveCombo.SelectedIndex); } }
		/**<summary>渐出曲线</summary>*/ private CurveType AConfigFadeoutCurve { get { return GetCurveType(configForm.AudioFadeOutCurveCombo.SelectedIndex); } }
		/**<summary>原始音高</summary>*/ private int AConfigBasePitch { get { return configForm.BasePitch; } }
		/**<summary>调音方法</summary>*/ private AudioTuneMethod AConfigMethod { get { return (AudioTuneMethod)configForm.AudioTuneMethodCombo.SelectedIndex; } }
		#if VER_GEQ_16
		/**<summary>弹性属性</summary>*/ private ElastiqueStretchAttributes? AConfigElastiqueAttr { get { return AConfigMethod == AudioTuneMethod.ELASTIQUE ?
			(ElastiqueStretchAttributes?)configForm.AudioStretchAttrCombo.SelectedIndex : null; } }
		/**<summary>古典属性</summary>*/ private ClassicStretchAttributes? AConfigClassicAttr { get { return AConfigMethod == AudioTuneMethod.CLASSIC ?
			(ClassicStretchAttributes?)configForm.AudioStretchAttrCombo.SelectedIndex : null; } }
		#endif
		/**<summary>伸缩变调</summary>*/ private bool AConfigLockStretchPitch { get { return configForm.AudioLockStretchPitchCheck.Checked; } }
		/**<summary>保留共振</summary>*/ private bool AConfigReserveFormant { get { return configForm.AudioReserveFormantCheck.Checked; } }
		/**<summary>创建分组</summary>*/ private bool ConfigCreateEventGroup { get { return configForm.CreateEventGroupInAudioCheck.Checked; } }
		/**<summary>复音多轨</summary>*/ private bool AConfigMultitrack { get { return configForm.AudioMultitrackForChordsCheck.Checked; } }
		/**<summary>首选轨道</summary>*/ private PreferredTrackWrapper<AudioTrack> AConfigPreferredTrack { get { return configForm.AudioPreferredTrackCombo.SelectedItem as PreferredTrackWrapper<AudioTrack>; } }
		#endregion

		#region 迷笛属性
		/**<summary>音　　轨</summary>*/ public MidiChannels MidiConfigTracks;
		/**<summary>起始时间</summary>*/ private double MidiConfigStartTime { get { return configForm.MidiStartSecondBox.DoubleValue; } }
		/**<summary>终止时间</summary>*/ private double MidiConfigEndTime { get { return configForm.MidiEndSecondBox.DoubleValue; } }
		/**<summary>迷笛变速</summary>*/ private bool MidiUseDynamicMidiBpm { get { return configForm.MidiDynamicMidiBpmCheck.Checked; } }
		/**<summary>迷笛速度</summary>*/ private bool MidiUseMidiBpm { get { return configForm.MidiMidiBpmCheck.Checked; } }
		/**<summary>项目速度</summary>*/ private bool MidiUseProjectBpm { get { return configForm.MidiProjectBpmCheck.Checked; } }
		/**<summary>自拟速度</summary>*/ private bool MidiUseCustomBpm { get { return configForm.MidiCustomBpmCheck.Checked; } }
		/**<summary>变速形式</summary>*/ private int MidiUseDynamicMidiBpmForm { get { return configForm.MidiDynamicMidiBpmFormCombo.SelectedIndex; } }
		/**<summary>限长模式</summary>*/ private RestrictLengthModeType RestrictLengthMode { get { return configForm.RestrictLengthMode; } }
		/**<summary>限长大小</summary>*/ private double RestrictLengthValue { get { return configForm.RestrictLengthBox.DoubleValue; } }
		#endregion

		#region 媒体属性
		/**<summary>起始时间</summary>*/ private double SourceConfigStartTime { get { return configForm.SourceStartTimeText.DoubleValue; } }
		/**<summary>终止时间</summary>*/ private double SourceConfigEndTime { get { return configForm.SourceStartTimeText.DoubleValue; } }
		/**<summary>素材来源</summary>*/ private MediaSourceFrom SourceConfigFrom { get { return (MediaSourceFrom)configForm.ChooseSourceCombo.SelectedIndex; } }
		/**<summary>生成位置</summary>*/ private GenerateAt GenerateAt { get { return configForm.GenerateAt; } }
		/**<summary>顶层调整下方</summary>*/ private bool GenerateBelowTopAdjustmentTrack { get { return configForm.BelowTopAdjustmentTrackCheck.Checked; } }
		/**<summary>移除源轨事件</summary>*/ private bool RemoveSourceTrackEvents { get { return configForm.RemoveSourceTrackEventsCheck.Checked; } }
		/**<summary>全选生成事件</summary>*/ private bool SelectAllGeneratedEvents { get { return configForm.SelectAllGeneratedEventsCheck.Checked; } }
		/**<summary>自定生成位置</summary>*/ private Timecode GenerateAtCustomTimecode { get { return configForm.GenerateAtCustomTimecode; } }
		/**<summary>上次媒体目录</summary>*/ public string lastMediaDirectory {
			get { return configIni.Read("LastMediaDirectory", "", "Source"); }
			set { configIni.Write("LastMediaDirectory", value, "Source"); }
		}
		/**<summary>上次迷笛目录</summary>*/ public string lastMidiDirectory {
			get { return configIni.Read("LastMidiDirectory", "", "Source"); }
			set { configIni.Write("LastMidiDirectory", value, "Source"); }
		}
		#endregion

		#region 五线谱属性
		/**<summary>启　　用</summary>*/ private bool SheetConfig { get { return configForm.StaffVisualizerConfigCheck.Checked; } }
		/**<summary>生成谱面</summary>*/ private bool SheetConfigGenerateStaffLines { get { return configForm.StaffGenerateLinesCheck.Checked; } }
		/**<summary>相对位置</summary>*/ private bool SheetConfigRelative { get { return configForm.StaffRelativeValueCheck.Checked; } }
		/**<summary>谱左边距</summary>*/ private int SheetConfigPaddingLeft { get { return (int)configForm.StaffSurfacePaddingLeftBox.Value; } }
		/**<summary>谱右边距</summary>*/ private int SheetConfigPaddingRight { get { return (int)configForm.StaffSurfacePaddingRightBox.Value; } }
		/**<summary>谱面位置</summary>*/ private int SheetConfigPosition { get { return (int)configForm.StaffSurfacePositionBox.Value; } }
		/**<summary>谱线间距</summary>*/ private int SheetConfigGap { get { return (int)configForm.StaffLineSpacingBox.Value; } }
		/**<summary>谱　　号</summary>*/ private int SheetConfigCelf { get { return configForm.StaffClefCombo.SelectedIndex; } }
		/**<summary>谱线粗细</summary>*/ private int SheetConfigThickness { get { return (int)configForm.StaffLineThicknessBox.Value; } }
		/**<summary>谱线颜色</summary>*/ private Color SheetConfigLineColor { get { return configForm.StaffLineColorBtn.Color; } }
		/**<summary>谱号颜色</summary>*/ private Color SheetConfigClefColor { get { return configForm.StaffClefColorBtn.Color; } }
		/**<summary>谱号缩放</summary>*/ private double SheetConfigClefScale { get { return (double)configForm.StaffClefScaleBox.Value; } }
		/**<summary>生成谱号</summary>*/ private bool SheetConfigGenerateStaffClef { get { return configForm.StaffGenerateClefCheck.Checked; } }
		/**<summary>定格符尾</summary>*/ private bool SheetConfigFreezeAtNoteOff { get { return configForm.StaffFreezeAtNoteOffCheck.Checked; } }
		/**<summary>音符偏移</summary>*/ private int SheetConfigShift { get { return (int)configForm.StaffNotesShiftBox.Value; } }
		/**<summary>旧版定位</summary>*/ private bool UseLegacySheetMethod { get { return configForm.StaffLegacyMethodCheck.Checked; } } // 使用轨道运动方式放置音符位置
		#endregion

		#region YTP 属性
		/**<summary>启　　用</summary>*/ private bool YtpConfig { get { return configForm.IsGenerateYtp; } }
		/**<summary>最小长度</summary>*/ private int YtpConfigMinLen { get { return (int)configForm.YtpMinLenBox.Value; } }
		/**<summary>最大长度</summary>*/ private int YtpConfigMaxLen { get { return (int)configForm.YtpMaxLenBox.Value; } }
		/**<summary>剪辑数目</summary>*/ private int YtpConfigClipsCount { get { return (int)configForm.YtpClipsCountBox.Value; } }
		/**<summary>启用效果</summary>*/ private YtpEffectType[] YtpConfigEffects { get { return configForm.selectedYtpEffects; } }
		#endregion

		#region 声呐属性
		/**<summary>启　　用</summary>*/ private bool SonarConfig { get { return configForm.SonarConfigCheck.Checked; } }
		/**<summary>分离鼓声</summary>*/ private bool SonarConfigSeparateDrums { get { return configForm.SeparateDrumsCheck.Checked; } }
		/**<summary>差值混合</summary>*/ private bool SonarConfigDifferenceCompositeMode { get { return configForm.DifferenceCompositeModeCheck.Checked; } }
		/**<summary>阴　　影</summary>*/ private bool SonarConfigShadow { get { return configForm.TrackShadowCheck.Checked; } }
		/**<summary>阴影颜色</summary>*/ private Color SonarConfigShadowColor { get { return configForm.TrackShadowColorBtn.Color; } }
		/**<summary>声呐项目</summary>*/ private List<SonarItem> SonarConfigItems { get { return configForm.SonarList.Items.Cast<SonarItem>().ToList(); } }
		#endregion

		// 实例对象变量
		public ConfigForm configForm;
		public Vegas vegas;
		public ConfigIni configIni;
		private ProgressForm progressForm;
		internal static EntryPoint instance;
		private readonly List<VideoTrack> generatedVideoTracks = new List<VideoTrack>();
		private bool requestShowProgress = false;
		private Media sonarSolidColor = null;
		private List<Track> assignedSonarTracks = new List<Track>();
		private int? nextTrackIndex = null;

		// 媒体 / MIDI 参数变量
		internal MIDI midi = null;
		internal Media media = null;
		private double audioLength = 0;
		private double videoLength = 0;
		private bool IsFromSelectedMedia { get { return SourceConfigFrom == MediaSourceFrom.SELECTED_MEDIA; } }
		private bool IsFromSelectedClip { get { return SourceConfigFrom == MediaSourceFrom.SELECTED_CLIP; } }
		private bool IsFromBrowseFile { get { return SourceConfigFrom == MediaSourceFrom.BROWSE_FILE; } }
		internal EventSet selectedEventSet = new EventSet();
		public double ProjectBpm { get { return vegas.Project.Ruler.BeatsPerMinute; } }
		private AutoLayoutTracksInfos LayoutInfos { get { return configForm.IsMultiMidiChannel ? configForm.layoutInfos : null; } }
		private bool IsMultiMidiChannel { get { return MidiConfigTracks.IsMultiMidiChannel; } }
		private bool IsNativeProgressDialogStyle { get { return !configForm.enableLegacyProgressDialogToolStripMenuItem.Checked; } }
		private bool IsVPreferredTrack { get { return VConfigPreferredTrack != null && VConfigPreferredTrack.Track != null; } }
		private bool IsAPreferredTrack { get { return AConfigPreferredTrack != null && AConfigPreferredTrack.Track != null; } }

		/// <summary>
		/// 根据主音高名称转换为主音高对应的值。
		/// </summary>
		/// <param name="key">音名</param>
		/// <param name="oct">八度</param>
		/// <returns>主音高结果值</returns>
		public static int PitchMap(string key, string oct) {
			List<string> keys = new List<string>("C,C#,D,D#,E,F,F#,G,G#,A,A#,B".Split(','));
			int value = keys.IndexOf(key) + int.Parse(oct) * 12;
			return value;
		}

		/// <summary>
		/// 根据音符音高获取这是五线谱上的第几根线。
		/// </summary>
		public static readonly int[] StaffPitchMap = { 0, 0, 1, 1, 2, 3, 3, 4, 4, 5, 5, 6 };

		/// <summary>
		/// 打开参数配置设置对话框。
		/// </summary>
		/// <returns>对话框最后选择的按钮是 <c>“完成” (true)</c> 还是 <c>“取消” (false)</c>。</returns>
		public bool ShowConfigForm() {
			requestRestartScript = false; // 取消请求重启脚本
			configForm = configForm ?? new ConfigForm(this);
			#if SWALLOW_DIALOG_ERROR
			try {
				configForm.ShowDialog();
			} catch (Exception) { return false; }
			#else
			configForm.ShowDialog();
			#endif
			Type helper = configForm.RequestToShowHelperDialog;
			if (helper != null) {
				configForm.IsIrreversibleCancel = true;
				(Activator.CreateInstance(helper, new object[] { this }) as Form).ShowDialog();
				if (!configForm.CloseAfterOpenHelperCheck.Checked) requestRestartScript = true;
			}
			Type datamosh = configForm.RequestToDatamosh;
			if (datamosh != null) {
				configForm.IsIrreversibleCancel = true;
				(Activator.CreateInstance(datamosh) as Datamosh.IDatamosh).Main(vegas, this);
				if (!configForm.CloseAfterOpenMoshCheck.Checked) requestRestartScript = true;
			}
			if (requestRestartScript) vegas.UpdateUI();
			vegas.Transport.CursorPosition = configForm.originalCursorPosition;
			return configForm.AcceptConfig;
		}

		/// <summary>
		/// 打开选择 MIDI 文件对话框。
		/// </summary>
		/// <returns>打开的 MIDI 文件路径。如果点击取消则返回空字符串。</returns>
		internal string SelectMidiFile() {
			#region 选择一个 MIDI 文件
			OpenFileDialog openFileDialog = new OpenFileDialog {
				Filter = GetOpenFileDialogFilter(Lang.str.midi_file_name, "*.mid;*.midi", Lang.str.all_files, "*.*"),
				// RestoreDirectory = true,
				FilterIndex = 1,
				Title = Lang.str.choose_a_midi_file,
				InitialDirectory = lastMidiDirectory,
			};
			if (openFileDialog.ShowDialog() != DialogResult.OK) return "";
			lastMidiDirectory = new Path(openFileDialog.FileName).Directory;
			return openFileDialog.FileName;
			#endregion
		}

		internal bool OpenMidiFile(string filePath, out MIDI outMidi, bool inSilence = false) {
			outMidi = null;
			if (string.IsNullOrWhiteSpace(filePath)) return false;
			MIDI _midi;
			try {
				_midi = new MIDI(filePath);
			} catch (Exception e) {
				if (!inSilence) ShowError(new Exceptions.NotAMidiFileException(), e);
				return false;
			}
			if (_midi.TrackInfos.Length == 0) {
				ShowError(new Exceptions.NoTrackInfoException());
				return false;
			}
			outMidi = midi = _midi;
			return true;
		}

		private bool OpenMedia(Media media) {
			try {
				this.media = media;
				audioLength = videoLength = media.Length.ToMilliseconds();
			} catch (Exception e) {
				ShowError(new Exceptions.NoMediaTakeException(), e);
				this.media = null;
				return false;
			}
			return true;
		}
		internal bool OpenMedia(string clipName) {
			Exception e;
			if (!TestMediaValid(clipName, out e, ref audioVideoEnabledTable.FromBrowseFile.AudioEnabled, ref audioVideoEnabledTable.FromBrowseFile.VideoEnabled)) {
				ShowError(new Exceptions.NoMediaTakeException(), e);
				return false;
			}
			try {
				vegas.ImportFile(clipName, true);
			} catch (Exception ee) { ShowError(new Exceptions.NoMediaTakeException(), ee); return false; }
			Media media = vegas.Project.MediaPool.Find(clipName);
			this.media = media;
			audioLength = videoLength = media.Length.ToMilliseconds();
			return true;
		}

		/// <summary>
		/// 测试媒体文件是否合法。
		/// </summary>
		/// <param name="clipName">媒体文件路径。</param>
		/// <param name="exception">如果失败的报错信息。</param>
		/// <param name="hasAudio">是否包含音频部分。</param>
		/// <param name="hasVideo">是否包含视频部分。</param>
		/// <returns>媒体是否合法的布尔值。</returns>
		public bool TestMediaValid(string clipName, out Exception exception, ref bool hasAudio, ref bool hasVideo) {
			int originalMediaCount = vegas.Project.MediaPool.Count;
			bool valid = true;
			exception = null;
			try {
				vegas.ImportFile(clipName, true);
			} catch (Exception e) {
				valid = false;
				exception = e;
			}
			if (valid) {
				Media media = vegas.Project.MediaPool.Find(clipName);
				try {
					double length = media.Length.ToMilliseconds();
					hasAudio = media.HasAudio();
					hasVideo = media.HasVideo();
				} catch (Exception e) {
					valid = false;
					exception = e;
				}
			}
			bool isNewFile = originalMediaCount != vegas.Project.MediaPool.Count;
			if (isNewFile) vegas.Project.MediaPool.Remove(clipName);
			return valid;
		}
		/// <summary>
		/// 测试媒体文件是否合法。
		/// </summary>
		/// <param name="clipName">媒体文件路径。</param>
		/// <param name="hasAudio">是否包含音频部分。</param>
		/// <param name="hasVideo">是否包含视频部分。</param>
		/// <returns>媒体是否合法的布尔值。</returns>
		public bool TestMediaValid(string clipName, ref bool hasAudio, ref bool hasVideo) {
			Exception _;
			return TestMediaValid(clipName, out _, ref hasAudio, ref hasVideo);
		}

		/// <summary>
		/// 打开选择媒体文件对话框。
		/// </summary>
		/// <returns>选定文件的路径。如果点击取消则返回空字符串。</returns>
		internal string SelectVideoClip() {
			#region 选择一个视频剪辑
			OpenFileDialog openFileDialog = new OpenFileDialog {
				// InitialDirectory = @"C:\",
				Filter = GetOpenFileDialogFilter(Lang.str.media_file_name, MEDIA_EXTENSION, Lang.str.all_files, "*.*"),
				// openFileDialog.RestoreDirectory = true,
				FilterIndex = 1,
				Title = Lang.str.choose_a_source_file,
				InitialDirectory = lastMediaDirectory
			};
			if (openFileDialog.ShowDialog() != DialogResult.OK) return "";
			string clipName = openFileDialog.FileName;
			lastMediaDirectory = new Path(clipName).Directory;
			#endregion
			return SelectVideoClip(clipName);
		}

		internal string SelectVideoClip(string clipName) {
			Exception e;
			if (!TestMediaValid(clipName, out e, ref audioVideoEnabledTable.FromBrowseFile.AudioEnabled, ref audioVideoEnabledTable.FromBrowseFile.VideoEnabled)) {
				ShowError(new Exceptions.NoMediaTakeException(), e);
				return "";
			}
			return clipName;
		}

		/// <summary>
		/// 获取文件打开对话框的文件格式筛选值。
		/// </summary>
		/// <param name="exts">类型名称与类型扩展名交替填写，参数数目必须为 2 的倍数。如果扩展名有多个，以分号隔开。</param>
		/// <returns>文件格式筛选值</returns>
		internal static string GetOpenFileDialogFilter(params string[] exts) {
			return string.Join("|", exts);
		}

		internal const string MEDIA_EXTENSION =
			"*.veg;*.mp4;*.mpg;*.jpg;*.avi;*.aaf;*.cda;*.aa3;*.oma;*.aif;*.aiff;*.snd;*.vox;*.flac;*.gif;*.mov;*.m2t;*.ts;" +
			"*.mts;*.m2ts;*.jpe;*.jpeg;*.mkv;*.avc;*.bsf;*.264;*.mpeg;*.mmv;*.m1p;*.m1a;*.m2p;*.mp3;*.au;*.ogg;*.png;*.qt;" +
			"*.dv;*.tif;*.tiff;*.wav;*.sfa;*.dlx;*.mxf;*.pca;*.w64;*.dig;*.sd;*.tga;*.targa;*.bmp;*.dib;*.wma;*.wmv;*.asf;" +
			"*.ico;*.rle;*.psd;*.icon";

		/// <summary>
		/// 显示报错信息。
		/// </summary>
		public static void ShowError(string str, ShowErrorState state = ShowErrorState.NORMAL) {
			instance.vegas.ShowError(str);
			DoingAfterShowError(state);
		}
		public static void ShowError(Exception e, ShowErrorState state = ShowErrorState.NORMAL) {
			instance.vegas.ShowError(e.Message);
			DoingAfterShowError(state);
		}
		public static void ShowError(Exception e1, Exception e2, ShowErrorState state = ShowErrorState.NORMAL) {
			instance.vegas.ShowError(e1.Message, e2.ToString());
			DoingAfterShowError(state);
		}
		public static void ShowError2(string str) {
			MessageBox.Show(str, Lang.str.error, MessageBoxButtons.OK, MessageBoxIcon.Error);
		}
		public static void ShowError2(Exception e) {
			ShowError2(e.ToString());
		}
		public static void ShowError2(Exception e1, Exception e2) {
			ShowError2(e1.Message + "\n\n" + Lang.str.details + "\n" + e2.ToString());
		}
		private string GetExceptionInfo(Exception e) {
			return e.Message + "\n" + e.StackTrace + "\n" + e.ToString();
		}
		private static void DoingAfterShowError(ShowErrorState state) {
			if (state == ShowErrorState.SILENCE) return;
			if (instance.progressForm != null) instance.progressForm.Close();
			if (state == ShowErrorState.NORMAL) {
				if (instance.configForm != null) instance.configForm.FocusOn(null, null);
				#if PRODUCTION && false // 开发模式下别乱删配置文件。
					instance.configIni.Delete(true);
				#endif
			}
		}

		public class AudioVideoEnabledTable {
			public struct AudioVideoEnabledGroup {
				public bool AudioEnabled;
				public bool VideoEnabled;
			}
			public AudioVideoEnabledGroup FromSelectedMedia;
			public AudioVideoEnabledGroup FromSelectedClip;
			public AudioVideoEnabledGroup FromBrowseFile;
			public bool SelectNoMedia { get { return !FromSelectedMedia.AudioEnabled && !FromSelectedMedia.VideoEnabled; } }
			public bool SelectNoEvents { get { return !FromSelectedClip.AudioEnabled && !FromSelectedClip.VideoEnabled; } }
			public string SelectMediaName = "";
			public string SelectClipName = "";
			public AudioVideoEnabledTable(EntryPoint p) {
				Media[] selectedMedia = p.vegas.Project.MediaPool.GetSelectedMedia();
				if (selectedMedia.Length != 0) {
					Media media = selectedMedia[0];
					FromSelectedMedia.AudioEnabled = media.HasAudio();
					FromSelectedMedia.VideoEnabled = media.HasVideo();
					SelectMediaName = new Path(media.FilePath).FullFileName;
				}
				p.GetSelectedEventSet();
				FromSelectedClip.AudioEnabled = p.selectedEventSet.audioEvent != null;
				FromSelectedClip.VideoEnabled = p.selectedEventSet.videoEvent != null;
				int differ = ((FromSelectedClip.AudioEnabled ? 1 : 0) + (FromSelectedClip.VideoEnabled ? 1 : 0))
					- ((FromSelectedMedia.AudioEnabled ? 1 : 0) + (FromSelectedMedia.VideoEnabled ? 1 : 0));
				p.SuggestSelectedSourceFrom = // 下方阐述中“拥有轨道种类数目”乃拟定用词，如既拥有视频轨又拥有音轨则为 2，仅拥有视频轨或音轨之一则为 1，如果两个轨道均没有则为 0．
					differ > 0 ? MediaSourceFrom.SELECTED_CLIP : // 如果选定轨道素材中拥有轨道种类数目大于选定项目媒体素材中拥有轨道种类数目，则在素材来源设置中默认选中使用“选中的轨道素材”。
					differ < 0 ? MediaSourceFrom.SELECTED_MEDIA : // 如果选定轨道素材中拥有轨道种类数目小于选定项目媒体素材中拥有轨道种类数目，则在素材来源设置中默认选中使用“选中的媒体文件”。
					MediaSourceFrom.LAST_USER_PREFERENCE; // 如果选定轨道素材中拥有轨道种类数目等于选定项目媒体素材中拥有轨道种类数目，则由用户上一次选择的选项决定。
				if (!FromSelectedClip.AudioEnabled && !FromSelectedClip.VideoEnabled &&
					!FromSelectedMedia.AudioEnabled && !FromSelectedMedia.VideoEnabled)
					p.SuggestSelectedSourceFrom = MediaSourceFrom.NOTHING_SELECTED; // 如果两者都没有选择任何素材。
				List<string> ClipNames = new List<string>();
				if (p.selectedEventSet.videoEvent != null && p.selectedEventSet.videoEvent.ActiveTake != null) ClipNames.Add(p.selectedEventSet.videoEvent.ActiveTake.Name);
				if (p.selectedEventSet.audioEvent != null && p.selectedEventSet.audioEvent.ActiveTake != null) ClipNames.Add(p.selectedEventSet.audioEvent.ActiveTake.Name);
				if (ClipNames.Count >= 2 && ClipNames[0] == ClipNames[1]) ClipNames.RemoveAt(1);
				SelectClipName = string.Join(" + ", ClipNames);
			}
		}
		public MediaSourceFrom SuggestSelectedSourceFrom = MediaSourceFrom.LAST_USER_PREFERENCE;
		public AudioVideoEnabledTable audioVideoEnabledTable;

		public static CurveType GetCurveType(int index) {
			return GetCurve<CurveType>(index);
		}
		public static VideoKeyframeType GetVideoKeyframeType(int index) {
			return GetCurve<VideoKeyframeType>(index);
		}
		public static OFXInterpolationType GetOFXInterpolationType(int index) {
			return GetCurve<OFXInterpolationType>(index);
		}

		/// <summary>
		/// 根据编号获取需要的缓动曲线类型枚举。<br />
		/// 众所周知 Vegas 至少有三个缓动曲线类型，分别给渐入渐出、视频平移裁切、效果。
		/// </summary>
		/// <typeparam name="C">需要的缓动曲线类型。</typeparam>
		/// <param name="index">下拉菜单的编号。</param>
		/// <returns>获取的缓动曲线类型。</returns>
		/// <exception cref="Exceptions.UnsupportedCurveEnumException">如果类型不是枚举，则报错。</exception>
		/// <remarks>尤其注意，这个函数居然可以在这种旧版中正常工作！</remarks>
		public static C GetCurve<C>(int index) where C : struct {
			Type c = typeof(C);
			if (c == typeof(CurveType))
				return (C)new object[] { CurveType.Linear, CurveType.Fast, CurveType.Slow, CurveType.Smooth, CurveType.Sharp, CurveType.None }[index];
			else if (c == typeof(VideoKeyframeType))
				return (C)new object[] { VideoKeyframeType.Linear, VideoKeyframeType.Fast, VideoKeyframeType.Slow, VideoKeyframeType.Smooth, VideoKeyframeType.Sharp, VideoKeyframeType.Hold }[index];
			else if (c == typeof(OFXInterpolationType))
				return (C)new object[] { OFXInterpolationType.Linear, OFXInterpolationType.Fast, OFXInterpolationType.Slow, OFXInterpolationType.Smooth, OFXInterpolationType.Sharp, OFXInterpolationType.Hold }[index];
			throw new Exceptions.UnsupportedCurveEnumException(c);
		}

		/// <summary>
		/// 分别包含音视频事件的集合。
		/// </summary>
		public class EventSet {
			public AudioEvent audioEvent = null;
			public VideoEvent videoEvent = null;
			public double audioLength { get { return audioEvent == null ? 0 : audioEvent.Length.ToMilliseconds(); } }
			public double videoLength { get { return videoEvent == null ? 0 : videoEvent.Length.ToMilliseconds(); } }
			public Subclip audioReverse = null;
			public Subclip videoReverse = null;
			/// <summary>
			/// 初始化一个空的集合。
			/// </summary>
			public EventSet() { }
			/// <summary>
			/// 初始化一个仅包含音频事件与视频事件的集合/
			/// </summary>
			/// <param name="audioEvent">音频事件</param>
			/// <param name="videoEvent">视频事件</param>
			public EventSet(AudioEvent audioEvent, VideoEvent videoEvent) {
				this.audioEvent = audioEvent;
				this.videoEvent = videoEvent;
			}
			/// <summary>
			/// 初始化一个包含音频事件、视频事件、音频倒放子剪辑和视频倒放子剪辑的集合。
			/// </summary>
			/// <param name="audioEvent">音频事件</param>
			/// <param name="videoEvent">视频事件</param>
			/// <param name="audioReverse">音频倒放子剪辑</param>
			/// <param name="videoReverse">视频倒放子剪辑</param>
			public EventSet(AudioEvent audioEvent, VideoEvent videoEvent, Subclip audioReverse, Subclip videoReverse) : this(audioEvent, videoEvent) {
				this.audioReverse = audioReverse;
				this.videoReverse = videoReverse;
			}
			public override bool Equals(object obj) {
				if (ReferenceEquals(this, obj)) return true;
				if (obj == null || !(obj is EventSet)) return false;
				EventSet other = obj as EventSet;
				return other.audioEvent == audioEvent && other.videoEvent == videoEvent;
			}
			public override int GetHashCode() {
				return audioEvent.GetHashCode() ^ videoEvent.GetHashCode();
			}
			/// <summary>
			/// 在轨道事件集合数组中消除重复的轨道事件集合对象。
			/// </summary>
			/// <param name="eventSets">轨道事件集合对象数组。</param>
			/// <returns>原轨道事件集合对象数组，只是处理过了。</returns>
			public static EventSet[] EliminateDuplicates(ref EventSet[] eventSets) {
				List<EventSet> sets = new List<EventSet>();
				for (int i = 0; i < eventSets.Length; i++) {
					EventSet current = eventSets[i];
					bool same = false;
					for (int j = 0; j < i; j++) {
						EventSet contrast = eventSets[j];
						if (current.Equals(contrast)) {
							same = true;
							break;
						}
					}
					if (!same) sets.Add(current);
				}
				if (sets.Count == 0) ShowError(new Exceptions.YtpEliminateDuplicatesFinallyNullException(), ShowErrorState.RESUME_NEXT);
				return eventSets = sets.ToArray();
			}
			/// <summary>
			/// 根据给定的一个轨道事件数组，获取第一个满足条件的音频事件与视频事件。<br />
			/// 可以单独指定是否包含其中轨道事件分组中的相关对立事件。
			/// </summary>
			/// <param name="events">轨道事件数组。</param>
			/// <param name="useEventGroup">如果为 true，则若在给定的轨道事件数组中不能同时找到音频事件和视频事件，
			/// 将会尝试在已找到的类型的轨道事件的分组中寻找缺失的轨道事件。</param>
			public EventSet(TrackEvent[] events, bool useEventGroup = true) {
				foreach (TrackEvent trackEvent in events) {
					if (trackEvent != null && trackEvent.IsAudio() && audioEvent == null)
						audioEvent = trackEvent as AudioEvent;
					if (trackEvent != null && trackEvent.IsVideo() && videoEvent == null)
						videoEvent = trackEvent as VideoEvent;
				}
				if (useEventGroup) {
					if (audioEvent != null && videoEvent == null && audioEvent.Group != null) {
						foreach (TrackEvent trackEvent in audioEvent.Group)
							if (trackEvent != null && trackEvent.IsVideo()) {
								videoEvent = trackEvent as VideoEvent;
								break;
							}
					} else if (audioEvent == null && videoEvent != null && videoEvent.Group != null) {
						foreach (TrackEvent trackEvent in videoEvent.Group) {
							if (trackEvent != null && trackEvent.IsAudio()) {
								audioEvent = trackEvent as AudioEvent;
								break;
							}
						}
					}
				}
			}
			/// <summary>
			/// 是否包含倒放子剪辑。
			/// </summary>
			public bool IncludeReverseSubClip {
				get {
					return audioReverse != null || videoReverse != null;
				}
			}
		}

		/// <summary>
		/// 获取所有选中的轨道事件。
		/// </summary>
		/// <returns>选中的轨道事件数组。</returns>
		public T[] GetSelectedEvents<T>() where T : TrackEvent {
			List<T> selectedList = new List<T>();
			foreach (Track track in vegas.Project.Tracks)
				foreach (TrackEvent trackEvent in track.Events)
					if (trackEvent.Selected && trackEvent is T)
						selectedList.Add(trackEvent as T);
			return selectedList.ToArray();
		}
		public VideoEvent[] GetSelectedVideoEvents() {
			return GetSelectedEvents<VideoEvent>();
		}
		public AudioEvent[] GetSelectedAudioEvents() {
			return GetSelectedEvents<AudioEvent>();
		}
		public TrackEvent[] GetSelectedEvents() {
			return GetSelectedEvents<TrackEvent>();
		}

		/// <summary>
		/// 检测指定的轨道事件数组是否位于多个轨道。
		/// </summary>
		/// <param name="trackEvents">轨道事件数组。</param>
		/// <returns>指定的轨道事件数组是否位于多个轨道。</returns>
		public bool IsEventsOnMultipleTracks(IEnumerable<TrackEvent> trackEvents) {
			Track theTrack = null;
			foreach (TrackEvent trackEvent in trackEvents) {
				if (theTrack == null)
					theTrack = trackEvent.Track;
				else if (trackEvent.Track != theTrack)
					return true;
			}
			return false;
		}
		/// <summary>
		/// 检测选中的轨道事件数组是否位于多个轨道。
		/// </summary>
		/// <returns>选中的轨道事件数组是否位于多个轨道。</returns>
		public bool IsSelectedEventsOnMultipleTracks() {
			return IsEventsOnMultipleTracks(GetSelectedEvents());
		}

		/// <summary>
		/// 获取所有选中的轨道事件及其轨道事件分组内的其它轨道事件。<br />
		/// 由于这一般是音频事件和视频事件才构成一个分组，所以不专门指定这是什么事件类型，直接通用轨道事件类型。
		/// </summary>
		/// <returns>选中的轨道事件及其轨道事件分组内的其它轨道事件。</returns>
		public TrackEvent[] GetSelectedEventsWithinGroup() {
			return GetEventsWithinGroup(GetSelectedEvents<TrackEvent>());
		}

		/// <summary>
		/// 获取指定的轨道事件数组内所有事件及其分组内其它所有事件。
		/// </summary>
		/// <param name="trackEvents">指定的轨道事件数组。</param>
		/// <returns>指定的轨道事件及其轨道事件分组内的其它轨道事件。</returns>
		public TrackEvent[] GetEventsWithinGroup(IEnumerable<TrackEvent> trackEvents) {
			List<TrackEvent> selectedList = new List<TrackEvent>(trackEvents), // 副本，仅用于遍历。
				resultList = new List<TrackEvent>(trackEvents);
			foreach (TrackEvent trackEvent in selectedList) {
				if (trackEvent.IsGrouped)
					foreach (TrackEvent eventInGroup in trackEvent.Group)
						if (!resultList.Contains(eventInGroup))
							resultList.Add(eventInGroup);
			}
			return resultList.ToArray();
		}

		/// <summary>
		/// 获取选中的第一个轨道剪辑。
		/// </summary>
		/// <returns>选中的第一个轨道剪辑。</returns>
		public T GetSelectedFirstEvent<T>() where T : TrackEvent {
			foreach (Track track in vegas.Project.Tracks)
				foreach (TrackEvent trackEvent in track.Events)
					if (trackEvent.Selected && trackEvent.ActiveTake != null && trackEvent.ActiveTake.Media != null && trackEvent is T)
						return trackEvent as T;
			return null;
		}

		/// <summary>
		/// 获取所有选中的轨道。
		/// </summary>
		/// <typeparam name="T">轨道种类</typeparam>
		/// <returns>选中的轨道</returns>
		public T[] GetSelectedTracks<T>() where T : Track {
			List<T> selectedList = new List<T>();
			foreach (Track track in vegas.Project.Tracks)
				if (track.Selected && track is T)
					selectedList.Add(track as T);
			return selectedList.ToArray();
		}

		/// <summary>
		/// 获取所有选中的视频轨道。
		/// </summary>
		/// <returns>选中的视频轨道</returns>
		public VideoTrack[] GetSelectedVideoTracks() {
			return GetSelectedTracks<VideoTrack>();
		}
		public AudioTrack[] GetSelectedAudioTracks() {
			return GetSelectedTracks<AudioTrack>();
		}
		public Track[] GetSelectedTracks() {
			return GetSelectedTracks<Track>();
		}

		public Media[] GetSelectedMedia() {
			return vegas.Project.MediaPool.GetSelectedMedia();
		}

		/// <summary>
		/// 获取选中的轨道事件所满足条件的第一组轨道事件集合。
		/// </summary>
		/// <returns>选中的轨道事件所满足条件的第一组轨道事件集合。</returns>
		private EventSet GetSelectedEventSet() {
			return selectedEventSet = new EventSet(GetSelectedEvents(), true);
		}

		public struct CountEventsType {
			public int audioCount;
			public int videoCount;
			public int count;
			public CountEventsType(TrackEvent[] events) {
				audioCount = 0;
				videoCount = 0;
				count = events.Length;
				foreach (TrackEvent trackEvent in events) {
					if (trackEvent.IsAudio()) audioCount++;
					if (trackEvent.IsVideo()) videoCount++;
				}
			}
		}

		private bool GetSelectedSource() {
			if (IsFromSelectedMedia) {
				Media[] selections = vegas.Project.MediaPool.GetSelectedMedia();
				if (selections.Length == 0) {
					ShowError(new Exceptions.NoSelectedMediaException());
					media = null;
					return false;
				}
				OpenMedia(selections[0]);
			}
			if (IsFromSelectedClip) {
				audioLength = selectedEventSet.audioLength;
				videoLength = selectedEventSet.videoLength;
				if (selectedEventSet.audioEvent == null && selectedEventSet.videoEvent == null) {
					ShowError(new Exceptions.NoSelectedClipException());
					media = null;
					return false;
				}
			}
			return true;
		}

		/// <summary>
		/// 获取所有轨道剪辑。
		/// </summary>
		/// <typeparam name="T">轨道剪辑类型。</typeparam>
		/// <param name="excludeEmptyTake">不包含空片段的轨道事件。<br />
		/// 如果为 <c>true</c>，则若一个轨道事件不包含任何片段和媒体，则不会将其添加到结果中。</param>
		/// <returns>所有轨道剪辑。</returns>
		public T[] GetAllEvents<T>(bool excludeEmptyTake = true) where T : TrackEvent {
			List<T> events = new List<T>();
			foreach (Track track in vegas.Project.Tracks)
				foreach (TrackEvent trackEvent in track.Events)
					if (trackEvent is T)
						events.Add(trackEvent as T);
			return events.ToArray();
		}

		/// <summary>
		/// 获取所有轨道剪辑。
		/// </summary>
		/// <returns>所有轨道剪辑。</returns>
		public TrackEvent[] GetAllEvents() {
			return GetAllEvents<TrackEvent>();
		}

		/// <summary>
		/// 查找与指定活动片段名称相匹配的所有轨道剪辑。
		/// </summary>
		/// <typeparam name="T">轨道剪辑类型。</typeparam>
		/// <param name="name">指定的活动片段名称。</param>
		/// <returns>与指定名称相匹配的所有轨道剪辑。</returns>
		public T[] GetEventsByTakeName<T>(string name) where T : TrackEvent {
			List<T> events = new List<T>();
			foreach (Track track in vegas.Project.Tracks)
				foreach (TrackEvent trackEvent in track.Events)
					if (trackEvent is T && trackEvent.ActiveTake != null && trackEvent.ActiveTake.Name == name)
						events.Add(trackEvent as T);
			return events.ToArray();
		}

		/// <summary>
		/// 查找与指定活动片段名称相匹配的所有轨道剪辑。
		/// </summary>
		/// <param name="name">指定的活动片段名称。</param>
		/// <returns>与指定名称相匹配的所有轨道剪辑。</returns>
		public TrackEvent[] GetEventsByTakeName(string name) {
			return GetEventsByTakeName<TrackEvent>(name);
		}

		/// <summary>
		/// 取消选中轨道素材。
		/// </summary>
		public void SelectNoneEvents() {
			foreach (Track track in vegas.Project.Tracks)
				foreach (TrackEvent trackEvent in track.Events)
					trackEvent.Selected = false;
		}

		/// <summary>
		/// 给定一组轨道剪辑数组，将其中每一个轨道剪辑的分组（如果有）中的其它轨道剪辑也加在数组内。<br />
		/// 数组内不会包含重复的数据。<br />
		/// 不会更改原数组，将会返回一个新的数组。
		/// </summary>
		/// <param name="originalEvents">原始轨道剪辑数组。</param>
		/// <returns>追加分组内其它轨道剪辑的数组。</returns>
		public TrackEvent[] AppendGroupedEvents(TrackEvent[] originalEvents) {
			List<TrackEvent> events = new List<TrackEvent>();
			foreach (TrackEvent trackEvent in originalEvents)
				if (!events.Contains(trackEvent)) {
					events.Add(trackEvent);
					if (trackEvent.IsGrouped)
						foreach (TrackEvent trackEventInGroup in trackEvent.Group)
							if (!events.Contains(trackEventInGroup))
								events.Add(trackEventInGroup);
				}
			return events.ToArray();
		}

		/// <summary>
		/// 倒放视频事件。
		/// 注意是使用速度包络控制，而不是创建一个反转的子剪辑。
		/// </summary>
		/// <param name="videoEvent">视频事件</param>
		/// <returns>倒放后的视频事件（实际上也就是原视频事件）</returns>
		public VideoEvent ReverseVideo(VideoEvent videoEvent) {
			Timecode start = videoEvent.Start, length = videoEvent.Length;
			videoEvent.AdjustStartLength(start + length, length, true);
			videoEvent.Start = start;
			Envelope velocity = videoEvent.Envelopes.FindByType(EnvelopeType.Velocity) ?? new Envelope(EnvelopeType.Velocity);
			if (!videoEvent.Envelopes.HasEnvelope(EnvelopeType.Velocity)) videoEvent.Envelopes.Add(velocity);
			velocity.Points.Clear();
			velocity.Points[0].Y = -1;
			velocity.Points[0].Curve = CurveType.None;
			return videoEvent;
		}

		/// <summary>
		/// 定格视频事件初帧，即静止画。
		/// 如果要和倒放视频事件函数一起使用，应该放在其之后。
		/// </summary>
		/// <param name="videoEvent">视频事件</param>
		/// <returns>原视频事件</returns>
		public VideoEvent FreezeFirstFrame(VideoEvent videoEvent) {
			Envelope velocity = videoEvent.Envelopes.FindByType(EnvelopeType.Velocity) ?? new Envelope(EnvelopeType.Velocity);
			if (!videoEvent.Envelopes.HasEnvelope(EnvelopeType.Velocity)) videoEvent.Envelopes.Add(velocity);
			velocity.Points[0].Y = 0;
			velocity.Points[0].Curve = CurveType.None;
			return videoEvent;
		}

		/// <summary>
		/// 定格视频事件末帧，防止素材播放到超过其规定长度范围的部分。
		/// </summary>
		/// <param name="videoEvent">视频事件</param>
		/// <param name="duration">规定的长度</param>
		/// <returns>原视频事件</returns>
		public VideoEvent FreezeLastFrame(VideoEvent videoEvent, double duration, bool force = false) {
			Timecode length = Timecode.FromMilliseconds(duration);
			if ((VConfigScratch == StretchType.FLEXING_AND_EXTENDING || VConfigScratch == StretchType.EXTENDING_ONLY) && !force)
				length = Timecode.FromMilliseconds(duration * 4);
			if (VConfigLegato == LegatoMaxGapType.STACCATO && length > videoEvent.Length) return videoEvent; // 该功能会和“填补间隙”功能冲突
			Envelope velocity = videoEvent.Envelopes.FindByType(EnvelopeType.Velocity) ?? new Envelope(EnvelopeType.Velocity);
			if (!videoEvent.Envelopes.HasEnvelope(EnvelopeType.Velocity)) videoEvent.Envelopes.Add(velocity);
			velocity.Points[0].Curve = CurveType.None;
			EnvelopePoint point = velocity.Points.GetPointAtX(length);
			if (point == null) velocity.Points.Add(new EnvelopePoint(length, 0, CurveType.None));
			else {
				point.Y = 0;
				point.Curve = CurveType.None;
			}
			return videoEvent;
		}

		public void AdjustDeviation(TrackEvent trackEvent, double startTime, double endTime) {
			Timecode start = trackEvent.Start, length = trackEvent.Length;
			trackEvent.AdjustStartLength(start + Timecode.FromMilliseconds(startTime), Timecode.FromMilliseconds(endTime - startTime), true);
			trackEvent.Start = start;
			trackEvent.Length = length;
		}

		public bool PutPreviewAudioEvent(AudioTrack track, Timecode position) {
			AudioEvent _;
			return PutPreviewAudioEvent(track, position, out _);
		}
		public bool PutPreviewAudioEvent(AudioTrack track, Timecode position, out AudioEvent audioEventSample) {
			audioEventSample = null;
			if (!IsFromBrowseFile) { bool ok = GetSelectedSource(); if (!ok) return false; }
			if (!IsFromSelectedClip) {
				audioEventSample = track.AddAudioEvent(
					position,
					Timecode.FromMilliseconds(audioLength)
				);
				try {
					audioEventSample.AddTake(media.GetAudioStreamByIndex(0));
				} catch (Exception) { /*ShowError(new Exceptions.NoAudioTakeException(), e);*/ return false; }
			} else {
				if (selectedEventSet.audioEvent == null) { /*ShowError(new Exceptions.NoAudioTakeException());*/ return false; }
				audioEventSample = selectedEventSet.audioEvent.Copy(track, position) as AudioEvent;
			}
			if (AConfigNormalize) audioEventSample.Normalize = true;
			return true;
		}

		/// <summary>
		/// 生成音系 Music Anime Dōga / YouTube Poop Music Video。
		/// </summary>
		/// <returns>是否成功生成。</returns>
		private bool GenerateOtomad() {
			#region 验证数据合法
			bool noMidiChannel = MidiConfigTracks == null || MidiConfigTracks.Count == 0;
			bool isSonarLegal = SonarConfig && !noMidiChannel && MidiConfigTracks[0].IsDrumKit;
			if (!AConfig && !VConfig && !SonarConfig) return false;
			if (!isSonarLegal) {
				if (!IsFromBrowseFile) { bool ok = GetSelectedSource(); if (!ok) return false; }
				if (media == null && !IsFromSelectedClip) { ShowError(new Exceptions.NoMediaException()); return false; }
			}
			if (!YtpConfig) {
				if (noMidiChannel) { ShowError(new Exceptions.NoTrackInfoException()); return false; }
				if (midi == null) { ShowError(new Exceptions.NoMidiException()); return false; }
				if (midi.TrackInfos == null) { ShowError(new Exceptions.NoTrackInfoException()); return false; }
				if (!MidiUseMidiBpm && !MidiUseDynamicMidiBpm)
					midi.Bpm = MidiUseCustomBpm ? (double)configForm.MidiCustomBpmBox.Value : ProjectBpm;
			}
			Plugin.Init(vegas);
			if (AConfig && AConfigMethod == AudioTuneMethod.PITCH_SHIFT) requestShowProgress = true;
			long startMakingTime = DateTime.Now.Ticks; // 单位：100 纳秒
			const long MUST_SHOW_PROGRESS_WAITING_TIME = 10000000L; // 1 秒
			if (progressForm == null || progressForm.IsDisposed) { // 这里有一个特别蛇皮的 bug，就是如果手动打开一个不受 Vegas 支持的媒体文件，触发打不开媒体文件的报错。然后再打开一个 Vegas 支持的媒体文件，最后点击生成。这竟然会导致进度条对话框被销毁且不为 null 的奇葩问题，而且因果毫无任何关系。反正这样可以解决问题就行了。
				progressForm = new ProgressForm(IsNativeProgressDialogStyle);
				progressForm.Show();
			}
			if (AConfig && AConfigMethod == AudioTuneMethod.PITCH_SHIFT) if (!ExaminePitchShiftPresetsExist()) return false;
			if (YtpConfig) { GenerateYtp(); return true; }
			#endregion
			#region 开始处理 MIDI
			MIDI.TrackInfo currentChannel = MidiConfigTracks[0];
			string name = currentChannel.Name; // 所选 MIDI 轨道名称。如果没有则为空串。
			currentChannel.Resort(); // 重新排序。
			bool requireGlissandoSwirl = VConfig && VConfigGlissando && !SheetConfig && currentChannel.HasPitchWheelEvents; // 五线谱效果开启时最好不要做滑音漩涡动画。
			const double NOTE_ON_EVENT_PERCENTAGE_WEIGHT_IF_ENABLE_SWIRL = 0.8;
			double PITCH_WHEEL_EVENT_PERCENTAGE_WEIGHT_IF_ENABLE_SWIRL = 1 - NOTE_ON_EVENT_PERCENTAGE_WEIGHT_IF_ENABLE_SWIRL;
			if (!IsMultiMidiChannel)
				progressForm.Info = "";
			else {
				string _name = currentChannel.HasName ? Lang.str.colon + name : "";
				progressForm.Info = string.Format(Lang.str.processing_tracks, MidiConfigTracks.CurrentChannel + 1, MidiConfigTracks.SelectedChannelCount, currentChannel.Index, _name);
			}

			#region 准备轨道
			bool sonarMode = currentChannel.IsDrumKit && SonarConfig;
			int topIndex = GenerateBelowTopAdjustmentTrack ? GetFirstNotAdjustmentTrackIndex() : 0;
			var trackHelper = TrackHelper.New(this,
				!AConfig ? null : nextTrackIndex.HasValue ? nextTrackIndex.Value as object : IsAPreferredTrack ? AConfigPreferredTrack.Track as object : topIndex as object,
				!VConfig ? null : nextTrackIndex.HasValue ? nextTrackIndex.Value as object : IsVPreferredTrack ? VConfigPreferredTrack.Track as object : topIndex as object,
				!AConfigMultitrack, !VConfigMultitrack && !sonarMode, name);
			bool requireTwoKey = VConfigStartSize != VConfigEndSize || // 如果为起始尺寸与终止尺寸大小相等，则没有必要打两个关键帧了。
				VConfigStartRotation != VConfigEndRotation ||
				VConfigStartHTrans != VConfigEndHTrans ||
				VConfigStartVTrans != VConfigEndVTrans;
			Func<PvVisualEffect> NewAnim = () => IsVConfigEffects ? new PvVisualEffect(VConfigEffects) : new PvVisualEffect(VConfigEffect, VConfigInitialValue);
			Dictionary<VideoTrack, PvVisualEffect> anims = new Dictionary<VideoTrack, PvVisualEffect>();
			#if !VER_GEQ_16
			if (NewAnim().RequirePicInPicDeformEffects) {
				ShowError(new Exceptions.UsePicInPicOnUnsupportedVegasException(), ShowErrorState.RESUME_NEXT);
				return false;
			}
			#endif
			TempEventGroup tempEventGroup = new TempEventGroup(this); // 事件分组临时列表。
			#endregion

			#region 如果修改了素材的入点和出点的时间
			double sourceStartTime = SourceConfigStartTime, sourceEndTime = SourceConfigEndTime;
			bool adjustTime = sourceStartTime != 0 || sourceEndTime != 0;
			if (adjustTime) {
				while (sourceEndTime <= sourceStartTime) sourceEndTime += Math.Max(audioLength, videoLength);
				audioLength = videoLength = sourceEndTime - sourceStartTime;
			}
			double generateBeginTime = GenerateAt == GenerateAt.CUSTOM ? GenerateAtCustomTimecode.ToMilliseconds() :
				GenerateAt == GenerateAt.CURSOR ? vegas.Transport.CursorPosition.ToMilliseconds() : 0;
			double songLength = 0; // 指定乐曲总长。
			double songStart = generateBeginTime + MidiConfigStartTime;
			#endregion

			#region 五线谱操作
			const int DEFAULT_MIDI_CONFIG_BEAT = 4;
			double barStartTime = 0;
			double barLength = midi.MsPerQuarter * DEFAULT_MIDI_CONFIG_BEAT;
			bool sliceComposition = MidiConfigStartTime < MidiConfigEndTime;
			int projWidth = vegas.Project.Video.Width;
			int projHeight = vegas.Project.Video.Height;
			int virtualWidth = SheetConfigRelative ? 1920 : projWidth;
			int virtualHeight = SheetConfigRelative ? 1080 : projHeight;
			#endregion

			#region 规范化音频
			AudioEvent audioEventSample = null;
			if (AConfig && !isSonarLegal) {
				if (!IsFromSelectedClip) {
					audioEventSample = trackHelper.AddSampleEvent<AudioEvent>(
						Timecode.FromMilliseconds(0),
						Timecode.FromMilliseconds(audioLength)
					);
					try {
						audioEventSample.AddTake(media.GetAudioStreamByIndex(0));
					} catch (Exception e) { ShowError(new Exceptions.NoAudioTakeException(), e); return false; }
				} else {
					if (selectedEventSet.audioEvent == null) { ShowError(new Exceptions.NoAudioTakeException()); return false; }
					audioEventSample = trackHelper.AddSampleEvent(selectedEventSet.audioEvent, Timecode.FromMilliseconds(0));
				}
				if (AConfigNormalize) { // 将添加音频单独提取到循环之外有助于提高规范化音频的速度
					audioEventSample.RecalculateNorm();
					audioEventSample.Normalize = true;
				}
			}
			#endregion

			#region 动态 BPM 处理
			DynamicBpmIntegrator integrator = null;
			if (MidiUseDynamicMidiBpm) integrator = new DynamicBpmIntegrator(midi, MidiUseDynamicMidiBpmForm == 1);
			#endregion
			for (int i = 0; i < currentChannel.Events.Count; i++) {
				MidiEvent midiEvent = currentChannel.Events[i];
				if (!(midiEvent is NoteOnEvent)) continue;
				double statusProgress = Math.Round(100.0 * i / currentChannel.Events.Count);
				if (requireGlissandoSwirl) statusProgress *= NOTE_ON_EVENT_PERCENTAGE_WEIGHT_IF_ENABLE_SWIRL;
				if (IsMultiMidiChannel) statusProgress = MidiConfigTracks.GetPercent(statusProgress);
				long curTime = DateTime.Now.Ticks;
				if (!requestShowProgress && curTime - startMakingTime > MUST_SHOW_PROGRESS_WAITING_TIME)
					requestShowProgress = true; // 超过规定等待的时间，则还是会显示进度条
				if (requestShowProgress) { // 如果不是使用“移调”效果插件，就不要刷进度条，否则还会额外拖延时间。
					progressForm.ReportProgress(statusProgress); // 说明：只有在使用“移调”效果插件时才会生成得很慢，其它情况下都是非常快的。
					if (progressForm.RealTimeUpdateCheck.Checked)
						vegas.UpdateUI(); // 可以让 Vegas 实时更新 UI，但是会更慢。
				}
				if (progressForm.RequestAbort) break;
				if (SheetConfig)
					foreach (MidiEvent _midiEvent in midi.TimeSignatureTrack)
						if (_midiEvent is TimeSignatureEvent) {
							TimeSignatureEvent timeSignatureEvent = _midiEvent as TimeSignatureEvent;
							if (midiEvent.AbsoluteTime >= timeSignatureEvent.AbsoluteTime)
								barLength = !MidiUseDynamicMidiBpm
									? midi.MsPerQuarter * timeSignatureEvent.Numerator
									: integrator.GetActualTime(timeSignatureEvent.Numerator);
						}
				NoteEvent noteEvent = midiEvent as NoteEvent;
				NoteOnEvent noteOnEvent = midiEvent as NoteOnEvent;
				double startTime, duration;
				if (!MidiUseDynamicMidiBpm) {
					startTime = midiEvent.AbsoluteTime * midi.MsPerQuarter / midi.TicksPerQuarter;
					duration = noteOnEvent.NoteLength * midi.MsPerQuarter / midi.TicksPerQuarter;
				} else {
					Tuple<double, double> _ = integrator.GetActualTime(midiEvent.AbsoluteTime, noteOnEvent.NoteLength);
					startTime = _.Item1;
					duration = _.Item2;
				}
				int pitch = noteEvent.NoteNumber;
				int _pitch = pitch + SheetConfigShift; // 五线谱音符偏移量。
				int velocity = noteEvent.Velocity;
				if (RestrictLengthMode == RestrictLengthModeType.FIXED_LENGTH) duration = RestrictLengthValue;
				else if (RestrictLengthMode == RestrictLengthModeType.MAX_LENGTH) duration = Math.Min(duration, RestrictLengthValue);

				if (startTime < MidiConfigStartTime) continue;
				if (startTime > MidiConfigEndTime && sliceComposition) break;
				songLength = startTime + duration;
				#region 下一页
				while (Math.Ceiling(startTime) >= barStartTime + barLength)
					barStartTime += barLength;
				#endregion

				#region 生成声呐事件
				if (sonarMode) {
					List<SonarItem> matchDrumSounds = SonarConfigItems.FindAll(item => noteEvent.NoteName.Contains(item.DrumSound));
					if (matchDrumSounds.Count == 0) continue;
					else if (matchDrumSounds.Count > 1) {
						int maxLength = 0;
						foreach (SonarItem item in matchDrumSounds)
							if (item.DrumSound.Length > maxLength)
								maxLength = item.DrumSound.Length;
						matchDrumSounds = SonarConfigItems.FindAll(item => item.DrumSound.Length == maxLength);
						if (matchDrumSounds.Count > 1) {
							int spaceLength = int.MaxValue;
							foreach (SonarItem item in matchDrumSounds) {
								int spaceCount = Regex.Matches(item.DrumSound, @" ").Count;
								if (spaceCount < spaceLength)
									spaceLength = spaceCount;
							}
							matchDrumSounds = SonarConfigItems.FindAll(item => Regex.Matches(item.DrumSound, @" ").Count == spaceLength);
						}
					}
					SonarItem sonar = matchDrumSounds[0];
					Timecode start = Timecode.FromMilliseconds(generateBeginTime + startTime);
					Timecode length = Timecode.FromString("0.1.000", RulerFormat.MeasuresAndBeats);
					VideoTrack vTrack = sonar.videoTrack;
					VideoEvent videoEvent;
					if (vTrack == null) {
						videoEvent = trackHelper.AddEvent<VideoEvent>(start, length, assignedSonarTracks);
						if (videoEvent == null) continue;
						vTrack = videoEvent.Track as VideoTrack;
					} else videoEvent = vTrack.AddVideoEvent(start, length);
					if (SonarConfigSeparateDrums && sonar.videoTrack == null) {
						vTrack.Name = sonar.DrumSound;
						sonar.videoTrack = vTrack;
						assignedSonarTracks.Add(vTrack);
					}
					if (SonarConfigDifferenceCompositeMode)
						vTrack.CompositeMode = CompositeMode.Difference;
					if (SonarConfigShadow) {
						vTrack.TrackMotion.ShadowEnabled = true;
						TrackShadowKeyframe shadow = vTrack.TrackMotion.ShadowKeyframes[0];
						shadow.PositionX = 0;
						shadow.PositionY = 0;
						shadow.Color = SonarConfigShadowColor.ToVideoColor();
					}
					if (sonarSolidColor == null) {
						sonarSolidColor = new Media(Plugin.solidColor);
						(sonarSolidColor.Generator.OFXEffect.FindParameterByName("Color") as OFXRGBAParameter).Value = new OFXColor(1, 1, 1, 0);
					}
					videoEvent.AddTake(sonarSolidColor.GetVideoStreamByIndex(0));
					if (sonar.IsRequirePicInPic() && Plugin.picInPic == null) { ShowError(new Exceptions.NoPluginNameException(Lang.str.pic_in_pic)); return false; }
					if (Plugin.cookieCutter == null) { ShowError(new Exceptions.NoPluginNameException(Lang.str.cookie_cutter)); return false; }
					Plugin.ForVideoEvents.Sonar(videoEvent, sonar);
					continue;
				}
				#endregion

				#region 生成音频事件
				if (AConfig) {
					AudioEvent audioEvent = trackHelper.AddEvent(audioEventSample, Timecode.FromMilliseconds(generateBeginTime + startTime), Timecode.FromMilliseconds(duration));
					if (audioEvent == null) goto endAConfig;
					audioEvent.Length = Timecode.FromMilliseconds(duration);
					bool audioFreezeLastFrameCondition = AConfigFreezeLastFrame &&
						(AConfigScratch == StretchType.NO_STRETCHING || AConfigScratch == StretchType.FLEXING_ONLY);
					if (audioFreezeLastFrameCondition && duration > audioLength)
						audioEvent.Length = Timecode.FromMilliseconds(audioLength);
					try {
						#if VER_GEQ_16
							audioEvent.Method = AConfigMethod == AudioTuneMethod.CLASSIC ? TimeStretchPitchShift.Classic : TimeStretchPitchShift.Elastique; // 这个操作没有在 Vegas 文档中写到。
							audioEvent.PitchLock = false;
						#endif
					} catch (Exception e) {
						if (AConfigMethod == AudioTuneMethod.ELASTIQUE || AConfigMethod == AudioTuneMethod.CLASSIC) {
							ShowError(new Exceptions.NoTimeStretchPitchShiftException(), e); return false;
						}
					}
					if (adjustTime) AdjustDeviation(audioEvent, sourceStartTime, sourceEndTime);
					if (AConfigScratch == StretchType.FLEXING_AND_EXTENDING ||
						AConfigScratch == StretchType.EXTENDING_ONLY && duration > audioLength ||
						AConfigScratch == StretchType.FLEXING_ONLY && duration < audioLength)
						audioEvent.AdjustPlaybackRate(audioLength / duration, true);
					audioEvent.Loop = AConfigLoop;

					audioEvent.FadeIn.Length = AConfigSetFadeBy == SetFadeByType.TIMECODE ? AConfigFadeinTimecode : Timecode.FromMilliseconds(audioEvent.Length.ToMilliseconds() * AConfigFadein / 100);
					audioEvent.FadeOut.Length = AConfigSetFadeBy == SetFadeByType.TIMECODE ? AConfigFadeoutTimecode : Timecode.FromMilliseconds(audioEvent.Length.ToMilliseconds() * AConfigFadeout / 100);
					audioEvent.FadeIn.Curve = AConfigFadeinCurve;
					audioEvent.FadeOut.Curve = AConfigFadeoutCurve;
					tempEventGroup.Add(audioEvent);
					if (AConfigVelocity) audioEvent.FadeIn.Gain = MapVelocityToGain(velocity, MediaType.Audio);

					#region 应用变调
					int pitchDelta = pitch - AConfigBasePitch;
					if (AConfigMethod == AudioTuneMethod.PITCH_SHIFT) { // 注意：Vegas 版本号 15 及以下仅能使用移调插件调音。
						if (Plugin.pitchShift == null) { ShowError(new Exceptions.NoPluginPitchShiftException()); return false; }
						double _stretchRate = Pitch2Stretch(pitchDelta);
						if (AConfigLockStretchPitch && audioFreezeLastFrameCondition && duration > audioLength / _stretchRate)
							audioEvent.Length = Timecode.FromMilliseconds(audioLength / _stretchRate);
						int pitchDeltaTimes = pitchDelta > 0 ? 12 : -12;
						while (pitchDeltaTimes * pitchDelta > 0) { // pitchDeltaTimes > 0 ? pitchDelta > 0 : pitchDelta < 0
							Effect effect = audioEvent.Effects.AddEffect(Plugin.pitchShift);
							try {
								effect.Preset = (Math.Abs(pitchDelta) <= 12 ? pitchDelta : pitchDeltaTimes).ToString()
									+ (AConfigLockStretchPitch ? "~" : "");
							} catch (Exception e) { ShowError(new Exceptions.NoPluginPresetsException(), e); return false; }
							pitchDelta -= pitchDeltaTimes;
						}
					} else if (AConfigMethod == AudioTuneMethod.ELASTIQUE || AConfigMethod == AudioTuneMethod.CLASSIC) {
						#if VER_GEQ_16
							if (AConfigMethod == AudioTuneMethod.ELASTIQUE) {
								audioEvent.ElastiqueAttribute = (ElastiqueStretchAttributes)AConfigElastiqueAttr;
								if (AConfigElastiqueAttr == ElastiqueStretchAttributes.Pro) audioEvent.FormantLock = AConfigReserveFormant;
							} else if (AConfigMethod == AudioTuneMethod.CLASSIC)
								audioEvent.ClassicAttribute = (ClassicStretchAttributes)AConfigClassicAttr;
							if (!AConfigLockStretchPitch) audioEvent.PitchSemis += pitchDelta;
							else {
								double origPitch = audioEvent.PitchSemis;
								audioEvent.PitchLock = true;
								audioEvent.AdjustPlaybackRate(Pitch2Stretch(origPitch + pitchDelta), true);
								if (audioFreezeLastFrameCondition && duration > audioLength / audioEvent.PlaybackRate)
									audioEvent.Length = Timecode.FromMilliseconds(audioLength / audioEvent.PlaybackRate);
							}
						#endif
					} else if (AConfigMethod == AudioTuneMethod.FOOL_TUNING) {
						#if VER_GEQ_16
							audioEvent.ElastiqueAttribute = ElastiqueStretchAttributes.Efficient;
							audioEvent.PitchLock = true;
						#endif
					}
					#endregion
				}
			endAConfig:;
				#endregion

				#region 生成视频事件
				if (VConfig) {
					VideoEvent videoEvent;
					if (!IsFromSelectedClip) {
						videoEvent = trackHelper.AddEvent<VideoEvent>(
							Timecode.FromMilliseconds(generateBeginTime + startTime),
							Timecode.FromMilliseconds(duration)
						);
						if (videoEvent == null) goto endVConfig;
						try {
							videoEvent.AddTake(media.GetVideoStreamByIndex(0));
						} catch (Exception) { ShowError(new Exceptions.NoVideoTakeException()); return false; }
					} else {
						if (selectedEventSet.videoEvent == null) { ShowError(new Exceptions.NoVideoTakeException()); return false; }
						videoEvent = trackHelper.AddEvent(selectedEventSet.videoEvent, Timecode.FromMilliseconds(generateBeginTime + startTime), Timecode.FromMilliseconds(duration));
						if (videoEvent == null) goto endVConfig;
					}
					VideoTrack videoTrack = videoEvent.Track as VideoTrack;
					PvVisualEffect anim;
					if (!anims.TryGetValue(videoTrack, out anim))
						anims.Add(videoTrack, anim = NewAnim());
					bool pitchHold = anim.EqualsLastPitch(pitch);
					if (adjustTime) AdjustDeviation(videoEvent, sourceStartTime, sourceEndTime);
					if (VConfigScratch == StretchType.FLEXING_AND_EXTENDING ||
						VConfigScratch == StretchType.EXTENDING_ONLY && duration > videoLength ||
						VConfigScratch == StretchType.FLEXING_ONLY && duration < videoLength)
						videoEvent.AdjustPlaybackRate(videoLength / duration, true);
					if (anim.IsReverse) ReverseVideo(videoEvent); // 结论：先拉伸后反转
					if (VConfigFreezeFirstFrame) FreezeFirstFrame(videoEvent);
					if (VConfigFreezeLastFrame) FreezeLastFrame(videoEvent, videoLength);
					if (SheetConfig) {
						videoEvent.Length = Timecode.FromMilliseconds(barStartTime + barLength - startTime);
						if (SheetConfigFreezeAtNoteOff) FreezeLastFrame(videoEvent, duration, true);
					}
					videoEvent.Loop = VConfigLoop;
					tempEventGroup.Add(videoEvent);
					// 淡入淡出
					videoEvent.FadeIn.Length = VConfigSetFadeBy == SetFadeByType.TIMECODE ? VConfigFadeinTimecode : Timecode.FromMilliseconds(videoEvent.Length.ToMilliseconds() * VConfigFadein / 100);
					videoEvent.FadeOut.Length = VConfigSetFadeBy == SetFadeByType.TIMECODE ? VConfigFadeoutTimecode : Timecode.FromMilliseconds(videoEvent.Length.ToMilliseconds() * VConfigFadeout / 100);
					videoEvent.FadeIn.Curve = VConfigFadeinCurve;
					videoEvent.FadeOut.Curve = VConfigFadeoutCurve;
					if (VConfigVelocity) videoEvent.FadeIn.Gain = MapVelocityToGain(velocity, MediaType.Video);
					// 视频平移/裁切调整
					VideoMotionKeyframe key0 = videoEvent.VideoMotion.Keyframes[0];
					VideoMotionKeyframe key1 = new VideoMotionKeyframe(Timecode.FromMilliseconds(duration));
					if (requireTwoKey) videoEvent.VideoMotion.Keyframes.Add(key1);
					float width = key0.BottomRight.X;
					float height = key0.BottomRight.Y;
					float startRatio = VConfigStartSize / 100;
					key0.ScaleBy(new VideoMotionVertex(startRatio, startRatio));
					key0.MoveBy(new VideoMotionVertex(Math.Abs(1 - startRatio) * width / 2 * VConfigStartHTrans / 100, Math.Abs(1 - startRatio) * height / 2 * VConfigStartVTrans / 100));
					key0.Type = VConfigStartSizeCurve;
					if (requireTwoKey) {
						float endRatio = VConfigEndSize / 100;
						key1.ScaleBy(new VideoMotionVertex(endRatio, endRatio));
						key1.MoveBy(new VideoMotionVertex(Math.Abs(1 - endRatio) * width / 2 * VConfigEndHTrans / 100, Math.Abs(1 - endRatio) * height / 2 * VConfigEndVTrans / 100));
					}
					// 色相、饱和度、对比度、对比度中心（阈值）
					if (VConfigStartHue != 0 || VConfigEndHue != 0 || VConfigStartSaturation != 100 || VConfigEndSaturation != 100) {
						if (Plugin.hslAdjust != null) Plugin.ForVideoEvents.HueAndSaturationParam(videoEvent, VConfigStartHue, VConfigEndHue, VConfigStartSaturation, VConfigEndSaturation, VConfigStartHueCurve, VConfigStartSaturationCurve); else { ShowError(new Exceptions.NoPluginNameException(Lang.str.hsl_adjust)); return false; }
					}
					if (VConfigStartContrast != 0 || VConfigEndContrast != 0 || VConfigStartThreshold != 50 || VConfigEndThreshold != 0) {
						if (Plugin.contrast != null) Plugin.ForVideoEvents.ContrastAndThresholdParam(videoEvent, VConfigStartContrast, VConfigEndContrast, VConfigStartThreshold, VConfigEndThreshold, VConfigStartContrastCurve, VConfigStartThresholdCurve); else { ShowError(new Exceptions.NoPluginNameException(Lang.str.brightness_and_contrast)); return false; }
					}
					// 单独对所有关键帧处理翻转
					videoEvent.FlipAllKeyframe(anim.HorizontalFlip, anim.VerticalFlip);
					// 旋转属性单独调整，因为和上面“翻转所有关键帧”功能冲突了
					key0.RotateBy(VConfigStartRotation + anim.RotationDeg);
					if (requireTwoKey) key1.RotateBy(VConfigEndRotation + anim.RotationDeg);
					// 发光效果
					if (VConfigGlow != 0) if (Plugin.contrast != null) Plugin.ForVideoEvents.Glow(videoEvent, VConfigGlow, VConfigGlowCurve, VConfigGlowBright);
					else { ShowError(new Exceptions.NoPluginNameException(Lang.str.brightness_and_contrast)); return false; }
					// 动画效果生成
					if (!ApplyPvRhythmVisualEffectPartialMethod(videoEvent, anim)) return false;
					// 五线谱效果生成
					if (SheetConfig) {
						if (UseLegacySheetMethod) {
							double sheetConfigGap = SheetConfigGap,
								sheetConfigPosition = SheetConfigPosition,
								sheetConfigPaddingLeft = SheetConfigPaddingLeft,
								sheetConfigPaddingRight = SheetConfigPaddingRight;
							if (SheetConfigRelative) {
								sheetConfigGap *= projHeight / 1080.0;
								sheetConfigPosition *= projHeight / 1080.0;
								sheetConfigPaddingLeft *= projWidth / 1920.0;
								sheetConfigPaddingRight *= projWidth / 1920.0;
							}
							double sheetConfigWidth = projWidth - sheetConfigPaddingLeft - sheetConfigPaddingRight;
							TrackMotionKeyframe keyFrame = (videoEvent.Track as VideoTrack).TrackMotion.InsertMotionKeyframe(Timecode.FromMilliseconds(startTime));
							keyFrame.Type = VideoKeyframeType.Hold;
							keyFrame.Width = sheetConfigGap * 2 * projWidth / projHeight;
							keyFrame.Height = sheetConfigGap * 2;
							keyFrame.PositionX = -projWidth / 2 + sheetConfigPaddingLeft + sheetConfigWidth / barLength * (startTime - barStartTime);
							int octave = _pitch / 12;
							int line = StaffPitchMap[_pitch % 12];
							keyFrame.PositionY = sheetConfigPosition - sheetConfigGap * 3 + (octave - 5) * sheetConfigGap * 3.5 + line * sheetConfigGap * 0.5 + SheetConfigCelf * 12;
						} else {
							double sheetConfigWidth = virtualWidth - SheetConfigPaddingLeft - SheetConfigPaddingRight;
							if (Plugin.picInPic == null) { ShowError(new Exceptions.NoPluginNameException(Lang.str.pic_in_pic)); return false; }
							Effect picInPic = videoEvent.Effects.AddEffect(Plugin.picInPic);
							OFXDoubleParameter scale = picInPic.OFXEffect.FindParameterByName("Scale") as OFXDoubleParameter;
							scale.Value = SheetConfigGap * 2.0 / virtualHeight;
							OFXDoubleParameter scaleY = picInPic.OFXEffect.FindParameterByName("DistortionScaleY") as OFXDoubleParameter; // Vegas 15 及以下版本不支持。
							if (scaleY != null) scaleY.Value = scale.Value;
							OFXDouble2DParameter location = picInPic.OFXEffect.FindParameterByName("Location") as OFXDouble2DParameter;
							double positionX = -virtualWidth / 2 + SheetConfigPaddingLeft + sheetConfigWidth / barLength * (startTime - barStartTime);
							int octave = _pitch / 12;
							int line = StaffPitchMap[_pitch % 12];
							double positionY = SheetConfigPosition - SheetConfigGap * 3 + (octave - 5) * SheetConfigGap * 3.5 + line * SheetConfigGap * 0.5 + SheetConfigCelf * 12;
							location.Value = new OFXDouble2D { X = positionX / virtualWidth + 0.5, Y = positionY / virtualHeight + 0.5 };
						}
					}
					anim.Next();
				}
			endVConfig:;
				#endregion
			}

			#region 自动轨道声像
			if (AConfigAutoPan && AConfig && !isSonarLegal && currentChannel.Pan != MIDI.INITIAL_PAN) {
				// 从 NAudio 的声像值转换到 Vegas 的声像值。
				Func<int, float> GetPan = new Func<int, float>(pan => pan == 64 ? 0 : (float)Map(pan, 0, 127, -1, 1));
				Action<Action<AudioTrack>> ForATracks = new Action<Action<AudioTrack>>(action => {
					foreach (AudioTrack audioTrack in trackHelper.audioTracks)
						action(audioTrack);
				});
				if (!currentChannel.IsDynamicPan)
					ForATracks(audioTrack => audioTrack.PanX = GetPan(currentChannel.Pan));
				else
					foreach (MidiEvent midiEvent in currentChannel.Events) {
						double startTime;
						if (!(midiEvent is ControlChangeEvent)) continue;
						ControlChangeEvent controlChangeEvent = midiEvent as ControlChangeEvent;
						if (controlChangeEvent.Controller == MidiController.Pan) {
							startTime = !MidiUseDynamicMidiBpm ?
								midiEvent.AbsoluteTime * midi.MsPerQuarter / midi.TicksPerQuarter :
								startTime = integrator.GetActualTime(midiEvent.AbsoluteTime);

							if (startTime < MidiConfigStartTime) continue;
							if (startTime > MidiConfigEndTime && sliceComposition) break;

							Timecode start = Timecode.FromMilliseconds(startTime);
							int pan = controlChangeEvent.ControllerValue;
							ForATracks(audioTrack => {
								Envelope envelope = audioTrack.Envelopes.FindByType(EnvelopeType.Pan);
								if (envelope == null) {
									envelope = new Envelope(EnvelopeType.Pan);
									audioTrack.Envelopes.Add(envelope);
								}
								EnvelopePoint point = envelope.Points.GetPointAtX(start);
								if (point == null)
									envelope.Points.Add(new EnvelopePoint(start, -GetPan(pan), AConfigAutoPanCurve));
								else {
									point.Y = -GetPan(pan);
									point.Curve = AConfigAutoPanCurve;
								}
							});
						}
					}
			}
			#endregion

			#region 自动轨道滑音
			if (requireGlissandoSwirl) {
				if (!IsMultiMidiChannel)
					progressForm.Info = Lang.str.processing_otomad_swirl;
				else {
					string _name = currentChannel.HasName ? Lang.str.colon + name : "";
					progressForm.Info = string.Format(Lang.str.processing_tracks_swirl, MidiConfigTracks.CurrentChannel + 1, MidiConfigTracks.SelectedChannelCount, currentChannel.Index, _name);
				}
				List<PitchWheelChangeEvent> pitchEvents = new List<PitchWheelChangeEvent>();
				foreach (MidiEvent midiEvent in currentChannel.Events) { // 去重
					if (!(midiEvent is PitchWheelChangeEvent)) continue;
					PitchWheelChangeEvent pitchEvent = midiEvent as PitchWheelChangeEvent;
					if (pitchEvents.Count != 0) {
						int lastIndex = pitchEvents.Count - 1;
						PitchWheelChangeEvent lastEvent = pitchEvents[lastIndex];
						if (pitchEvent.Pitch == lastEvent.Pitch) continue;
						else if (pitchEvent.AbsoluteTime == lastEvent.AbsoluteTime) pitchEvents.RemoveAt(lastIndex);
					}
					pitchEvents.Add(pitchEvent);
				}
				if (pitchEvents.Count <= 1) goto endGlissando;
				List<VideoTrack> videoTracks = trackHelper.videoTracks;
				if (videoTracks.Count == 0) goto endGlissando;
				if (Plugin.swirl == null) { ShowError(new Exceptions.NoPluginNameException(Lang.str.swirl)); return false; }
				List<Effect> swirls = videoTracks.Select(track => track.Effects.AddEffect(Plugin.swirl)).ToList();
				for (int i = 0; i < pitchEvents.Count; i++) {
					PitchWheelChangeEvent pitchEvent = pitchEvents[i];
					double statusProgress = Math.Round(100.0 * i / pitchEvents.Count);
					if (requireGlissandoSwirl) statusProgress = statusProgress * PITCH_WHEEL_EVENT_PERCENTAGE_WEIGHT_IF_ENABLE_SWIRL + 100 * NOTE_ON_EVENT_PERCENTAGE_WEIGHT_IF_ENABLE_SWIRL;
					if (IsMultiMidiChannel) statusProgress = MidiConfigTracks.GetPercent(statusProgress);
					long curTime = DateTime.Now.Ticks;
					if (!requestShowProgress && curTime - startMakingTime > MUST_SHOW_PROGRESS_WAITING_TIME)
						requestShowProgress = true;
					if (requestShowProgress) {
						progressForm.ReportProgress(statusProgress);
						if (progressForm.RealTimeUpdateCheck.Checked)
							vegas.UpdateUI();
					}
					if (progressForm.RequestAbort) break;

					double startTime;
					if (!MidiUseDynamicMidiBpm)
						startTime = pitchEvent.AbsoluteTime * midi.MsPerQuarter / midi.TicksPerQuarter;
					else
						startTime = integrator.GetActualTime(pitchEvent.AbsoluteTime);

					if (startTime < MidiConfigStartTime) continue;
					if (startTime > MidiConfigEndTime && sliceComposition) break;

					Timecode start = Timecode.FromMilliseconds(startTime);
					double key = PitchBend2Key(pitchEvent.Pitch);
					if (VConfigGlissandoAmount == 0) { ShowError(new Exceptions.InvalidGlissandoAmountException()); return false; }
					double amount = key / VConfigGlissandoAmount;
					foreach (Effect swirl in swirls)
						Plugin.ForVideoEvents.SetSwirlAtTime(swirl, start, true, amount);
				}
				Plugin.ForVideoEvents.RemoveSwirlTempPreset();
			}
		endGlissando:
			#endregion
			#endregion
			tempEventGroup.Bundle();
			if (MidiConfigTracks.Count == 1 && !progressForm.RequestAbort)
				progressForm.ReportProgress(100);

			#region 生成五线谱
			if (MidiConfigTracks.CurrentChannel == 0) {
				if (SheetConfigGenerateStaffClef) {
					if (Plugin.picInPic == null) { ShowError(new Exceptions.NoPluginNameException(Lang.str.pic_in_pic)); goto endGenerateClef; }
					if (Plugin.bzMasking == null) { ShowError(new Exceptions.NoPluginNameException(Lang.str.bz_masking)); goto endGenerateClef; }
					VideoTrack sheetTrack = trackHelper.AddVideoTrackAfter();
					VideoEvent clef = AddClef(SheetConfigCelf, sheetTrack, songStart, songLength, SheetConfigClefColor);
					Effect effect2 = clef.Effects.AddEffect(Plugin.picInPic);
					double paddingLeft = (double)SheetConfigPaddingLeft / virtualWidth;
					double noteSizeHalf = (double)SheetConfigGap / virtualWidth; // 回缩音符宽度的左半边。
					paddingLeft = Math.Min(paddingLeft, SheetConfigGap * 5.0); // 限高
					OFXDoubleParameter scale = effect2.OFXEffect.FindParameterByName("Scale") as OFXDoubleParameter;
					scale.Value = paddingLeft * SheetConfigClefScale / 100;
					OFXDoubleParameter scaleY = effect2.OFXEffect.FindParameterByName("DistortionScaleY") as OFXDoubleParameter;
					if (scaleY != null) scaleY.Value = scale.Value;
					(effect2.OFXEffect.FindParameterByName("Location") as OFXDouble2DParameter).Value = new OFXDouble2D { X = paddingLeft / 2 - noteSizeHalf, Y = 0.5 };
				}
			endGenerateClef:
				if (SheetConfigGenerateStaffLines) {
					if (Plugin.crop == null) { ShowError(new Exceptions.NoPluginNameException(Lang.str.crop)); return false; }
					if (Plugin.mirror == null) { ShowError(new Exceptions.NoPluginNameException(Lang.str.mirror)); return false; }
					VideoTrack sheetTrack = trackHelper.AddVideoTrackAfter();
					VideoEvent videoEvent = sheetTrack.AddVideoEvent(Timecode.FromMilliseconds(songStart), Timecode.FromMilliseconds(songLength));
					Media solidColor = new Media(Plugin.solidColor);
					videoEvent.AddTake(solidColor.GetVideoStreamByIndex(0));
					Color color = SheetConfigLineColor;
					(solidColor.Generator.OFXEffect.FindParameterByName("Color") as OFXRGBAParameter).Value = color.ToOFXColor();
					// 此处用一段非常笨拙的方式生成五线谱。
					Effect effect1 = videoEvent.Effects.AddEffect(Plugin.crop);
					(effect1.OFXEffect.FindParameterByName("YScale") as OFXDoubleParameter).Value = SheetConfigThickness / 500.0;
					Effect effect2 = videoEvent.Effects.AddEffect(Plugin.mirror);
					(effect2.OFXEffect.FindParameterByName("Center") as OFXDouble2DParameter).Value = new OFXDouble2D { X = 0.5, Y = 0.4 };
					Effect effect3 = videoEvent.Effects.AddEffect(Plugin.mirror);
					(effect3.OFXEffect.FindParameterByName("Center") as OFXDouble2DParameter).Value = new OFXDouble2D { X = 0.5, Y = 0.3 };
					Effect effect4 = videoEvent.Effects.AddEffect(Plugin.mirror);
					(effect4.OFXEffect.FindParameterByName("Angle") as OFXDoubleParameter).Value = 180;
					Effect effect5 = videoEvent.Effects.AddEffect(Plugin.picInPic);
					double transformScaleY = 1.25 / virtualHeight * SheetConfigGap * 4;
					double transformPositionY = (double)SheetConfigPosition / virtualHeight + 0.5;
					OFXDoubleParameter scaleY = effect5.OFXEffect.FindParameterByName("DistortionScaleY") as OFXDoubleParameter;
					if (scaleY != null) {
						scaleY.Value = transformScaleY;
						(effect5.OFXEffect.FindParameterByName("Scale") as OFXDoubleParameter).Value = 1.0;
						(effect5.OFXEffect.FindParameterByName("Location") as OFXDouble2DParameter).Value = new OFXDouble2D { X = 0.5, Y = transformPositionY };
						OFXChoiceParameter proportion = effect5.OFXEffect.FindParameterByName("KeepProportions") as OFXChoiceParameter;
						proportion.Value = proportion.Choices[1]; // 固定平行四边形
					} else { // 如果是旧版本 Vegas 不支持“缩放高度”参数。
						videoEvent.Effects.Remove(effect5);
						TrackMotionKeyframe keyFrame = sheetTrack.TrackMotion.MotionKeyframes[0];
						keyFrame.Type = VideoKeyframeType.Hold;
						keyFrame.Height = transformScaleY * projHeight;
						keyFrame.PositionY = (transformPositionY - 0.5) * projHeight;
					}
				}
			}
			#endregion

			#region 消除间隙
			// ⸘视频被削除了‽
			// 注意该方法目前仅能支持不可变的 BPM 和节拍，对于可变的值仅使用其初值。暂时还没有更加妥当的方法，先这样将就一下。此外视频参数的终止值也没法映射到延长长度后的位置上。
			double quarter = midi.MsPerQuarter, bar = quarter * midi.TimeSignatureNumerator;
			double[] maxGaps = { 0, quarter, bar, double.MaxValue };
			double vMaxGap = maxGaps[(int)VConfigLegato], aMaxGap = maxGaps[(int)AConfigLegato];
			if (VConfigLegato != LegatoMaxGapType.STACCATO && !SheetConfig && VConfig && !isSonarLegal) {
				foreach (VideoTrack track in trackHelper.videoTracks) {
					TrackEvents events = track.Events;
					for (int i = 0; i < events.Count - 1; i++)
						if ((events[i + 1].Start - events[i].End).ToMilliseconds() <= vMaxGap)
							events[i].End = events[i + 1].Start;
				}
			}
			if (AConfigLegato != LegatoMaxGapType.STACCATO && AConfig)
				foreach (AudioTrack aTrack in trackHelper.audioTracks) {
					TrackEvents events = aTrack.Events;
					for (int i = 0; i < events.Count - 1; i++)
						if ((events[i + 1].Start - events[i].End).ToMilliseconds() <= aMaxGap)
							events[i].End = events[i + 1].Start;
				}
			#endregion

			if (audioEventSample != null) audioEventSample.Remove();
			foreach (Track track in trackHelper.AllTracks)
				foreach (TrackEvent trackEvent in track.Events)
					trackEvent.Selected = SelectAllGeneratedEvents;

			if (!sonarMode) generatedVideoTracks.AddRange(trackHelper.videoTracks);
			nextTrackIndex = trackHelper.SumUp();
			return !progressForm.RequestAbort;
		}

		private static bool ApplyPvRhythmVisualEffectPartialMethod(VideoEvent videoEvent, PvVisualEffect anim) {
			if (anim.IsNegative) if (Plugin.invert != null) Plugin.ForVideoEvents.Negative(videoEvent); else { ShowError(new Exceptions.NoPluginNameException(Lang.str.invert)); return false; }
			if (anim.IsGrey) if (Plugin.blackAndWhite != null) Plugin.ForVideoEvents.Grey(videoEvent); else { ShowError(new Exceptions.NoPluginNameException(Lang.str.black_and_white)); return false; }
			if (anim.IsInvertLumin) if (Plugin.labAdjust != null) Plugin.ForVideoEvents.InvertLumin(videoEvent); else { ShowError(new Exceptions.NoPluginNameException(Lang.str.lab_adjust)); return false; }
			if (anim.Hue != 0) if (Plugin.hslAdjust != null) Plugin.ForVideoEvents.ChangeHue(videoEvent, anim.Hue); else { ShowError(new Exceptions.NoPluginNameException(Lang.str.hsl_adjust)); return false; }
			if (anim.HorizontalMirrored != 0 || anim.VerticalMirrored != 0) if (Plugin.mirror != null) Plugin.ForVideoEvents.Mirror(videoEvent, anim.HorizontalMirrored, anim.VerticalMirrored);
				else { ShowError(new Exceptions.NoPluginNameException(Lang.str.mirror)); return false; }
			if (anim.ObliqueDirect != 0) if (Plugin.picInPic != null) Plugin.ForVideoEvents.ObliqueExpansion(videoEvent, anim.ObliqueDirect); else { ShowError(new Exceptions.NoPluginNameException(Lang.str.pic_in_pic)); return false; }
			if (anim.PuyoShape != 0) if (Plugin.picInPic != null) Plugin.ForVideoEvents.PuyoPuyo(videoEvent, anim.PuyoShape); else { ShowError(new Exceptions.NoPluginNameException(Lang.str.pic_in_pic)); return false; }
			if (anim.SwingDirect != 0) if (Plugin.picInPic != null) Plugin.ForVideoEvents.Pendulum(videoEvent, anim.SwingDirect); else { ShowError(new Exceptions.NoPluginNameException(Lang.str.pic_in_pic)); return false; }
			// 单周期效果。
			if (anim.IsGaussianBlur) if (Plugin.gaussianBlur != null) Plugin.ForVideoEvents.GaussianBlur(videoEvent); else { ShowError(new Exceptions.NoPluginNameException(Lang.str.gaussian_blur)); return false; }
			if (anim.IsRadialBlur) if (Plugin.radialBlur != null) Plugin.ForVideoEvents.RadialBlur(videoEvent); else { ShowError(new Exceptions.NoPluginNameException(Lang.str.radial_blur)); return false; }
			if (anim.VerticalExpansion != null) if (Plugin.picInPic != null) Plugin.ForVideoEvents.Expansion(videoEvent, anim.VerticalExpansion); else { ShowError(new Exceptions.NoPluginNameException(Lang.str.pic_in_pic)); return false; }
			if (anim.TimeClass2 != null) Plugin.ForVideoEvents.TimeClass2(videoEvent, anim.TimeClass2);
			if (anim.IsZoomOutIn) if (Plugin.picInPic != null) Plugin.ForVideoEvents.ZoomOutIn(videoEvent); else { ShowError(new Exceptions.NoPluginNameException(Lang.str.pic_in_pic)); return false; }
			return true;
		}

		public bool ApplyPvRhythmVisualEffect(VideoEvent videoEvent, PvVisualEffect anim) {
			if (anim.IsReverse) ReverseVideo(videoEvent);
			videoEvent.FlipAllKeyframe(anim.HorizontalFlip, anim.VerticalFlip);
			foreach (VideoMotionKeyframe key in videoEvent.VideoMotion.Keyframes)
				key.RotateBy(anim.RotationDeg);
			return ApplyPvRhythmVisualEffectPartialMethod(videoEvent, anim);
		}

		/// <summary>
		/// 相对音高到拉伸值的转换。
		/// </summary>
		/// <param name="pitch">相对音高。</param>
		/// <returns>拉伸值。</returns>
		public static double Pitch2Stretch(double pitch) {
			return Math.Pow(2, pitch / 12.0);
		}

		/// <summary>
		/// 拉伸值到相对音高的转换。
		/// </summary>
		/// <param name="stretch">拉伸值。</param>
		/// <returns>相对音高。</returns>
		public static double Stretch2Pitch(double stretch) {
			return 12.0 * Math.Log(stretch, 2.0);
		}

		/// <summary>
		/// MIDI 滑音轮的值到半音值的转换。
		/// </summary>
		/// <param name="pitchBend">MIDI 滑音轮的值 ∈ [0 ~ 16383]。</param>
		/// <returns>半音值 ∈ [-12 ~ 12)。</returns>
		public static double PitchBend2Key(int pitchBend) {
			return (pitchBend - 8192) / 8192.0 * 12;
		}

		private bool requestRestartScript = false;

		/// <summary>
		/// 检查移调插件的预设是否存在。
		/// </summary>
		/// <returns>处理是否成功。如果预设不存在并且脚本自己也无法自动生成预设，才会返回 false。</returns>
		private bool ExaminePitchShiftPresetsExist() {
			progressForm.Info = Lang.str.check_pitch_shift_presets;
			if (Plugin.pitchShift == null) {
				ShowError(new Exceptions.NoPluginPitchShiftException());
				return false;
			}
			var checkPresets = new Func<bool>(() => {
				EffectPresets presets = Plugin.pitchShift.Presets;
				List<string> presetNames = new List<string>();
				foreach (EffectPreset preset in presets) presetNames.Add(preset.Name);
				bool presetOk = true;
				for (int i = -12; i <= 12; i++)
					if (!presetNames.Contains(i.ToString()) || !presetNames.Contains(i.ToString() + "~")) {
						presetOk = false;
						break;
					}
				return presetOk;
			});
			if (checkPresets()) return true;
			DialogResult result = MessageBoxEx.Show(Lang.str.no_pitch_shift_presets, Lang.str.no_pitch_shift_presets_title, MessageBoxButtons.YesNo, new string[] { Lang.str.yes_to_add_pitch_shift_presets, Lang.str.no_to_add_pitch_shift_presets } , MessageBoxIcon.Exclamation);
			if (result == DialogResult.No) {
				requestRestartScript = true;
				return false;
			}
			LoadPitchShiftPresets();
			if (checkPresets()) MessageBox.Show(Lang.str.add_pitch_shift_presets_successful, "", MessageBoxButtons.OK, MessageBoxIcon.Information);
			else {
				MessageBox.Show(Lang.str.add_pitch_shift_presets_fail, Lang.str.add_pitch_shift_presets_fail_title, MessageBoxButtons.OK, MessageBoxIcon.Error);
				ShowError(new Exceptions.NoPluginPitchShiftException());
				return false;
			}
			return true;
		}

		private const string PITCH_SHIFT_PRESETS_PATH = @"SOFTWARE\DirectShow\Presets\{ED1B4100-93BE-11D0-AEBC-00A0C9053912}";

		internal void LoadPitchShiftPresets() {
			#region 开始添加预设
			var S = new Func<string, byte[], Tuple<string, byte[]>>((name, binary) => new Tuple<string, byte[]>(name, binary));
			var GetBytes = new Func<string, byte[]>(hexString => {
				hexString = hexString.Replace(" ", "");
				if (hexString.Length % 2 == 1) return null;
				if (Regex.Matches(hexString, @"[^0-9A-Fa-f]").Count != 0) return null;
				byte[] bytes = new byte[hexString.Length / 2];
				for (int i = 0; i < bytes.Length; i++)
					bytes[i] = Convert.ToByte(hexString.Substring(i * 2, 2), 16);
				return bytes;
			});
			var T = new Func<string, string, Tuple<string, byte[]>>((name, binary) => S(name, GetBytes(binary)));
			RegistryKey reg = Registry.CurrentUser.CreateSubKey(PITCH_SHIFT_PRESETS_PATH);
			Tuple<string, byte[]>[] tuples = {
				#region 二进制数据
				T("-12", "4400000003411bedbe93d011aebc00a0c9053912f4ffffff0000000002000000010000000800000000000000000000000000e03f000000000000000000000000f82f4441"),
				T("-11", "4400000003411bedbe93d011aebc00a0c9053912f5ffffff00000000020000000100000008000000000000006379d9928ff3e03f000000000000000000000000f82f4441"),
				T("-10", "4400000003411bedbe93d011aebc00a0c9053912f6ffffff0000000002000000010000000800000000000000c0d6c7c39af5e13f000000000000000000000000f82f4441"),
				T("-9", "4400000003411bedbe93d011aebc00a0c9053912f7ffffff000000000200000001000000080000000000000015b7310afe06e33f000000000000000000000000f82f4441"),
				T("-8", "4400000003411bedbe93d011aebc00a0c9053912f8ffffff00000000020000000100000008000000000000008b728df9a228e43f000000000000000000000000f82f4441"),
				T("-7", "4400000003411bedbe93d011aebc00a0c9053912f9ffffff00000000020000000100000008000000000000005eecf008815be53f000000000000000000000000f82f4441"),
				T("-6", "4400000003411bedbe93d011aebc00a0c9053912faffffff0000000002000000010000000800000000000000cd3b7f669ea0e63f000000000000000000000000f82f4441"),
				T("-5", "4400000003411bedbe93d011aebc00a0c9053912fbffffff0000000002000000010000000800000000000000b0cf68d710f9e73f000000000000000000000000f82f4441"),
				T("-4", "4400000003411bedbe93d011aebc00a0c9053912fcffffff00000000020000000100000008000000000000003d6e3da5fe65e93f000000000000000000000000f82f4441"),
				T("-3", "4400000003411bedbe93d011aebc00a0c9053912fdffffff0000000002000000010000000800000000000000add35a999fe8ea3f000000000000000000000000f82f4441"),
				T("-2", "4400000003411bedbe93d011aebc00a0c9053912feffffff000000000200000001000000080000000000000029c14e073e82ec3f000000000000000000000000f82f4441"),
				T("-1", "4400000003411bedbe93d011aebc00a0c9053912ffffffff0000000002000000010000000800000000000000441310e73734ee3f000000000000000000000000f82f4441"),
				T("0", "4400000003411bedbe93d011aebc00a0c9053912000000000000000002000000010000000800000000000000000000000000f03f000000000000000000000000f82f4441"),
				T("1", "4400000003411bedbe93d011aebc00a0c90539120100000000000000020000000100000008000000000000006379d9928ff3f03f000000000000000000000000f82f4441"),
				T("2", "4400000003411bedbe93d011aebc00a0c9053912020000000000000002000000010000000800000000000000c0d6c7c39af5f13f000000000000000000000000f82f4441"),
				T("3", "4400000003411bedbe93d011aebc00a0c905391203000000000000000200000001000000080000000000000015b7310afe06f33f000000000000000000000000f82f4441"),
				T("4", "4400000003411bedbe93d011aebc00a0c90539120400000000000000020000000100000008000000000000008b728df9a228f43f000000000000000000000000f82f4441"),
				T("5", "4400000003411bedbe93d011aebc00a0c90539120500000000000000020000000100000008000000000000005eecf008815bf53f000000000000000000000000f82f4441"),
				T("6", "4400000003411bedbe93d011aebc00a0c9053912060000000000000002000000010000000800000000000000cd3b7f669ea0f63f000000000000000000000000f82f4441"),
				T("7", "4400000003411bedbe93d011aebc00a0c9053912070000000000000002000000010000000800000000000000b0cf68d710f9f73f000000000000000000000000f82f4441"),
				T("8", "4400000003411bedbe93d011aebc00a0c90539120800000000000000020000000100000008000000000000003c6e3da5fe65f93f000000000000000000000000f82f4441"),
				T("9", "4400000003411bedbe93d011aebc00a0c9053912090000000000000002000000010000000800000000000000add35a999fe8fa3f000000000000000000000000f82f4441"),
				T("10", "4400000003411bedbe93d011aebc00a0c90539120a000000000000000200000001000000080000000000000029c14e073e82fc3f000000000000000000000000f82f4441"),
				T("11", "4400000003411bedbe93d011aebc00a0c90539120b0000000000000002000000010000000800000000000000431310e73734fe3f000000000000000000000000f82f4441"),
				T("12", "4400000003411bedbe93d011aebc00a0c90539120c00000000000000020000000100000008000000000000000000000000000040000000000000000000000000f82f4441"),
				T("-12~", "4400000003411bedbe93d011aebc00a0c9053912f4ffffff0000000002000000000000000800000000000000000000000000e03f000000000000000000000000f82f4441"),
				T("-11~", "4400000003411bedbe93d011aebc00a0c9053912f5ffffff00000000020000000000000008000000000000006379d9928ff3e03f000000000000000000000000f82f4441"),
				T("-10~", "4400000003411bedbe93d011aebc00a0c9053912f6ffffff0000000002000000000000000800000000000000c0d6c7c39af5e13f000000000000000000000000f82f4441"),
				T("-9~", "4400000003411bedbe93d011aebc00a0c9053912f7ffffff000000000200000000000000080000000000000015b7310afe06e33f000000000000000000000000f82f4441"),
				T("-8~", "4400000003411bedbe93d011aebc00a0c9053912f8ffffff00000000020000000000000008000000000000008b728df9a228e43f000000000000000000000000f82f4441"),
				T("-7~", "4400000003411bedbe93d011aebc00a0c9053912f9ffffff00000000020000000000000008000000000000005eecf008815be53f000000000000000000000000f82f4441"),
				T("-6~", "4400000003411bedbe93d011aebc00a0c9053912faffffff0000000002000000000000000800000000000000cd3b7f669ea0e63f000000000000000000000000f82f4441"),
				T("-5~", "4400000003411bedbe93d011aebc00a0c9053912fbffffff0000000002000000000000000800000000000000b0cf68d710f9e73f000000000000000000000000f82f4441"),
				T("-4~", "4400000003411bedbe93d011aebc00a0c9053912fcffffff00000000020000000000000008000000000000003d6e3da5fe65e93f000000000000000000000000f82f4441"),
				T("-3~", "4400000003411bedbe93d011aebc00a0c9053912fdffffff0000000002000000000000000800000000000000add35a999fe8ea3f000000000000000000000000f82f4441"),
				T("-2~", "4400000003411bedbe93d011aebc00a0c9053912feffffff000000000200000000000000080000000000000029c14e073e82ec3f000000000000000000000000f82f4441"),
				T("-1~", "4400000003411bedbe93d011aebc00a0c9053912ffffffff0000000002000000000000000800000000000000441310e73734ee3f000000000000000000000000f82f4441"),
				T("0~", "4400000003411bedbe93d011aebc00a0c9053912000000000000000002000000000000000800000000000000000000000000f03f000000000000000000000000f82f4441"),
				T("1~", "4400000003411bedbe93d011aebc00a0c90539120100000000000000020000000000000008000000000000006379d9928ff3f03f000000000000000000000000f82f4441"),
				T("2~", "4400000003411bedbe93d011aebc00a0c9053912020000000000000002000000000000000800000000000000c0d6c7c39af5f13f000000000000000000000000f82f4441"),
				T("3~", "4400000003411bedbe93d011aebc00a0c905391203000000000000000200000000000000080000000000000015b7310afe06f33f000000000000000000000000f82f4441"),
				T("4~", "4400000003411bedbe93d011aebc00a0c90539120400000000000000020000000000000008000000000000008b728df9a228f43f000000000000000000000000f82f4441"),
				T("5~", "4400000003411bedbe93d011aebc00a0c90539120500000000000000020000000000000008000000000000005eecf008815bf53f000000000000000000000000f82f4441"),
				T("6~", "4400000003411bedbe93d011aebc00a0c9053912060000000000000002000000000000000800000000000000cd3b7f669ea0f63f000000000000000000000000f82f4441"),
				T("7~", "4400000003411bedbe93d011aebc00a0c9053912070000000000000002000000000000000800000000000000b0cf68d710f9f73f000000000000000000000000f82f4441"),
				T("8~", "4400000003411bedbe93d011aebc00a0c90539120800000000000000020000000000000008000000000000003c6e3da5fe65f93f000000000000000000000000f82f4441"),
				T("9~", "4400000003411bedbe93d011aebc00a0c9053912090000000000000002000000000000000800000000000000add35a999fe8fa3f000000000000000000000000f82f4441"),
				T("10~", "4400000003411bedbe93d011aebc00a0c90539120a000000000000000200000000000000080000000000000029c14e073e82fc3f000000000000000000000000f82f4441"),
				T("11~", "4400000003411bedbe93d011aebc00a0c90539120b0000000000000002000000000000000800000000000000431310e73734fe3f000000000000000000000000f82f4441"),
				T("12~", "4400000003411bedbe93d011aebc00a0c90539120c00000000000000020000000000000008000000000000000000000000000040000000000000000000000000f82f4441"),
				#endregion
			};
			foreach (var item in tuples)
				reg.SetValue(item.Item1, item.Item2, RegistryValueKind.Binary);
			reg.Close();
			#endregion
		}

		internal void UnloadPitchShiftPresets() {
			RegistryKey reg = Registry.CurrentUser.CreateSubKey(PITCH_SHIFT_PRESETS_PATH);
			for (int i = -12; i <= 12; i++) {
				reg.DeleteValue(i + "", false);
				reg.DeleteValue(i + "~", false);
			}
			reg.Close();
		}

		private void ChooseBezierType(OFXEffect ofx, string parameter, int choise) {
			OFXChoiceParameter type = ofx.FindParameterByName(parameter) as OFXChoiceParameter;
			type.Value = type.Choices[choise];
		}
		private string GetAnchorList(string commaSeparated) {
			return commaSeparated.Replace(',', '\n');
		}

		/// <summary>
		/// 添加谱号。
		/// </summary>
		/// <param name="clef">谱号类型。0 表示高音谱号，1 表示低音谱号。</param>
		/// <param name="track">将要生成谱号的视频轨道。</param>
		/// <param name="start">开始时间。</param>
		/// <param name="length">持续时间。</param>
		/// <param name="color">谱号颜色。</param>
		/// <param name="size">谱号尺寸（正方形）。缺省为视频高度。</param>
		/// <returns>生成的谱号的视频剪辑。</returns>
		private VideoEvent AddClef(int clef, VideoTrack track, double start, double length, Color color, int? size = null) {
			VideoEvent videoEvent = track.AddVideoEvent(Timecode.FromMilliseconds(start), Timecode.FromMilliseconds(length));
			Media solidColor = new Media(Plugin.solidColor);
			VideoStream stream = solidColor.GetVideoStreamByIndex(0);
			int height = size ?? stream.Height;
			stream.Size = new Size(height, height);
			videoEvent.AddTake(solidColor.GetVideoStreamByIndex(0));
			(solidColor.Generator.OFXEffect.FindParameterByName("Color") as OFXRGBAParameter).Value = color.ToOFXColor();
			return clef == 1 ? AddBassClef(videoEvent) : AddTrebleClef(videoEvent);
		}

		#region 谱号数据杂项
		private VideoEvent AddBassClef(VideoEvent videoEvent) {
			OFXEffect ofx = videoEvent.Effects.AddEffect(Plugin.bzMasking).OFXEffect;
			(ofx.FindParameterByName("Enable_0") as OFXBooleanParameter).Value = true;
			ChooseBezierType(ofx, "Type_0", 3);
			(ofx.FindParameterByName("AnchorList_0") as OFXCustomParameter).Value = GetAnchorList(
				"13,-0.276224,0.249963,-0.276224,0.249963,-0.276224,0.249963,-0.196735,0.275847,-0.255935,0.275847,-0.137533,0.275847,-0.0922621,0.163171,-0.0922621,0.208945,-0.0922621,0.117396,-0.210665,0.0645788,-0.127086,0.0645788,-0.294242,0.0645788,-0.34996,0.215988,-0.346478,0.113875,-0.353442,0.3181,-0.0191321,0.480072,-0.273347,0.47303,0.23508,0.487114,0.35,0.152607,0.35,0.314579,0.35,-0.00936506,-0.336808,-0.480171,0.234303,-0.272425,-0.336808,-0.480171,-0.336808,-0.450368,-0.338445,-0.448714,-0.338445,-0.448714,0.154679,0.0806725,0.162509,-0.366837,0.154679,0.0852387,0.154679,0.194828,0.154235,0.194509,0.154679,0.464235,-0.0289694,0.466849,-0.0285672,0.467922,-0.0293716,0.465776,-0.20745,0.402281,-0.104291,0.480095,-0.269564,0.3496");
			(ofx.FindParameterByName("Width_0") as OFXDoubleParameter).Value = 1;
			(ofx.FindParameterByName("Height_0") as OFXDoubleParameter).Value = 1;
			(ofx.FindParameterByName("Location_0") as OFXDouble2DParameter).Value = new OFXDouble2D { X = 0.406, Y = 0.49 };
			(ofx.FindParameterByName("Enable_1") as OFXBooleanParameter).Value = true;
			ChooseBezierType(ofx, "Type_1", 0);
			(ofx.FindParameterByName("Width_1") as OFXDoubleParameter).Value = 0.1;
			(ofx.FindParameterByName("Height_1") as OFXDoubleParameter).Value = 0.1;
			(ofx.FindParameterByName("Location_1") as OFXDouble2DParameter).Value = new OFXDouble2D { X = 0.865, Y = 0.814 };
			(ofx.FindParameterByName("Enable_2") as OFXBooleanParameter).Value = true;
			ChooseBezierType(ofx, "Type_2", 0);
			(ofx.FindParameterByName("Width_2") as OFXDoubleParameter).Value = 0.1;
			(ofx.FindParameterByName("Height_2") as OFXDoubleParameter).Value = 0.1;
			(ofx.FindParameterByName("Location_2") as OFXDouble2DParameter).Value = new OFXDouble2D { X = 0.865, Y = 0.503 };
			return videoEvent;
		}

		private VideoEvent AddTrebleClef(VideoEvent videoEvent) {
			OFXEffect ofx = videoEvent.Effects.AddEffect(Plugin.bzMasking).OFXEffect;
			(ofx.FindParameterByName("Enable_0") as OFXBooleanParameter).Value = true;
			ChooseBezierType(ofx, "Type_0", 3);
			(ofx.FindParameterByName("AnchorList_0") as OFXCustomParameter).Value = GetAnchorList(
				"18,-0.0418092,0.147896,-0.0390159,0.142861,-0.0446025,0.152931,-0.0537955,0.320841,-0.0692064,0.235224,-0.0528644,0.37958,0.00892934,0.493904,0.00706714,0.492226,0.00706714,0.498939,0.0831908,0.303718,0.0813287,0.40777,0.0968895,0.177005,-0.00242559,0.0845395,0.000367714,0.0795045,-0.00521891,0.0895745,0.01641,-0.00792633,0.0192035,-0.012961,0.0136166,-0.00289162,0.16367,-0.107241,0.148259,0.00234764,0.184218,-0.221967,0.0626429,-0.266488,0.0654362,-0.271523,0.0598496,-0.261453,0.0883278,-0.412036,0.0873967,-0.400287,0.09019,-0.41707,0.0506566,-0.492515,0.0813828,-0.477411,0.0199302,-0.50762,-0.0846174,-0.436008,-0.0734442,-0.508174,-0.093179,-0.403474,-0.0520831,-0.37094,-0.068843,-0.381007,-0.0246859,-0.360666,0.0146977,-0.401762,0.00613605,-0.374365,0.026684,-0.436008,-0.0349599,-0.470255,-0.00413792,-0.46683,-0.0377532,-0.46522,0.0369579,-0.478817,-0.00413792,-0.492515,0.0667531,-0.46707,0.0729169,-0.415461,0.0738479,-0.42553,0.0719857,-0.40539,0.0438073,-0.269913,0.0466006,-0.274948,0.0249716,-0.276762,-0.165097,-0.0849811,-0.147406,-0.274627,-0.175339,0.0559931");
			(ofx.FindParameterByName("Width_0") as OFXDoubleParameter).Value = 1;
			(ofx.FindParameterByName("Height_0") as OFXDoubleParameter).Value = 1;
			(ofx.FindParameterByName("Location_0") as OFXDouble2DParameter).Value = new OFXDouble2D { X = 0.494, Y = 0.506 };
			OFXEffect ofx2 = videoEvent.Effects.AddEffect(vegas.VideoFX.FindChildByUniqueID("{Svfx:com.vegascreativesoftware:bzmasking}")).OFXEffect;
			(ofx2.FindParameterByName("Invert") as OFXBooleanParameter).Value = true;
			(ofx2.FindParameterByName("Enable_0") as OFXBooleanParameter).Value = true;
			ChooseBezierType(ofx2, "Type_0", 3);
			(ofx2.FindParameterByName("AnchorList_0") as OFXCustomParameter).Value = GetAnchorList(
				"4,-0.042692,-0.109656,-0.0380264,-0.114321,-0.0473576,-0.10499,-0.0349159,0.019427,-0.0520233,-0.0381158,-0.0193639,0.0894115,0.0117404,0.109629,0.016406,0.104963,0.0070747,0.114294,0.0428446,0.0256478,0.0443998,0.0738593,0.0412893,-0.0225637");
			(ofx2.FindParameterByName("Width_0") as OFXDoubleParameter).Value = 1;
			(ofx2.FindParameterByName("Height_0") as OFXDoubleParameter).Value = 1;
			(ofx2.FindParameterByName("Location_0") as OFXDouble2DParameter).Value = new OFXDouble2D { X = 0.519, Y = 0.788 };
			(ofx2.FindParameterByName("Enable_1") as OFXBooleanParameter).Value = true;
			ChooseBezierType(ofx2, "Type_1", 3);
			(ofx2.FindParameterByName("AnchorList_1") as OFXCustomParameter).Value = GetAnchorList(
				"3,-0.060958,0.0986317,-0.0631109,0.10049,-0.0664931,0.104167,-0.0259026,-0.0987853,-0.0253751,-0.0998003,0.000749723,-0.0925434,0.0602563,0.035178,0.0733187,-0.0388423,0.0331808,0.123776");
			(ofx2.FindParameterByName("Width_1") as OFXDoubleParameter).Value = 1;
			(ofx2.FindParameterByName("Height_1") as OFXDoubleParameter).Value = 1;
			(ofx2.FindParameterByName("Location_1") as OFXDouble2DParameter).Value = new OFXDouble2D { X = 0.581, Y = 0.355 };
			(ofx2.FindParameterByName("Enable_2") as OFXBooleanParameter).Value = true;
			ChooseBezierType(ofx2, "Type_2", 3);
			(ofx2.FindParameterByName("AnchorList_2") as OFXCustomParameter).Value = GetAnchorList(
				"8,0.0207578,0.163302,0.0262928,0.157767,0.0152227,0.168838,0.035518,0.0710507,0.041053,0.0655156,0.0299829,0.0765857,-0.0345927,-0.0101302,-0.0272127,0.0470654,-0.0475079,-0.0710158,0.0133777,-0.107916,0.0189128,-0.113451,0.00784269,-0.102381,-0.00876247,-0.0101302,-0.0327477,-0.0581006,0.0152228,0.0378403,0.0458624,0.0353446,0.0473138,0.0353446,0.0473138,0.036796,0.0834884,-0.163267,0.0890235,-0.168802,0.0779534,-0.157732,-0.0770282,-0.0636357,-0.0401278,-0.187252,-0.123154,0.0618256");
			(ofx2.FindParameterByName("Width_2") as OFXDoubleParameter).Value = 1;
			(ofx2.FindParameterByName("Height_2") as OFXDoubleParameter).Value = 1;
			(ofx2.FindParameterByName("Location_2") as OFXDouble2DParameter).Value = new OFXDouble2D { X = 0.453, Y = 0.416 };
			return videoEvent;
		}
		#endregion

		/// <summary>
		/// 获取反转子剪辑。
		/// </summary>
		/// <param name="media">现有媒体</param>
		/// <returns>反转子剪辑</returns>
		public Subclip GetReversedSubclip(Media media, Timecode start = null, Timecode length = null) {
			bool isReversed = true;
			start = start ?? (media is Subclip ? media.TimecodeIn + (media as Subclip).Start : media.TimecodeIn);
			length = length ?? media.Length;
			if (media is Subclip && (media as Subclip).IsReversed) isReversed = false;
			return new Subclip(
				vegas.Project,
				media.FilePath,
				start,
				length,
				isReversed,
				new Path(media.FilePath).FullFileName + ' ' + Lang.str.reverse_suffix_tag
			);
		}

		/// <summary>
		/// 获取反转子剪辑。
		/// </summary>
		/// <param name="trackEvent">现有轨道剪辑</param>
		/// <returns>反转子剪辑</returns>
		public Subclip GetReversedSubclip(TrackEvent trackEvent) {
			Take take = trackEvent.ActiveTake;
			return GetReversedSubclip(take.Media, take.Offset, take.AvailableLength);
		}

		/// <summary>
		/// 在轨道追加媒体文件的音频或视频。
		/// </summary>
		/// <param name="track">轨道。</param>
		/// <param name="media">媒体。</param>
		/// <param name="trackEvent">输出的轨道事件。</param>
		/// <returns>是否成功添加媒体。</returns>
		private static bool Track_AppendMedia<T, E>(T track, Media media, out E trackEvent)
			where T : Track
			where E : TrackEvent {
			if (track is AudioTrack) {
				trackEvent = (track as AudioTrack).AddAudioEvent(track.Length, media.Length) as E;
				try {
					trackEvent.AddTake(media.GetAudioStreamByIndex(0));
				} catch (Exception e) { ShowError(new Exceptions.NoAudioTakeException(), e); return false; }
			} else if (track is VideoTrack) {
				trackEvent = (track as VideoTrack).AddVideoEvent(track.Length, media.Length) as E;
				try {
					trackEvent.AddTake(media.GetVideoStreamByIndex(0));
				} catch (Exception e) { ShowError(new Exceptions.NoVideoTakeException(), e); return false; }
			} else { trackEvent = null; return false; }
			return true;
		}

		/// <summary>
		/// 将新事件追加到指定轨道的末尾。
		/// </summary>
		/// <typeparam name="T">轨道事件类型。</typeparam>
		/// <param name="track">轨道。</param>
		/// <param name="source">源事件。</param>
		/// <param name="startTime">指定开始时间，如果需要整体往后移动的话。</param>
		/// <param name="isCopy">是否是复制而不是移动。</param>
		/// <returns>追加后的新事件。</returns>
		private static T Track_Append<T>(Track track, T source, Timecode startTime, bool isCopy = false) where T : TrackEvent {
			Timecode start = track.Length;
			if (track.Events.Count == 0) start += startTime;
			return AppendOrCopyEventAtTime(track, source, start, isCopy);
		}

		/// <summary>
		/// 将新事件追加到指定事件的后面。
		/// </summary>
		/// <typeparam name="T">轨道事件类型。</typeparam>
		/// <param name="lastEvent">指定的上一个事件。</param>
		/// <param name="track">轨道。</param>
		/// <param name="source">源事件。</param>
		/// <param name="startTime">当上一个事件为空时指定的开始时间。</param>
		/// <param name="isCopy">是否是复制而不是移动。</param>
		/// <returns>追加后的新事件。</returns>
		public static T AppendAtEventTail<T>(T lastEvent, Track track, T source, Timecode startTime = null, bool isCopy = false) where T : TrackEvent {
			startTime = startTime ?? Timecode.FromMilliseconds(0);
			if (lastEvent != null) startTime = lastEvent.End;
			return AppendOrCopyEventAtTime(track, source, startTime, isCopy);
		}

		/// <summary>
		/// 将事件复制到“它”的后面。
		/// </summary>
		/// <typeparam name="T">轨道事件类型。</typeparam>
		/// <param name="source">源事件。</param>
		/// <param name="it">指定的上一个事件。</param>
		/// <param name="track">轨道。如为空则自动获取轨道事件所在的轨道。</param>
		/// <returns>追加后的新事件。</returns>
		public static T CopyEventAtItsTail<T>(T source, T it, Track track = null) where T : TrackEvent {
			track = track ?? source.Track;
			return AppendAtEventTail(it, track, source, null, true);
		}

		/// <summary>
		/// 内部使用，追加或复制事件到指定的时间码。
		/// </summary>
		/// <typeparam name="T">轨道事件类型。</typeparam>
		/// <param name="track">轨道。</param>
		/// <param name="source">源事件。</param>
		/// <param name="startTime">当上一个事件为空时指定的开始时间。</param>
		/// <param name="isCopy">是否是复制而不是移动。</param>
		/// <returns>追加后的新事件。</returns>
		private static T AppendOrCopyEventAtTime<T>(Track track, T source, Timecode startTime = null, bool isCopy = false) where T : TrackEvent {
			if (!isCopy) {
				source.Track = track;
				source.Start = startTime;
				return source;
			} else return source.Copy(track, startTime) as T;
		}

		private static TrackEvent GetAssociatedEvent(TrackEvent trackEvent) {
			if (!trackEvent.IsGrouped) return null;
			foreach (TrackEvent eventInGroup in trackEvent.Group)
				if (trackEvent is AudioEvent && eventInGroup is TrackEvent)
					return eventInGroup;
			return null;
		}
		public static VideoEvent GetAssociatedEvent(AudioEvent trackEvent) {
			return GetAssociatedEvent(trackEvent as TrackEvent) as VideoEvent;
		}
		public static AudioEvent GetAssociatedEvent(VideoEvent trackEvent) {
			return GetAssociatedEvent(trackEvent as TrackEvent) as AudioEvent;
		}

		private bool GetSelectedSources(AudioTrack aSmpTrack, VideoTrack vSmpTrack, out EventSet[] eventSetArr) {
			eventSetArr = null;
			List<EventSet> eventSets = new List<EventSet>();
			if (!IsFromSelectedClip) {
				List<Media> selections = new List<Media>();
				#region 验证合法性
				bool ytpOverLength = false;
				bool ytpInMediaGenerator = false;
				bool noMediaTake = false;
				Exception noMediaTakeException = null;
				if (IsFromSelectedMedia)
					foreach (Media media in vegas.Project.MediaPool.GetSelectedMedia()) {
						try {
							if (!media.IsValid())
								noMediaTake = true;
							else if (YtpConfigMinLen > media.Length.ToMilliseconds())
								ytpOverLength = true;
							else if (media.Generator != null)
								ytpInMediaGenerator = true;
							else selections.Add(media);
						} catch (Exception e) {
							noMediaTake = true;
							noMediaTakeException = noMediaTakeException ?? e;
							continue;
						}
					}
				if (selections.Count == 0) {
					if (YtpConfigMinLen > media.Length.ToMilliseconds())
						ytpOverLength = true;
					else if (media.Generator != null)
						ytpInMediaGenerator = true;
					else selections.Add(media);
				}
				if (selections.Count /* still */ == 0) {
					if (ytpOverLength) {
						ShowError(new Exceptions.YtpOverLengthException(), ShowErrorState.RESUME_NEXT);
						return false;
					}
					if (ytpInMediaGenerator) {
						ShowError(new Exceptions.YtpInMediaGeneratorException(), ShowErrorState.RESUME_NEXT);
						return false;
					}
					if (noMediaTake) {
						if (noMediaTakeException != null)
							ShowError(new Exceptions.NoMediaTakeException(), noMediaTakeException, ShowErrorState.RESUME_NEXT);
						else ShowError(new Exceptions.NoMediaTakeException(), ShowErrorState.RESUME_NEXT);
						return false;
					}
				}
				#endregion
				#region 放置示例轨道剪辑
				foreach (Media media in selections) {
					AudioEvent aSmp = null; VideoEvent vSmp = null;
					Subclip aReverse, vReverse;
					if (AConfig) if (!Track_AppendMedia(aSmpTrack, media, out aSmp)) return false;
					if (VConfig) if (!Track_AppendMedia(vSmpTrack, media, out vSmp)) return false;
					aReverse = vReverse = GetReversedSubclip(media);
					eventSets.Add(new EventSet(aSmp, vSmp, aReverse, vReverse));
				}
				#endregion
			} else {
				#region 放置示例轨道剪辑
				Func<AudioEvent, VideoEvent, bool, bool> appendOne = (aEvent, vEvent, notIgnore) => {
					Action<Exception> SE = e => { // 色氵炎々（误
						if (notIgnore) ShowError(e, ShowErrorState.RESUME_NEXT);
					};
					AudioEvent aSmp = null; VideoEvent vSmp = null;
					Subclip aReverse = null, vReverse = null;
					if (AConfig) {
						if (aEvent == null) { SE(new Exceptions.NoAudioTakeException()); return false; }
						if (YtpConfigMinLen > aEvent.Length.ToMilliseconds()) goto ytpOverLength;
						aReverse = vReverse = GetReversedSubclip(aEvent);
					}
					if (VConfig) {
						if (vEvent == null) { SE(new Exceptions.NoVideoTakeException()); return false; }
						if (YtpConfigMinLen > vEvent.Length.ToMilliseconds()) goto ytpOverLength;
						if (vEvent.ActiveTake.Media.Generator != null) goto ytpInMediaGenerator;
						if (!AConfig || vEvent.ActiveTake.Media != aEvent.ActiveTake.Media)
							vReverse = GetReversedSubclip(vEvent);
					}
					// 在后面单独添加，避免之后报错又消不掉。
					if (AConfig) aSmp = Track_Append(aSmpTrack, aEvent, Timecode.FromMilliseconds(0), true);
					if (VConfig) vSmp = Track_Append(vSmpTrack, vEvent, Timecode.FromMilliseconds(0), true);
					eventSets.Add(new EventSet(aSmp, vSmp, aReverse, vReverse));
					return true;
				ytpOverLength:
					SE(new Exceptions.YtpOverLengthException());
					return false;
				ytpInMediaGenerator:
					SE(new Exceptions.YtpInMediaGeneratorException());
					return false;
				};
				TrackEvent[] _selected = GetSelectedEvents();
				AudioEvent[] _selectedAudio = GetSelectedAudioEvents();
				VideoEvent[] _selectedVideo = GetSelectedVideoEvents();
				#endregion
				#region 验证合法性
				if (_selectedAudio.Length == 1 && _selectedVideo.Length == 1)
					appendOne(_selectedAudio[0], _selectedVideo[0], true);
				else if (_selected.Length == 1)
					appendOne(selectedEventSet.audioEvent, selectedEventSet.videoEvent, true);
				else {
					foreach (TrackEvent trackEvent in _selected) {
						if (!trackEvent.IsGrouped) continue;
						AudioEvent aEvent = null;
						VideoEvent vEvent = null;
						if (trackEvent is AudioEvent) {
							aEvent = trackEvent as AudioEvent;
							vEvent = GetAssociatedEvent(aEvent);
							if (vEvent == null) continue;
						} else if (trackEvent is VideoEvent) {
							vEvent = trackEvent as VideoEvent;
							aEvent = GetAssociatedEvent(vEvent);
							if (aEvent == null) continue;
						} else continue;
						appendOne(aEvent, vEvent, false);
					}
					if (eventSets.Count == 0) appendOne(selectedEventSet.audioEvent, selectedEventSet.videoEvent, true);
				}
				#endregion
			}
			eventSetArr = eventSets.ToArray();
			return true;
		}

		/// <summary>
		/// 为指定的轨道剪辑创建一个新的分组。
		/// </summary>
		/// <param name="trackEvents">多个轨道剪辑</param>
		/// <returns>轨道剪辑组</returns>
		public TrackEventGroup GroupTrackEvents(params TrackEvent[] trackEvents) {
			TrackEventGroup group = new TrackEventGroup(vegas.Project);
			vegas.Project.TrackEventGroups.Add(group);
			foreach (TrackEvent trackEvent in trackEvents)
				group.Add(trackEvent);
			return group;
		}

		/// <summary>
		/// 临时轨道事件分组。
		/// </summary>
		public class TempEventGroup {
			private Timecode startTime;
			private List<TrackEvent> events = new List<TrackEvent>();
			private readonly EntryPoint parent;
			private bool Enabled { get { return parent.ConfigCreateEventGroup && (parent.AConfig || parent.VConfig); } }
			public TempEventGroup(EntryPoint parent) { this.parent = parent; }
			/// <summary>
			/// 将轨道事件添加到临时轨道事件分组的结尾处。
			/// </summary>
			/// <param name="trackEvent">轨道事件。</param>
			public void Add(TrackEvent trackEvent) {
				if (!Enabled) return;
				if (trackEvent == null) { Bundle(); return; }
				if (startTime == null) startTime = trackEvent.Start;
				if (startTime != trackEvent.Start) Bundle();
				events.Add(trackEvent);
			}
			/// <summary>
			/// 捆绑轨道事件。
			/// </summary>
			/// <returns>轨道事件分组。</returns>
			public TrackEventGroup Bundle() {
				if (!Enabled) return null;
				TrackEventGroup group = null;
				if (events.Count > 1) group = parent.GroupTrackEvents(events.ToArray());
				startTime = null;
				events = new List<TrackEvent>();
				return group;
			}
		}

		/// <summary>
		/// 整合后的填补轨道间隙函数。函数具体操作方式由 <paramref name="type"/> 枚举参数决定。<br />
		/// 注意：第一个轨道剪辑之前的空隙不会消除。<br /><br />
		/// <c><paramref name="type"/> == <see cref="TrackLegatoType.STACKING"/> :</c><br />
		/// 将指定的一些轨道的剪辑堆积起来，消除中间的空隙。<br /><br />
		/// <c><paramref name="type"/> == <see cref="TrackLegatoType.LIMIT_STRETCHING"/> :</c><br />
		/// 为指定的一些轨道以拉伸的方式填补中间的空隙。<br />
		/// 不强制拉伸。Vegas 限制拉伸素材的速率在 0.25 ~ 2 之间或更小（取决于变调操作）。<br />
		/// 当素材拉伸到极限之后将不再继续拉伸。<br /><br />
		/// <c><paramref name="type"/> == <see cref="TrackLegatoType.STRETCHING"/> :</c><br />
		/// 为指定的一些轨道以拉伸的方式填补中间的空隙。<br />
		/// 强制拉伸。Vegas 限制拉伸素材的速率在 0.25 ~ 2 之间或更小（取决于变调操作）。<br />
		/// 当素材拉伸到极限之后改变素材的长度，播放原素材裁剪范围之外的内容（拉长）或裁去多余长度的内容（缩短）。<br /><br />
		/// <c><paramref name="type"/> == <see cref="TrackLegatoType.LENGTHENING"/> :</c><br />
		/// 为指定的一些轨道以改变持续时间的方式填补中间的空隙。<br /><br />
		/// <c><paramref name="type"/> == <see cref="TrackLegatoType.INCREASE_SPACING"/> :</c><br />
		/// 以指定的时间长度 <paramref name="increaseSpacingTime"/> 增加指定的轨道事件之间的空隙。<br /><br />
		/// </summary>
		///
		/// <param name="type">填补轨道间隙的方式。</param>
		/// <param name="forEvents">是否应用于选定的轨道事件而不是选定的轨道。</param>
		/// <param name="withinGroup">是否包含轨道事件分组内的其它轨道事件。</param>
		/// <param name="increaseSpacingTime">仅在 <paramref name="type"/> 为 <see cref="TrackLegatoType.INCREASE_SPACING"
		/// /> 时有效。<br />
		/// 指定增加事件之间空隙的时间长度。</param>
		/// <param name="reverseDirection">反转方向。开启后将向前填补。</param>
		/// <param name="tracks">仅在 <paramref name="forEvents"/> 为 <c>false</c> 时有效。<br />
		/// 指定的多个轨道。如果为空，则为选中的轨道。</param>
		/// <param name="events">仅在 <paramref name="forEvents"/> 为 <c>true</c> 时有效。<br />
		/// 指定的多个轨道事件。如果为空，则为选中的轨道事件。</param>
		public void LegatoTracks(
			TrackLegatoType type,
			bool forEvents,
			bool withinGroup,
			Timecode increaseSpacingTime = null,
			bool reverseDirection = false,
			Track[] tracks = null,
			TrackEvent[] events = null
		) {
			if ((type == TrackLegatoType.INCREASE_SPACING || type == TrackLegatoType.INCREASE_SPACING_ALL_TRACKS)
				&& increaseSpacingTime == null) return;
			if (!forEvents) {
				tracks = tracks ?? GetSelectedTracks();
				if (tracks == null) return;
				if (type == TrackLegatoType.STACKING_ALL_AFTER) type = TrackLegatoType.STACKING;
				List<TrackEvent> _events = new List<TrackEvent>();
				foreach (Track track in tracks)
					_events.AddRange(track.Events);
				events = !withinGroup ? _events.ToArray() : GetEventsWithinGroup(_events);
			} else events = events ?? (!withinGroup ? GetSelectedEvents() : GetSelectedEventsWithinGroup());
			if (events == null) return;
			foreach (TrackEvent curEvent in events) {
				if (!reverseDirection) {
					TrackEvent nextEvent = curEvent.Next();
					if (nextEvent == null) continue;
					switch (type) {
						case TrackLegatoType.STACKING: {
							nextEvent.Start = curEvent.End;
							break;
						}
						case TrackLegatoType.LIMIT_STRETCHING:
						case TrackLegatoType.STRETCHING: {
							bool forceStretch = type == TrackLegatoType.STRETCHING;
							double rate = curEvent.Length.ToMilliseconds() / (nextEvent.Start - curEvent.Start).ToMilliseconds();
							curEvent.RelativeAdjustPlaybackRate(rate, forceStretch, false);
							break;
						}
						case TrackLegatoType.LENGTHENING: {
							curEvent.Length = nextEvent.Start - curEvent.Start;
							break;
						}
						case TrackLegatoType.INCREASE_SPACING: {
							foreach (TrackEvent anAfterEvent in curEvent.GetAllAfterEvents(false))
								anAfterEvent.Start += increaseSpacingTime;
							break;
						}
						case TrackLegatoType.STACKING_ALL_AFTER: {
							Timecode distance = nextEvent.Start - curEvent.End;
							foreach (TrackEvent anAfterEvent in curEvent.GetAllAfterEvents(false))
								anAfterEvent.Start -= distance;
							break;
						}
						case TrackLegatoType.STACKING_ALL_TRACKS: {
							Timecode from = curEvent.End, to = nextEvent.Start;
							StackingAllTracksPartialMethod(from, to);
							break;
						}
						case TrackLegatoType.INCREASE_SPACING_ALL_TRACKS: {
							IncreaseSpacingAllTracksPartialMethod(curEvent.End, increaseSpacingTime);
							break;
						}
						default:
							break;
					}
				} else {
					TrackEvent prevEvent = curEvent.Previous();
					if (prevEvent == null) continue;
					switch (type) {
						case TrackLegatoType.STACKING: {
							curEvent.Start = prevEvent.End;
							break;
						}
						case TrackLegatoType.LIMIT_STRETCHING:
						case TrackLegatoType.STRETCHING: {
							bool forceStretch = type == TrackLegatoType.STRETCHING;
							double rate = curEvent.Length.ToMilliseconds() / (curEvent.Start - prevEvent.Start).ToMilliseconds();
							curEvent.RelativeAdjustPlaybackRate(rate, forceStretch, true);
							break;
						}
						case TrackLegatoType.LENGTHENING: {
							curEvent.SetLengthReversely(curEvent.Start - prevEvent.Start);
							break;
						}
						case TrackLegatoType.INCREASE_SPACING: {
							foreach (TrackEvent anAfterEvent in curEvent.GetAllAfterEvents(true))
								anAfterEvent.Start += increaseSpacingTime;
							break;
						}
						case TrackLegatoType.STACKING_ALL_AFTER: {
							Timecode distance = curEvent.Start - prevEvent.End;
							foreach (TrackEvent anAfterEvent in curEvent.GetAllAfterEvents(true))
								anAfterEvent.Start -= distance;
							break;
						}
						case TrackLegatoType.STACKING_ALL_TRACKS: {
							Timecode from = prevEvent.End, to = curEvent.Start;
							StackingAllTracksPartialMethod(from, to);
							break;
						}
						case TrackLegatoType.INCREASE_SPACING_ALL_TRACKS: {
							IncreaseSpacingAllTracksPartialMethod(curEvent.Start, increaseSpacingTime);
							break;
						}
						default:
							break;
					}
				}
			}
		}

		private void StackingAllTracksPartialMethod(Timecode from, Timecode to) {
			Timecode distance = to - from;
			foreach (Track track in vegas.Project.Tracks) {
				track.Split(from);
				track.Split(to);
				foreach (TrackEvent unwantedEvent in track.FindEventsIn(from, to))
					track.Events.Remove(unwantedEvent);
				foreach (TrackEvent anAfterEvent in track.GetAllAfterEvents(from))
					anAfterEvent.Start -= distance;
			}
		}

		private void IncreaseSpacingAllTracksPartialMethod(Timecode time, Timecode spacing) {
			foreach (Track track in vegas.Project.Tracks) {
				track.Split(time);
				foreach (TrackEvent anAfterEvent in track.GetAllAfterEvents(time))
					anAfterEvent.Start += spacing;
			}
		}

		/// <summary>
		/// 获取第一个不是调整轨道的轨道序号。主要用于便于在顶层调整轨道的下方生成轨道。
		/// </summary>
		/// <remarks>注意：仅在 Vegas Pro 19 及以上的版本才可使用。低于这些版本则函数将会返回 0。</remarks>
		/// <returns>第一个不是调整轨道的轨道序号。</returns>
		public int GetFirstNotAdjustmentTrackIndex() {
			if (!SupportAdjustmentTrack()) return 0; // Vegas Pro 18 及以下直接返回 0。
			foreach (Track track in vegas.Project.Tracks)
				if (track is VideoTrack) {
					VideoTrack videoTrack = track as VideoTrack;
					bool isAdjust = IsAdjustmentTrack(track);
					if (!isAdjust) return videoTrack.Index;
				} else return track.Index; // 否则这个轨道就是音频轨道。
			return vegas.Project.Tracks.Count; // 否则生成到末尾。
		}

		/// <summary>
		/// 判断轨道是否为调整轨道。使用反射来获取，省去低版本因不支持属性而报错的烦恼。
		/// </summary>
		/// <param name="track">要检测的轨道。</param>
		/// <returns>该轨道是否是调整轨道。</returns>
		public static bool IsAdjustmentTrack(Track track) {
			if (!(track is VideoTrack)) return false;
			VideoTrack videoTrack = track as VideoTrack;
			Type videoTrackType = typeof(VideoTrack); // 为了避免再分出一个 Vegas Pro 19 专用脚本，使用反射来执行操作更为方便一些。
			PropertyInfo isAdjustProp = videoTrackType.GetProperty("IsAdjustmentTrack");
			if (isAdjustProp == null) return false; // 认为是低于 Vegas Pro 19 的版本，自然也不可能是调整轨道了。
			return (bool)isAdjustProp.GetValue(videoTrack);
		}

		/// <summary>
		/// 判断是否支持调整轨道。
		/// </summary>
		/// <returns>仅在 Vegas Pro 19 及更高版本返回 <c>true</c>。</returns>
		public static bool SupportAdjustmentTrack() {
			return typeof(VideoTrack).GetProperty("IsAdjustmentTrack") != null;
		}

		/// <summary>
		/// 从 <see cref="NAudio.Midi"/> 的 <see cref="NoteEvent.Velocity"/> 音符力度值映射到
		/// <see cref="ScriptPortal.Vegas"/> 的 <see cref="Fade.Gain"/> 增益值（音频为音量，视频为不透明度）。
		/// </summary>
		/// <param name="velocity">音符力度值。</param>
		/// <param name="media">媒体类型，视频还是音频。</param>
		/// <returns>增益值。</returns>
		public float MapVelocityToGain(int velocity, MediaType media) {
			decimal min, max; // 原标度值。此处为力度。
			decimal a, b; // 新标度值。此处为增益。
			ConfigForm c = configForm;
			if (media == MediaType.Audio) {
				min = c.AudioVelocityLessBox.Value;
				max = c.AudioVelocityMoreBox.Value;
				a = c.AudioGainLessBox.Value;
				b = c.AudioGainMoreBox.Value;
			} else if (media == MediaType.Video) {
				min = c.VideoVelocityLessBox.Value;
				max = c.VideoVelocityMoreBox.Value;
				a = c.VideoGainLessBox.Value;
				b = c.VideoGainMoreBox.Value;
			} else return 0;
			return (float)Map(velocity, min, max, a, b) / 100;
		}

		/// <summary>
		/// 即将一个数值从一个标度单位转移到另一个标度单位，新旧单位成线性关系，且不一定成正比关系，比如说摄氏度和华氏度的关系，返回对应的新值。<br />
		/// 比如说，将一个取值范围为 0 ~ 255 的颜色值转到 0 ~ 100 的值。
		/// </summary>
		/// <remarks>不准温度计</remarks>
		/// <param name="x">待转换的原标度数值。</param>
		/// <param name="min">原标度值（小）。</param>
		/// <param name="max">原标度值（大）。</param>
		/// <param name="a">新标度值（小）。</param>
		/// <param name="b">新标度值（大）。</param>
		/// <returns>转换后的新标度数值。</returns>
		public static decimal Map(decimal x, decimal min, decimal max, decimal a, decimal b) {
			return (b - a) * (x - min) / (max - min) + a;
		}

		/// <summary>
		/// 转换音乐节拍。
		/// </summary>
		/// <param name="audioEvent">单个音乐音频事件。</param>
		/// <exception cref="Exceptions.ConvertMusicBeatsUnsupportedBeatsException">仅支持在四四拍、四三拍、八六拍之间互转，其它节拍不支持。</exception>
		public void ConvertMusicBeats(AudioEvent audioEvent) {
			uint beats = vegas.Project.Ruler.BeatsPerMeasure;
			if (!new List<uint> { 4, 3, 6 }.Contains(beats)) {
				ShowError(new Exceptions.ConvertMusicBeatsUnsupportedBeatsException(), ShowErrorState.SILENCE);
				return;
			}
			#if VER_GEQ_16
			audioEvent.Method = TimeStretchPitchShift.Elastique;
			#endif
			Timecode razor = audioEvent.Start;
			Func<int> measure = new Func<int>(() => razor.Measure()),
				beat = new Func<int>(() => razor.Beat());
			Action<int> Next = new Action<int>(factor => razor = razor.Next(factor));
			razor = GetTimecodeFromMeasureBeat(measure(), beat());
			while (razor < audioEvent.Start) Next(1);
			if (beat() != 1) razor = GetTimecodeFromMeasureBeat(measure() + 1, 1);
			List<AudioEvent> segments = new List<AudioEvent> { audioEvent },
				stretches = new List<AudioEvent>();
			Func<AudioEvent> lastEvent = new Func<AudioEvent>(() => segments[segments.Count - 1]);
			Timecode end = audioEvent.End;
			int endMeasure = end.Measure();
			int[] cutBeats =
				beats == 4 ? new int[] { 3, 5 } :
				beats == 3 ? new int[] { 3, 4 } :
				beats == 6 ? new int[] { 5, 7 } : null;
			for (int i = measure(); i <= endMeasure; i++) {
				for (int j = 0; j < cutBeats.Length; j++) {
					int curBeat = cutBeats[j];
					razor = GetTimecodeFromMeasureBeat(i, curBeat);
					if (i == endMeasure && razor >= end) break;
					AudioEvent nextEvent = lastEvent().Split(razor - lastEvent().Start) as AudioEvent;
					segments.Add(nextEvent);
					if (j == 0) stretches.Add(nextEvent);
				}
			}
			double rate =
				beats == 4 ? 2 :
				beats == 3 ? 0.5 :
				beats == 6 ? 0.5 : 1;
			foreach (AudioEvent stretch in stretches)
				stretch.RelativeAdjustPlaybackRate(rate);
			for (int i = 1; i < segments.Count; i++)
				segments[i].Start = segments[i - 1].End;
		}

		/// <summary>
		/// 根据小节和节拍获取时间码。
		/// </summary>
		/// <param name="measure">小节。</param>
		/// <param name="beat">节拍。</param>
		/// <returns>时间码。</returns>
		public static Timecode GetTimecodeFromMeasureBeat(int measure, int beat) {
			return Timecode.FromPositionString(string.Format("{0}.{1}.000", measure, beat), RulerFormat.MeasuresAndBeats);
		}

		/// <summary>
		/// 生成 YouTube Poop。
		/// </summary>
		private bool GenerateYtp() {
			Timecode generateBeginTime = GenerateAt == GenerateAt.CUSTOM ? GenerateAtCustomTimecode :
				GenerateAt == GenerateAt.CURSOR ? vegas.Transport.CursorPosition : Timecode.FromMilliseconds(0);
			progressForm.Info = Lang.str.processing_ytp;
			AudioTrack aSmpTrack = null, aTrack = IsAPreferredTrack ? AConfigPreferredTrack.Track : null;
			VideoTrack vSmpTrack = null, vTrack = IsVPreferredTrack ? VConfigPreferredTrack.Track : null;
			int startIndex = GenerateBelowTopAdjustmentTrack ? GetFirstNotAdjustmentTrackIndex() : 0;
			if (AConfig) vegas.Project.Tracks.Add(aSmpTrack = new AudioTrack(vegas.Project, startIndex, "YTP Audio Sample Track"));
			if (VConfig) vegas.Project.Tracks.Add(vSmpTrack = new VideoTrack(vegas.Project, startIndex, "YTP Video Sample Track"));
			if (AConfig && !IsAPreferredTrack) vegas.Project.Tracks.Add(aTrack = new AudioTrack(vegas.Project, startIndex, ""));
			if (VConfig && !IsVPreferredTrack) vegas.Project.Tracks.Add(vTrack = new VideoTrack(vegas.Project, startIndex, ""));
			Action<bool> DeleteYtpSampleTracks = new Action<bool>(reserveYtpTracks => {
				if (aSmpTrack != null) vegas.Project.Tracks.Remove(aSmpTrack);
				if (vSmpTrack != null) vegas.Project.Tracks.Remove(vSmpTrack);
				if (!reserveYtpTracks) {
					if (aTrack != null && !IsAPreferredTrack) vegas.Project.Tracks.Remove(aTrack);
					if (vTrack != null && !IsVPreferredTrack) vegas.Project.Tracks.Remove(vTrack);
				}
			});
			EventSet[] eventSets;
			#region 多素材支持
			if (!GetSelectedSources(aSmpTrack, vSmpTrack, out eventSets) || eventSets.Length == 0) goto cleanUpRuins;
			EventSet.EliminateDuplicates(ref eventSets);
			if (eventSets.Length == 0) goto cleanUpRuins;
			#endregion
			#region 获取选中需要使用的效果
			Random rand = new Random();
			AudioEvent lastAEvent = null;
			VideoEvent lastVEvent = null;
			for (int i = 0; i < YtpConfigClipsCount; i++) {
				progressForm.ReportProgress(i + 1, YtpConfigClipsCount);
				if (progressForm.RealTimeUpdateCheck.Checked)
					vegas.UpdateUI();
				if (progressForm.RequestAbort) break;
				EventSet randClip = eventSets[rand.Next(eventSets.Length)];
				double randLen = rand.Next(YtpConfigMinLen, YtpConfigMaxLen + 1);
				int sourceAvailableLength = (int)((AConfig && VConfig ? Math.Min(randClip.audioLength, randClip.videoLength) :
					AConfig ? randClip.audioLength : randClip.videoLength) - randLen);
				double randStart = sourceAvailableLength <= 0 ? 0 : rand.Next(sourceAvailableLength);
				AudioEvent aEvent = null;
				VideoEvent vEvent = null;
				#region 布置素材
				if (AConfig) {
					aEvent = randClip.audioEvent.Copy(aSmpTrack, generateBeginTime) as AudioEvent;
					aEvent.AdjustStartLength(Timecode.FromMilliseconds(randStart), Timecode.FromMilliseconds(randLen), true);
					lastAEvent = AppendAtEventTail(lastAEvent, aTrack, aEvent, generateBeginTime, false);
				}
				if (VConfig) {
					vEvent = randClip.videoEvent.Copy(vSmpTrack, generateBeginTime) as VideoEvent;
					vEvent.AdjustStartLength(Timecode.FromMilliseconds(randStart), Timecode.FromMilliseconds(randLen), true);
					lastVEvent = AppendAtEventTail(lastVEvent, vTrack, vEvent, generateBeginTime, false);
				}
				if (AConfig && VConfig) // 为音频与视频事件创建一个新的分组
					GroupTrackEvents(vEvent, aEvent);
				#endregion
				#region 应用随机效果
				List<TrackEvent> generatedEvents;
				Plugin.ForYtps.GetRandomEffect(aEvent, vEvent, AConfig, VConfig, randClip.audioReverse, randClip.videoReverse, this, out generatedEvents, YtpConfigEffects);
				generatedEvents.ForEach(@event => @event.Selected = SelectAllGeneratedEvents);
				if (AConfig) lastAEvent = generatedEvents.LastOrDefault(@event => @event is AudioEvent) as AudioEvent;
				if (VConfig) lastVEvent = generatedEvents.LastOrDefault(@event => @event is VideoEvent) as VideoEvent;
				#endregion
			}
			#endregion
			progressForm.ReportProgress(YtpConfigClipsCount, YtpConfigClipsCount);
			DeleteYtpSampleTracks(true);
			return true;
		cleanUpRuins:
			DeleteYtpSampleTracks(false);
			return false;
		}

		public void NormalizeSelectedAudioEvents() {
			AudioEvent[] events = GetSelectedAudioEvents();
			foreach (AudioEvent audioEvent in events) {
				audioEvent.RecalculateNorm();
				audioEvent.Normalize = true;
			}
		}

		private void Generate() {
			if (!YtpConfig)
				MidiConfigTracks.CompleteConfig();
			if (YtpConfig || !IsMultiMidiChannel) {
				GenerateOtomad();
				goto startRemoveSourceTrackEvents;
			}
			while (MidiConfigTracks.IsNonEmpty) {
				if (!GenerateOtomad()) goto startRemoveSourceTrackEvents;
				MidiConfigTracks.Next();
			}
			if (!SheetConfig && generatedVideoTracks.Count > 1) {
				VideoTrack[] videoTracks = generatedVideoTracks.ToArray();
				AutoLayoutTracksGridForm.Arrange(videoTracks, LayoutInfos.Grid, this);
				GradientTracksForm.Arrange(videoTracks, LayoutInfos.GradientTracks, this);
			}
		startRemoveSourceTrackEvents:
			if (RemoveSourceTrackEvents && SourceConfigFrom == MediaSourceFrom.SELECTED_CLIP) {
				if (AConfig && selectedEventSet.audioEvent != null) selectedEventSet.audioEvent.Remove();
				if (VConfig && selectedEventSet.videoEvent != null) selectedEventSet.videoEvent.Remove();
			}
		}

		/// <summary>
		/// 取网页源码。
		/// </summary>
		/// <param name="url">网址。</param>
		/// <returns>网页源码内容。</returns>
		public static string GetHtml(string url) {
			try {
				if (url.Substring(0, 5) == "https") { // 解决 WebClient 不能通过 https 下载内容问题
					ServicePointManager.ServerCertificateValidationCallback +=
						delegate(object sender, System.Security.Cryptography.X509Certificates.X509Certificate certificate,
							System.Security.Cryptography.X509Certificates.X509Chain chain,
							System.Net.Security.SslPolicyErrors sslPolicyErrors) {
							return true; // Always accept
						};
				}
				WebClient webClient = new WebClient();
				webClient.Headers.Add ("user-agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36");
				byte[] text = webClient.DownloadData(url); // 取网页源码
				return Encoding.GetEncoding("UTF-8").GetString(text); // 编码转换
			} catch (Exception ex) {
				bool isProduction = false; // 仅仅是为了消除未使用变量的警告。
				#if PRODUCTION
				isProduction = true;
				#endif
				return isProduction ? null : ex.ToString();
			}
		}

		/// <summary>
		/// 检查脚本更新。
		/// </summary>
		/// <param name="successful">是否成功获取网页数据。</param>
		/// <param name="isLatest">是否已是最新版。</param>
		/// <returns>最新版本号。</returns>
		public static string GetLatestScriptVersion(out bool successful, out bool isLatest) {
			ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
			string json;
			MatchCollection matches;
			json = GetHtml(ConfigForm.Links.GITHUB_LATEST_API);
			if (string.IsNullOrWhiteSpace(json)) goto second;
			matches = Regex.Matches(json, @"(?<=tag_name[^\n]*v)[\d\.]*");
			if (matches.Count <= 0) goto second;
			else goto ok;
		second:
			json = GetHtml(ConfigForm.Links.GITHUB_LATEST_API_2);
			if (string.IsNullOrWhiteSpace(json)) goto third;
			matches = Regex.Matches(json, @"(?<=VERSION-)[\d\.]*(?=-)");
			if (matches.Count <= 0) goto third;
			else goto ok;
		third:
			successful = false;
			isLatest = true;
			return null;
		ok:
			string version = matches[0].Value.Trim();
			Version latestVersion = new Version(version);
			successful = true;
			isLatest = latestVersion <= VERSION;
			return "v" + version;
		}

		/// <summary>最低支持 Vegas 版本号。</summary>
		public static readonly Version MIN_SUPPORTED_VERSION =
			#if VER_GEQ_16
				new Version(16, 0);
			#elif VER_GEQ_14
				new Version(14, 0);
			#else
				new Version(13, 0);
			#endif
		/// <summary>最高支持 Vegas 版本号。</summary>
		public static readonly Version MAX_SUPPORTED_VERSION =
			#if VER_GEQ_16
				null;
			#elif VER_GEQ_14
				new Version(15, 0);
			#else
				new Version(13, 0);
			#endif
		public static Version CurrentVegasVersion;

		/// <summary>
		/// 检查 Vegas 版本是否支持。
		/// </summary>
		/// <returns>版本支持情况状态值。</returns>
		public SupportVegasVersionState CheckVersionSupport() {
			Version curVer = CurrentVegasVersion = GetVegasVersion();
			if (curVer == null) return SupportVegasVersionState.UNDEFINED;
			else if (curVer >= MIN_SUPPORTED_VERSION &&
				(MAX_SUPPORTED_VERSION == null || curVer <= MAX_SUPPORTED_VERSION)
			) return SupportVegasVersionState.SUPPORTED;
			else return SupportVegasVersionState.UNSUPPORTED;
		}

		/// <summary>
		/// 获取当前 Vegas 版本号对象。
		/// </summary>
		/// <returns>Vegas 版本号对象。</returns>
		public Version GetVegasVersion() {
			try {
				MatchCollection matches = Regex.Matches(vegas.Version, @"(\d+\.)+\d+");
				if (matches.Count <= 0) return null;
				string version = matches[0].Value;
				List<object> versionItems = new List<object>(); // 必须用 object 不能用 int。
				const int VERSION_MAX_LENGTH = 4;
				int versionNum;
				foreach (string item in version.Split('.'))
					if (versionItems.Count < VERSION_MAX_LENGTH)
						if (int.TryParse(item, out versionNum))
							versionItems.Add(versionNum);
				if (versionItems.Count == 0) return null;
				return Activator.CreateInstance(typeof(Version), versionItems.ToArray()) as Version;
			} catch (Exception) { return null; }
		}

		public static string GetScriptSupportedVersionRange() {
			string supportedVersion = "None";
			if (MAX_SUPPORTED_VERSION != null && MIN_SUPPORTED_VERSION != null)
				supportedVersion = MIN_SUPPORTED_VERSION.ToString() + " ~ " + MAX_SUPPORTED_VERSION.ToString();
			else if (MIN_SUPPORTED_VERSION != null)
				supportedVersion = MIN_SUPPORTED_VERSION.ToString() + " +";
			else if (MAX_SUPPORTED_VERSION != null)
				supportedVersion = "0 ~ " + MAX_SUPPORTED_VERSION.ToString();
			return supportedVersion;
		}

		public static void AlertUnsupportVersion() {
			MessageBox.Show(string.Format(Lang.str.unsupported_vegas_version, GetScriptSupportedVersionRange(), CurrentVegasVersion.ToString()), Lang.str.unsupported_vegas_version_title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
		}

		private SupportVegasVersionState _supported = SupportVegasVersionState.UNDEFINED;
		public SupportVegasVersionState Supported { get { return _supported; } }

		/// <summary>
		/// Vegas 脚本的入口方法。
		/// </summary>
		/// <param name="myVegas">Vegas 软件</param>
		public void FromVegas(Vegas myVegas) {
			vegas = myVegas;
			if (instance != null) return;
			instance = this;
			_supported = CheckVersionSupport();
			try {
				do {
					if (!ShowConfigForm()) continue;
					Generate();
					if (progressForm != null) {
						progressForm.ReportProgress(100);
						progressForm.Close();
					}
				} while (requestRestartScript);
			} catch (Exception e) {
				if (instance.progressForm != null) instance.progressForm.Close();
				#if PRODUCTION
					ShowError(new Exceptions.UnknownException(), e);
				#else
					vegas.ShowError(e);
				#endif
			}
		}
	}

	#region 其它东西
	/// <summary>
	/// 该类中的方法仅供测试使用。<br />
	/// 切勿在生产版本中使用该类中的任何方法，即便只是为了显示一个消息框。<br />
	/// <small>名称 S 源于 <see cref="MessageBox.Show"/> 中 Show 的第一个字母。</small>
	/// </summary>
	[Obsolete]
	public static class S {
		#region 以下方法仅供测试使用
		public static object s { set { MessageBox.Show(value == null ? "null" : value.ToString()); } }
		public static void test() { s = "Super Idol 的笑容都没你的甜！"; }
		public static void update() { EntryPoint.instance.vegas.UpdateUI(); test(); }
		private static int times = 0;
		public static void s1(object text, int times) {
			if (S.times++ < times) {
				EntryPoint.instance.vegas.UpdateUI();
				s = text;
			}
		}
		#endregion
	}

	/// <summary>
	/// 扩展类方法<br />
	/// C# 的 this 参数方法，就是 JavaScript 的 prototype 的方法。
	/// </summary>
	public static class Extensions {
		/// <summary>
		/// 给老娘展示内容！
		/// </summary>
		/// <param name="value">内容</param>
		public static string s(this object value) { string str = value == null ? "null" : value.ToString(); MessageBox.Show(str); return str; }

		/// <summary>
		/// 在视频事件平移/裁切中将其所有关键帧进行翻转操作。
		/// 注意将会覆盖原有翻转设置，而不是相对于原有值进行修改。
		/// </summary>
		/// <param name="videoEvent">视频事件</param>
		/// <param name="hFlip">水平翻转？</param>
		/// <param name="vFlip">垂直翻转？</param>
		public static void FlipAllKeyframe(this VideoEvent videoEvent, bool hFlip, bool vFlip) {
			foreach (VideoMotionKeyframe key in videoEvent.VideoMotion.Keyframes) {
				bool isXFlip = key.TopLeft.X > key.TopRight.X, isYFlip = key.TopRight.Y > key.BottomRight.Y;
				key.ScaleBy(new VideoMotionVertex(isXFlip == hFlip ? 1 : -1, isYFlip == vFlip ? 1 : -1));
			}
		}

		/// <summary>
		/// 若给定的时间码没有量化为帧，则将进位到下一帧所对应的时间码，而不是默认的舍去回上一帧的时间码。
		/// </summary>
		/// <param name="timecode">给定的时间码</param>
		public static Timecode FixToFrame(this Timecode timecode) {
			long frame = timecode.FrameCount;
			if (Timecode.FromFrames(frame) < timecode) timecode = Timecode.FromFrames(frame + 1);
			return timecode;
		}

		/// <summary>
		/// 设定下拉菜单选择的编号，避免设定的编号超出下拉菜单的项目数量。
		/// </summary>
		/// <param name="combo">下拉菜单</param>
		/// <param name="index">设定选项序号</param>
		/// <param name="def">设定如果设定失败的默认值，如果为 -1 或留空表示不设定</param>
		public static void SetIndex(this ComboBox combo, int index, int def = -1) {
			int length = combo.Items.Count;
			if (length == 0) return;
			if (index >= length || index < 0) {
				if (def >= length || def < 0) return; // 你特么故意找茬是吧？
				combo.SelectedIndex = def;
			} else combo.SelectedIndex = index;
		}

		/// <summary>
		/// 设定数值上下调节框的值，避免指定的数值超出控件的最小值或最大值。
		/// </summary>
		/// <typeparam name="T">接收数字的类型</typeparam>
		/// <param name="numeric">数值上下调节框</param>
		/// <param name="value">设定值</param>
		/// <param name="def">设定如果设定失败的默认值，如果为 <see cref="null"/> 或留空表示不设定</param>
		public static void SetValue(this NumericUpDown numeric, decimal value, decimal? def = null) {
			decimal min = numeric.Minimum, max = numeric.Maximum;
			if (value < min || value > max) {
				if (def == null || def < min || def > max) return;
				numeric.Value = (decimal)def;
			} else numeric.Value = value;
		}

		private static string PreprocessBatchSetValue(string value) {
			value = new Regex(@"\s").Replace(value.Trim(), "");
			value = new Regex(@"[^0]").Replace(value, "1");
			return value;
		}
		/// <summary>
		/// 批量设置复选框列表的值。
		/// </summary>
		/// <param name="checks">复选框列表</param>
		/// <param name="value">一个字符序列依次表示各个复选框的值，用 1 表示 true，0 表示 false。</param>
		public static void BatchSet(this CheckedListBox checks, string value) {
			value = PreprocessBatchSetValue(value);
			for (int i = 0; i < Math.Min(checks.Items.Count, value.Length); i++)
				checks.SetItemChecked(i, value.Substring(i, 1) != "0");
		}
		/// <summary>
		/// 批量获取复选框列表的值。
		/// </summary>
		/// <param name="checks">复选框列表</param>
		/// <returns>一个字符序列依次表示各个复选框的值，用 1 表示 true，0 表示 false。</returns>
		public static string BatchGet(this CheckedListBox checks) {
			StringBuilder value = new StringBuilder();
			for (int i = 0; i < checks.Items.Count; i++)
				value.Append(checks.GetItemChecked(i) ? 1 : 0);
			return value.ToString();
		}
		/// <summary>
		/// 批量设置复选框表格的值。
		/// </summary>
		/// <param name="checks">复选框表格</param>
		/// <param name="value">一个字符序列依次表示各个复选框的值，用 1 表示 true，0 表示 false。</param>
		public static void BatchSet(this ListView checks, string value) {
			value = PreprocessBatchSetValue(value);
			for (int i = 0; i < Math.Min(checks.Items.Count, value.Length); i++)
				checks.Items[i].Checked = value.Substring(i, 1) != "0";
		}
		/// <summary>
		/// 批量获取复选框表格的值。
		/// </summary>
		/// <param name="checks">复选框表格</param>
		/// <returns>一个字符序列依次表示各个复选框的值，用 1 表示 true，0 表示 false。</returns>
		public static string BatchGet(this ListView checks) {
			StringBuilder value = new StringBuilder();
			for (int i = 0; i < checks.Items.Count; i++)
				value.Append(checks.Items[i].Checked ? 1 : 0);
			return value.ToString();
		}
		/// <summary>
		/// 为复选框列表的所有项目设置相同的值。
		/// </summary>
		/// <param name="checks">复选框列表。</param>
		/// <param name="value">布尔值。</param>
		public static void SetChecks(this CheckedListBox checks, bool value) {
			for (int i = 0; i < checks.Items.Count; i++)
				checks.SetItemChecked(i, value);
		}

		/// <summary>
		/// 数组截取。<br />
		/// 实际上使用时不必给定泛型 <typeparamref name="T" />。
		/// </summary>
		/// <typeparam name="T">数组成员类型</typeparam>
		/// <param name="array">数组</param>
		/// <param name="from">开始截取下标</param>
		/// <param name="length">截取长度。若为 -1 或留空表示持续到结尾。</param>
		/// <returns>截取后的数组</returns>
		public static T[] Slice<T>(this T[] array, int from, int length = -1) {
			List<T> list = new List<T>();
			if (length < 0 || from + length > array.Length) length = array.Length - from;
			for (int i = from; i < from + length; i++)
				list.Add(array[i]);
			return list.ToArray();
		}

		/// <summary>
		/// 对时间码对象扩展乘法运算。
		/// 但是为什么不允许使用 <c>operator *</c> 呢？
		/// </summary>
		/// <param name="self">原始时间码对象</param>
		/// <param name="ratio">乘以的倍数</param>
		/// <returns>求得的新时间码</returns>
		public static Timecode Multiply(this Timecode self, double ratio) {
			return Timecode.FromMilliseconds(self.ToMilliseconds() * ratio);
		}

		/// <summary>
		/// 指定一个相对速率来拉伸素材。
		/// 比如如果原素材速率为 0.5，此时你指定的拉伸速率为 2，那么最终素材速率将会为 1 而不是 2。
		/// </summary>
		/// <param name="trackEvent">轨道剪辑</param>
		/// <param name="rate">相对速率</param>
		/// <param name="forceStretch">
		/// 是否强制拉伸？Vegas 限制拉伸素材的速率在 0.25 ~ 2 之间或更小（取决于变调操作）。<br />
		/// 如果为否，则当素材拉伸到极限之后将不再继续拉伸；<br />
		/// 如果为是，则当素材拉伸到极限之后改变素材的长度，播放原素材裁剪范围之外的内容（拉长）或裁去多余长度的内容（缩短）。
		/// </param>
		/// <param name="setReversely">是否向反向拉伸？</param>
		/// <returns>原轨道事件。</returns>
		public static TrackEvent RelativeAdjustPlaybackRate(this TrackEvent trackEvent, double rate, bool forceStretch = false, bool setReversely = false) {
			double originalRate = trackEvent.PlaybackRate;
			double expectRate = rate * originalRate;
			Timecode originalEnd = trackEvent.End;
			trackEvent.AdjustPlaybackRate(expectRate, true);
			double actualRate = trackEvent.PlaybackRate;
			double expectLength = trackEvent.Length.ToMilliseconds() / expectRate * originalRate,
				actualLength = trackEvent.Length.ToMilliseconds() / actualRate * originalRate;
			trackEvent.Length = Timecode.FromMilliseconds((forceStretch && !setReversely) ? expectLength : actualLength);
			if (setReversely) {
				trackEvent.End = originalEnd;
				trackEvent.SetLengthReversely(Timecode.FromMilliseconds(forceStretch ? expectLength : actualLength));
			}
			return trackEvent;
		}

		/// <summary>
		/// 将拖放文件事件参数转换为拖放的文件名称数组。如果拖放的不是文件，返回 <see cref="null"/>。
		/// </summary>
		/// <param name="e">拖放事件参数</param>
		/// <returns>拖放的文件名称数组</returns>
		public static string[] GetFileNames(this DragEventArgs e) {
			if (!e.Data.GetDataPresent(DataFormats.FileDrop)) return null;
			return e.Data.GetData(DataFormats.FileDrop) as string[];
		}

		/// <summary>
		/// 颜色反转。
		/// </summary>
		/// <param name="orig">原颜色。</param>
		/// <returns>新颜色。</returns>
		public static Color InvertColor(this Color orig) {
			int r = 255 - orig.R, g = 255 - orig.G, b = 255 - orig.B;
			return Color.FromArgb(r, g, b);
		}

		/// <summary>
		/// 全选复选框表格。
		/// </summary>
		/// <param name="checks">复选框表格</param>
		public static void SelectAll(this ListView checks) {
			foreach (ListViewItem check in checks.Items)
				check.Checked = true;
		}

		/// <summary>
		/// 获取当前轨道事件的下一个事件。<br />
		/// 如果没有，返回 <see cref="null"/>。
		/// </summary>
		/// <param name="curEvent">当前轨道事件。</param>
		public static TrackEvent Next(this TrackEvent curEvent) {
			TrackEvents curTrack = curEvent.Track.Events;
			int index = curTrack.IndexOf(curEvent);
			if (index == -1 || index >= curTrack.Count - 1) return null;
			return curTrack[index + 1];
		}
		/// <summary>
		/// 获取当前轨道事件的上一个事件。<br />
		/// 如果没有，返回 <see cref="null"/>。
		/// </summary>
		/// <param name="curEvent">当前轨道事件。</param>
		public static TrackEvent Previous(this TrackEvent curEvent) {
			TrackEvents curTrack = curEvent.Track.Events;
			int index = curTrack.IndexOf(curEvent);
			if (index == -1 || index == 0) return null;
			return curTrack[index - 1];
		}

		/// <summary>
		/// 将 <see cref="Color"/> 类型颜色转换为 <see cref="OFXColor"/> 类型颜色。
		/// </summary>
		/// <param name="color"><see cref="Color"/> 类型颜色。</param>
		/// <returns><see cref="OFXColor"/> 类型颜色。</returns>
		public static OFXColor ToOFXColor(this Color color) {
			return new OFXColor(color.R / 255.0, color.G / 255.0, color.B / 255.0, color.A / 255.0);
		}
		/// <summary>
		/// 将 <see cref="Color"/> 类型颜色转换为 <see cref="VideoColor"/> 类型颜色。
		/// </summary>
		/// <param name="color"><see cref="Color"/> 类型颜色。</param>
		/// <returns><see cref="VideoColor"/> 类型颜色。</returns>
		public static VideoColor ToVideoColor(this Color color) {
			return new VideoColor(color.R, color.G, color.B, color.A);
		}

		/// <summary>
		/// 调用一个方法，当遇到错误时会跳出该方法，而不是直接停止运行。<br />
		/// 使用例：
		/// <code>((Action)YourMethod).OnErrorBreak();</code>
		/// </summary>
		/// <param name="method">调用的 <see cref="Action"/> 方法，无参数无返回值类型。</param>
		/// <param name="exceptionType">异常类型。缺省为 <see cref="Exceptions.ReadConfigFailException"/>。</param>
		public static void OnErrorBreak(this Action method, Exception exceptionType = null) {
			exceptionType = exceptionType ?? new Exceptions.ReadConfigFailException();
			try {
				method();
			} catch (Exception e) {
				EntryPoint.ShowError(exceptionType, e);
				EntryPoint.instance.configIni.Delete(true);
			}
		}

		/// <summary>
		/// 检测该轨道事件是否为其轨道当中最后一个事件。
		/// </summary>
		/// <param name="trackEvent">轨道事件。</param>
		/// <returns>是否为最后一个轨道事件。</returns>
		public static bool IsLastEvent(this TrackEvent trackEvent) {
			TrackEvents track = trackEvent.Track.Events;
			return track.IndexOf(trackEvent) == track.Count - 1;
		}
		/// <summary>
		/// 检测该轨道事件是否为其轨道当中第一个事件。
		/// </summary>
		/// <param name="trackEvent">轨道事件。</param>
		/// <returns>是否为第一个轨道事件。</returns>
		public static bool IsFirstEvent(this TrackEvent trackEvent) {
			TrackEvents track = trackEvent.Track.Events;
			return track.IndexOf(trackEvent) == 0;
		}

		/// <summary>
		/// 获取该轨道事件之后的所有事件。
		/// </summary>
		/// <param name="curEvent">轨道事件。</param>
		/// <param name="includeSelf">是否包含该事件本身。</param>
		/// <returns>之后的所有轨道事件。</returns>
		public static List<TrackEvent> GetAllAfterEvents(this TrackEvent curEvent, bool includeSelf) {
			TrackEvents curTrack = curEvent.Track.Events;
			int curIndex = curTrack.IndexOf(curEvent) + (includeSelf ? 0 : 1);
			return new List<TrackEvent>(curTrack).GetRange(curIndex, curTrack.Count - curIndex);
		}
		/// <summary>
		/// 移除轨道事件。
		/// </summary>
		/// <param name="trackEvent">轨道事件。</param>
		public static void Remove(this TrackEvent trackEvent) {
			trackEvent.Track.Events.Remove(trackEvent);
		}
		/// <summary>
		/// 获取该轨道某个时间码之后的所有事件。
		/// </summary>
		/// <param name="track">轨道。</param>
		/// <param name="time">时间码。</param>
		/// <param name="includeEventOnTime">是否包含刚好在指定是时间码之上的事件。</param>
		/// <returns>某个时间码之后的所有轨道事件。</returns>
		public static List<TrackEvent> GetAllAfterEvents(this Track track, Timecode time, bool includeEventOnTime = false) {
			List<TrackEvent> allAfterEvents = new List<TrackEvent>();
			foreach (TrackEvent trackEvent in track.Events)
				if (trackEvent.Start >= time || includeEventOnTime && trackEvent.End > time)
					allAfterEvents.Add(trackEvent);
			return allAfterEvents;
		}
		/// <summary>
		/// 切断该轨道中指定时间码位置上的事件。
		/// </summary>
		/// <param name="track">轨道。</param>
		/// <param name="time">时间码。</param>
		public static void Split(this Track track, Timecode time) {
			foreach (TrackEvent trackEvent in track.Events) {
				if (trackEvent.Start < time && trackEvent.End > time)
					trackEvent.Split(time - trackEvent.Start);
				else if (trackEvent.Start >= time) break;
			}
		}
		/// <summary>
		/// 查找轨道中完全在指定的时间范围内的所有事件。
		/// </summary>
		/// <param name="track">轨道。param>
		/// <param name="start">开始时间。</param>
		/// <param name="end">结束时间。</param>
		/// <returns>在指定的时间范围内的所有轨道事件。</returns>
		public static TrackEvent[] FindEventsIn(this Track track, Timecode start, Timecode end) {
			if (end < start) return null;
			List<TrackEvent> trackEvents = new List<TrackEvent>();
			foreach (TrackEvent trackEvent in track.Events) {
				if (trackEvent.Start >= start && trackEvent.End <= end)
					trackEvents.Add(trackEvent);
				else if (trackEvent.Start >= end) break;
			}
			return trackEvents.ToArray();
		}
		/// <summary>
		/// 反向设置轨道事件长度。<br />
		/// 正常情况使用 <see cref="TrackEvent.Length"/> 属性会通过轨道事件的结束时间位置来改变长度。<br />
		/// 该方法会通过改变轨道事件的开始时间位置来改变长度。
		/// </summary>
		/// <param name="trackEvent">轨道事件。</param>
		/// <param name="length">长度。</param>
		public static void SetLengthReversely(this TrackEvent trackEvent, Timecode length) {
			trackEvent.AdjustStartLength(trackEvent.Start + trackEvent.Length - length, length, true);
		}

		/// <summary>
		/// 启用双缓存绘制控件。
		/// </summary>
		/// <param name="control">控件。</param>
		public static void EnableDoubleBuffer(this Control control) {
			Control.CheckForIllegalCrossThreadCalls = false;
			control.GetType().GetMethod("SetStyle", BindingFlags.NonPublic | BindingFlags.Instance).Invoke(control, new object[] {
				ControlStyles.UserPaint
				| ControlStyles.ResizeRedraw
				| ControlStyles.SupportsTransparentBackColor
				| ControlStyles.AllPaintingInWmPaint
				| ControlStyles.OptimizedDoubleBuffer
				, true
			});
		}
		/// <summary>
		/// 使用双缓存封装创建控件时所需的信息。<br />
		/// 使用方法：
		/// <code>
		/// protected override CreateParams CreateParams { get { return base.CreateParams.DoubleBuffer(); } }
		/// </code>
		/// </summary>
		/// <param name="cp"><code>base.CreateParams</code></param>
		/// <returns>重写的 CreateParams 属性。</returns>
		public static CreateParams DoubleBuffer(this CreateParams cp) {
			cp.ExStyle |= 0x02000000;
			return cp;
		}

		/// <summary>
		/// 快捷设置 <see cref="OFXDoubleParameter"/> 的值。
		/// </summary>
		/// <param name="param">OFX 双精度浮点型参数。</param>
		/// <param name="startValue">开始值。</param>
		/// <param name="endValue">结束值。留空表示不启用动画效果。</param>
		/// <param name="videoEvent">视频事件。当同时设定了开始值和结束值时则需指定。</param>
		/// <param name="curve">缓动曲线类型。</param>
		public static void SetValues(this OFXDoubleParameter param, double startValue, double? endValue = null, VideoEvent videoEvent = null, int curve = 1) {
			if (endValue == null || startValue == endValue) param.Value = startValue;
			else {
				param.IsAnimated = true;
				param.SetValueAtTime(Timecode.FromMilliseconds(0), startValue);
				param.SetValueAtTime(videoEvent.Length, (double)endValue);
				param.Keyframes[0].Interpolation = EntryPoint.GetOFXInterpolationType(curve);
			}
		}

		/// <summary>
		/// 根据时间码获取拍子。
		/// </summary>
		/// <param name="timecode">时间码。</param>
		/// <returns>拍子。</returns>
		public static int Beat(this Timecode timecode) {
			return int.Parse(Regex.Match(timecode.ToPositionString(RulerFormat.MeasuresAndBeats),
				@"\d+(?=\.\d+$)", RegexOptions.ECMAScript).Value);
		}
		/// <summary>
		/// 根据时间码获取小节。
		/// </summary>
		/// <param name="timecode">时间码。</param>
		/// <returns>小节。</returns>
		public static int Measure(this Timecode timecode) {
			return int.Parse(Regex.Match(timecode.ToPositionString(RulerFormat.MeasuresAndBeats),
				@"^\d+(?=\.)", RegexOptions.ECMAScript).Value);
		}
		/// <summary>
		/// 获取时间码的下一（或上一）拍。
		/// </summary>
		/// <param name="timecode">时间码。</param>
		/// <param name="factor">因数。暂时仅支持 1 和 -1，分别表示下一拍和上一拍。</param>
		/// <returns>新的时间码。</returns>
		public static Timecode Next(this Timecode timecode, int factor) {
			Timecode ONE_BEAT = Timecode.FromString("0.1.000", RulerFormat.MeasuresAndBeats);
			if (factor == 1) timecode += ONE_BEAT;
			else if (factor == -1) timecode -= ONE_BEAT;
			return timecode;
		}

		/// <summary>
		/// 删除系统菜单中指定的项目。比如还原、移动、大小、最小化、最大化、关闭。
		/// </summary>
		/// <param name="form">窗体。</param>
		/// <param name="items">系统菜单项目。</param>
		public static void DeleteSystemMenuItems(this Form form, SystemMenuItemType items) {
			DeleteSystemMenuItems(form.Handle, items);
		}
		/// <summary>
		/// 保留系统菜单中指定的项目。与 <see cref="DeleteSystemMenuItems(Form, SystemMenuItemType)"/> 方法取反。
		/// </summary>
		/// <param name="form">窗体。</param>
		/// <param name="items">系统菜单项目。</param>
		public static void ReserveSystemMenuItems(this Form form, SystemMenuItemType items) {
			DeleteSystemMenuItems(form, ~items);
		}
		/// <summary>
		/// 删除系统菜单中指定的项目。比如还原、移动、大小、最小化、最大化、关闭。
		/// </summary>
		/// <param name="hWnd">窗体句柄。</param>
		/// <param name="items">系统菜单项目。</param>
		public static void DeleteSystemMenuItems(this IntPtr hWnd, SystemMenuItemType items) {
			IntPtr menu = AlphaColorDialog.GetSystemMenu(hWnd, false);
			foreach (KeyValuePair<SystemMenuItemType, uint> item in SystemMenuItemTag.Map)
				if ((items & item.Key) != 0)
					AlphaColorDialog.DeleteMenu(menu, item.Value, AlphaColorDialog.MF_BYCOMMAND);
		}
		/// <summary>
		/// 保留系统菜单中指定的项目。与 <see cref="DeleteSystemMenuItems(IntPtr, SystemMenuItemType)"/> 方法取反。
		/// </summary>
		/// <param name="hWnd">窗体句柄。</param>
		/// <param name="items">系统菜单项目。</param>
		public static void ReserveSystemMenuItems(this IntPtr hWnd, SystemMenuItemType items) {
			DeleteSystemMenuItems(hWnd, ~items);
		}
		/// <summary>
		/// 对集合填充某个固定值。
		/// </summary>
		/// <typeparam name="T">任意类型。</typeparam>
		/// <typeparam name="L">集合的类型。</typeparam>
		/// <param name="array">某种集合。</param>
		/// <param name="item">要填充的固定值。</param>
		/// <returns>返回原集合。</returns>
		public static L Fill<T, L>(this L array, T item) where L : IList<T> {
			for (int i = 0; i < array.Count; i++)
				array[i] = item;
			return array;
		}
		/// <summary>
		/// 在列表之后添加一项，并立即返回添加的项目。适用于链式或嵌套调用。
		/// </summary>
		/// <typeparam name="T">任意类型。</typeparam>
		/// <param name="list">列表。</param>
		/// <param name="item">项目。</param>
		/// <returns>返回添加的项目。</returns>
		public static T AddAlsoReturn<T>(this IList<T> list, T item) {
			list.Add(item);
			return item;
		}
		/// <summary>
		/// 获取复选框是否已勾选且未被禁用。
		/// </summary>
		/// <param name="checkBox">复选框。</param>
		/// <returns>返回复选框是否已勾选且未被禁用。</returns>
		public static bool CheckedAndEnabled(this CheckBox checkBox) {
			return checkBox.Checked && checkBox.Enabled;
		}
	}

	public static class SystemMenuItemTag {
		public const uint RESTORE = 0xF120;
		public const uint MOVE = 0xF010;
		public const uint SIZE = 0xF000;
		public const uint MINIMIZE = 0xF020;
		public const uint MAXIMIZE = 0xF030;
		public const uint CLOSE = 0xF060;

		public static readonly Dictionary<SystemMenuItemType, uint> Map = new Dictionary<SystemMenuItemType, uint> {
			{ SystemMenuItemType.RESTORE, RESTORE },
			{ SystemMenuItemType.MOVE, MOVE },
			{ SystemMenuItemType.SIZE, SIZE },
			{ SystemMenuItemType.MINIMIZE, MINIMIZE },
			{ SystemMenuItemType.MAXIMIZE, MAXIMIZE },
			{ SystemMenuItemType.CLOSE, CLOSE },
		};
	}

	[Flags]
	public enum SystemMenuItemType {
		RESTORE = 1 << 0,
		MOVE = 1 << 1,
		SIZE = 1 << 2,
		MINIMIZE = 1 << 3,
		MAXIMIZE = 1 << 4,
		CLOSE = 1 << 5,
	}

	/// <summary>
	/// 显示错误警告之后的处理操作状态。
	/// </summary>
	public enum ShowErrorState {
		/// <summary>警告之后自动删除用户配置文件，并且关闭进度条对话框。</summary>
		NORMAL,
		/// <summary>不执行任何操作。</summary>
		SILENCE,
		/// <summary>仅关闭进度条对话框。</summary>
		RESUME_NEXT,
	}

	/// <summary>
	/// 支持 Vegas 版本号情况状态。
	/// </summary>
	public enum SupportVegasVersionState {
		/// <summary>未知。</summary>
		UNDEFINED = -1,
		/// <summary>不支持。</summary>
		UNSUPPORTED,
		/// <summary>支持。</summary>
		SUPPORTED,
	}

	/// <summary>
	/// 选中媒体的素材来源。
	/// </summary>
	public enum MediaSourceFrom {
		/// <summary>在项目媒体窗口中选中的媒体文件。</summary>
		SELECTED_MEDIA,
		/// <summary>在时间线窗口选中的轨道素材剪辑事件。</summary>
		SELECTED_CLIP,
		/// <summary>从脚本对话框中浏览的媒体文件。</summary>
		BROWSE_FILE,
		/// <summary>上一次用户的选择。</summary>
		LAST_USER_PREFERENCE,
		/// <summary>没有选中任何素材。</summary>
		NOTHING_SELECTED,
	}

	/// <summary>
	/// 设定生成开始位置枚举。
	/// </summary>
	public enum GenerateAt {
		/// <summary>项目开始处。</summary>
		BEGIN,
		/// <summary>光标处。</summary>
		CURSOR,
		/// <summary>自定义。</summary>
		CUSTOM,
	}

	/// <summary>
	/// 设定为 MIDI 使用 BPM 配置的枚举。
	/// </summary>
	public enum MidiUseBpm {
		/// <summary>动态 MIDI 速度。</summary>
		DYNAMIC_MIDI,
		/// <summary>MIDI 速度。</summary>
		MIDI,
		/// <summary>项目速度。</summary>
		PROJECT,
		/// <summary>自定义。</summary>
		CUSTOM,
	}

	/// <summary>
	/// 调音方式算法枚举。
	/// </summary>
	public enum AudioTuneMethod {
		/// <summary>不调音。</summary>
		NO_TUNE,
		/// <summary>移调效果插件。</summary>
		PITCH_SHIFT,
		/// <summary>弹性音调更改。</summary>
		ELASTIQUE,
		/// <summary>古典音调更改。</summary>
		CLASSIC,
		/// <summary>瞎调音。</summary>
		FOOL_TUNING,
		/// <summary>酸性风格调音。（包含在 API 中但任何地方均不引用，使用后会报错。）</summary>
		ACID_STYLE = 20,
	}

	/// <summary>
	/// 自动布局轨道的布局方式枚举。
	/// </summary>
	public enum AutoLayoutTracksType {
		/// <summary>网格布局。</summary>
		GRID,
		/// <summary>3D 方盒布局。</summary>
		BOX_3D,
	}

	/// <summary>
	/// 镜像边缘枚举。
	/// </summary>
	public enum MirrorEdgesType {
		/// <summary>不翻转。</summary>
		DISABLED,
		/// <summary>偶数。</summary>
		EVEN,
		/// <summary>奇数。</summary>
		ODD,
	}

	/// <summary>
	/// 视频轨道的渐变效果枚举。
	/// </summary>
	public enum VideoTrackGradientEffectType {
		/// <summary>彩虹色。</summary>
		RAINBOW,
		/// <summary>逐渐饱和。</summary>
		GRADUALLY_SATURATED,
		/// <summary>逐渐对比。</summary>
		GRADUALLY_CONTRASTED,
		/// <summary>阈值。</summary>
		THRESHOLD,
		/// <summary>彩灰交替。</summary>
		ALTERNATELY_CHROMATIC,
		/// <summary>正负交替。</summary>
		ALTERNATELY_NEGATIVE,
	}

	/// <summary>
	/// 填补间隙的最大长度枚举。
	/// </summary>
	public enum LegatoMaxGapType {
		/// <summary>不填补 / 断奏。</summary>
		STACCATO,
		/// <summary>最长一拍。</summary>
		ONE_BEAT_LONGEST,
		/// <summary>最长一小节。</summary>
		ONE_BAR_LONGEST,
		/// <summary>无限填补。</summary>
		UNLIMITED,
	}

	/// <summary>
	/// 拉伸属性枚举。
	/// </summary>
	public enum StretchType {
		/// <summary>不拉伸。</summary>
		NO_STRETCHING,
		/// <summary>可屈伸。</summary>
		FLEXING_AND_EXTENDING,
		/// <summary>仅伸展。</summary>
		EXTENDING_ONLY,
		/// <summary>仅屈折。</summary>
		FLEXING_ONLY,
	}

	/// <summary>
	/// 填补轨道间隙方式的枚举。
	/// </summary>
	public enum TrackLegatoType {
		/// <summary>堆积素材（仅应用于选中素材） / 堆积素材（应用于当前轨道）。</summary>
		STACKING,
		/// <summary>堆积素材（也应用于后续所有素材）。</summary>
		STACKING_ALL_AFTER,
		/// <summary>堆积素材（应用于所有轨道）。</summary>
		STACKING_ALL_TRACKS,
		/// <summary>拉伸素材（限制在拉伸极限范围之内）。</summary>
		LIMIT_STRETCHING,
		/// <summary>拉伸素材（超出拉伸极限范围之后再延长素材）。</summary>
		STRETCHING,
		/// <summary>延长素材（改变素材持续时间）。</summary>
		LENGTHENING,
		/// <summary>增加间隙（应用于当前轨道）。</summary>
		INCREASE_SPACING,
		/// <summary>增加间隙（应用于所有轨道）。</summary>
		INCREASE_SPACING_ALL_TRACKS,
	}

	/// <summary>
	/// 以何种方式设定淡入淡出的参数的枚举。
	/// </summary>
	public enum SetFadeByType {
		/// <summary>未定义。</summary>
		UNDEFINED = -1,
		/// <summary>百分比。</summary>
		PERCENT,
		/// <summary>时间码。</summary>
		TIMECODE,
	}

	/// <summary>
	/// 限制音符长度类型枚举。
	/// </summary>
	public enum RestrictLengthModeType {
		/// <summary>不限制。</summary>
		UNRESTRICTED,
		/// <summary>限制最大长度。</summary>
		MAX_LENGTH,
		/// <summary>限制在固定长度。</summary>
		FIXED_LENGTH,
		/// <summary>限制最小长度。</summary>
		MIN_LENGTH,
	}

	/// <summary>
	/// YTP 效果枚举。
	/// 目前将视频和音频效果都杂糅在一起了，如果需要的话，未来可能会分离两部分内容。
	/// </summary>
	public enum YtpEffectType {
		CHORUS,
		PITCH_CHANGE,
		VIBRATO, // Probably attach video Wavy
		REVERSE,
		ROBOT_DELAY,
		SPEED_CHANGE,
		HUE_CHANGE,
		HUE_ROTATE,
		MONOCHROME,
		NEGATIVE, // Probably attach audio Low Pitch
		HIGH_FREQ_REPEAT,
		RANDOM_TONE, // attach video Horizontal Flip
		ENLARGE, // attach audio Loud
		SPHERIZE,
		MIRROR,
		HIGH_CONTRAST, // attach audio Loud
		OVERSATURATION, // Probably attach audio High Pitch
		EMPHASIZE_THRICE, // attach video Enlarge Focus, Probably attach video Monochrome if Speed Down
	}

	/// <summary>
	/// Promotion Video 的节奏视觉效果枚举。
	/// </summary>
	public enum PvVisualEffectType {
		NONE,
		H_FLIP,
		V_FLIP,
		CCW_FLIP,
		CW_FLIP,
		H_FLIP_SUSTAIN,
		H_FLIP_RELAY,
		H_FLIP_INVERT,
		CCW_ROTATE,
		CW_ROTATE,
		TURNED,
		ZOOM_OUT_IN,
		H_MIRROR,
		V_MIRROR,
		CCW_MIRROR,
		CW_MIRROR,
		NEGATIVE,
		LUMIN_INVERT,
		HUE_INVERT,
		STEP_3_CHANGE_HUE,
		STEP_4_CHANGE_HUE,
		STEP_5_CHANGE_HUE,
		STEP_6_CHANGE_HUE,
		STEP_7_CHANGE_HUE,
		STEP_8_CHANGE_HUE,
		GREY,
		PINGPONG,
		WHIRL, // PERPETUAL_MOTION / UNLIMITED
		SHARP_REWIND,
		WOBBLE_PERIOD,
		VERTICAL_EXPANSION,
		VERTICAL_EXPANSION_WITH_REBOUND,
		VERTICAL_COMPRESSION,
		VERTICAL_COMPRESSION_WITH_REBOUND,
		OBLIQUE_EXPANSION_AND_COMPRESSION,
		PUYO_PUYO, // PUYO_POP
		PENDULUM, // SWING
		GAUSSIAN_BLUR,
		RADIAL_BLUR,
	}

	/// <summary>
	/// Promotion Video 的节奏视觉效果类。
	/// </summary>
	public class PvVisualEffect {
		public static string[][] InitialValues {
			get {
				Lang str = Lang.str;
				return new string[][] {
					new string[] { str.effect_init_forward },
					new string[] { str.effect_init_forward, str.effect_init_reversed },
					new string[] { str.effect_init_forward, str.effect_init_turned },
					new string[] { "0°", "-90°", "-180°", "-270°" },
					new string[] { "0°", "90°", "180°", "270°" },
					new string[] { str.effect_init_forward, str.effect_init_reversed },
					new string[] { str.effect_init_forward, str.effect_init_reversed },
					new string[] { str.effect_init_forward, str.effect_init_reversed },
					new string[] { "0°", "-90°", "-180°", "-270°" },
					new string[] { "0°", "90°", "180°", "270°" },
					new string[] { str.effect_init_forward, str.effect_init_turned },
					new string[] { str.effect_init_zoom_out },
					new string[] { str.effect_init_left, str.effect_init_right },
					new string[] { str.effect_init_up, str.effect_init_down },
					new string[] { str.effect_init_left_up, str.effect_init_left_down, str.effect_init_right_down, str.effect_init_right_up },
					new string[] { str.effect_init_left_up, str.effect_init_right_up, str.effect_init_right_down, str.effect_init_left_down },
					new string[] { str.effect_init_forward, str.effect_init_invert },
					new string[] { str.effect_init_forward, str.effect_init_invert },
					new string[] { str.effect_init_conform, str.effect_init_opposite },
					new string[] { "0°", "120°", "240°" },
					new string[] { "0°", "90°", "180°", "270°" },
					new string[] { "0°", "72°", "144°", "216°", "288°" },
					new string[] { "0°", "60°", "120°", "180°", "240°", "300°" },
					new string[] { "0°", "51.4°", "102.9°", "154.3°", "205.7°", "257.1°", "308.6°" },
					new string[] { "0°", "45°", "90°", "135°", "180°", "225°", "270°", "315°" },
					new string[] { str.effect_init_chromatic, str.effect_init_monochrome },
					new string[] { str.effect_init_forward, str.effect_init_counter },
					new string[] { str.effect_init_forward, str.effect_init_stepon },
					new string[] { str.effect_init_forward },
					new string[] { str.effect_init_forward },
					new string[] { str.effect_init_up },
					new string[] { str.effect_init_up },
					new string[] { str.effect_init_down },
					new string[] { str.effect_init_down },
					new string[] { str.effect_init_right, str.effect_init_left },
					new string[] { str.effect_init_flat, str.effect_init_thin },
					new string[] { str.effect_init_right, str.effect_init_left },
					new string[] { str.effect_init_blur },
					new string[] { str.effect_init_blur },
				};
			}
		}

		public static Dictionary<string, PvVisualEffectType[]> Classes {
			get {
				Lang str = Lang.str;
				return new Dictionary<string, PvVisualEffectType[]> {
					{ str.flip_class, new PvVisualEffectType[] { PvVisualEffectType.H_FLIP, PvVisualEffectType.V_FLIP, PvVisualEffectType.CCW_FLIP, PvVisualEffectType.CW_FLIP, PvVisualEffectType.H_FLIP_SUSTAIN, PvVisualEffectType.H_FLIP_RELAY, PvVisualEffectType.H_FLIP_INVERT } },
					{ str.rotation_class, new PvVisualEffectType[] { PvVisualEffectType.CCW_ROTATE, PvVisualEffectType.CW_ROTATE, PvVisualEffectType.TURNED } },
					{ str.scale_class, new PvVisualEffectType[] { PvVisualEffectType.ZOOM_OUT_IN } },
					{ str.mirror_class, new PvVisualEffectType[] { PvVisualEffectType.H_MIRROR, PvVisualEffectType.V_MIRROR, PvVisualEffectType.CCW_MIRROR, PvVisualEffectType.CW_MIRROR } },
					{ str.invert_class, new PvVisualEffectType[] { PvVisualEffectType.NEGATIVE, PvVisualEffectType.LUMIN_INVERT } },
					{ str.hue_class, new PvVisualEffectType[] { PvVisualEffectType.HUE_INVERT, PvVisualEffectType.STEP_3_CHANGE_HUE, PvVisualEffectType.STEP_4_CHANGE_HUE, PvVisualEffectType.STEP_5_CHANGE_HUE, PvVisualEffectType.STEP_6_CHANGE_HUE, PvVisualEffectType.STEP_7_CHANGE_HUE, PvVisualEffectType.STEP_8_CHANGE_HUE } },
					{ str.monochrome_class, new PvVisualEffectType[] { PvVisualEffectType.GREY } },
					{ str.time_class, new PvVisualEffectType[] { PvVisualEffectType.PINGPONG, PvVisualEffectType.WHIRL } },
					{ str.time_class_2, new PvVisualEffectType[] { PvVisualEffectType.SHARP_REWIND, PvVisualEffectType.WOBBLE_PERIOD } },
					{ str.expansion_and_compression_class, new PvVisualEffectType[] { PvVisualEffectType.VERTICAL_EXPANSION, PvVisualEffectType.VERTICAL_EXPANSION_WITH_REBOUND, PvVisualEffectType.VERTICAL_COMPRESSION, PvVisualEffectType.VERTICAL_COMPRESSION_WITH_REBOUND, PvVisualEffectType.OBLIQUE_EXPANSION_AND_COMPRESSION, PvVisualEffectType.PUYO_PUYO} },
					{ str.swing_class, new PvVisualEffectType[] { PvVisualEffectType.PENDULUM } },
					{ str.blur_class, new PvVisualEffectType[] { PvVisualEffectType.GAUSSIAN_BLUR, PvVisualEffectType.RADIAL_BLUR } },
				};
			}
		}

		public readonly PrveValues fxes;
		private int[] steps;
		private int[] durations;
		private int lastPitch = -1; // Double.NaN ???
		private bool isPitchHold = false;
		private bool isUsing = false;

		private bool horizontalFlip = false;
		private bool verticalFlip = false;
		private bool isNegative = false;
		private bool isReverse = false;
		private int rotationStep = 0;
		private int horizontalMirrored = 0;
		private int verticalMirrored = 0;
		private bool isInvertLumin = false;
		private double hue = 0;
		private bool isGrey = false;
		private int obliqueDirect = 0;
		private int swingDirect = 0;
		private int puyoShape = 0;

		public bool HorizontalFlip { get { return horizontalFlip; } }
		public bool VerticalFlip { get { return verticalFlip; } }
		public bool IsNegative { get { return isNegative; } }
		public bool IsReverse { get { return isReverse; } }
		public double RotationDeg { get { return rotationStep * Math.PI / 2; } }
		public int HorizontalMirrored { get { return horizontalMirrored; } }
		public int VerticalMirrored { get { return verticalMirrored; } }
		public bool IsInvertLumin { get { return isInvertLumin; } }
		public double Hue { get { return hue; } }
		public bool IsGrey { get { return isGrey; } }
		public int ObliqueDirect { get { return obliqueDirect; } }
		public int SwingDirect { get { return swingDirect; } }
		public int PuyoShape { get { return puyoShape; } }
		public bool IsGaussianBlur { get { return fxes.HasEffect(PvVisualEffectType.GAUSSIAN_BLUR); } }
		public bool IsRadialBlur { get { return fxes.HasEffect(PvVisualEffectType.RADIAL_BLUR); } }
		public bool IsZoomOutIn { get { return fxes.HasEffect(PvVisualEffectType.ZOOM_OUT_IN); } }
		public PvVisualEffectType? VerticalExpansion { get { return GetFirstEffectInRange(PvVisualEffectType.VERTICAL_EXPANSION, PvVisualEffectType.VERTICAL_COMPRESSION_WITH_REBOUND); } }
		public bool RequirePicInPicDeformEffects { get { return GetFirstEffectInRange(PvVisualEffectType.VERTICAL_EXPANSION, PvVisualEffectType.PUYO_PUYO) != null; } }
		public PvVisualEffectType? TimeClass2 { get { return GetFirstEffectInRange(PvVisualEffectType.SHARP_REWIND, PvVisualEffectType.WOBBLE_PERIOD); } }
		public bool IsPitchHoldEffects { get { return GetFirstEffectInRange(PvVisualEffectType.H_FLIP_SUSTAIN, PvVisualEffectType.H_FLIP_INVERT) != null; } }

		public PvVisualEffect(PvVisualEffectType fx, int initStep = 0) : this(new PrveValue(fx, initStep)) { }
		public PvVisualEffect(PrveValue fx) : this(new PrveValues { fx }) { }
		public PvVisualEffect(PrveValues fxes) {
			this.fxes = fxes;
			steps = new int[fxes.Count];
			durations = new int[fxes.Count];
			for (int i = 0; i < fxes.Count; i++) {
				PrveValue fx = fxes[i];
				steps[i] = fx.Initial;
				durations[i] = InitialValues[(int)fx.Effect].Length;
			}
			if (!IsPitchHoldEffects) Update();
		}
		private void NextStep() {
			for (int i = 0; i < steps.Length; i++)
				steps[i] = (steps[i] + 1) % durations[i];
		}
		/// <summary>
		/// 下一步节奏视觉效果。
		/// </summary>
		public void Next() {
			if (IsPitchHoldEffects) return;
			NextStep();
			Update();
		}
		private void PitchHoldNext() {
			if (!isPitchHold && isUsing) NextStep();
			Update();
		}
		private void Update() {
			isUsing = true;
			for (int i = 0; i < fxes.Count; i++) {
				PvVisualEffectType fx = fxes[i].Effect;
				int step = steps[i], duration = durations[i];
				if (fx >= PvVisualEffectType.HUE_INVERT && fx <= PvVisualEffectType.STEP_8_CHANGE_HUE)
					hue = step / (double)duration;
				switch (fx) {
					case PvVisualEffectType.H_FLIP:
						horizontalFlip = step == 1;
						break;
					case PvVisualEffectType.V_FLIP:
						verticalFlip = step == 1;
						break;
					case PvVisualEffectType.H_FLIP_SUSTAIN:
					case PvVisualEffectType.H_FLIP_RELAY:
						if (!isPitchHold) {
							horizontalFlip = step == 1;
							verticalFlip = false;
						} else if (fx == PvVisualEffectType.H_FLIP_RELAY)
							verticalFlip = !verticalFlip;
						break;
					case PvVisualEffectType.H_FLIP_INVERT:
						if (!isPitchHold) {
							horizontalFlip = step == 1;
							isNegative = false;
						} else
							isNegative = !isNegative;
						break;
					case PvVisualEffectType.NEGATIVE:
						isNegative = step == 1;
						break;
					case PvVisualEffectType.PINGPONG:
						isReverse = step == 1;
						break;
					case PvVisualEffectType.CCW_FLIP:
						horizontalFlip = step == 1 || step == 2;
						verticalFlip = step == 2 || step == 3;
						break;
					case PvVisualEffectType.CW_FLIP:
						horizontalFlip = step == 2 || step == 3;
						verticalFlip = step == 1 || step == 2;
						break;
					case PvVisualEffectType.CCW_ROTATE:
						rotationStep = step;
						break;
					case PvVisualEffectType.CW_ROTATE:
						rotationStep = (4 - step) % 4;
						break;
					case PvVisualEffectType.TURNED:
						rotationStep = step * 2;
						break;
					case PvVisualEffectType.H_MIRROR:
						horizontalMirrored = step == 0 ? 1 : 2;
						break;
					case PvVisualEffectType.V_MIRROR:
						verticalMirrored = step == 0 ? 1 : 2;
						break;
					case PvVisualEffectType.CCW_MIRROR:
						horizontalMirrored = (step == 0 || step == 1) ? 1 : 2;
						verticalMirrored = (step == 0 || step == 3) ? 1 : 2;
						break;
					case PvVisualEffectType.CW_MIRROR:
						horizontalMirrored = (step == 0 || step == 3) ? 1 : 2;
						verticalMirrored = (step == 0 || step == 1) ? 1 : 2;
						break;
					case PvVisualEffectType.LUMIN_INVERT:
						isInvertLumin = step == 1;
						break;
					case PvVisualEffectType.GREY:
						isGrey = step == 1;
						break;
					case PvVisualEffectType.WHIRL:
						horizontalFlip = isReverse = step == 1;
						break;
					case PvVisualEffectType.OBLIQUE_EXPANSION_AND_COMPRESSION:
						obliqueDirect = step == 0 ? -1 : step == 1 ? 1 : 0;
						break;
					case PvVisualEffectType.PUYO_PUYO:
						puyoShape = step == 0 ? -1 : step == 1 ? 1 : 0;
						break;
					case PvVisualEffectType.PENDULUM:
						swingDirect = step == 0 ? 1 : step == 1 ? -1 : 0;
						break;
					default:
						break;
				}
			}
		}

		/// <summary>
		/// 在效果列表中获取第一个满足在范围内条件的效果。
		/// </summary>
		/// <param name="min">效果最小值。</param>
		/// <param name="max">效果最大值。</param>
		/// <returns>第一个满足在范围内条件的效果。</returns>
		private PvVisualEffectType? GetFirstEffectInRange(PvVisualEffectType min, PvVisualEffectType max) {
			foreach (PrveValue prve in fxes) {
				PvVisualEffectType fx = prve.Effect;
				if (fx >= min && fx <= max)
					return fx;
			}
			return null;
		}

		/// <summary>
		/// 判断给定的音高值是否与上一次音高值相等。同时将给定的音高值自动设为上一次音高值。
		/// </summary>
		/// <param name="pitch">给定的音高值。</param>
		/// <returns>给定的音高值是否与上一次音高值相等。</returns>
		public bool EqualsLastPitch(int pitch) {
			isPitchHold = lastPitch == pitch;
			lastPitch = pitch;
			if (IsPitchHoldEffects) PitchHoldNext();
			return isPitchHold;
		}
	}

	/// <summary>
	/// 查找的插件。
	/// </summary>
	public class Plugin {
		private static Vegas vegas;
		/// <summary> 移调 </summary>
		public static PlugInNode pitchShift;
		/// <summary> 反转 </summary>
		public static PlugInNode invert;
		/// <summary> HSL 调整 </summary>
		public static PlugInNode hslAdjust;
		/// <summary> LAB 调整 </summary>
		public static PlugInNode labAdjust;
		/// <summary> 黑白 </summary>
		public static PlugInNode blackAndWhite;
		/// <summary> 镜像 </summary>
		public static PlugInNode mirror;
		/// <summary> 画中画 </summary>
		public static PlugInNode picInPic;
		/// <summary> 修剪 </summary>
		public static PlugInNode crop;
		/// <summary> 纯色 </summary>
		public static PlugInNode solidColor;
		/// <summary> 亮度和对比度 </summary>
		public static PlugInNode contrast;
		/// <summary> 合唱 </summary>
		public static PlugInNode chorus;
		/// <summary> 颤音 1 </summary>
		public static PlugInNode vibrato1;
		/// <summary> 颤音 2 </summary>
		public static PlugInNode vibrato2;
		/// <summary> 波浪 </summary>
		public static PlugInNode wave;
		/// <summary> 延迟 </summary>
		public static PlugInNode delay;
		/// <summary> 球面化 </summary>
		public static PlugInNode spherize;
		/// <summary> 高斯模糊 </summary>
		public static PlugInNode gaussianBlur;
		/// <summary> 径向模糊 </summary>
		public static PlugInNode radialBlur;
		/// <summary> 字幕和文字 </summary>
		public static PlugInNode titlesAndText;
		/// <summary> 贝兹蒙版 </summary>
		public static PlugInNode bzMasking;
		/// <summary> 区域裁切 </summary>
		public static PlugInNode cookieCutter;
		/// <summary> 漩涡 </summary>
		public static PlugInNode swirl;

		/// <summary>
		/// 初始化所需插件。
		/// </summary>
		/// <param name="vegas">Vegas 软件</param>
		public static void Init(Vegas vegas) {
			Plugin.vegas = vegas;
			if (isInit) return;

			#region 音频 FX
			pitchShift = vegas.AudioFX.FindChildByName("移调")
				?? vegas.AudioFX.FindChildByName("Pitch Shift")
				?? vegas.AudioFX.FindChildByUniqueID("{ED1B4100-93BE-11D0-AEBC-00A0C9053912}");
			chorus = vegas.AudioFX.FindChildByName("合唱")
				?? vegas.AudioFX.FindChildByName("Chorus")
				?? vegas.AudioFX.FindChildByUniqueID("{28D9F1E0-6ECC-11D0-AEBC-00A0C9053912}");
			delay = vegas.AudioFX.FindChildByName("延迟")
				?? vegas.AudioFX.FindChildByUniqueID("{7298A3E0-78EE-11D0-AEBC-00A0C9053912}");
			vibrato1 = vegas.AudioFX.FindChildByUniqueID("{3F901A20-79BE-11D0-AEBC-00A0C9053912}");
			vibrato2 = vegas.AudioFX.FindChildByUniqueID("{D6802BA0-A056-11D0-AEBC-00A0C9053912}");
			#endregion

			#region 视频 FX
			invert = vegas.VideoFX.FindChildByName("反转")
				?? vegas.VideoFX.FindChildByName("Invert")
				?? vegas.VideoFX.FindChildByName("VEGAS 反转")
				?? vegas.VideoFX.FindChildByName("VEGAS Invert")
				?? vegas.VideoFX.FindChildByUniqueID("{Svfx:com.vegascreativesoftware:invert}");
			hslAdjust = vegas.VideoFX.FindChildByName("HSL 调整")
				?? vegas.VideoFX.FindChildByName("HSL Adjust")
				?? vegas.VideoFX.FindChildByName("VEGAS HSL 调整")
				?? vegas.VideoFX.FindChildByName("VEGAS HSL Adjust")
				?? vegas.VideoFX.FindChildByUniqueID("{Svfx:com.vegascreativesoftware:hsladjust}");
			labAdjust = vegas.VideoFX.FindChildByName("LAB 调整")
				?? vegas.VideoFX.FindChildByName("LAB Adjust")
				?? vegas.VideoFX.FindChildByName("VEGAS LAB 调整")
				?? vegas.VideoFX.FindChildByName("VEGAS LAB Adjust")
				?? vegas.VideoFX.FindChildByUniqueID("{Svfx:com.vegascreativesoftware:labadjust}");
			blackAndWhite = vegas.VideoFX.FindChildByName("黑白")
				?? vegas.VideoFX.FindChildByName("Black and White")
				?? vegas.VideoFX.FindChildByName("VEGAS 黑白")
				?? vegas.VideoFX.FindChildByName("VEGAS Black and White")
				?? vegas.VideoFX.FindChildByUniqueID("{Svfx:com.vegascreativesoftware:blackandwhite}");
			mirror = vegas.VideoFX.FindChildByName("镜像")
				?? vegas.VideoFX.FindChildByName("Mirror")
				?? vegas.VideoFX.FindChildByName("VEGAS 镜像")
				?? vegas.VideoFX.FindChildByName("VEGAS Mirror")
				?? vegas.VideoFX.FindChildByUniqueID("{Svfx:com.vegascreativesoftware:mirror}");
			picInPic = vegas.VideoFX.FindChildByName("画中画")
				?? vegas.VideoFX.FindChildByName("Picture In Picture")
				?? vegas.VideoFX.FindChildByName("VEGAS 画中画")
				?? vegas.VideoFX.FindChildByName("VEGAS Picture In Picture")
				?? vegas.VideoFX.FindChildByUniqueID("{Svfx:com.vegascreativesoftware:pictureinpicture}");
			crop = vegas.VideoFX.FindChildByName("修剪")
				?? vegas.VideoFX.FindChildByName("Crop")
				?? vegas.VideoFX.FindChildByName("VEGAS 修剪")
				?? vegas.VideoFX.FindChildByName("VEGAS Crop")
				?? vegas.VideoFX.FindChildByUniqueID("{Svfx:com.vegascreativesoftware:crop}");
			contrast = vegas.VideoFX.FindChildByName("亮度和对比度")
				?? vegas.VideoFX.FindChildByName("Brightness and Contrast")
				?? vegas.VideoFX.FindChildByName("VEGAS 亮度和对比度")
				?? vegas.VideoFX.FindChildByName("VEGAS Brightness and Contrast")
				?? vegas.VideoFX.FindChildByUniqueID("{Svfx:com.vegascreativesoftware:brightnessandcontrast}");
			wave = vegas.VideoFX.FindChildByName("波浪")
				?? vegas.VideoFX.FindChildByName("Wave")
				?? vegas.VideoFX.FindChildByName("VEGAS 波浪")
				?? vegas.VideoFX.FindChildByName("VEGAS Wave")
				?? vegas.VideoFX.FindChildByUniqueID("{EC1A2314-0C38-11D2-9AAC-00A0C99B12C5}");
			spherize = vegas.VideoFX.FindChildByName("球面化")
				?? vegas.VideoFX.FindChildByName("Spherize")
				?? vegas.VideoFX.FindChildByName("VEGAS 球面化")
				?? vegas.VideoFX.FindChildByName("VEGAS Spherize")
				?? vegas.VideoFX.FindChildByUniqueID("{Svfx:com.vegascreativesoftware:spherize}");
			gaussianBlur = vegas.VideoFX.FindChildByName("高斯模糊")
				?? vegas.VideoFX.FindChildByName("Gaussian Blur")
				?? vegas.VideoFX.FindChildByName("VEGAS 高斯模糊")
				?? vegas.VideoFX.FindChildByName("VEGAS Gaussian Blur")
				?? vegas.VideoFX.FindChildByUniqueID("{Svfx:com.vegascreativesoftware:gaussianblur}");
			radialBlur = vegas.VideoFX.FindChildByName("径向模糊")
				?? vegas.VideoFX.FindChildByName("Radial Blur")
				?? vegas.VideoFX.FindChildByName("VEGAS 径向模糊")
				?? vegas.VideoFX.FindChildByName("VEGAS Radial Blur")
				?? vegas.VideoFX.FindChildByUniqueID("{Svfx:com.vegascreativesoftware:radialblur}");
			bzMasking = vegas.VideoFX.FindChildByName("贝兹蒙版")
				?? vegas.VideoFX.FindChildByName("Bézier Masking")
				?? vegas.VideoFX.FindChildByName("VEGAS 贝兹蒙版")
				?? vegas.VideoFX.FindChildByName("VEGAS Bézier Masking")
				?? vegas.VideoFX.FindChildByUniqueID("{Svfx:com.vegascreativesoftware:bzmasking}");
			cookieCutter = vegas.VideoFX.FindChildByName("区域裁切")
				?? vegas.VideoFX.FindChildByName("Cookie Cutter")
				?? vegas.VideoFX.FindChildByName("VEGAS 区域裁切")
				?? vegas.VideoFX.FindChildByName("VEGAS Cookie Cutter")
				?? vegas.VideoFX.FindChildByUniqueID("{Svfx:com.vegascreativesoftware:cookiecutter}");
			swirl = vegas.VideoFX.FindChildByName("漩涡")
				?? vegas.VideoFX.FindChildByName("Swirl")
				?? vegas.VideoFX.FindChildByName("VEGAS 漩涡")
				?? vegas.VideoFX.FindChildByName("VEGAS Swirl")
				?? vegas.VideoFX.FindChildByUniqueID("{B3A8C4CF-E5AD-4B2F-A603-2F0FCB3B546E}");
			#endregion

			#region 媒体发生器
			solidColor = vegas.Generators.FindChildByName("纯色")
				?? vegas.Generators.FindChildByName("Solid Color")
				?? vegas.Generators.FindChildByName("VEGAS 纯色")
				?? vegas.Generators.FindChildByName("VEGAS Solid Color")
				?? vegas.Generators.FindChildByUniqueID("{Svfx:com.vegascreativesoftware:solidcolor}");
			titlesAndText = vegas.Generators.FindChildByName("字幕和文字")
				?? vegas.Generators.FindChildByName("Titles & Text")
				?? vegas.Generators.FindChildByName("VEGAS 字幕和文字")
				?? vegas.Generators.FindChildByName("VEGAS Titles & Text")
				?? vegas.Generators.FindChildByUniqueID("{Svfx:com.vegascreativesoftware:titlesandtext}");
			#endregion

			isInit = true;
		}
		private static bool isInit = false;
		/// <summary>
		/// 针对视频事件的效果。
		/// </summary>
		public static class ForVideoEvents {
			/// <summary>
			/// 应用反转颜色效果。
			/// </summary>
			/// <param name="videoEvent">视频事件</param>
			public static void Negative(VideoEvent videoEvent) {
				videoEvent.Effects.AddEffect(invert);
			}
			/// <summary>
			/// 应用黑白效果。
			/// </summary>
			/// <param name="videoEvent">视频事件</param>
			public static void Grey(VideoEvent videoEvent) {
				videoEvent.Effects.AddEffect(blackAndWhite);
			}
			/// <summary>
			/// 应用反转亮度效果。
			/// </summary>
			/// <param name="videoEvent">视频事件</param>
			public static void InvertLumin(VideoEvent videoEvent) {
				Effect effect = videoEvent.Effects.AddEffect(labAdjust);
				(effect.OFXEffect.FindParameterByName("InvertLuminance") as OFXBooleanParameter).Value = true;
			}
			/// <summary>
			/// 应用改变色相效果。
			/// </summary>
			/// <param name="videoEvent">视频事件</param>
			/// <param name="value">色相值</param>
			public static void ChangeHue(VideoEvent videoEvent, double value) {
				Effect effect = videoEvent.Effects.AddEffect(hslAdjust);
				(effect.OFXEffect.FindParameterByName("AddToHue") as OFXDoubleParameter).Value = value;
			}
			private const double MIRROR_UP = 0;
			private const double MIRROR_DOWN = 180;
			private const double MIRROR_LEFT = 90;
			private const double MIRROR_RIGHT = -90;
			/// <summary>
			/// 应用镜像效果。
			/// </summary>
			/// <param name="videoEvent">视频事件</param>
			/// <param name="horizontalDirect">水平镜像选项。0 表示不水平镜像，1 表示镜像左边，2 表示镜像右边</param>
			/// <param name="verticalDirect">垂直镜像选项。0 表示不垂直镜像，1 表示镜像上边，2 表示镜像下边</param>
			public static void Mirror(VideoEvent videoEvent, int horizontalDirect, int verticalDirect) {
				if (horizontalDirect != 0) {
					Effect effect = videoEvent.Effects.AddEffect(mirror);
					(effect.OFXEffect.FindParameterByName("Angle") as OFXDoubleParameter).Value =
						horizontalDirect == 1 ? MIRROR_LEFT : MIRROR_RIGHT;
				}
				if (verticalDirect != 0) {
					Effect effect = videoEvent.Effects.AddEffect(mirror);
					(effect.OFXEffect.FindParameterByName("Angle") as OFXDoubleParameter).Value =
						verticalDirect == 1 ? MIRROR_UP : MIRROR_DOWN;
				}
			}
			/// <summary>
			/// 应用发光效果。
			/// </summary>
			/// <param name="videoEvent">视频事件</param>
			/// <param name="duration">发光持续长度。如果为正表示发光淡入，为负表示发光淡出。</param>
			/// <param name="curve">缓动插值类型</param>
			/// <param name="brightness">发光亮度</param>
			public static void Glow(VideoEvent videoEvent, double duration, OFXInterpolationType curve, double brightness) {
				if (duration == 0) return;
				double length = videoEvent.Length.ToMilliseconds(), dur, bright = brightness / 100.0;
				Effect effect = videoEvent.Effects.AddEffect(contrast);
				OFXDoubleParameter
					brightnessParam = effect.OFXEffect.FindParameterByName("Brightness") as OFXDoubleParameter,
					contrastParam = effect.OFXEffect.FindParameterByName("Contrast") as OFXDoubleParameter;
				List<OFXDoubleParameter> @params = new List<OFXDoubleParameter> { brightnessParam };
				if (brightness > 0) @params.Add(contrastParam);
				foreach (OFXDoubleParameter param in @params) {
					param.IsAnimated = true;
					if (duration > 0) {
						dur = duration / 100.0 * length;
						param.SetValueAtTime(Timecode.FromMilliseconds(0), bright);
						param.SetValueAtTime(Timecode.FromMilliseconds(dur), 0);
						param.Keyframes[0].Interpolation = curve;
					} else {
						dur = (1.0 + duration / 100.0) * length;
						param.SetValueAtTime(Timecode.FromMilliseconds(0), 0);
						param.SetValueAtTime(Timecode.FromMilliseconds(dur), 0);
						param.SetValueAtTime(Timecode.FromMilliseconds(length), bright);
						param.Keyframes[0 != dur ? 1 : 0].Interpolation = curve;
					}
				}
			}
			/// <summary>
			/// 应用波浪效果。
			/// 由于该效果插件不是 OFX 插件，只能使用自带预设。
			/// </summary>
			/// <param name="videoEvent">视频事件</param>
			public static void Wave(VideoEvent videoEvent) {
				Effect effect = videoEvent.Effects.AddEffect(wave);
				ForYtps.GetRandomPreset(effect);
			}
			/// <summary>
			/// 应用旋转色相效果。
			/// </summary>
			/// <param name="videoEvent">视频事件</param>
			public static void RotateHue(VideoEvent videoEvent) {
				Effect effect = videoEvent.Effects.AddEffect(hslAdjust);
				OFXDoubleParameter param = effect.OFXEffect.FindParameterByName("AddToHue") as OFXDoubleParameter;
				param.IsAnimated = true;
				param.SetValueAtTime(Timecode.FromMilliseconds(0), 0);
				param.SetValueAtTime(videoEvent.Length, 1);
			}
			/// <summary>
			/// 应用放大动画效果。
			/// </summary>
			/// <param name="videoEvent">视频事件</param>
			public static void Enlarge(VideoEvent videoEvent) {
				const int FINAL_SIZE = 100;
				videoEvent.VideoMotion.Keyframes[0].Type = VideoKeyframeType.Slow;
				videoEvent.VideoMotion.Keyframes[0].Smoothness = 0;
				VideoMotionKeyframe final = new VideoMotionKeyframe(videoEvent.Length);
				videoEvent.VideoMotion.Keyframes.Add(final);
				float width = final.BottomRight.X - final.BottomLeft.X;
				float height = final.BottomRight.Y - final.TopRight.Y;
				float newWidth = FINAL_SIZE, newHeight = FINAL_SIZE;
				if (width <= height) newWidth = newHeight / height * width;
				else newHeight = newWidth / width * height;
				float randX = RandomFloatBetween(0, width - newWidth);
				float randY = RandomFloatBetween(0, height - newHeight);
				final.Bounds = GetARectangleBounds(randX, randY, newWidth, newHeight);
			}
			/// <summary>
			/// 应用球面化效果。
			/// </summary>
			/// <param name="videoEvent">视频事件</param>
			/// <param name="amount">数量</param>
			public static void Spherize(VideoEvent videoEvent, double amount = 1) {
				Effect effect = videoEvent.Effects.AddEffect(spherize);
				(effect.OFXEffect.FindParameterByName("Amount") as OFXDoubleParameter).Value = amount;
			}
			/// <summary>
			/// 应用高对比效果。
			/// </summary>
			/// <param name="videoEvent">视频事件</param>
			/// <param name="center">对比度中心</param>
			public static void Contrast(VideoEvent videoEvent, double center = 0.5) {
				Effect effect = videoEvent.Effects.AddEffect(contrast);
				(effect.OFXEffect.FindParameterByName("Contrast") as OFXDoubleParameter).Value = 1;
				(effect.OFXEffect.FindParameterByName("ContrastCenter") as OFXDoubleParameter).Value = center;
			}
			/// <summary>
			/// 应用饱和度效果。
			/// </summary>
			/// <param name="videoEvent">视频事件</param>
			/// <param name="saturation">饱和度</param>
			public static void Saturate(VideoEvent videoEvent, double saturation = 2) {
				Effect effect = videoEvent.Effects.AddEffect(hslAdjust);
				(effect.OFXEffect.FindParameterByName("Saturation") as OFXDoubleParameter).Value = saturation;
			}
			/// <summary>
			/// 应用放大并突出重点效果。
			/// </summary>
			/// <param name="videoEvents">视频事件列表</param>
			public static void Focus(List<VideoEvent> videoEvents) {
				int length;
				if (videoEvents == null || (length = videoEvents.Count) == 0) return;
				VideoMotionKeyframe firstFrame = videoEvents[0].VideoMotion.Keyframes[0];
				float width = firstFrame.BottomRight.X - firstFrame.BottomLeft.X,
					height = firstFrame.BottomRight.Y - firstFrame.TopRight.Y,
					topLeftX = firstFrame.TopLeft.X, topLeftY = firstFrame.TopLeft.Y;
				float finalRatio = RandomFloatBetween(0.5f, 0.75f);
				float finalWidth = width * finalRatio, finalHeight = height * finalRatio,
					finalTopLeftX = RandomFloatBetween(0, width - finalWidth) + topLeftX,
					finalTopLeftY = RandomFloatBetween(0, height - finalHeight) + topLeftY;
				for (int i = 1; i < length; i++) {
					VideoMotionKeyframe frame = videoEvents[i].VideoMotion.Keyframes[0];
					double progress = (double)i / (length - 1);
					frame.Bounds = GetARectangleBounds(
						GetPercentageInRange(topLeftX, finalTopLeftX, progress),
						GetPercentageInRange(topLeftY, finalTopLeftY, progress),
						GetPercentageInRange(width, finalWidth, progress),
						GetPercentageInRange(height, finalHeight, progress)
					);
				}
			}
			/// <summary>
			/// 垂直扩缩效果。
			/// </summary>
			/// <param name="videoEvent">视频事件。</param>
			/// <param name="_type">所选的映像节奏视觉效果。必须是垂直扩缩类中的效果才可使用。</param>
			/// <param name="scale">缩小比例。<br /><strong>V4 (WinForm) 版本暂不支持修改。</strong></param>
			public static void Expansion(VideoEvent videoEvent, PvVisualEffectType? _type, double scale = 0.8) {
				if (_type == null) return;
				PvVisualEffectType type = (PvVisualEffectType)_type;
				if (type < PvVisualEffectType.VERTICAL_EXPANSION || type > PvVisualEffectType.VERTICAL_COMPRESSION_WITH_REBOUND) return;
				Timecode startTime = Timecode.FromMilliseconds(0), endTime = videoEvent.Length, centerTime = Timecode.FromMilliseconds(videoEvent.Length.ToMilliseconds() / 2);
				Effect effect = videoEvent.Effects.AddEffect(picInPic);
				OFXChoiceParameter keepProp = effect.OFXEffect.FindParameterByName("KeepProportions") as OFXChoiceParameter;
				keepProp.Value = keepProp.Choices[1];
				(effect.OFXEffect.FindParameterByName("Scale") as OFXDoubleParameter).Value = 1;
				OFXDoubleParameter scaleYParam = effect.OFXEffect.FindParameterByName("DistortionScaleY") as OFXDoubleParameter;
				bool isCompression = type == PvVisualEffectType.VERTICAL_COMPRESSION || type == PvVisualEffectType.VERTICAL_COMPRESSION_WITH_REBOUND;
				scaleYParam.Value = isCompression ? 1 : scale; // 如果不设置该项，会出现闪屏错误。
				OFXDouble2DParameter locationParam = effect.OFXEffect.FindParameterByName("Location") as OFXDouble2DParameter;
				Func<bool, OFXDouble2D> setLocationIsMax = max => max ? new OFXDouble2D { X = 0.5, Y = 0.5 } : new OFXDouble2D { X = 0.5, Y = scale / 2 };
				locationParam.Value = setLocationIsMax(isCompression);
				scaleYParam.IsAnimated = true;
				locationParam.IsAnimated = true;
				Action<Timecode, bool> setY = (timecode, max) => {
					scaleYParam.SetValueAtTime(timecode, max ? 1 : scale);
					locationParam.SetValueAtTime(timecode, setLocationIsMax(max));
				};
				if (type == PvVisualEffectType.VERTICAL_EXPANSION || type == PvVisualEffectType.VERTICAL_COMPRESSION) {
					setY(startTime, type == PvVisualEffectType.VERTICAL_COMPRESSION);
					setY(endTime, type == PvVisualEffectType.VERTICAL_EXPANSION);
				} else {
					setY(startTime, type == PvVisualEffectType.VERTICAL_COMPRESSION_WITH_REBOUND);
					setY(centerTime, type == PvVisualEffectType.VERTICAL_EXPANSION_WITH_REBOUND);
					setY(endTime, type == PvVisualEffectType.VERTICAL_COMPRESSION_WITH_REBOUND);
				}
				scaleYParam.Keyframes[0].Interpolation = locationParam.Keyframes[0].Interpolation = OFXInterpolationType.Fast;
				scaleYParam.Keyframes[1].Interpolation = locationParam.Keyframes[1].Interpolation = OFXInterpolationType.Slow;
			}
			/// <summary>
			/// 斜向扩缩效果。
			/// </summary>
			/// <param name="videoEvent">视频事件。</param>
			/// <param name="direct">变形方向。<br />正数表示向右变形，负数表示向左变形，0 表示不变形。</param>
			/// <param name="scale">缩小比例。<br /><strong>V4 (WinForm) 版本暂不支持修改。</strong></param>
			public static void ObliqueExpansion(VideoEvent videoEvent, int direct, double scale = 0.7) {
				if ((direct = Math.Sign(direct)) == 0) return;
				VideoStream stream = videoEvent.ActiveTake.MediaStream as VideoStream;
				int width = stream.Width, height = stream.Height;
				//int width = 16, height = 9;
				double radAngle = Math.Atan2((width - width * scale) / 2, height);
				double angle = radAngle / Math.PI * 180;
				double shear = Math.Tan(radAngle);
				Timecode startTime = Timecode.FromMilliseconds(0), endTime = videoEvent.Length, centerTime = Timecode.FromMilliseconds(videoEvent.Length.ToMilliseconds() / 2);
				Effect effect = videoEvent.Effects.AddEffect(picInPic);
				{
					OFXChoiceParameter keepProp = effect.OFXEffect.FindParameterByName("KeepProportions") as OFXChoiceParameter;
					keepProp.Value = keepProp.Choices[1];
					OFXDoubleParameter angleParam = effect.OFXEffect.FindParameterByName("Angle") as OFXDoubleParameter,
						scaleXParam = effect.OFXEffect.FindParameterByName("Scale") as OFXDoubleParameter,
						scaleYParam = effect.OFXEffect.FindParameterByName("DistortionScaleY") as OFXDoubleParameter,
						shearParam = effect.OFXEffect.FindParameterByName("DistortionShear") as OFXDoubleParameter;
					OFXDouble2DParameter locationParam = effect.OFXEffect.FindParameterByName("Location") as OFXDouble2DParameter;
					OFXParameter[] @params = { angleParam, scaleXParam, scaleYParam, shearParam, locationParam };
					foreach (OFXParameter param in @params)
						param.IsAnimated = true;
					angleParam.SetValueAtTime(startTime, direct * angle);
					scaleXParam.SetValueAtTime(startTime, scale * Math.Cos(radAngle));
					scaleYParam.SetValueAtTime(startTime, 1 / Math.Cos(radAngle));
					shearParam.SetValueAtTime(startTime, -direct * shear);
					locationParam.SetValueAtTime(direct < 0 ? startTime : endTime, new OFXDouble2D { X = (1 + scale) / 4, Y = 0.5 });
					angleParam.SetValueAtTime(centerTime, 0);
					scaleXParam.SetValueAtTime(centerTime, scale);
					scaleYParam.SetValueAtTime(centerTime, 1);
					shearParam.SetValueAtTime(centerTime, 0);
					angleParam.SetValueAtTime(endTime, -direct * angle);
					scaleXParam.SetValueAtTime(endTime, scaleXParam.GetValueAtTime(startTime));
					scaleYParam.SetValueAtTime(endTime, scaleYParam.GetValueAtTime(startTime));
					shearParam.SetValueAtTime(endTime, direct * shear);
					locationParam.SetValueAtTime(direct > 0 ? startTime : endTime, new OFXDouble2D { X = 1 - (1 + scale) / 4, Y = 0.5 });
					foreach (OFXParameter _param in @params) {
						if (_param is OFXDoubleParameter) {
							OFXDoubleParameter param = _param as OFXDoubleParameter;
							foreach (OFXDoubleKeyframe keyframe in param.Keyframes)
								keyframe.Interpolation = OFXInterpolationType.Linear;
						}
						if (_param is OFXDouble2DParameter) {
							OFXDouble2DParameter param = _param as OFXDouble2DParameter;
							foreach (OFXDouble2DKeyframe keyframe in param.Keyframes)
								keyframe.Interpolation = OFXInterpolationType.Linear;
						}
					}
				}
				Expansion(videoEvent, PvVisualEffectType.VERTICAL_COMPRESSION_WITH_REBOUND, scale);
			}
			/// <summary>
			/// 噗哟噗哟 / 魔法气泡效果。
			/// </summary>
			/// <param name="videoEvent">视频事件。</param>
			/// <param name="shape">变形形状。<br />正数表示变细，负数表示变扁，0 表示不变。</param>
			/// <param name="amount">变形的比率。<br /><strong>V4 (WinForm) 版本暂不支持修改。</strong></param>
			public static void PuyoPuyo(VideoEvent videoEvent, int shape, double amount = 0.625) {
				if ((shape = Math.Sign(shape)) == 0) return;
				Effect effect = videoEvent.Effects.AddEffect(picInPic);
				OFXChoiceParameter keepProp = effect.OFXEffect.FindParameterByName("KeepProportions") as OFXChoiceParameter;
				keepProp.Value = keepProp.Choices[1];
				OFXDoubleParameter scaleX = effect.OFXEffect.FindParameterByName("Scale") as OFXDoubleParameter;
				OFXDoubleParameter scaleY = effect.OFXEffect.FindParameterByName("DistortionScaleY") as OFXDoubleParameter;
				foreach (OFXDoubleParameter scale in new OFXDoubleParameter[] { scaleX, scaleY }) {
					scale.IsAnimated = true;
					scale.SetValueAtTime(Timecode.FromMilliseconds(0),
						scale == scaleX ? shape < 0 ? amount : 1 :
						shape > 0 ? amount : 1
					);
					scale.SetValueAtTime(videoEvent.Length,
						scale == scaleX ? shape > 0 ? amount : 1 :
						shape < 0 ? amount : 1
					);
					scale.Keyframes[0].Interpolation = OFXInterpolationType.Fast;
				}
			}
			/// <summary>
			/// 钟摆 / 左右摇摆效果。
			/// </summary>
			/// <param name="videoEvent">视频事件。</param>
			/// <param name="direct">摇摆方向。<br />正数表示向右摆动，负数表示向左摆动，0 表示不摆动。</param>
			/// <param name="angle">摆动的角度。<br /><strong>V4 (WinForm) 版本暂不支持修改。</strong></param>
			public static void Pendulum(VideoEvent videoEvent, int direct, double angle = 15) {
				if ((direct = Math.Sign(direct)) == 0) return;
				double radAngle = angle * Math.PI / 180;
				Effect effect = videoEvent.Effects.AddEffect(picInPic);
				VideoStream stream = videoEvent.ActiveTake.MediaStream as VideoStream;
				int width = stream.Width, height = stream.Height;
				double maxRadAngle = Math.Atan2(width, height);
				if (Math.Abs(radAngle) > maxRadAngle) radAngle = Math.Sign(radAngle) * maxRadAngle;
				(effect.OFXEffect.FindParameterByName("Scale") as OFXDoubleParameter).Value = height / (width * Math.Sin(radAngle) + height * Math.Cos(radAngle));
				OFXDoubleParameter angleParam = effect.OFXEffect.FindParameterByName("Angle") as OFXDoubleParameter;
				angleParam.IsAnimated = true;
				angleParam.SetValueAtTime(Timecode.FromMilliseconds(0), -direct * angle);
				angleParam.SetValueAtTime(videoEvent.Length, direct * angle);
				angleParam.Keyframes[0].Interpolation = OFXInterpolationType.Fast;
			}
			/// <summary>
			/// 高斯模糊效果。
			/// </summary>
			/// <param name="videoEvent">视频事件。</param>
			/// <param name="range">模糊级别范围。</param>
			public static void GaussianBlur(VideoEvent videoEvent, double range = 0.1) {
				Effect effect = videoEvent.Effects.AddEffect(gaussianBlur);
				foreach (OFXDoubleParameter param in new OFXDoubleParameter[] { effect.OFXEffect.FindParameterByName("HorizontalRange") as OFXDoubleParameter, effect.OFXEffect.FindParameterByName("VerticalRange") as OFXDoubleParameter }) {
					param.IsAnimated = true;
					param.SetValueAtTime(Timecode.FromMilliseconds(0), range);
					param.SetValueAtTime(videoEvent.Length, 0);
					param.Keyframes[0].Interpolation = OFXInterpolationType.Fast;
				}
			}
			/// <summary>
			/// 径向模糊效果。
			/// </summary>
			/// <param name="videoEvent">视频事件。</param>
			/// <param name="range">模糊级别范围。</param>
			public static void RadialBlur(VideoEvent videoEvent, double range = 0.8) {
				Effect effect = videoEvent.Effects.AddEffect(radialBlur);
				OFXChoiceParameter type = effect.OFXEffect.FindParameterByName("Type") as OFXChoiceParameter;
				type.Value = type.Choices[1];
				OFXDoubleParameter strength = effect.OFXEffect.FindParameterByName("Strength") as OFXDoubleParameter;
				strength.IsAnimated = true;
				strength.SetValueAtTime(Timecode.FromMilliseconds(0), range);
				strength.SetValueAtTime(videoEvent.Length, 0);
				strength.Keyframes[0].Interpolation = OFXInterpolationType.Linear;
			}
			/// <summary>
			/// 应用色相和饱和度的参数。
			/// </summary>
			/// <param name="videoEvent">视频事件。</param>
			/// <param name="startHue">起始色相。输入范围：0~360；输出范围：0~1。</param>
			/// <param name="endHue">终止色相。输入范围：0~360；输出范围：0~1。</param>
			/// <param name="startSaturation">起始饱和度。输入范围：0~200；输出范围：0~2。</param>
			/// <param name="endSaturation">终止饱和度。输入范围：0~200；输出范围：0~2。</param>
			/// <param name="startHueCurve">起始色相曲线。</param>
			/// <param name="startSaturationCurve">起始饱和度曲线。</param>
			public static void HueAndSaturationParam(VideoEvent videoEvent, double startHue, double endHue, double startSaturation, double endSaturation, OFXInterpolationType startHueCurve, OFXInterpolationType startSaturationCurve) {
				Effect effect = null;
				double _startHue = startHue / 360.0, _endHue = endHue / 360.0,
					_startSaturation = startSaturation / 100.0, _endSaturation = endSaturation / 100.0;
				if (!(startHue == 0 && endHue == 0 || startHue == 360 && endHue == 360)) {
					effect = videoEvent.Effects.AddEffect(hslAdjust);
					OFXDoubleParameter hue = effect.OFXEffect.FindParameterByName("AddToHue") as OFXDoubleParameter;
					if (startHue == endHue) hue.Value = _startHue;
					else {
						hue.IsAnimated = true;
						hue.SetValueAtTime(Timecode.FromMilliseconds(0), _startHue);
						hue.SetValueAtTime(videoEvent.Length, _endHue);
						hue.Keyframes[0].Interpolation = startHueCurve;
					}
				}
				if (startSaturation != 100 || endSaturation != 100) {
					if (effect == null) effect = videoEvent.Effects.AddEffect(hslAdjust);
					OFXDoubleParameter saturation = effect.OFXEffect.FindParameterByName("Saturation") as OFXDoubleParameter;
					if (startSaturation == endSaturation) saturation.Value = _startSaturation;
					else {
						saturation.IsAnimated = true;
						saturation.SetValueAtTime(Timecode.FromMilliseconds(0), _startSaturation);
						saturation.SetValueAtTime(videoEvent.Length, _endSaturation);
						saturation.Keyframes[0].Interpolation = startSaturationCurve;
					}
				}
			}
			/// <summary>
			/// 应用对比度和对比度中心（阈值）的参数。
			/// </summary>
			/// <param name="videoEvent">视频事件。</param>
			/// <param name="startContrast">起始对比度。输入范围：-100~100；输出范围：-1~1。</param>
			/// <param name="endContrast">终止对比度。输入范围：-100~100；输出范围：-1~1。</param>
			/// <param name="startThreshold">起始对比度中心。输入范围：0~100；输出范围：0~1。</param>
			/// <param name="endThreshold">终止对比度中心。输入范围：0~100；输出范围：0~1。</param>
			/// <param name="startContrastCurve">起始对比度曲线。</param>
			/// <param name="startThresholdCurve">起始对比度中心曲线。</param>
			public static void ContrastAndThresholdParam(VideoEvent videoEvent, double startContrast, double endContrast, double startThreshold, double endThreshold, OFXInterpolationType startContrastCurve, OFXInterpolationType startThresholdCurve) {
				double _startContrast = startContrast / 100.0, _endContrast = endContrast / 100.0,
					_startThreshold = startThreshold / 100.0, _endThreshold = endThreshold / 100.0;
				if (startContrast != 0 || endContrast != 0) {
					Effect effect = videoEvent.Effects.AddEffect(contrast);
					OFXDoubleParameter contrastParam = effect.OFXEffect.FindParameterByName("Contrast") as OFXDoubleParameter;
					if (startContrast == endContrast) contrastParam.Value = _startContrast;
					else {
						contrastParam.IsAnimated = true;
						contrastParam.SetValueAtTime(Timecode.FromMilliseconds(0), _startContrast);
						contrastParam.SetValueAtTime(videoEvent.Length, _endContrast);
						contrastParam.Keyframes[0].Interpolation = startContrastCurve;
					}
					OFXDoubleParameter contrastCenter = effect.OFXEffect.FindParameterByName("ContrastCenter") as OFXDoubleParameter;
					if (startThreshold == endThreshold) contrastCenter.Value = _startThreshold;
					else {
						contrastCenter.IsAnimated = true;
						contrastCenter.SetValueAtTime(Timecode.FromMilliseconds(0), _startThreshold);
						contrastCenter.SetValueAtTime(videoEvent.Length, _endThreshold);
						contrastCenter.Keyframes[0].Interpolation = startThresholdCurve;
					}
				}
			}
			/// <summary>
			/// 应用声呐效果。
			/// </summary>
			/// <param name="videoEvent">视频事件。应该是一个通过媒体发生器产生的透明的纯色。</param>
			/// <param name="sonar">声呐项目。</param>
			public static void Sonar(VideoEvent videoEvent, SonarItem sonar) {
				videoEvent.Length = sonar.Duration;
				videoEvent.FadeIn.Length = Timecode.FromMilliseconds(sonar.Duration.ToMilliseconds() * sonar.FadeIn / 100);
				videoEvent.FadeOut.Length = Timecode.FromMilliseconds(sonar.Duration.ToMilliseconds() * sonar.FadeOut / 100);
				videoEvent.FadeIn.Curve = EntryPoint.GetCurveType(sonar.FadeInCurve);
				videoEvent.FadeOut.Curve = EntryPoint.GetCurveType(sonar.FadeOutCurve);
				Timecode start = Timecode.FromMilliseconds(0), end = videoEvent.Length;
				Effect cookieFx = videoEvent.Effects.AddEffect(cookieCutter);
				(cookieFx.OFXEffect.FindParameterByName("Color") as OFXRGBParameter).Value = sonar.Color.ToOFXColor();
				OFXChoiceParameter shape = cookieFx.OFXEffect.FindParameterByName("Shape") as OFXChoiceParameter;
				shape.Value = shape.Choices[sonar.Shape];
				OFXChoiceParameter method = cookieFx.OFXEffect.FindParameterByName("Method") as OFXChoiceParameter;
				method.Value = method.Choices[1];
				(cookieFx.OFXEffect.FindParameterByName("Border") as OFXDoubleParameter).SetValues(sonar.Border / 100, sonar.EndBorder / 100, videoEvent, sonar.Curve);
				(cookieFx.OFXEffect.FindParameterByName("Size") as OFXDoubleParameter).SetValues(sonar.Size / 100, sonar.EndSize / 100, videoEvent, sonar.Curve);
				if (sonar.IsAnimatePreOffset) {
					OFXDouble2DParameter preOffset = cookieFx.OFXEffect.FindParameterByName("Center") as OFXDouble2DParameter;
					preOffset.IsAnimated = true;
					preOffset.SetValueAtTime(start, new OFXDouble2D {
						X = ((sonar.IsEven ? sonar.XPreOffset2 : sonar.XPreOffset) + 50) / 100,
						Y = ((sonar.IsEven ? sonar.YPreOffset2 : sonar.YPreOffset) + 50) / 100,
					});
					preOffset.SetValueAtTime(end, new OFXDouble2D { X = 0.5, Y = 0.5 });
					preOffset.Keyframes[0].Interpolation = EntryPoint.GetOFXInterpolationType(sonar.Curve);
				}
				if (!sonar.IsRequirePicInPic()) goto end;
				Effect picFx = videoEvent.Effects.AddEffect(picInPic);
				OFXDoubleParameter scaleX = picFx.OFXEffect.FindParameterByName("Scale") as OFXDoubleParameter;
				scaleX.Value = 1;
				OFXDoubleParameter scaleY = picFx.OFXEffect.FindParameterByName("DistortionScaleY") as OFXDoubleParameter;
				if (scaleY != null) scaleY.Value = 1;
				OFXDouble2DParameter location = picFx.OFXEffect.FindParameterByName("Location") as OFXDouble2DParameter;
				if (!sonar.IsAnimateOffset) location.Value = new OFXDouble2D { X = sonar.XPos / 100, Y = sonar.YPos / 100 };
				else {
					location.IsAnimated = true;
					location.SetValueAtTime(start, new OFXDouble2D {
						X = ((sonar.IsEven ? sonar.XOffset2 : sonar.XOffset) + sonar.XPos) / 100,
						Y = ((sonar.IsEven ? sonar.YOffset2 : sonar.YOffset) + sonar.YPos) / 100,
					});
					location.SetValueAtTime(end, new OFXDouble2D { X = sonar.XPos / 100, Y = sonar.YPos / 100 });
				}
				(picFx.OFXEffect.FindParameterByName("Angle") as OFXDoubleParameter).SetValues(sonar.IsEven ? sonar.Rotation2 : sonar.Rotation, 0, videoEvent, sonar.Curve);
			end:
				sonar.ChangeOddEven();
			}
			/// <summary>
			/// 应用时间第二类效果。
			/// </summary>
			/// <param name="videoEvent">视频事件。</param>
			/// <param name="type">所选的映像节奏视觉效果。必须是时间类 2 中的效果才可使用。</param>
			/// <param name="percent">倒带开始时间百分比。<br /><strong>V4 (WinForm) 版本暂不支持修改。</strong></param>
			public static void TimeClass2(VideoEvent videoEvent, PvVisualEffectType? type, double? percent = null) {
				if (type == null || type < PvVisualEffectType.SHARP_REWIND || type > PvVisualEffectType.WOBBLE_PERIOD) return;
				bool isStretching = videoEvent.PlaybackRate != 1;
				Envelope velocity = videoEvent.Envelopes.FindByType(EnvelopeType.Velocity) ?? new Envelope(EnvelopeType.Velocity);
				if (!videoEvent.Envelopes.HasEnvelope(EnvelopeType.Velocity)) videoEvent.Envelopes.Add(velocity);
				if (type == PvVisualEffectType.WOBBLE_PERIOD) {
					double _percent = percent ?? 0.5;
					if (isStretching) velocity.Points[0].Y /= _percent;
					double start = velocity.Points[0].Y;
					velocity.Points[0].Curve = CurveType.None;
					velocity.Points.Add(new EnvelopePoint(videoEvent.Length.Multiply(_percent), -start, CurveType.None));
				} else if (type == PvVisualEffectType.SHARP_REWIND) {
					double _percent = percent ?? 0.9;
					if (isStretching) velocity.Points[0].Y /= _percent;
					double start = velocity.Points[0].Y;
					double value = -start / (1 - _percent);
					velocity.Points[0].Curve = CurveType.None;
					velocity.Points.Add(new EnvelopePoint(videoEvent.Length.Multiply(_percent), start, CurveType.Sharp));
					velocity.Points.Add(new EnvelopePoint(videoEvent.Length, value, CurveType.Sharp));
				}
			}
			/// <summary>
			/// 应用缩小后放大效果。
			/// </summary>
			/// <param name="videoEvent">视频事件。</param>
			public static void ZoomOutIn(VideoEvent videoEvent) {
				Effect effect = videoEvent.Effects.AddEffect(picInPic);
				OFXDoubleParameter scale = effect.OFXEffect.FindParameterByName("Scale") as OFXDoubleParameter;
				scale.IsAnimated = true;
				const double MAX_SIZE_VALUE = 10;
				scale.SetValueAtTime(Timecode.FromMilliseconds(0), MAX_SIZE_VALUE);
				scale.SetValueAtTime(videoEvent.Length.Multiply(0.5), 1);
				scale.SetValueAtTime(videoEvent.Length, MAX_SIZE_VALUE);
				OFXKeyframes<double, OFXDoubleKeyframe> keys = scale.Keyframes;
				if (keys.Count >= 3) { // 防止关键帧过少问题。
					keys[0].Interpolation = OFXInterpolationType.Fast;
					keys[1].Interpolation = OFXInterpolationType.Slow;
				}
				effect.OFXEffect.AllParametersChanged();
			}
			/// <summary>
			/// 在漩涡效果的指定时间码处设置值。
			/// </summary>
			/// <param name="swirl">漩涡效果。不管是视频剪辑的效果或是视频轨道的效果都可以使用。</param>
			/// <param name="timecode">指定时间码。</param>
			/// <param name="isHold">是否是“保留”关键帧插值。</param>
			/// <param name="amount">数量。</param>
			/// <param name="centerX">X 中心。</param>
			/// <param name="centerY">Y 中心。</param>
			/// <param name="scaleH">水平缩放。</param>
			/// <param name="scaleV">垂直缩放。</param>
			public static void SetSwirlAtTime(Effect swirl, Timecode timecode, bool isHold, double amount = 0, double centerX = 0, double centerY = 0, double scaleH = 1, double scaleV = 1) {
				Keyframe keyframe = new Keyframe(timecode);
				try {
					swirl.Keyframes.Add(keyframe);
				} catch (ApplicationException) { // 待插入的时间码上已有关键帧。
					foreach (Keyframe existKeyframe in swirl.Keyframes)
						if (existKeyframe.Position == timecode) {
							keyframe = existKeyframe;
							goto endFindKeyframe;
						}
					return; // 此时未知原因，找不到相应的时间码。
				}
			endFindKeyframe:
				AddSwirlTempPreset(amount, centerX, centerY, scaleH, scaleV);
				keyframe.Preset = SWIRL_TEMP_PRESET_NAME;
				if (isHold) keyframe.Type = VideoKeyframeType.Hold;
			}
			private const string SWIRL_PRESETS_PATH = @"Software\DXTransform\Presets\{B3A8C4CF-E5AD-4B2F-A603-2F0FCB3B546E}";
			private static RegistryKey SWIRL_PRESETS_REG { get { return Registry.CurrentUser.CreateSubKey(SWIRL_PRESETS_PATH); } }
			private const string SWIRL_TEMP_PRESET_NAME = "(Temp)";
			public static void RemoveSwirlTempPreset() {
				SWIRL_PRESETS_REG.DeleteValue(SWIRL_TEMP_PRESET_NAME, false);
			}
			private static void AddSwirlTempPreset(double amount, double centerX, double centerY, double scaleH, double scaleV) {
				double[] values = { amount, centerX, centerY, scaleH, scaleV, 0 };
				bool inProportion = values[1] == values[2];
				byte[] result = values.SelectMany(value => BitConverter.GetBytes(value)).ToArray();
				result[40] = (byte)(inProportion ? 1 : 0);
				SWIRL_PRESETS_REG.SetValue(SWIRL_TEMP_PRESET_NAME, result, RegistryValueKind.Binary);
			}
		}

		/// <summary>
		/// 针对轨道的效果。
		/// </summary>
		public static class ForVideoTracks {
			private static void GraduallyBase(Track[] tracks, bool isReversed, Action<Track, double> action) {
				for (int i = 0, j = tracks.Length - 1; i < tracks.Length; i++, j--) {
					Track track = tracks[!isReversed ? i : j];
					double value = (double)i / tracks.Length;
					action(track, value);
				}
			}
			private static void GraduallyBaseMap(Track[] tracks, bool isReversed, double min, double max, Action<Track, double> action) {
				for (int i = 0; i < tracks.Length; i++) {
					Track track = tracks[i];
					double value = (double)(!isReversed ? i : tracks.Length - 1 - i) / (tracks.Length - 1);
					value = value * (max - min) + min;
					action(track, value);
				}
			}
			private static void AlternatelyBase(Track[] tracks, bool isAlternative, int gridColumn, Action<Track> action) {
				bool useGrid = gridColumn > 0;
				int value = isAlternative ? 1 : 0;
				for (int i = 0; i < tracks.Length; i++) {
					Track track = tracks[i];
					int effectiveValue = i % 2;
					if (useGrid) {
						int column = i % gridColumn,
							row = i / gridColumn;
						effectiveValue = ((int)Math.Pow(-1, column + row) + 1) / 2;
					}
					if (effectiveValue == value) action(track);
				}
			}
			/// <summary>
			/// 彩虹渐变
			/// </summary>
			/// <param name="tracks">轨道数组</param>
			/// <param name="isReversed">是否倒序</param>
			public static void Rainbow(Track[] tracks, bool isReversed = false) {
				GraduallyBase(tracks, isReversed, (track, value) => {
					Effect effect = track.Effects.AddEffect(hslAdjust);
					(effect.OFXEffect.FindParameterByName("AddToHue") as OFXDoubleParameter).Value = value;
				});
			}
			/// <summary>
			/// 逐渐饱和
			/// </summary>
			/// <param name="tracks">轨道数组</param>
			/// <param name="isReversed">是否倒序</param>
			public static void Saturated(Track[] tracks, bool isReversed = false) {
				const double MIN = 0, MAX = 2;
				GraduallyBaseMap(tracks, isReversed, MIN, MAX, (track, value) => {
					Effect effect = track.Effects.AddEffect(hslAdjust);
					(effect.OFXEffect.FindParameterByName("Saturation") as OFXDoubleParameter).Value = value;
				});
			}
			/// <summary>
			/// 逐渐对比
			/// </summary>
			/// <param name="tracks">轨道数组</param>
			/// <param name="isReversed">是否倒序</param>
			public static void Contrasted(Track[] tracks, bool isReversed = false) {
				const double MIN = 0, MAX = 1;
				GraduallyBaseMap(tracks, isReversed, MIN, MAX, (track, value) => {
					Effect effect = track.Effects.AddEffect(contrast);
					(effect.OFXEffect.FindParameterByName("Contrast") as OFXDoubleParameter).Value = value;
				});
			}
			/// <summary>
			/// 阈值
			/// </summary>
			/// <param name="tracks">轨道数组</param>
			/// <param name="isReversed">是否倒序</param>
			public static void Threshold(Track[] tracks, bool isReversed = false) {
				const double MIN = 0.1, MAX = 0.9;
				GraduallyBaseMap(tracks, isReversed, MIN, MAX, (track, value) => {
					Effect effect = track.Effects.AddEffect(contrast); // 然而“阈值”效果不是 OFX 滤镜
					(effect.OFXEffect.FindParameterByName("Contrast") as OFXDoubleParameter).Value = 1;
					(effect.OFXEffect.FindParameterByName("ContrastCenter") as OFXDoubleParameter).Value = value;
				});
			}
			/// <summary>
			/// 交替彩灰
			/// </summary>
			/// <param name="tracks">轨道数组</param>
			/// <param name="isAlternative">替代顺序</param>
			/// <param name="gridColumn">自动布局轨道网格布局的列数</param>
			public static void Chromatic(Track[] tracks, bool isAlternative = false, int gridColumn = 0) {
				AlternatelyBase(tracks, isAlternative, gridColumn, track => {
					Effect effect = track.Effects.AddEffect(blackAndWhite);
				});
			}
			/// <summary>
			/// 交替正负
			/// </summary>
			/// <param name="tracks">轨道数组</param>
			/// <param name="isAlternative">替代顺序</param>
			/// <param name="gridColumn">自动布局轨道网格布局的列数</param>
			public static void Negative(Track[] tracks, bool isAlternative = false, int gridColumn = 0) {
				AlternatelyBase(tracks, isAlternative, gridColumn, track => {
					Effect effect = track.Effects.AddEffect(invert);
				});
			}
		}
		/// <summary>
		/// 针对音频事件的效果。
		/// </summary>
		public static class ForAudioEvents {
			/// <summary>
			/// 应用合唱效果。
			/// </summary>
			/// <param name="audioEvent">音频事件</param>
			public static void Chorus(AudioEvent audioEvent) {
				audioEvent.Effects.AddEffect(chorus);
			}
			/// <summary>
			/// 应用颤音效果。
			/// </summary>
			/// <param name="audioEvent">音频事件/param>
			/// <param name="plugin">选择哪一种颤音效果插件</param>
			public static void Vibrato(AudioEvent audioEvent, PlugInNode plugin) {
				Effect effect = audioEvent.Effects.AddEffect(plugin);
				ForYtps.GetRandomPreset(effect);
			}
			/// <summary>
			/// 应用多拍延迟效果。
			/// </summary>
			/// <param name="audioEvent">音频事件</param>
			public static void Delay(AudioEvent audioEvent) {
				audioEvent.Effects.AddEffect(delay);
			}
		}
		/// <summary>
		/// 针对 YouTube Poop 的效果。
		/// </summary>
		public static class ForYtps {
			/// <summary>
			/// 获取随机效果。
			/// </summary>
			/// <param name="aEvent">音频事件。</param>
			/// <param name="vEvent">视频事件。</param>
			/// <param name="aConfig">包含音频。</param>
			/// <param name="vConfig">包含视频。</param>
			/// <param name="aReverse">倒放音频子剪辑。</param>
			/// <param name="vReverse">倒放视频子剪辑。</param>
			/// <param name="p">Vegas 入口类。</param>
			/// <param name="generatedEvents">返回将会生成的轨道事件们。</param>
			/// <param name="effects">指定希望使用到的效果的数组。</param>
			public static void GetRandomEffect(
				AudioEvent aEvent,
				VideoEvent vEvent,
				bool aConfig,
				bool vConfig,
				Subclip aReverse,
				Subclip vReverse,
				EntryPoint p,
				out List<TrackEvent> generatedEvents,
				YtpEffectType[] effects = null
			) {
				generatedEvents = new List<TrackEvent>();
				if (aEvent != null) generatedEvents.Add(aEvent);
				if (vEvent != null) generatedEvents.Add(vEvent);
				YtpEffectType? effect;
				effect = effects == null ? GetRandomYtpEffectType() : GetRandomYtpEffectType(effects);
				if (effect == null) return;
				bool probably = RandomBool(); // 如果有可能的话。
				Action RestoreAudioEventMethod = new Action(() => {
					#if VER_GEQ_16
						aEvent.Method = TimeStretchPitchShift.Elastique;
						try {
							aEvent.PitchLock = aEvent.PitchLock;
						} catch (Exception e) {
							EntryPoint.ShowError(new Exceptions.NoTimeStretchPitchShiftException(), e);
						}
					#endif
				});
				switch (effect) {
					// 为什么 case 里面也打花括号？因为下面会出现一个在不同 case 里面定义相同标识符变量，结果报了重名错误的奇葩问题。
					case YtpEffectType.CHORUS: {
						if (aConfig) {
							if (chorus == null) WarningMissingPlugin(Lang.str.chorus);
							else ForAudioEvents.Chorus(aEvent);
						}
					} break;
					case YtpEffectType.PITCH_CHANGE: {
						if (aConfig) {
							int randomPitch = random.Next(-12, 12 + 1);
							randomPitch = (int)ExtremeFunction(randomPitch);
							RestoreAudioEventMethod();
							#if VER_GEQ_16
								aEvent.PitchSemis = randomPitch;
							#else
								SetPitchSemis_ForVersionsBelow16(aEvent, randomPitch);
							#endif
						}
					} break;
					case YtpEffectType.VIBRATO: {
						if (aConfig) {
							PlugInNode vibrato = random.Next(3) == 2 ? vibrato1 : vibrato2; // 有俩颤音插件，随便选一个。
							if (vibrato == null) WarningMissingPlugin(Lang.str.vibrato);
							else ForAudioEvents.Vibrato(aEvent, vibrato);
						}
						if (vConfig /* && probably */) {
							if (wave == null) WarningMissingPlugin(Lang.str.wave);
							else ForVideoEvents.Wave(vEvent);
						}
					} break;
					case YtpEffectType.REVERSE: {
						try {
							if (aConfig) {
								Timecode offset = aEvent.ActiveTake.Offset;
								aEvent.AddTake(aReverse.GetAudioStreamByIndex(0), true);
								aEvent.ActiveTake.Offset = offset;
							}
						} catch (Exception) { }
						try {
							if (vConfig) {
								Timecode offset = vEvent.ActiveTake.Offset;
								vEvent.AddTake(vReverse.GetVideoStreamByIndex(0), true);
								vEvent.ActiveTake.Offset = offset;
							}
						} catch (Exception) { }
					} break;
					case YtpEffectType.ROBOT_DELAY: {
						if (aConfig) {
							if (delay == null) WarningMissingPlugin(Lang.str.multi_beat_delay);
							else ForAudioEvents.Delay(aEvent);
						}
					} break;
					case YtpEffectType.SPEED_CHANGE: {
						double randomRate = RandomDoubleBetween(0.25, 4);
						if (aConfig)
							aEvent.AdjustPlaybackRate(randomRate, true);
						if (vConfig)
							vEvent.AdjustPlaybackRate(randomRate, true);
					} break;
					case YtpEffectType.HUE_CHANGE: {
						if (vConfig) {
							if (hslAdjust == null) WarningMissingPlugin(Lang.str.hsl_adjust);
							else ForVideoEvents.ChangeHue(vEvent, random.NextDouble());
						}
					} break;
					case YtpEffectType.HUE_ROTATE: {
						if (vConfig) {
							if (hslAdjust == null) WarningMissingPlugin(Lang.str.hsl_adjust);
							else ForVideoEvents.RotateHue(vEvent);
						}
					} break;
					case YtpEffectType.MONOCHROME: {
						if (vConfig) {
							if (blackAndWhite == null) WarningMissingPlugin(Lang.str.black_and_white);
							else ForVideoEvents.Grey(vEvent);
						}
					} break;
					case YtpEffectType.NEGATIVE: {
						if (vConfig) {
							if (invert == null) WarningMissingPlugin(Lang.str.invert);
							else ForVideoEvents.Negative(vEvent);
							if (probably) vEvent.AdjustPlaybackRate(0.5, true);
						}
						if (aConfig && probably) {
							RestoreAudioEventMethod();
							#if VER_GEQ_16
								aEvent.PitchLock = true;
							#endif
							aEvent.AdjustPlaybackRate(0.5, true);
						}
					} break;
					case YtpEffectType.HIGH_FREQ_REPEAT: {
						int repeatTimes = random.Next(MIN_HIGH_FREQ_REPEAT, MAX_HIGH_FREQ_REPEAT + 1);
						TrackEvent[] repeatClips = null;
						if (aConfig) {
							repeatClips = new AudioEvent[repeatTimes];
							aEvent.Length = Timecode.FromMilliseconds(HIGH_FREQ_REPEAT_FREQ);
							AudioEvent lastEvent = aEvent;
							for (int i = 1; i < repeatTimes; i++)
								generatedEvents.Add(repeatClips[i] = lastEvent = EntryPoint.CopyEventAtItsTail(aEvent, lastEvent));
						}
						if (vConfig) {
							vEvent.Length = Timecode.FromMilliseconds(HIGH_FREQ_REPEAT_FREQ);
							VideoEvent lastEvent = vEvent;
							for (int i = 1; i < repeatTimes; i++) {
								TrackEvent clip = lastEvent = EntryPoint.CopyEventAtItsTail(vEvent, lastEvent);
								generatedEvents.Add(clip);
								if (repeatClips != null) p.GroupTrackEvents(clip, repeatClips[i]);
							}
						}
					} break;
					case YtpEffectType.RANDOM_TONE: {
						int count = random.Next(5, 10 + 1);
						Timecode shorterLength = Timecode.FromMilliseconds(random.Next(HIGH_FREQ_REPEAT_FREQ, MAX_PITCH_CHANGE_LENGTH));
						Timecode MAX_LENGTH = Timecode.FromMilliseconds(MAX_PITCH_CHANGE_LENGTH);
						AudioEvent[] repeatClips = null;
						if (aConfig) {
							repeatClips = new AudioEvent[count];
							if (aEvent.Length > MAX_LENGTH) aEvent.Length = shorterLength;
							RestoreAudioEventMethod();
							AudioEvent lastEvent = aEvent;
							for (int i = 0; i < count; i++) {
								AudioEvent clip = aEvent;
								if (i != 0) {
									clip = lastEvent = EntryPoint.CopyEventAtItsTail(aEvent, lastEvent);
									generatedEvents.Add(repeatClips[i] = clip);
								}
								int randomPitch = random.Next(MIN_TONE_PITCH_CHANGE, MAX_TONE_PITCH_CHANGE + 1);
								#if VER_GEQ_16
									clip.PitchSemis = randomPitch;
								#else
									SetPitchSemis_ForVersionsBelow16(clip, randomPitch);
								#endif
							}
						}
						if (vConfig) {
							if (vEvent.Length > MAX_LENGTH) vEvent.Length = shorterLength;
							VideoEvent lastEvent = vEvent;
							for (int i = 0; i < count; i++) {
								VideoEvent clip = vEvent;
								if (i != 0) {
									generatedEvents.Add(clip = lastEvent = EntryPoint.CopyEventAtItsTail(vEvent, lastEvent));
									if (repeatClips != null) p.GroupTrackEvents(clip, repeatClips[i]);
								}
								bool hFlip = i % 2 == 0;
								clip.FlipAllKeyframe(hFlip, false);
							}
						}
					} break;
					case YtpEffectType.ENLARGE: {
						if (aConfig) {
							aEvent.RecalculateNorm();
							aEvent.Normalize = true;
						}
						if (vConfig) ForVideoEvents.Enlarge(vEvent);
					} break;
					case YtpEffectType.SPHERIZE: {
						if (vConfig) {
							double amount = ExtremeFunction(RandomDoubleBetween(-1, 1));
							if (spherize == null) WarningMissingPlugin(Lang.str.spherize);
							else ForVideoEvents.Spherize(vEvent, amount);
						}
					} break;
					case YtpEffectType.MIRROR: {
						if (vConfig) {
							int i = random.Next(1, 3 * 3);
							if (mirror == null) WarningMissingPlugin(Lang.str.mirror);
							else ForVideoEvents.Mirror(vEvent, i % 3, i / 3);
						}
					} break;
					case YtpEffectType.HIGH_CONTRAST: {
						if (aConfig) {
							aEvent.RecalculateNorm();
							aEvent.Normalize = true;
						}
						if (vConfig) {
							double center = RandomDoubleBetween(0.4, 0.6);
							if (contrast == null) WarningMissingPlugin(Lang.str.brightness_and_contrast);
							else ForVideoEvents.Contrast(vEvent, center);
						}
					} break;
					case YtpEffectType.OVERSATURATION: {
						if (vConfig) {
							if (hslAdjust == null) WarningMissingPlugin(Lang.str.hsl_adjust);
							else ForVideoEvents.Saturate(vEvent, 2);
							if (probably) vEvent.AdjustPlaybackRate(2, true);
						}
						if (aConfig && probably) {
							RestoreAudioEventMethod();
							#if VER_GEQ_16
								aEvent.PitchLock = true;
							#endif
							aEvent.AdjustPlaybackRate(2, true);
						}
					} break;
					case YtpEffectType.EMPHASIZE_THRICE: {
						Repeat3State state = GetRandomRepeat3State(); // 去掉了 1.5 倍减速这种情况。
						bool isSpeedUp = state != Repeat3State.SPEED_DOWN_MULTIPLY, isMultiply = state != Repeat3State.SPEED_UP_1_5_TIMES;
						int count = isMultiply ? 3 : 6;
						Func<int, double> getRate = index => {
							if (!(index >= 0 && (isMultiply && index < 3 || !isMultiply && index < 6))) throw new ArgumentOutOfRangeException();
							double[] rates2 = { 1, 2, 4 }, rates1_5 = { 1, 1.25, 1.5, 2, 3, 4 };
							return Math.Pow((isMultiply ? rates2 : rates1_5)[index], isSpeedUp ? 1 : -1);
						};
						AudioEvent[] repeatClips = null;
						if (aConfig) {
							repeatClips = new AudioEvent[count];
							RestoreAudioEventMethod();
							#if VER_GEQ_16
								aEvent.PitchLock = true;
							#endif
							AudioEvent lastEvent = aEvent;
							for (int i = 1; i < count; i++) {
								AudioEvent clip = lastEvent = EntryPoint.CopyEventAtItsTail(aEvent, lastEvent);
								generatedEvents.Add(repeatClips[i] = clip);
								double rate = getRate(i);
								clip.AdjustPlaybackRate(rate, true);
								clip.Length = clip.Length.Multiply(1 / rate);
							}
						}
						if (vConfig) {
							if (blackAndWhite == null) WarningMissingPlugin(Lang.str.black_and_white);
							List<VideoEvent> videoEvents = new List<VideoEvent> { vEvent };
							VideoEvent lastEvent = vEvent;
							for (int i = 1; i < count; i++) {
								VideoEvent clip = lastEvent = EntryPoint.CopyEventAtItsTail(vEvent, lastEvent);
								if (repeatClips != null) p.GroupTrackEvents(clip, repeatClips[i]);
								if (probably && !isSpeedUp) ForVideoEvents.Grey(clip);
								double rate = getRate(i);
								clip.AdjustPlaybackRate(rate, true);
								clip.Length = clip.Length.Multiply(1 / rate);
								videoEvents.Add(clip);
								generatedEvents.Add(clip);
							}
							ForVideoEvents.Focus(videoEvents);
						}
					} break;
					default:
						break;
				}
			}
			/// <summary>
			/// 在所有 YTP 效果的范围内随机选取一个效果。
			/// </summary>
			/// <returns>随机选择的效果</returns>
			/// <exception cref="null">如果 YTP 效果枚举中没有任何效果，将会返回 <see cref="null"/>。</exception>
			private static YtpEffectType? GetRandomYtpEffectType() {
				int count = Enum.GetNames(new YtpEffectType().GetType()).Length;
				if (count == 0) return null;
				int rand = random.Next(count);
				return (YtpEffectType)rand;
			}
			/// <summary>
			/// 在指定 YTP 效果数组的范围内随机选取一个效果。
			/// </summary>
			/// <param name="effects">指定的 YTP 效果数组</param>
			/// <returns>随机选择的效果</returns>
			/// <exception cref="null">如果指定的 YTP 效果数组中没有任何效果，将会返回 <see cref="null"/>。</exception>
			private static YtpEffectType? GetRandomYtpEffectType(YtpEffectType[] effects) {
				int count = effects.Length;
				if (count == 0) return null;
				int rand = random.Next(count);
				return effects[rand];
			}
			private const int HIGH_FREQ_REPEAT_FREQ = 50;
			private const int MAX_PITCH_CHANGE_LENGTH = 500;
			private const int MIN_HIGH_FREQ_REPEAT = 5;
			private const int MAX_HIGH_FREQ_REPEAT = 20;
			private const int MIN_TONE_PITCH_CHANGE = -9;
			private const int MAX_TONE_PITCH_CHANGE = 9;
			private static void WarningMissingPlugin(string pluginName) { // 遇到缺少插件时不报错，而是仅仅弹出一个警告，点击确定后可以跳过。
				MessageBox.Show(string.Format(Lang.str.warning_missing_plugin, pluginName), "", MessageBoxButtons.OK, MessageBoxIcon.Warning);
			}
			/// <summary>
			/// 重要的事情说三遍效果的状态枚举。
			/// </summary>
			public enum Repeat3State {
				SPEED_UP_MULTIPLY,
				SPEED_UP_1_5_TIMES,
				SPEED_DOWN_MULTIPLY,
			}
			/// <summary>
			/// 获取一个随机的重要的事情说三遍效果状态。
			/// </summary>
			/// <returns>随机选取的重说三状态</returns>
			private static Repeat3State GetRandomRepeat3State() {
				int count = Enum.GetNames(new Repeat3State().GetType()).Length;
				int rand = random.Next(count);
				return (Repeat3State)rand;
			}
			/// <summary>
			/// 指定插件效果应用随机预设。
			/// </summary>
			/// <param name="effect">插件效果</param>
			public static void GetRandomPreset(Effect effect) {
				EffectPresets presets = effect.Presets;
				int count = presets.Count;
				string randomPreset;
				if (count == 0) return;
				else if (count == 1) randomPreset = presets[0].Name;
				else {
					do {
						randomPreset = presets[random.Next(presets.Count)].Name;
					} while (randomPreset == DEFAULT_PARAMETER || randomPreset.StartsWith("("));
				}
				effect.Preset = randomPreset;
			}
			private const string DEFAULT_PARAMETER = "[Sys] Default all parameters";
			/// <summary>
			/// 针对 Vegas 15 及以下版本兼容而使用的传统移调插件调音方式。
			/// </summary>
			/// <param name="audioEvent">音频轨道事件。</param>
			/// <param name="pitchDelta">移调值。</param>
			public static void SetPitchSemis_ForVersionsBelow16(AudioEvent audioEvent, int pitchDelta) {
				if (pitchShift == null) { WarningMissingPlugin(Lang.str.no_plugin_pitch_shift_exception); return; }
				int pitchDeltaTimes = pitchDelta > 0 ? 12 : -12;
				const bool lockStretchPitch = false;
				while (pitchDeltaTimes * pitchDelta > 0) { // pitchDeltaTimes > 0 ? pitchDelta > 0 : pitchDelta < 0
					Effect effect = audioEvent.Effects.AddEffect(pitchShift);
					try {
						effect.Preset = (Math.Abs(pitchDelta) <= 12 ? pitchDelta : pitchDeltaTimes).ToString()
							+ (lockStretchPitch ? "~" : "");
					} catch (Exception) { WarningMissingPlugin(Lang.str.no_plugin_presets_exception); return; }
					pitchDelta -= pitchDeltaTimes;
				}
			}
		}
		private static readonly Random random = new Random();
		/// <summary>
		/// 在指定的最小值与最大值之间获取一个随机的双精度浮点值。
		/// </summary>
		/// <param name="min">最小值</param>
		/// <param name="max">最大值</param>
		/// <returns>随机的双精度浮点值。且一定不会恰好等于最大值。</returns>
		public static double RandomDoubleBetween(double min, double max) {
			return random.NextDouble() * (max - min) + min;
		}
		public static float RandomFloatBetween(float min, float max) {
			return (float)RandomDoubleBetween(min, max);
		}
		/// <summary>
		/// 一个数学函数。
		/// 旨在让（某个线性的随机）值更大概率接近 -1 和 1，而更小概率接近 0。给定的参数最好在 -1 ≤ <paramref name="x"/> ≤ 1 的范围之内。<br />
		/// 函数图象是一个正半轴为 y = √x 的奇函数。
		/// </summary>
		/// <param name="x">给定一个 -1 ≤ <paramref name="x"/> ≤ 1 的值</param>
		/// <returns>函数所得值</returns>
		private static double ExtremeFunction(double x) {
			if (x >= 0) return Math.Sqrt(x);
			else return -Math.Sqrt(-x);
		}
		/// <summary>
		/// 获取一个随机的布尔值（真假的概率相等）。
		/// </summary>
		/// <returns>随机的布尔值</returns>
		public static bool RandomBool() {
			return random.Next(2) == 1;
		}
		/// <summary>
		/// 在指定初始值和最终值的范围内获得一个指定完成进度的值。
		/// 指定的进度的取值范围必须在 0 ~ 1 内。
		/// </summary>
		/// <param name="begin">初始值</param>
		/// <param name="final">最终值</param>
		/// <param name="progress">进度 ∈ [0 ~ 1]</param>
		/// <returns>指定范围内完成进度的值</returns>
		public static double GetPercentageInRange(double begin, double final, double progress) {
			if (progress < 0) progress = 0;
			if (progress > 1) progress = 1;
			return (final - begin) * progress + begin;
		}
		public static float GetPercentageInRange(float begin, float final, double progress) {
			return (float)GetPercentageInRange((double)begin, (double)final, progress);
		}
		/// <summary>
		/// 获得一个表示视频运动关键帧中使用的矩形，而不是不规则四边形。<br/>
		/// “bounds” 用复数形式表示“边界”含义，然后又用 “get a” 表示获得一个。真搞不懂英文怎么命名的。
		/// </summary>
		/// <param name="x">矩形左上角的点的横坐标</param>
		/// <param name="y">矩形左上角的点的纵坐标</param>
		/// <param name="width">矩形宽度</param>
		/// <param name="height">矩形高度</param>
		/// <returns>矩形</returns>
		public static VideoMotionBounds GetARectangleBounds(float x, float y, float width, float height) {
			return new VideoMotionBounds(
				x, y, x + width, y,
				x + width, y + height, x, y + height
			);
		}
	}

	/// <summary>
	/// 视频参数预设类。
	/// </summary>
	public class VideoParamsPreset : IReadOnlyList<decimal> {
		private SetFadeByType fadeBy;
		public SetFadeByType FadeBy { get { return fadeBy; } }
		private VideoParamsPreset(SetFadeByType fadeBy = SetFadeByType.UNDEFINED) {
			this.fadeBy = fadeBy;
		}

		private List<decimal> _list = new List<decimal>();
		public int Count { get { return _list.Count; } }
		public decimal this[int index] { get { return _list[index]; } }
		public IEnumerator<decimal> GetEnumerator() { return _list.GetEnumerator(); }
		IEnumerator IEnumerable.GetEnumerator() { return _list.GetEnumerator(); }
		private void Add(decimal item) { _list.Add(item); }
		public decimal[] ToArray() { return _list.ToArray(); }

		public static Dictionary<string, VideoParamsPreset> Presets {
			get {
				Lang str = Lang.str;
				return new Dictionary<string, VideoParamsPreset> {
					{ str.video_preset_normal, new VideoParamsPreset(SetFadeByType.PERCENT) { 0, 0, 0, 100, 100, 100, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, 0, 0, 50, 50 } },
					{ str.video_preset_enter, new VideoParamsPreset() { 0, 0, 0, 100, 90, 100, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, 0, 0, 50, 50 } },
					{ str.video_preset_enter_staff, new VideoParamsPreset() { 0, 0, 0, 100, 120, 100, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, 0, 0, 50, 50 } },
					{ str.video_preset_fade_out, new VideoParamsPreset(SetFadeByType.PERCENT) { 0, 100, 0, 100, 100, 100, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, 0, 0, 50, 50 } },
					{ str.flashlight, new VideoParamsPreset() { 0, 0, 100, 100, 100, 100, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, 0, 0, 50, 50 } },
					{ str.horizontal_movement, new VideoParamsPreset() { 0, 0, 0, 100, 50, 50, 0, 0, -100, 100, 0, 0, 0, 0, 100, 100, 0, 0, 50, 50 } },
					{ str.vertical_movement, new VideoParamsPreset() { 0, 0, 0, 100, 50, 50, 0, 0, 0, 0, -100, 100, 0, 0, 100, 100, 0, 0, 50, 50 } },
					{ str.ccw_rotate, new VideoParamsPreset() { 0, 0, 0, 100, 100, 100, -15, 0, 0, 0, 0, 0, 0, 0, 100, 100, 0, 0, 50, 50 } },
					{ str.cw_rotate, new VideoParamsPreset() { 0, 0, 0, 100, 100, 100, 15, 0, 0, 0, 0, 0, 0, 0, 100, 100, 0, 0, 50, 50 } },
					{ str.rainbow_color, new VideoParamsPreset() { 0, 0, 0, 100, 100, 100, 0, 0, 0, 0, 0, 0, 0, 360, 100, 100, 0, 0, 50, 50 } },
					{ str.oversaturation, new VideoParamsPreset() { 0, 0, 0, 100, 100, 100, 0, 0, 0, 0, 0, 0, 0, 0, 200, 100, 0, 0, 50, 50 } },
					{ str.high_contrast, new VideoParamsPreset() { 0, 0, 0, 100, 100, 100, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, 100, 0, 50, 50 } },
					{ str.threshold_change, new VideoParamsPreset() { 0, 0, 0, 100, 100, 100, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, 100, 100, 50, 70 } },
				};
			}
		}
	}

	/// <summary>
	/// 继承的 MIDI 类。
	/// </summary>
	public class MIDI : MidiFile {
		public TrackInfo[] TrackInfos = null;
		public int TicksPerQuarter = 0;
		public double MsPerQuarter = 0;
		public double Bpm {
			get { return 6e4 / MsPerQuarter; }
			set { MsPerQuarter = 6e4 / value; }
		}
		public IList<MidiEvent> MsPerQuarterTrack;
		public string TimeSignature = "";
		public readonly int TimeSignatureNumerator;
		public IList<MidiEvent> TimeSignatureTrack;
		public string Path;
		public const int INITIAL_PAN = -1;
		public class TrackInfo {
			public int Index;
			public string Name = "";
			public string Instrument = "";
			public int NotesCount = 0;
			public string BeginNote = "";
			public bool HasName { get { return !string.IsNullOrWhiteSpace(Name); } }
			public bool HasInstrument { get { return !string.IsNullOrWhiteSpace(Instrument); } }
			public override string ToString() {
				List<string> info = new List<string>();
				info.Add(Lang.str.midi_channel + ' ' + Index + (HasName ? Lang.str.colon + Name : ""));
				if (HasInstrument) info.Add(Lang.str.midi_instrument + Lang.str.colon + Instrument);
				if (IsDrumKit) info.Add(Lang.str.drum_kit);
				info.Add(Lang.str.midi_notes_count + Lang.str.colon + NotesCount);
				if (NotesCount != 0) info.Add(Lang.str.midi_begin_note + Lang.str.colon + BeginNote);
				return string.Join(Lang.str.semicolon, info);
			}
			public IList<MidiEvent> Events;
			public bool IsDrumKit = false;
			public int Pan = INITIAL_PAN;
			public bool IsDynamicPan = false;
			private bool isResorted = false;
			public bool HasPitchWheelEvents = false;
			/// <summary>
			/// 重新对轨道中的音符进行排序。
			/// </summary>
			public void Resort() {
				if (isResorted) return; // 已经排序过，不必再排序。
				List<MidiEvent> events = Events as List<MidiEvent>;
				events.Sort((x, y) => {
					if (x.AbsoluteTime != y.AbsoluteTime) // 先比较两者的开始时间。
						return Math.Sign(x.AbsoluteTime - y.AbsoluteTime);
					if (x.Channel != y.Channel) // 再比较两者的通道编号。
						return x.Channel - y.Channel;
					if (x is NoteEvent && y is NoteEvent) {
						NoteEvent xn = x as NoteEvent, yn = y as NoteEvent;
						if (xn.NoteNumber != yn.NoteNumber) // 再比较两者的音调，音调更高的在前。
							return yn.NoteNumber - xn.NoteNumber;
					}
					if (x is NoteOnEvent && y is NoteOnEvent) {
						NoteOnEvent xn = x as NoteOnEvent, yn = y as NoteOnEvent;
						if (xn.NoteLength != yn.NoteLength) // 再比较两者的持续时间，持续时间更长的在前。
							return yn.NoteLength - xn.NoteLength;
					}
					return 0; // 其余情况不作排序。
				});
				Events = events;
				isResorted = true;
			}
		}
		public MIDI(string path) : base(path) {
			Path = path;
			List<TrackInfo> trackInfos = new List<TrackInfo>();
			TicksPerQuarter = DeltaTicksPerQuarterNote;
			MsPerQuarter = 0; // 毫秒每拍
			for (int i = 0; i < Events.Tracks; i++) {
				var a = Events[i];
				TrackInfo info = new TrackInfo { Index = i, Events = Events[i] };
				foreach (MidiEvent midiEvent in info.Events) {
					if (midiEvent is NoteEvent && !(midiEvent is NoteOnEvent)) {
						NoteEvent noteEvent = midiEvent as NoteEvent;
						if (info.NotesCount++ == 0) info.BeginNote = noteEvent.NoteName; // 起音判断
					}
					if (midiEvent is PatchChangeEvent && !info.HasInstrument) {
						PatchChangeEvent patchEvent = midiEvent as PatchChangeEvent;
						info.Instrument = string.Join(" ", patchEvent.ToString().Split(' ').Slice(4)); // 乐器名称
						info.Index = patchEvent.Channel;
					}
					if (midiEvent is TempoEvent && MsPerQuarter == 0) {
						TempoEvent tempoEvent = midiEvent as TempoEvent;
						MsPerQuarter = Convert.ToDouble(tempoEvent.MicrosecondsPerQuarterNote) / 1000; // 每四分音符多少毫秒
						// MessageBox.Show(tempoEvent.Tempo.ToString()); // 用 Tempo 表示 BPM
						MsPerQuarterTrack = info.Events;
					}
					if (midiEvent is TextEvent && !info.HasName) {
						TextEvent textEvent = midiEvent as TextEvent;
						string latin1Text = textEvent.Text; // 乐轨名称
						info.Name = Latin1ToAnsi(latin1Text);
					}
					if (midiEvent is TimeSignatureEvent && TimeSignature.Length == 0) {
						TimeSignatureEvent timeSignatureEvent = midiEvent as TimeSignatureEvent;
						TimeSignature = timeSignatureEvent.TimeSignature; // 初始节拍
						TimeSignatureNumerator = timeSignatureEvent.Numerator;
						TimeSignatureTrack = info.Events;
					}
					if (midiEvent is ControlChangeEvent && !info.IsDynamicPan) {
						ControlChangeEvent controlChangeEvent = midiEvent as ControlChangeEvent;
						if (controlChangeEvent.Controller == MidiController.Pan)
							if (controlChangeEvent.ControllerValue != info.Pan)
								if (info.Pan == INITIAL_PAN)
									info.Pan = controlChangeEvent.ControllerValue;
								else info.IsDynamicPan = true;
					}
					if (midiEvent is PitchWheelChangeEvent && !info.HasPitchWheelEvents)
						info.HasPitchWheelEvents = true;
				}
				if (info.NotesCount != 0) {
					string beginNote = info.BeginNote.Trim().ToUpper();
					info.IsDrumKit = !Regex.IsMatch(beginNote, @"^[A-G]#?\d+$");
					trackInfos.Add(info);
				}
			}
			TrackInfos = trackInfos.ToArray();
		}
		public static int CountIf<MidiEventType>(IList<MidiEvent> track) where MidiEventType : MidiEvent {
			int num = 0;
			if (track != null)
				foreach (MidiEvent midiEvent in track)
					if (midiEvent is MidiEventType)
						num++;
			return num;
		}
		public bool IsDynamicBeat { get { return (TimeSignatureTrack == null ? 0 : TimeSignatureTrack.Count(midiEvent => midiEvent is TimeSignatureEvent)) > 1; } }
		public bool IsDynamicBpm {
			get {
				double tempTempo = -1;
				if (MsPerQuarterTrack != null)
					foreach (MidiEvent midiEvent in MsPerQuarterTrack)
						if (midiEvent is TempoEvent) {
							TempoEvent tempo = midiEvent as TempoEvent;
							if (tempTempo < 0) tempTempo = tempo.Tempo;
							else if (tempTempo != tempo.Tempo) return true;
						}
				return false;
			}
		}
		/// <summary>
		/// 将错误读取为 Latin1 编码的字符串转换回 ANSI 编码字符串。
		/// </summary>
		/// <param name="latin1">错误读取为 Latin1 编码的字符串。</param>
		/// <returns>ANSI 编码字符串。</returns>
		public static string Latin1ToAnsi(string latin1) {
			List<byte> unicodeByte = new List<byte>(Encoding.Unicode.GetBytes(latin1)), // 读取为 Unicode 数组后，偶数位（1 起始）字符会多出一个 0。
				latin1Byte = new List<byte>(unicodeByte.Where(b => b != 0)); // 把 0 去除，一般在偶数位（1 起始）。但无法确定是否有另类异常。
			string utf8Text = Encoding.Default.GetString(latin1Byte.ToArray());
			return utf8Text;
		}
	}

	/// <summary>
	/// 动态 BPM 积分器。
	/// </summary>
	public class DynamicBpmIntegrator {
		private readonly MIDI midi;
		private readonly TempoEvent[] msPerQuarterTrack;
		private readonly BpmKeysData[] bpmKeysDatas;
		private readonly bool useLinearKeyframes = false;

		/// <summary>
		/// 动态 BPM 积分器。
		/// </summary>
		/// <param name="midi">MIDI 对象。</param>
		/// <param name="useLinearKeyframes">如果为 false，则关键帧间插值使用定格（矩形）；如果为 true，则关键帧间插值使用线性（梯形）。<br />
		/// 一般来说 MIDI 的动态 BPM 属性的关键帧插值都是定格的。</param>
		public DynamicBpmIntegrator(MIDI midi, bool useLinearKeyframes = false) {
			this.midi = midi;
			this.useLinearKeyframes = useLinearKeyframes;
			double totalMs = 0;
			BpmKeysData previousData = null;
			IList<MidiEvent> _msPerQuarterTrack_IList = midi.MsPerQuarterTrack;
			List<TempoEvent> _msPerQuarterTrack_List = new List<TempoEvent>();
			List<BpmKeysData> _bpmKeysDatas_List = new List<BpmKeysData>();
			foreach (MidiEvent midiEvent in _msPerQuarterTrack_IList)
				if (midiEvent is TempoEvent)
					_msPerQuarterTrack_List.Add(midiEvent as TempoEvent);
			msPerQuarterTrack = _msPerQuarterTrack_List.ToArray();
			for (int i = 0; i < msPerQuarterTrack.Length; i++) {
				TempoEvent tempoEvent = msPerQuarterTrack[i];
				double msPerQuarter = (double)tempoEvent.MicrosecondsPerQuarterNote / 1000;
				double startTicks = tempoEvent.AbsoluteTime;
				if (i + 1 < msPerQuarterTrack.Length && msPerQuarterTrack[i + 1].AbsoluteTime == startTicks) continue;
				// 经改正，MIDI 的动态 BPM 应该呈矩形而不是梯形。
				double previousStartTicks = previousData == null ? 0 : previousData.startTicks;
				double previousMsPerQuarter = previousData == null ? 0 : previousData.msPerQuarter;
				if (!useLinearKeyframes)
					totalMs += (startTicks - previousStartTicks) / midi.TicksPerQuarter * previousMsPerQuarter;
				else
					totalMs += (startTicks - previousStartTicks) / midi.TicksPerQuarter * (previousMsPerQuarter + msPerQuarter) / 2.0;
				_bpmKeysDatas_List.Add(previousData = new BpmKeysData(msPerQuarter, startTicks, totalMs));
			}
			bpmKeysDatas = _bpmKeysDatas_List.ToArray();
		}
		/// <summary>
		/// 存储 BPM 关键帧数据的类。<br />
		/// <small>原计划采用结构体而不是类来存储，但是那样使用起来不是很方便。</small>
		/// </summary>
		private class BpmKeysData {
			public readonly double msPerQuarter;
			public readonly double startTicks;
			public readonly double previousMs;
			/// <summary>
			/// 存储 BPM 关键帧数据的类。
			/// </summary>
			/// <param name="msPerQuarter">此刻的毫秒每四分音符的值（即当前速度）。</param>
			/// <param name="startTicks">相对开始位置。</param>
			/// <param name="previousMs">之前所有数据实际毫秒值的总和。</param>
			public BpmKeysData(double msPerQuarter, double startTicks, double previousMs) {
				this.msPerQuarter = msPerQuarter;
				this.startTicks = startTicks;
				this.previousMs = previousMs;
			}
		}
		/// <summary>
		/// 根据 MIDI 音符的相对时刻获取音频播放的实际时刻（毫秒）。
		/// </summary>
		/// <param name="absoluteTime">音符相对时刻。</param>
		/// <returns>音频播放的实际时刻。</returns>
		public double GetActualTime(double absoluteTime) {
			for (int i = 0; i < bpmKeysDatas.Length; i++) {
				BpmKeysData curData = bpmKeysDatas[i], nextData = null;
				if (i + 1 < bpmKeysDatas.Length) {
					nextData = bpmKeysDatas[i + 1];
					if (absoluteTime > nextData.startTicks) continue;
				}
				double curMs;
				if (nextData == null || !useLinearKeyframes)
					curMs = (absoluteTime - curData.startTicks) * curData.msPerQuarter / midi.TicksPerQuarter;
				else {
					double curPosition = absoluteTime - curData.startTicks;
					double curProportion = curPosition / (nextData.startTicks - curData.startTicks);
					double curMsPerQuarter = curData.msPerQuarter * (1 - curProportion) + nextData.msPerQuarter * curProportion;
					curMs = (absoluteTime - curData.startTicks) * (curData.msPerQuarter + curMsPerQuarter) / 2.0 / midi.TicksPerQuarter;
				}
				return curMs + curData.previousMs;
			}
			// 针对没有任何 BPM 关键帧却误打误撞进入这个函数环节的。
			MessageBox.Show("No Bpm Keys!");
			return absoluteTime;
		}
		/// <summary>
		/// 根据 MIDI 音符的相对时刻与时长获取音频播放的实际时刻与时长（毫秒）。
		/// </summary>
		/// <param name="absoluteStart">音符相对时刻。</param>
		/// <param name="absoluteDuration">音符相对时长。</param>
		/// <returns>一个元组，其<c>Item1</c>和<c>Item2</c>值分别为音频播放的实际时刻与时长。</returns>
		public Tuple<double, double> GetActualTime(double absoluteStart, double absoluteDuration) {
			double start = GetActualTime(absoluteStart);
			double duration = GetActualTime(absoluteStart + absoluteDuration) - start;
			return new Tuple<double, double>(start, duration);
		}
	}

	/// <summary>
	/// 自定义错误信息。
	/// </summary>
	namespace Exceptions {
		public class NoMidiException : Exception {
			/// <summary>
			/// 未选择 MIDI 文件报错。
			/// </summary>
			public NoMidiException() : base(Lang.str.no_midi_exception) { }
		}

		public class NoMediaException : Exception {
			/// <summary>
			/// 未选择媒体文件报错。
			/// </summary>
			public NoMediaException() : base(Lang.str.no_media_exception) { }
		}

		public class NoTrackInfoException : Exception {
			/// <summary>
			/// 无 MIDI 音轨信息报错。
			/// </summary>
			public NoTrackInfoException() : base(Lang.str.no_track_info_exception) { }
		}

		public class NoPluginPitchShiftException : Exception {
			/// <summary>
			/// 无法调用移调插件报错。
			/// </summary>
			public NoPluginPitchShiftException() : base(string.Format(Lang.str.no_plugin_pitch_shift_exception, ConfigForm.Links.DOCUMENTATION_V0_1)) { }
		}

		public class NoPluginPresetsException : Exception {
			/// <summary>
			/// 无法调用移调插件的预设效果报错。
			/// </summary>
			public NoPluginPresetsException() : base(string.Format(Lang.str.no_plugin_presets_exception, ConfigForm.Links.DOCUMENTATION_V0_1)) { }
		}

		public class NoPluginNameException : Exception {
			/// <summary>
			/// 无法调用某个插件报错。
			/// </summary>
			public NoPluginNameException(string pluginName) : base(string.Format(Lang.str.no_plugin_name_exception, pluginName)) { }
		}

		public class NoAudioTakeException : Exception {
			/// <summary>
			/// 无法读取音频媒体流报错。
			/// </summary>
			public NoAudioTakeException() : base(Lang.str.no_audio_take_exception +
				Lang.str.no_take_exception_ps) { }
		}
		public class NoVideoTakeException : Exception {
			/// <summary>
			/// 无法读取视频媒体流报错。
			/// </summary>
			public NoVideoTakeException() : base(Lang.str.no_video_take_exception +
				Lang.str.no_take_exception_ps) { }
		}
		public class NoMediaTakeException : Exception {
			/// <summary>
			/// 无法读取媒体报错。
			/// </summary>
			public NoMediaTakeException() : base(Lang.str.no_media_take_exception +
				Lang.str.no_take_exception_ps) { }
		}

		public class NotAMidiFileException : Exception {
			/// <summary>
			/// 无法读取 MIDI 文件报错。
			/// </summary>
			public NotAMidiFileException() : base(Lang.str.not_a_midi_file_exception) { }
		}

		public class NoSelectedMediaException : Exception {
			/// <summary>
			/// 没有在项目媒体中选择任何媒体报错。
			/// </summary>
			public NoSelectedMediaException() : base(Lang.str.no_selected_media_exception + Lang.str.no_selected_exception_ps) { }
		}
		public class NoSelectedClipException : Exception {
			/// <summary>
			/// 没有在项目媒体中选择任何媒体报错。
			/// </summary>
			public NoSelectedClipException(bool @short = false) : base(
				@short ? Lang.str.no_selected_clip_exception_short :
				Lang.str.no_selected_clip_exception + Lang.str.no_selected_exception_ps
				) { }
		}
		public class NoTimeStretchPitchShiftException : Exception {
			/// <summary>
			/// 音调转换方法设置为不调音的报错。
			/// </summary>
			public NoTimeStretchPitchShiftException() : base(Lang.str.no_time_stretch_pitch_shift_exception) { }
		}
		public class ReadConfigFailException : Exception {
			/// <summary>
			/// 读取参数配置文件失败报错。
			/// </summary>
			public ReadConfigFailException() : base(Lang.str.read_config_fail_exception) { }
		}

		public class FailToSelectClipsException : Exception {
			/// <summary>
			/// 选取轨道剪辑出错。
			/// </summary>
			public FailToSelectClipsException() : base(Lang.str.fail_to_select_clips_exception) { }
		}

		public class FailToSelectTracksException : Exception {
			/// <summary>
			/// 选取轨道出错。
			/// </summary>
			public FailToSelectTracksException() : base(Lang.str.fail_to_select_tracks_exception) { }
		}

		public class YtpOverLengthException : Exception {
			/// <summary>
			/// 指定的 YTP 最小长度超过了媒体长度报错。
			/// </summary>
			public YtpOverLengthException() : base(Lang.str.ytp_over_length_exception) { }
		}

		public class YtpInMediaGeneratorException : Exception {
			/// <summary>
			/// 对媒体生成器产生的媒体应用 YTP 报错。
			/// </summary>
			public YtpInMediaGeneratorException() : base(Lang.str.ytp_in_media_generator_exception) { }
		}

		public class YtpEliminateDuplicatesFinallyNullException : NullReferenceException {
			/// <summary>
			/// 对 YTP 素材列表去重最后变为空的技术异常。
			/// </summary>
			public YtpEliminateDuplicatesFinallyNullException() : base(Lang.str.ytp_eliminate_duplicates_finally_null_exception) { }
		}

		public class UnknownException : Exception {
			/// <summary>
			/// 未知异常。
			/// </summary>
			public UnknownException() : base(Lang.str.unknown_exception) { }

			/// <summary>
			/// 带消息的未知异常。
			/// </summary>
			/// <param name="e">异常对象。</param>
			public UnknownException(Exception e) : base(Lang.str.unexpected_exception + e.Message) { }
		}

		public class UsePicInPicOnUnsupportedVegasException : Exception {
			/// <summary>
			/// 在低版本 Vegas 的画中画插件中使用不支持的操作报错。
			/// </summary>
			public UsePicInPicOnUnsupportedVegasException() : base(Lang.str.use_pic_in_pic_on_unsupported_vegas_exception) { }
		}

		public class UnsupportedCurveEnumException : ArgumentException {
			/// <summary>
			/// 使用不支持的曲线枚举类型作为参数。
			/// </summary>
			/// <param name="type">不支持的类型。</param>
			public UnsupportedCurveEnumException(Type type) : base(string.Format(Lang.str.unsupported_curve_enum_exception, type)) { }
		}

		public class ConvertMusicBeatsNotOneAudioEventException : ArgumentOutOfRangeException {
			/// <summary>
			/// 在转换音乐节拍工具中选择了的音频剪辑数目不恰好等于一个。
			/// </summary>
			/// <param name="count">选中的音频剪辑数目。</param>
			public ConvertMusicBeatsNotOneAudioEventException(int count) : base(string.Format(Lang.str.convert_music_beats_not_one_audio_event_exception, count)) { }
		}

		public class ConvertMusicBeatsUnsupportedBeatsException : NotImplementedException {
			/// <summary>
			/// 当前 Vegas 设定的节拍不是在四四拍、四三拍、八六拍之中的其一。
			/// </summary>
			public ConvertMusicBeatsUnsupportedBeatsException() : base(Lang.str.convert_music_beats_unsupported_beats_exception) { }
		}

		public class InvalidMappingVelocityValuesException : Exception {
			/// <summary>
			/// 使用不合法的映射力度参数。
			/// </summary>
			public InvalidMappingVelocityValuesException() : base(Lang.str.invalid_mapping_velocity_values_exception) { }
		}

		public class CannotGetScriptDirException : Exception {
			/// <summary>
			/// 无法获取脚本路径。
			/// </summary>
			public CannotGetScriptDirException() : base(Lang.str.cannot_get_script_dir_exception) { }
		}

		public class CannotGetXvidPathException : Exception {
			/// <summary>
			/// 无法获取 XviD 路径。
			/// </summary>
			public CannotGetXvidPathException() : base(Lang.str.cannot_get_xvid_path_exception) { }
		}

		public class InstallXvidAdminFailed : Exception {
			/// <summary>
			/// 安装 XviD 时获取管理员权限失败。
			/// </summary>
			public InstallXvidAdminFailed() : base(Lang.str.install_xvid_admin_failed) { }
		}

		public class UnexpectedRenderStatus : Exception {
			/// <summary>
			/// 非预期的渲染状态。
			/// </summary>
			/// <param name="status">渲染状态命令的返回值枚举。</param>
			public UnexpectedRenderStatus(RenderStatus status) : base(
				status == RenderStatus.Canceled ? Lang.str.canceled : Lang.str.unexpected_render_status + status
				) { }
		}

		public class DatamixSelectionPositionException : Exception {
			/// <summary>
			/// 数据抹拭选区位置错误。
			/// </summary>
			public DatamixSelectionPositionException() : base(Lang.str.datamix_selection_position_exception) { }
		}

		public class DatamixSelectionLengthException : Exception {
			/// <summary>
			/// 数据抹拭选区长度错误。
			/// </summary>
			public DatamixSelectionLengthException() : base(Lang.str.datamix_selection_length_exception) { }
		}

		public class DatamoshFramesRepeatsException : Exception {
			/// <summary>
			/// 数据抹失帧重复参数错误。
			/// </summary>
			public DatamoshFramesRepeatsException() : base(Lang.str.datamosh_frames_repeats_exception) { }
		}

		public class DatamoshSelectionLengthException : Exception {
			/// <summary>
			/// 数据抹失选区长度错误。
			/// </summary>
			public DatamoshSelectionLengthException() : base(Lang.str.datamosh_selection_length_exception) { }
		}

		public class DatamoshSelectionPositionException : Exception {
			/// <summary>
			/// 数据抹失选区位置错误。
			/// </summary>
			public DatamoshSelectionPositionException() : base(Lang.str.datamosh_selection_position_exception) { }
		}

		public class NoTrackFoundException : Exception {
			/// <summary>
			/// 未找到轨道错误。
			/// </summary>
			public NoTrackFoundException() : base(Lang.str.no_track_found_exception) { }
		}

		public class ExcessivelyVideoEventsSelectedException : Exception {
			/// <summary>
			/// 选取视频事件数目过多。
			/// </summary>
			public ExcessivelyVideoEventsSelectedException() : base(Lang.str.excessively_video_events_selected_exception) { }
		}

		public class NoVideoEventSelectedException : Exception {
			/// <summary>
			/// 未选取视频事件。
			/// </summary>
			public NoVideoEventSelectedException() : base(Lang.str.no_video_event_selected_exception) { }
		}

		public class NoOfxEffectsIncludedException : Exception {
			/// <summary>
			/// 没有可操作的效果。
			/// </summary>
			public NoOfxEffectsIncludedException() : base(Lang.str.no_ofx_effects_included_exception) { }
		}

		public class LayeringOffsetException : Exception {
			/// <summary>
			/// 多层叠化分层偏移参数错误。
			/// </summary>
			public LayeringOffsetException() : base(Lang.str.layering_offset_exception) { }
		}

		public class LayeringCountException : Exception {
			/// <summary>
			/// 多层叠化层数参数错误。
			/// </summary>
			public LayeringCountException() : base(Lang.str.layering_count_exception) { }
		}

		public class ScrambleSizeException : Exception {
			/// <summary>
			/// 随机扰乱扰乱大小参数错误。
			/// </summary>
			public ScrambleSizeException() : base(Lang.str.scramble_size_exception) { }
		}

		public class StutterLengthException : Exception {
			/// <summary>
			/// 结巴效果长度参数错误。
			/// </summary>
			public StutterLengthException() : base(Lang.str.stutter_length_exception) { }
		}

		public class StutterWindowBiasException : Exception {
			/// <summary>
			/// 结巴效果窗口偏移参数错误。
			/// </summary>
			public StutterWindowBiasException() : base(Lang.str.stutter_window_bias_exception) { }
		}

		public class RenderTemplateFrameRateException : Exception {
			/// <summary>
			/// 渲染模板帧率参数错误。
			/// </summary>
			public RenderTemplateFrameRateException() : base(Lang.str.render_template_frame_rate_exception) { }
		}

		public class AppdataNotSetException : IOException {
			/// <summary>
			/// 无法获取 AppData 路径。
			/// </summary>
			public AppdataNotSetException() : base(Lang.str.appdata_not_set_exception) { }
		}

		public class InvalidGlissandoAmountException : Exception {
			/// <summary>
			/// 使用不合法的滑音大小参数。
			/// </summary>
			public InvalidGlissandoAmountException() : base(Lang.str.invalid_glissando_amount_exception) { }
		}
	}

	/// <summary>
	/// 路径类，用于处理路径。<br />
	/// 虽然系统自带有 <c>System.IO.Path</c> 类，但那是一个静态类，不怎么面向对象。
	/// </summary>
	public class Path : List<string> {
		/// <summary>
		/// 通过一个字符串构造一个路径类。
		/// </summary>
		/// <param name="path">路径字符串</param>
		public Path(string path) : base(path.Replace("\\", "/").TrimEnd('/').Split('/')) { }
		/// <summary>
		/// 通过一段目录数组构造一个路径类。
		/// </summary>
		/// <param name="arr">目录数组</param>
		public Path(string[] arr) : base(arr) { }
		/// <summary>
		/// 通过输入的内容逐个拼接成一个新的路径类。
		/// </summary>
		/// <param name="arr">内容</param>
		/// <returns>新的路径类</returns>
		public static Path r(params string[] arr) {
			Path path = new Path(arr[0]);
			for (int i = 1; i < arr.Length; i++)
				path += new Path(arr[i]);
			return path;
		}
		private char sep = System.IO.Path.DirectorySeparatorChar;
		private bool isWindows = true;
		/// <summary>
		/// 是否输入为 Windows 格式路径？
		/// 这将决定最终生成的路径的分隔符形式。
		/// 默认为 <c>true</c>。
		/// </summary>
		public bool IsWindows {
			get { return isWindows; }
			set {
				isWindows = value;
				sep = value ? System.IO.Path.DirectorySeparatorChar : System.IO.Path.AltDirectorySeparatorChar;
			}
		}
		/// <summary>
		/// 向上一级。
		/// </summary>
		public void UpOneLevel() {
			RemoveAt(Count - 1);
		}
		public override string ToString() {
			return string.Join(sep.ToString(), this);
		}
		/// <summary>
		/// 拷贝一份当前实例的副本。
		/// </summary>
		/// <returns>副本</returns>
		public Path Copy() {
			return new Path(ToString()) {
				IsWindows = this.IsWindows
			};
		}
		private string GetLastItem() {
			return this[Count - 1];
		}
		/// <summary>
		/// 获取完整路径文本。
		/// </summary>
		public string FullPath {
			get { return ToString(); }
		}
		/// <summary>
		/// 读取或更改路径最终指向文件的文件名 + 扩展名。
		/// </summary>
		public string FullFileName {
			get { return GetLastItem(); }
			set { this[Count - 1] = value; }
		}
		private static readonly Regex extReg = new Regex(@"(?<=\.)[^\.\\/:\*\?""<>\|]*$");
		/// <summary>
		/// 读取或更改路径最终指向文件的扩展名。
		/// </summary>
		public string Extension {
			get {
				return System.IO.Path.GetExtension(FullFileName);
			}
			set {
				value = value.Trim().TrimStart('.');
				FullFileName = System.IO.Path.ChangeExtension(FullFileName, value);
			}
		}
		/// <summary>
		/// 读取或更改路径最终指向文件的文件名。
		/// </summary>
		public string FileName {
			get {
				if (Extension == "") return FullFileName;
				string fileName = extReg.Replace(FullFileName, "");
				return fileName.Substring(0, fileName.Length - 1);
			}
			set {
				FullFileName = value + '.' + Extension;
			}
		}
		/// <summary>
		/// 获取路径最终指向文件所在的目录。
		/// </summary>
		public string Directory {
			get {
				if (Count == 0) return sep.ToString();
				return new Path(GetRange(0, Count - 1).ToArray()).ToString();
			}
		}
		public static bool operator ==(Path path1, Path path2) {
			// return path1.SequenceEqual(path2); // 没有 System.Linq
			if (IsNull(path1) || IsNull(path2)) return false; // 如果用 == 会递归
			if (path1.Count != path2.Count) return false;
			for (int i = 0; i < path1.Count; i++)
				if (path1[i] != path2[i])
					return false;
			return true;
		}
		public static bool operator !=(Path path1, Path path2) {
			return !(path1 == path2);
		}
		public static Path operator +(Path path1, Path path2) {
			if (path1 == null) return path2;
			path1.AddRange(path2);
			return path1;
		}
		public static Path operator +(Path path1, string path2) {
			path1.AddRange(new Path(path2));
			return path1;
		}
		public static Path operator +(string _path1, Path path2) {
			Path path1 = new Path(_path1);
			for (int i = 0; i < path1.Count; i++)
				path1.Insert(i, path1[i]);
			return path1;
		}
		public override bool Equals(Object obj) {
			if (object.ReferenceEquals(this, obj)) return true;
			if (obj == null || !(obj is Path)) return false;
			return this == (Path)obj;
		}
		public override int GetHashCode() {
			int hash = 0;
			foreach (string file in this)
				hash ^= file.GetHashCode();
			return hash;
		}
		private static bool IsNull(Path path) {
			return (object)path == null;
		}
	}

	/// <summary>
	/// 用于读取和保存 INI 配置文件。
	/// </summary>
	public class ConfigIni {
		// 读写 INI 文件的 API
		[DllImport("kernel32")]
		private static extern int GetPrivateProfileString(byte[] lpAppName, byte[] lpKeyName, byte[] lpDefault, byte[] lpReturnedString, int nSize, string lpFileName);
		[DllImport("kernel32")]
		private static extern int WritePrivateProfileString(byte[] lpApplicationName, byte[] lpKeyName, byte[] lpString, string lpFileName);

		// 获取错误信息
		[DllImport("kernel32.dll", EntryPoint = "GetProcAddress", SetLastError = true)]
		public static extern IntPtr GetProcAddress(int hModule, [MarshalAs(UnmanagedType.LPStr)] string lpProcName);
		[DllImport("kernel32.dll", EntryPoint = "FreeLibrary", SetLastError = true)]
		public static extern bool FreeLibrary(int hModule);
		[DllImport("kernel32.dll")]
		public extern static int FormatMessage(int flag, ref IntPtr source, int msgid, int langid, ref string buf, int size, ref IntPtr args);

		/// <summary>
		/// 获取系统错误信息描述。
		/// </summary>
		/// <param name="errCode">系统错误码</param>
		/// <returns>系统错误信息描述</returns>
		private static string GetSysErrMsg(int errCode) {
			IntPtr tempptr = IntPtr.Zero;
			string msg = null;
			FormatMessage(0x1300, ref tempptr, errCode, 0, ref msg, 255, ref tempptr);
			return msg;
		}

		private int ErrCode { get { return Marshal.GetLastWin32Error(); } }

		private readonly ConfigForm form;
		private const int MAX_VALUE_LENGTH = 1024;
		private string filePath = null;
		public string FilePath { get { return filePath; } }
		protected string currentSection = null;

		/// <summary>
		/// 获取 UTF-8 编码的字符数组。
		/// </summary>
		/// <param name="s">字符串</param>
		/// <returns>UTF-8 编码的字符数组。</returns>
		private static byte[] GetBytes(string s) {
			return s == null ? null : Encoding.UTF8.GetBytes(s);
		}

		/// <summary>
		/// 打开或创建一个 INI 文件。
		/// </summary>
		/// <param name="filePath">INI 文件路径</param>
		public ConfigIni(string filePath, ConfigForm configForm) {
			form = configForm;
			this.filePath = filePath;
		}

		/// <summary>
		/// 读取 INI 文件。
		/// </summary>
		/// <param name="key">键名</param>
		/// <param name="def">没有查到的话返回的默认值</param>
		/// <param name="section">节点名</param>
		/// <returns>字符串参数值</returns>
		public string Read(string key, string def, string section = null) {
			section = section ?? currentSection;
			if (section == null || filePath == null) return def;
			byte[] buffer = new byte[MAX_VALUE_LENGTH];
			/* if (GetPrivateProfileString(section, key, def, sb, MAX_VALUE_LENGTH, filePath) == 0) {
				int errCode = ErrCode;
				form.parent.ShowError(Lang.str.error_code + errCode + "\n\n" + GetSysErrMsg(errCode));
				return def;
			} else return sb.ToString(); */
			int count = GetPrivateProfileString(GetBytes(section), GetBytes(key), GetBytes(def), buffer, MAX_VALUE_LENGTH, filePath);
			return Encoding.UTF8.GetString(buffer, 0, count).Trim();
		}

		/// <summary>
		/// 写入 INI 文件。
		/// </summary>
		/// <param name="key">键名</param>
		/// <param name="value">写入的值</param>
		/// <param name="section">节点名</param>
		/// <returns>是否成功写入</returns>
		public bool Write(string key, object value, string section = null) {
			section = section ?? currentSection;
			if (section == null || filePath == null) return false;
			if (value is bool) value = (bool)value ? 1 : 0;
			if (value is string && (string)value == "") value = null;
			if (WritePrivateProfileString(GetBytes(section), GetBytes(key), GetBytes(value == null ? null : value.ToString()), filePath) == 0) {
				int errCode = ErrCode;
				EntryPoint.ShowError(Lang.str.error_code + errCode + "\n\n" + GetSysErrMsg(errCode));
				return false;
			} else return true;
		}

		/// <summary>
		/// 删除节。
		/// </summary>
		/// <param name="section">节点名</param>
		/// <returns>是否成功删除</returns>
		public bool DeleteSection(string section) {
			return Write(null, null, section);
		}

		/// <summary>
		/// 删除键。
		/// </summary>
		/// <param name="key">键名</param>
		/// <param name="section">节点名</param>
		/// <returns>是否成功删除</returns>
		public bool DeleteKey(string key, string section = null) {
			return Write(key, null, section);
		}

		/// <summary>
		/// 开始节。
		/// </summary>
		/// <param name="section">节点名</param>
		public void StartSection(string section) {
			currentSection = section;
		}

		/// <summary>
		/// 结束节。
		/// </summary>
		public void EndSection() {
			currentSection = null;
		}

		/// <summary>
		/// 删除 INI 文件。<br />
		/// 补充：后面改成了删除文件后重新创建文件，相当于清空配置设置。
		/// </summary>
		/// <param name="ensure">确认删除，必须为 true 才能删除，否则无作用</param>
		public void Delete(bool ensure) {
			if (!ensure) return;
			File.Delete(filePath);
			// File.Create(filePath);
			// filePath = null;
		}

		/// <summary>
		/// 读取 INI 文件。
		/// </summary>
		/// <typeparam name="T">读取数据的类型</typeparam>
		/// <param name="key">键名</param>
		/// <param name="def">没有查到的话返回的默认值</param>
		/// <param name="section">节点名</param>
		/// <returns>指定类型的参数值</returns>
		public T Read<T>(string key, T def, string section = null) where T : IConvertible {
			string def_str = def.ToString();
			if ((def is bool || def is bool?) && def != null) def_str = (bool)(def as bool?) ? "1" : "0";
			string result = Read(key, def_str, section);
			if (typeof(T) == typeof(string)) return (T)(object)result;
			else if (typeof(T) == typeof(bool)) { string r = result.Trim().ToLower(); return (T)(object)(r != "0" && r != "false"); }
			else if (typeof(T) == typeof(int)) { int value; return int.TryParse(result, out value) ? (T)(object)value : def; }
			else if (typeof(T) == typeof(double)) { double value; return double.TryParse(result, out value) ? (T)(object)value : def; }
			else if (typeof(T) == typeof(byte)) { byte value; return byte.TryParse(result, out value) ? (T)(object)value : def; }
			else if (typeof(T) == typeof(char)) { char value; return char.TryParse(result, out value) ? (T)(object)value : def; }
			else if (typeof(T) == typeof(decimal)) { decimal value; return decimal.TryParse(result, out value) ? (T)(object)value : def; }
			else if (typeof(T) == typeof(float)) { float value; return float.TryParse(result, out value) ? (T)(object)value : def; }
			else if (typeof(T) == typeof(long)) { long value; return long.TryParse(result, out value) ? (T)(object)value : def; }
			else if (typeof(T) == typeof(sbyte)) { sbyte value; return sbyte.TryParse(result, out value) ? (T)(object)value : def; }
			else if (typeof(T) == typeof(short)) { short value; return short.TryParse(result, out value) ? (T)(object)value : def; }
			else if (typeof(T) == typeof(uint)) { uint value; return uint.TryParse(result, out value) ? (T)(object)value : def; }
			else if (typeof(T) == typeof(ulong)) { ulong value; return ulong.TryParse(result, out value) ? (T)(object)value : def; }
			else if (typeof(T) == typeof(ushort)) { ushort value; return ushort.TryParse(result, out value) ? (T)(object)value : def; }
			else throw new TypeLoadException("Unsupported Type!");
		}

		/// <summary>
		/// 读取 INI 文件。
		/// </summary>
		/// <typeparam name="T">读取数据的类型</typeparam>
		/// <param name="key">键名</param>
		/// <param name="result">返回并输出的指定类型的参数值</param>
		/// <param name="def">没有查到的话返回的默认值</param>
		/// <param name="section">节点名</param>
		/// <returns>指定类型的参数值</returns>
		public T Read<T>(string key, out T result, T def, string section = null) where T : IConvertible {
			return result = Read(key, def, section);
		}

		/// <summary>
		/// 检查是否有给定的键名。<br />
		/// <strong>注意：即便返回值为空、空串或空白字符组成也算不包含该键。</strong>
		/// </summary>
		/// <param name="key">键名。</param>
		/// <param name="section">节点名。</param>
		/// <returns>是否有给定的键名。</returns>
		public bool HasKey(string key, string section = null) {
			return !string.IsNullOrWhiteSpace(Read(key, "", section));
		}
	}

	/// <summary>
	/// 需要使用（包括读取和修改）INI 配置设置文件的接口。
	/// </summary>
	public interface IConfigIniUser {
		/// <summary>
		/// 保存用户配置设置文件。
		/// </summary>
		void SaveIni();
		/// <summary>
		/// 读取用户配置设置文件。
		/// </summary>
		/// <remarks>
		/// 应当在本接口添加另一个默认接口实现方法，但是仅在 C# 8.0 及以上才可以支持，当前版本不支持。
		/// </remarks>
		/// <exception cref="Exceptions.ReadConfigFailException">如果读取的配置文件被人为修改导致读取失败，则会抛出异常。</exception>
		void ReadIni();
	}
	#endregion

	#region 数据抹失
	namespace Datamosh {
		/// <summary>
		/// Author: delthas<br />
		/// Date: 2020-10-11<br />
		/// License: MIT<br />
		/// Source: https://github.com/delthas/vegas-datamosh<br />
		/// Documentation: https://github.com/delthas/vegas-datamosh<br />
		/// Version: 1.4.1
		/// </summary>
		public interface IDatamosh {
			void Main(Vegas vegas, EntryPoint entryPoint);
		}

		public abstract class BaseUncompressedDatamosh : IDatamosh {
			protected static void GetStandardTemplates(Vegas vegas) {
				Template.GetStandardTemplates(vegas, Template.Mode.Uncompressed);
			}
			protected static RenderTemplate GetTemplate(Vegas vegas, int frameRate) {
				return Template.GetTemplate(vegas, frameRate, Template.Mode.Uncompressed);
			}
			public abstract void Main(Vegas vegas, EntryPoint entryPoint);
			protected bool CheckEnvironment(Vegas vegas, out string _scriptDirectory, out RenderTemplate _template) {
				_scriptDirectory = "";
				_template = null;
				try {
					var frameRate = vegas.Project.Video.FrameRate;
					var frameRateInt = (int)Math.Round(frameRate * 1000);

					var scriptDirectory = System.IO.Path.GetDirectoryName(Script.File);
					if (scriptDirectory == null) {
						EntryPoint.ShowError(new Exceptions.CannotGetScriptDirException());
						return false;
					}
					_scriptDirectory = scriptDirectory;

					var xvidPath = Environment.GetEnvironmentVariable("ProgramFiles(x86)");
					if (string.IsNullOrEmpty(xvidPath)) {
						xvidPath = Environment.GetEnvironmentVariable("ProgramFiles");
					}
					if (string.IsNullOrEmpty(xvidPath)) {
						EntryPoint.ShowError(new Exceptions.CannotGetXvidPathException());
						return false;
					}
					xvidPath += @"\Xvid\uninstall.exe";
					if (!File.Exists(xvidPath)) {
						const string XVID_TITLE = "XviD";
						if (MessageBox.Show(Lang.str.install_xvid_info, XVID_TITLE, MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.Cancel)
							return false;
						var xvid = new Process {
								StartInfo = {
								UseShellExecute = true,
								FileName = System.IO.Path.Combine(scriptDirectory, "_internal", "xvid", "xvid.exe"),
								WorkingDirectory = System.IO.Path.Combine(scriptDirectory, "_internal"),
								Arguments =
									"--unattendedmodeui none  --mode unattended  --AutoUpdater no --decode_divx DIVX  --decode_3ivx 3IVX --decode_divx DIVX --decode_other MPEG-4",
								CreateNoWindow = true,
								Verb = "runas"
							}
						};
						try {
							xvid.Start();
						} catch (Win32Exception e) {
							if (e.NativeErrorCode == 1223) {
								EntryPoint.ShowError(new Exceptions.InstallXvidAdminFailed(), ShowErrorState.SILENCE);
								return false;
							}
							throw e;
						}

						xvid.WaitForExit();
						GetStandardTemplates(vegas);
						GetTemplate(vegas, frameRateInt);
						MessageBox.Show(Lang.str.install_xvid_succeed, XVID_TITLE, MessageBoxButtons.OK, MessageBoxIcon.Information);
						return false;
					}

					var template = GetTemplate(vegas, frameRateInt);
					if (template == null) {
						GetStandardTemplates(vegas);
						GetTemplate(vegas, frameRateInt);
						MessageBox.Show(Lang.str.render_template_generate_completed, "", MessageBoxButtons.OK, MessageBoxIcon.Information);
						return false;
					}
					_template = template;
				} catch (Exception e) {
					EntryPoint.ShowError(new Exceptions.UnknownException(e), e);
					Debug.WriteLine(e);
					return false;
				}
				return true;
			}
		}
		public abstract class BaseUncomprAlphaDatamosh : IDatamosh {
			protected static void GetStandardTemplates(Vegas vegas) {
				Template.GetStandardTemplates(vegas, Template.Mode.UncomprAlpha);
			}
			protected static RenderTemplate GetTemplate(Vegas vegas, int frameRate) {
				return Template.GetTemplate(vegas, frameRate, Template.Mode.UncomprAlpha);
			}
			public abstract void Main(Vegas vegas, EntryPoint entryPoint);
			protected bool CheckEnvironment(Vegas vegas, out string _scriptDirectory, out RenderTemplate _template) {
				_scriptDirectory = "";
				_template = null;
				try {
					var frameRate = vegas.Project.Video.FrameRate;
					var frameRateInt = (int)Math.Round(frameRate * 1000);

					var scriptDirectory = System.IO.Path.GetDirectoryName(Script.File);
					if (scriptDirectory == null) {
						EntryPoint.ShowError(new Exceptions.CannotGetScriptDirException());
						return false;
					}
					_scriptDirectory = scriptDirectory;

					var template = GetTemplate(vegas, frameRateInt);
					if (template == null) {
						GetStandardTemplates(vegas);
						GetTemplate(vegas, frameRateInt);
						MessageBox.Show(Lang.str.render_template_generate_completed, "", MessageBoxButtons.OK, MessageBoxIcon.Information);
						return false;
					}
					_template = template;
				} catch (Exception e) {
					EntryPoint.ShowError(new Exceptions.UnknownException(e), e);
					Debug.WriteLine(e);
					return false;
				}
				return true;
			}
		}

		/// <summary>
		/// Sets random automation values for video effects quickly and automatically.
		/// </summary>
		public class Automator : IDatamosh {
			private static readonly Random Random = new Random();

			public void Main(Vegas vegas, EntryPoint entryPoint) {
				var events = vegas.Project.Tracks
					.SelectMany(track => track.Events)
					.Where(t => t.Selected)
					.Where(t => t.IsVideo())
					.Cast<VideoEvent>()
					.ToList();

				var effects = events
					.SelectMany(ev => ev.Effects)
					.Where(ev => !ev.Bypass)
					.Where(ev => {
						try {
							return ev.IsOFX;
						} catch (COMException) {
							// vegas api throwing an exception if not ofx
							return false;
						}
					})
					.Select(ev => ev.OFXEffect)
					.GroupBy(ev => ev.Label)
					.Select(ev => ev.First())
					.ToList();

				if (events.Count == 0) {
					EntryPoint.ShowError(new Exceptions.NoVideoEventSelectedException(), ShowErrorState.SILENCE);
					return;
				}
				if (effects.Count == 0) {
					EntryPoint.ShowError(new Exceptions.NoOfxEffectsIncludedException(), ShowErrorState.SILENCE);
					return;
				}

				ParameterDataList parameters = new ParameterDataList();

				foreach (var effect in effects) {
					foreach (var parameter in effect.Parameters) {
						if (parameter.Label == null) {
							continue;
						}
						if (!(parameter is OFXChoiceParameter
							|| parameter is OFXDouble2DParameter
							|| parameter is OFXDouble3DParameter
							|| parameter is OFXDoubleParameter
							|| parameter is OFXInteger2DParameter
							|| parameter is OFXInteger3DParameter
							|| parameter is OFXIntegerParameter
							|| parameter is OFXRGBAParameter
							|| parameter is OFXRGBParameter)) {
							continue;
						}

						var key = effect.Label.Trim() + " - " + parameter.Label.Trim();
						string hashed;
						using (MD5 md5 = MD5.Create()) {
							hashed = BitConverter.ToString(md5.ComputeHash(Encoding.UTF8.GetBytes(key))).Replace("-", "");
						}
						var renderChecked = (string)Registry.GetValue(Template.DataPath, "Automate_" + hashed, "");
						var defaultCheck = renderChecked != "False";

						parameters.Add(new ParameterData {
							key = key,
							hashed = hashed,
							defaultCheck = defaultCheck,
							effectName = effect.Label,
							paramName = parameter.Name,
						});
					}
				}

				var prompt = new AutomatorForm(parameters);
				var _parameterEnabled = prompt.ShowDialog();
				if (_parameterEnabled == null || _parameterEnabled.Count == 0) return;
				var parameterEnabled = _parameterEnabled.GetTuples();

				foreach (var param in parameters) {
					bool check = _parameterEnabled.Contains(param);
					if (param.defaultCheck != check) {
						Registry.SetValue(Template.DataPath, "Automate_" + param.hashed, check.ToString(), RegistryValueKind.String);
					}
				}

				foreach (var ev in events) {
					foreach (var effect in ev.Effects) {
						if (effect.Bypass) {
							continue;
						}
						try {
							if (!effect.IsOFX) {
								continue;
							}
						} catch (COMException) {
							// vegas api throwing an exception if not ofx
							continue;
						}
						var ofx = effect.OFXEffect;
						foreach (var parameter in ofx.Parameters) {
							if (!parameterEnabled.Contains(new Tuple<string, string>(ofx.Label, parameter.Name))) {
								continue;
							}

							if (parameter is OFXChoiceParameter) {
								var p = parameter as OFXChoiceParameter;
								for (int i = 0; i < ev.Length.FrameCount; i++) {
									p.SetValueAtTime(Timecode.FromFrames(i), p.Choices[Random.Next(0, p.Choices.Length)]);
								}
							} else if (parameter is OFXDouble2DParameter) {
								var p = parameter as OFXDouble2DParameter;
								for (int i = 0; i < ev.Length.FrameCount; i++) {
									p.SetValueAtTime(Timecode.FromFrames(i), new OFXDouble2D {
										X = p.DisplayMin.X + (p.DisplayMax.X - p.DisplayMin.X) * Random.NextDouble(),
										Y = p.DisplayMin.Y + (p.DisplayMax.Y - p.DisplayMin.Y) * Random.NextDouble()
									});
								}
							} else if (parameter is OFXDouble3DParameter) {
								var p = parameter as OFXDouble3DParameter;
								for (int i = 0; i < ev.Length.FrameCount; i++) {
									p.SetValueAtTime(Timecode.FromFrames(i), new OFXDouble3D {
										X = p.DisplayMin.X + (p.DisplayMax.X - p.DisplayMin.X) * Random.NextDouble(),
										Y = p.DisplayMin.Y + (p.DisplayMax.Y - p.DisplayMin.Y) * Random.NextDouble(),
										Z = p.DisplayMin.Z + (p.DisplayMax.Z - p.DisplayMin.Z) * Random.NextDouble()
									});
								}
							} else if (parameter is OFXDoubleParameter) {
								var p = parameter as OFXDoubleParameter;
								for (int i = 0; i < ev.Length.FrameCount; i++) {
									p.SetValueAtTime(Timecode.FromFrames(i), p.DisplayMin + (p.DisplayMax - p.DisplayMin) * Random.NextDouble());
								}
							} else if (parameter is OFXInteger2DParameter) {
								var p = parameter as OFXInteger2DParameter;
								for (int i = 0; i < ev.Length.FrameCount; i++) {
									p.SetValueAtTime(Timecode.FromFrames(i), new OFXInteger2D {
										X = Random.Next(p.DisplayMin.X, p.DisplayMax.X),
										Y = Random.Next(p.DisplayMin.Y, p.DisplayMax.Y)
									});
								}
							} else if (parameter is OFXInteger3DParameter) {
								var p = parameter as OFXInteger3DParameter;
								for (int i = 0; i < ev.Length.FrameCount; i++) {
									p.SetValueAtTime(Timecode.FromFrames(i), new OFXInteger3D {
										X = Random.Next(p.DisplayMin.X, p.DisplayMax.X),
										Y = Random.Next(p.DisplayMin.Y, p.DisplayMax.Y),
										Z = Random.Next(p.DisplayMin.Z, p.DisplayMax.Z)
									});
								}
							} else if (parameter is OFXIntegerParameter) {
								var p = parameter as OFXIntegerParameter;
								for (int i = 0; i < ev.Length.FrameCount; i++) {
									p.SetValueAtTime(Timecode.FromFrames(i), Random.Next(p.DisplayMin, p.DisplayMax));
								}
							} else if (parameter is OFXRGBAParameter) {
								var p = parameter as OFXRGBAParameter;
								for (int i = 0; i < ev.Length.FrameCount; i++) {
									p.SetValueAtTime(Timecode.FromFrames(i), new OFXColor(Random.NextDouble(), Random.NextDouble(), Random.NextDouble(), Random.NextDouble()));
								}
							} else if (parameter is OFXRGBParameter) {
								var p = parameter as OFXRGBParameter;
								for (int i = 0; i < ev.Length.FrameCount; i++) {
									p.SetValueAtTime(Timecode.FromFrames(i), new OFXColor(Random.NextDouble(), Random.NextDouble(), Random.NextDouble()));
								}
							}
						}
					}
				}
			}

			/// <summary>
			/// 自动生效的参数数据类。
			/// </summary>
			public class ParameterData {
				/// <summary>
				/// 效果参数显示名称。
				/// </summary>
				public string key;
				/// <summary>
				/// 效果参数哈希值。
				/// </summary>
				public string hashed;
				/// <summary>
				/// 效果名。
				/// </summary>
				public string effectName;
				/// <summary>
				/// 参数名。
				/// </summary>
				public string paramName;
				/// <summary>
				/// 是否默认勾选。
				/// </summary>
				public bool defaultCheck;

				public override string ToString() { return key; }
			}

			/// <summary>
			/// 自动生效的参数数据类列表。
			/// </summary>
			public class ParameterDataList : List<ParameterData> {
				public ParameterDataList() : base() { }
				public ParameterDataList(IEnumerable<ParameterData> collection) : base(collection) { }

				public HashSet<Tuple<string, string>> GetTuples() {
					var hashSet = new HashSet<Tuple<string, string>>();
					foreach (ParameterData item in this)
						hashSet.Add(new Tuple<string, string>(item.effectName, item.paramName));
					return hashSet;
				}
			}
		}

		/// <summary>
		/// Datamoshes a part of a video quickly and automatically (mosh a clip onto another).
		/// </summary>
		public class Datamix : BaseUncompressedDatamosh {
			private void Encode(Vegas vegas, string scriptDirectory, RenderArgs renderArgs, string pathEncoded) {
				var status = vegas.Render(renderArgs);
				if (status != RenderStatus.Complete) {
					EntryPoint.ShowError(new Exceptions.UnexpectedRenderStatus(status), ShowErrorState.SILENCE);
					return;
				}

				var encode = new Process {
					StartInfo = {
						UseShellExecute = false,
						FileName = System.IO.Path.Combine(scriptDirectory, "_internal", "ffmpeg", "ffmpeg.exe"),
						WorkingDirectory = System.IO.Path.Combine(scriptDirectory, "_internal"),
						Arguments = "-y -hide_banner -nostdin -i \"" + renderArgs.OutputFile +
									"\" -c:v libxvid -q:v 1 -g 1M -flags +mv4+qpel -mpeg_quant 1 -c:a copy \"" + pathEncoded +
									"\"",
						RedirectStandardOutput = true,
						RedirectStandardError = true,
						CreateNoWindow = true
					}
				};
				encode.Start();
				var error = encode.StandardError.ReadToEnd();
				var output = encode.StandardOutput.ReadToEnd();
				Debug.WriteLine(output);
				Debug.WriteLine("---------------------");
				Debug.WriteLine(error);
				encode.WaitForExit();

				File.Delete(renderArgs.OutputFile);
				File.Delete(renderArgs.OutputFile + ".sfl");
			}

			public override void Main(Vegas vegas, EntryPoint entryPoint) {
				var start = vegas.Transport.LoopRegionStart;
				var length = vegas.Transport.LoopRegionLength;

				if (start.FrameCount == 0) {
					EntryPoint.ShowError(new Exceptions.DatamixSelectionPositionException(), ShowErrorState.SILENCE);
					return;
				}
				if (length.FrameCount <= 1) {
					EntryPoint.ShowError(new Exceptions.DatamixSelectionLengthException(), ShowErrorState.SILENCE);
					return;
				}

				try {
					string scriptDirectory;
					RenderTemplate template;
					if (!CheckEnvironment(vegas, out scriptDirectory, out template)) return;

					VideoTrack videoTrack = null;
					for (var i = vegas.Project.Tracks.Count - 1; i >= 0; i--) {
						videoTrack = vegas.Project.Tracks[i] as VideoTrack;
						if (videoTrack != null) {
							break;
						}
					}

					if (videoTrack == null) {
						EntryPoint.ShowError(new Exceptions.NoTrackFoundException(), ShowErrorState.SILENCE);
						return;
					}

					var finalFolder = (string)Registry.GetValue(Template.DataPath, "ClipFolder", "");
					if (string.IsNullOrEmpty(finalFolder) || !Directory.Exists(finalFolder)) {
						MessageBox.Show(Lang.str.datamosh_no_clips_folder_info, Lang.str.datamix, MessageBoxButtons.OK, MessageBoxIcon.Warning);
						return;
					}

					var pathSrc = System.IO.Path.Combine(vegas.TemporaryFilesPath, System.IO.Path.GetFileNameWithoutExtension(vegas.Project.FilePath) + "-" +
						Guid.NewGuid().ToString("B").ToUpper().Substring(1, 8) + ".avi");
					var pathEncodedSrc = System.IO.Path.Combine(vegas.TemporaryFilesPath,
						System.IO.Path.GetFileNameWithoutExtension(vegas.Project.FilePath) + "-" +
						Guid.NewGuid().ToString("B").ToUpper().Substring(1, 8) + ".avi");
					Encode(vegas, scriptDirectory, new RenderArgs {
						OutputFile = pathSrc,
						Start = Timecode.FromFrames(start.FrameCount - 1),
						Length = Timecode.FromFrames(1),
						RenderTemplate = template
					}, pathEncodedSrc);

					var pathClip = System.IO.Path.Combine(vegas.TemporaryFilesPath, System.IO.Path.GetFileNameWithoutExtension(vegas.Project.FilePath) + "-" + Guid.NewGuid().ToString("B").ToUpper().Substring(1, 8) + ".avi");
					var pathEncodedClip = System.IO.Path.Combine(vegas.TemporaryFilesPath,
						System.IO.Path.GetFileNameWithoutExtension(vegas.Project.FilePath) + "-" +
						Guid.NewGuid().ToString("B").ToUpper().Substring(1, 8) + ".avi");
					Encode(vegas, scriptDirectory, new RenderArgs {
						OutputFile = pathClip,
						Start = start,
						Length = length,
						RenderTemplate = template
					}, pathEncodedClip);

					var pathDatamixed = System.IO.Path.Combine(finalFolder,
						System.IO.Path.GetFileNameWithoutExtension(vegas.Project.FilePath) + "-" +
						Guid.NewGuid().ToString("B").ToUpper().Substring(1, 8)) + ".avi";

					string[] datamoshConfig = {
						"var input0=\"" + pathEncodedSrc.Replace("\\", "/") + "\";",
						"var input1=\"" + pathEncodedClip.Replace("\\", "/") + "\";",
						"var output=\"" + pathDatamixed.Replace("\\", "/") + "\";"
					};

					File.WriteAllLines(System.IO.Path.Combine(scriptDirectory, "_internal", "config_datamix.js"), datamoshConfig);

					var datamosh = new Process {
						StartInfo = {
							UseShellExecute = false,
							FileName = System.IO.Path.Combine(scriptDirectory, "_internal", "avidemux", "avidemux2_cli.exe"),
							WorkingDirectory = System.IO.Path.Combine(scriptDirectory, "_internal"),
							Arguments = "--nogui --run avidemux_datamix.js",
							RedirectStandardInput = true,
							RedirectStandardOutput = true,
							RedirectStandardError = true,
							CreateNoWindow = true
						}
					};
					datamosh.Start();
					datamosh.StandardInput.WriteLine("n");
					var output = datamosh.StandardOutput.ReadToEnd();
					var error = datamosh.StandardError.ReadToEnd();
					Debug.WriteLine(output);
					Debug.WriteLine("---------------------");
					Debug.WriteLine(error);
					datamosh.WaitForExit();

					File.Delete(pathEncodedSrc);
					File.Delete(pathEncodedSrc + ".sfl");
					File.Delete(pathEncodedClip);
					File.Delete(pathEncodedClip + ".sfl");

					var media = vegas.Project.MediaPool.AddMedia(pathDatamixed);
					media.TimecodeIn = Timecode.FromFrames(1);

					var videoEvent = videoTrack.AddVideoEvent(start, Timecode.FromFrames(length.FrameCount - 1));
					videoEvent.AddTake(media.GetVideoStreamByIndex(0));
				} catch (Exception e) {
					EntryPoint.ShowError(new Exceptions.UnknownException(e), e);
					Debug.WriteLine(e);
				}
			}
		}

		/// <summary>
		/// Datamoshes a part of a video quickly and automatically.
		/// </summary>
		public class Datamosh : BaseUncompressedDatamosh {
			public override void Main(Vegas vegas, EntryPoint entryPoint) {
				var start = vegas.Transport.LoopRegionStart;
				var length = vegas.Transport.LoopRegionLength;

				try {
					string scriptDirectory;
					RenderTemplate template;
					if (!CheckEnvironment(vegas, out scriptDirectory, out template)) return;

					var frameCount = (string)Registry.GetValue(Template.DataPath, "FrameCount", "");
					var defaultCount = 1;
					if (frameCount != "") {
						try {
							var value = int.Parse(frameCount);
							if (value > 0) {
								defaultCount = value;
							}
						} catch (Exception) {
							// ignore
						}
					}

					var prompt = new Form {
						Width = 500,
						Height = 160,
						Text = Lang.str.datamoshing_parameters,
					};
					Template.OptimizePrompt(prompt, ImageBase64.DatamoshIcon);
					var textLabel = new Label { Left = 10, Top = 10, Text = Lang.str.frame_count, AutoSize = true };
					var inputBox =
						new NumericUpDown { Left = 200, Top = 10, Width = 200, Minimum = 1, Maximum = 1000000000, Value = defaultCount };
					var textLabel2 = new Label { Left = 10, Top = 40, Text = Lang.str.frames_repeats, AutoSize = true };
					var inputBox2 = new NumericUpDown {
						Left = 200,
						Top = 40,
						Width = 200,
						Value = 1,
						Minimum = 1,
						Maximum = 1000000000,
						Text = ""
					};
					var confirmation = new Button { Text = Lang.str.ok, Left = 200, Width = 100, Top = 70 };
					confirmation.Click += (sender, e) => { prompt.DialogResult = DialogResult.OK; prompt.Close(); };
					prompt.Controls.Add(confirmation);
					prompt.Controls.Add(textLabel);
					prompt.Controls.Add(inputBox);
					prompt.Controls.Add(textLabel2);
					prompt.Controls.Add(inputBox2);
					inputBox2.Select();
					prompt.AcceptButton = confirmation;
					if (prompt.ShowDialog() != DialogResult.OK) {
						return;
					}
					var size = (int)inputBox.Value;
					var repeat = (int)inputBox2.Value;

					if (repeat <= 0) {
						EntryPoint.ShowError(new Exceptions.DatamoshFramesRepeatsException(), ShowErrorState.SILENCE);
						return;
					}

					if (length.FrameCount < size) {
						EntryPoint.ShowError(new Exceptions.DatamoshSelectionLengthException(), ShowErrorState.SILENCE);
						return;
					}

					if (start.FrameCount < 1) {
						EntryPoint.ShowError(new Exceptions.DatamoshSelectionPositionException(), ShowErrorState.SILENCE);
						return;
					}

					if (defaultCount != size) {
						Registry.SetValue(Template.DataPath, "FrameCount", size.ToString(), RegistryValueKind.String);
					}

					VideoTrack videoTrack = null;
					for (var i = vegas.Project.Tracks.Count - 1; i >= 0; i--) {
						videoTrack = vegas.Project.Tracks[i] as VideoTrack;
						if (videoTrack != null) {
							break;
						}
					}

					AudioTrack audioTrack = null;
					for (var i = 0; i < vegas.Project.Tracks.Count; i++) {
						audioTrack = vegas.Project.Tracks[i] as AudioTrack;
						if (audioTrack != null) {
							break;
						}
					}

					if (videoTrack == null && audioTrack == null) {
						EntryPoint.ShowError(new Exceptions.NoTrackFoundException(), ShowErrorState.SILENCE);
						return;
					}

					var finalFolder = (string)Registry.GetValue(Template.DataPath, "ClipFolder", "");
					if (string.IsNullOrEmpty(finalFolder) || !Directory.Exists(finalFolder)) {
						MessageBox.Show(Lang.str.datamosh_no_clips_folder_info, Lang.str.datamosh, MessageBoxButtons.OK, MessageBoxIcon.Warning);
						return;
					}

					var path = System.IO.Path.Combine(vegas.TemporaryFilesPath, System.IO.Path.GetFileNameWithoutExtension(vegas.Project.FilePath) +
						"-" + Guid.NewGuid().ToString("B").ToUpper().Substring(1, 8) + ".avi");
					var pathEncoded = System.IO.Path.Combine(vegas.TemporaryFilesPath,
						System.IO.Path.GetFileNameWithoutExtension(vegas.Project.FilePath) + "-" +
						Guid.NewGuid().ToString("B").ToUpper().Substring(1, 8) + ".avi");
					var pathDatamoshedBase = System.IO.Path.Combine(finalFolder,
						System.IO.Path.GetFileNameWithoutExtension(vegas.Project.FilePath) + "-" +
						Guid.NewGuid().ToString("B").ToUpper().Substring(1, 8));
					var pathDatamoshed = pathDatamoshedBase + ".avi";
					var pathEncodedEscape = pathEncoded.Replace("\\", "/");
					var pathDatamoshedEscape = pathDatamoshed.Replace("\\", "/");

					var renderArgs = new RenderArgs {
						OutputFile = path,
						Start = Timecode.FromFrames(start.FrameCount - 1),
						Length = Timecode.FromFrames(length.FrameCount + 1),
						RenderTemplate = template
					};
					var status = vegas.Render(renderArgs);
					if (status != RenderStatus.Complete) {
						EntryPoint.ShowError(new Exceptions.UnexpectedRenderStatus(status), ShowErrorState.SILENCE);
						return;
					}

					string[] datamoshConfig = {
						"var input=\"" + pathEncodedEscape + "\";",
						"var output=\"" + pathDatamoshedEscape + "\";",
						"var size=" + size + ";",
						"var repeat=" + repeat + ";"
					};

					File.WriteAllLines(System.IO.Path.Combine(scriptDirectory, "_internal", "config_datamosh.js"), datamoshConfig);

					var encode = new Process {
						StartInfo = {
							UseShellExecute = false,
							FileName = System.IO.Path.Combine(scriptDirectory, "_internal", "ffmpeg", "ffmpeg.exe"),
							WorkingDirectory = System.IO.Path.Combine(scriptDirectory, "_internal"),
							Arguments = "-y -hide_banner -nostdin -i \"" + path +
								"\" -c:v libxvid -q:v 1 -g 1M -flags +mv4+qpel -mpeg_quant 1 -c:a copy \"" + pathEncoded +
								"\"",
							RedirectStandardOutput = true,
							RedirectStandardError = true,
							CreateNoWindow = true
						}
					};
					encode.Start();
					var output = encode.StandardOutput.ReadToEnd();
					var error = encode.StandardError.ReadToEnd();
					Debug.WriteLine(output);
					Debug.WriteLine("---------------------");
					Debug.WriteLine(error);
					encode.WaitForExit();

					File.Delete(path);
					File.Delete(path + ".sfl");

					var datamosh = new Process {
						StartInfo = {
							UseShellExecute = false,
							FileName = System.IO.Path.Combine(scriptDirectory, "_internal", "avidemux", "avidemux2_cli.exe"),
							WorkingDirectory = System.IO.Path.Combine(scriptDirectory, "_internal"),
							Arguments = "--nogui --run avidemux_datamosh.js",
							RedirectStandardInput = true,
							RedirectStandardOutput = true,
							RedirectStandardError = true,
							CreateNoWindow = true
						}
					};
					datamosh.Start();
					datamosh.StandardInput.WriteLine("n");
					output = datamosh.StandardOutput.ReadToEnd();
					error = datamosh.StandardError.ReadToEnd();
					Debug.WriteLine(output);
					Debug.WriteLine("---------------------");
					Debug.WriteLine(error);
					datamosh.WaitForExit();

					File.Delete(pathEncoded);
					File.Delete(pathEncoded + ".sfl");

					var media = vegas.Project.MediaPool.AddMedia(pathDatamoshed);
					media.TimecodeIn = Timecode.FromFrames(1);

					VideoEvent videoEvent = null;
					if (videoTrack != null) {
						videoEvent =
							videoTrack.AddVideoEvent(start, Timecode.FromFrames(1 + length.FrameCount + (repeat - 1) * size));
						videoEvent.AddTake(media.GetVideoStreamByIndex(0));
					}

					AudioEvent audioEvent = null;
					if (audioTrack != null) {
						audioEvent =
							audioTrack.AddAudioEvent(start, Timecode.FromFrames(1 + length.FrameCount + (repeat - 1) * size));
						audioEvent.AddTake(media.GetAudioStreamByIndex(0));
					}

					if (videoTrack != null && audioTrack != null) {
						var group = new TrackEventGroup();
						vegas.Project.Groups.Add(group);
						group.Add(videoEvent);
						group.Add(audioEvent);
					}
				} catch (Exception e) {
					EntryPoint.ShowError(new Exceptions.UnknownException(e), e);
					Debug.WriteLine(e);
				}
			}
		}

		/// <summary>
		/// Does multilayering on a part of a video quickly and automatically.
		/// </summary>
		public class Layering : BaseUncomprAlphaDatamosh {
			public override void Main(Vegas vegas, EntryPoint entryPoint) {
				var videoTrackIndex = -1;
				VideoTrack videoTrackStart = null;
				VideoEvent videoEvent = null;
				for (var i = 0; i < vegas.Project.Tracks.Count; i++) {
					var track = vegas.Project.Tracks[i];
					if (!track.IsVideo())
						continue;
					foreach (var trackEvent in track.Events) {
						if (!trackEvent.Selected)
							continue;
						if (videoEvent != null) {
							EntryPoint.ShowError(new Exceptions.ExcessivelyVideoEventsSelectedException(), ShowErrorState.SILENCE);
							return;
						}

						videoTrackIndex = i;
						videoTrackStart = (VideoTrack)track;
						videoEvent = (VideoEvent)trackEvent;
					}
				}

				if (videoEvent == null) {
					EntryPoint.ShowError(new Exceptions.NoVideoEventSelectedException(), ShowErrorState.SILENCE);
					return;
				}

				try {
					string scriptDirectory;
					RenderTemplate template;
					if (!CheckEnvironment(vegas, out scriptDirectory, out template)) return;

					var layeringCount = (string)Registry.GetValue(Template.DataPath, "LayerCount", "");
					var defaultCount = 1;
					if (layeringCount != "") {
						try {
							var value = int.Parse(layeringCount);
							if (value > 0) {
								defaultCount = value;
							}
						} catch (Exception) {
							// ignore
						}
					}

					var renderChecked = (string)Registry.GetValue(Template.DataPath, "RenderLayer", "");
					var defaultCheck = renderChecked == "True";
					var prompt = new Form {
						Width = 500,
						Height = 190,
						Text = Lang.str.layering_parameters,
						KeyPreview = true,
					};
					Template.OptimizePrompt(prompt, ImageBase64.LayerIcon);
					var textLabel = new Label { Left = 10, Top = 10, Text = Lang.str.layer_count, AutoSize = true };
					var inputBox = new NumericUpDown {
						Left = 200,
						Top = 10,
						Width = 200,
						Minimum = 1,
						Maximum = 1000000000,
						Value = defaultCount
					};
					var textLabel2 = new Label { Left = 10, Top = 40, Text = Lang.str.layering_offset, AutoSize = true };
					var inputBox2 =
						new NumericUpDown { Left = 200, Top = 40, Width = 200, Minimum = -1000000000, Maximum = 1000000000, Text = "" };
					var textLabel3 = new Label { Left = 10, Top = 70, Text = Lang.str.pre_render, AutoSize = true };
					var inputBox3 = new CheckBox {
						Left = 200,
						Top = 70,
						Width = 200,
						Checked = defaultCheck
					};
					var confirmation = new Button { Text = Lang.str.ok, Left = 200, Width = 100, Top = 100 };
					confirmation.Click += (sender, e) => {
						prompt.DialogResult = DialogResult.OK;
						prompt.Close();
					};
					prompt.KeyPress += (sender, args) => {
						if (args.KeyChar != ' ')
							return;
						inputBox3.Checked = !inputBox3.Checked;
						args.Handled = true;
					};
					prompt.Controls.Add(confirmation);
					prompt.Controls.Add(textLabel);
					prompt.Controls.Add(inputBox);
					prompt.Controls.Add(textLabel2);
					prompt.Controls.Add(inputBox2);
					prompt.Controls.Add(textLabel3);
					prompt.Controls.Add(inputBox3);
					inputBox2.Select();
					prompt.AcceptButton = confirmation;
					if (prompt.ShowDialog() != DialogResult.OK) {
						return;
					}

					var count = (int)inputBox.Value;
					var offset = (int)inputBox2.Value;
					var render = inputBox3.Checked;

					if (offset == 0) {
						EntryPoint.ShowError(new Exceptions.LayeringOffsetException(), ShowErrorState.SILENCE);
						return;
					}

					if (count <= 0) {
						EntryPoint.ShowError(new Exceptions.LayeringCountException(), ShowErrorState.SILENCE);
						return;
					}

					if (defaultCount != count) {
						Registry.SetValue(Template.DataPath, "LayerCount", count.ToString(), RegistryValueKind.String);
					}

					if (defaultCheck != render) {
						Registry.SetValue(Template.DataPath, "RenderLayer", render.ToString(), RegistryValueKind.String);
					}

					var newTracks = new List<VideoTrack>();
					var newEvents = new List<VideoEvent>();
					var current = 0;
					var baseOffset = offset > 0 ? 0 : -count * offset;

					for (var i = videoTrackIndex - 1; i >= 0 && current < count; i--) {
						var videoTrack = vegas.Project.Tracks[i] as VideoTrack;
						if (videoTrack == null)
							continue;
						newEvents.Add((VideoEvent)videoEvent.Copy(videoTrack,
							Timecode.FromFrames(videoEvent.Start.FrameCount + baseOffset + (++current) * offset)));
					}

					for (; current < count;) {
						var videoTrack = vegas.Project.AddVideoTrack();
						newTracks.Add(videoTrack);
						newEvents.Add((VideoEvent)videoEvent.Copy(videoTrack,
							Timecode.FromFrames(videoEvent.Start.FrameCount + baseOffset + (++current) * offset)));
					}

					var start = videoEvent.Start;
					if (offset < 0) {
						videoEvent.Start = Timecode.FromFrames(videoEvent.Start.FrameCount + baseOffset);
					}

					if (!render) return;
					var finalFolder = (string)Registry.GetValue(Template.DataPath, "ClipFolder", ""); // LayerClipFolder
					if (string.IsNullOrEmpty(finalFolder) || !Directory.Exists(finalFolder)) {
						MessageBox.Show("Select the folder to put generated layered clips into.\n" +
							"(As they are stored uncompressed with alpha, they can take a lot of space (think 1 GB/minute). " +
							"Choose a location with a lot of available space and go remove some clips there if you need space.)", Lang.str.layering, MessageBoxButtons.OK, MessageBoxIcon.Warning);
						return;
					}

					var path = System.IO.Path.Combine(vegas.TemporaryFilesPath, System.IO.Path.GetFileNameWithoutExtension(vegas.Project.FilePath) + "-" + Guid.NewGuid().ToString("B").ToUpper().Substring(1, 8) + ".avi");
					var pathEncoded = System.IO.Path.Combine(vegas.TemporaryFilesPath,
						System.IO.Path.GetFileNameWithoutExtension(vegas.Project.FilePath) + "-" +
						Guid.NewGuid().ToString("B").ToUpper().Substring(1, 8) + ".avi");

					var renderArgs = new RenderArgs {
						OutputFile = path,
						Start = Timecode.FromFrames(start.FrameCount),
						Length = Timecode.FromFrames(videoEvent.Length.FrameCount + count * Math.Abs(offset)),
						RenderTemplate = template
					};
					var status = vegas.Render(renderArgs);
					if (status != RenderStatus.Complete) {
						EntryPoint.ShowError(new Exceptions.UnexpectedRenderStatus(status), ShowErrorState.SILENCE);
						return;
					}

					File.Delete(pathEncoded + ".sfl");

					var media = vegas.Project.MediaPool.AddMedia(path);
					var newVideoEvent = videoTrackStart.AddVideoEvent(start,
						Timecode.FromFrames(videoEvent.Length.FrameCount + count * Math.Abs(offset)));
					((VideoStream)newVideoEvent.AddTake(media.GetVideoStreamByIndex(0)).MediaStream).AlphaChannel =
						VideoAlphaType.Straight;
					videoEvent.Track.Events.Remove(videoEvent);

					foreach (var newEvent in newEvents) {
						newEvent.Track.Events.Remove(newEvent);
					}

					foreach (var newTrack in newTracks) {
						vegas.Project.Tracks.Remove(newTrack);
					}
				} catch (Exception e) {
					EntryPoint.ShowError(new Exceptions.UnknownException(e), e);
					Debug.WriteLine(e);
				}
			}
		}

		/// <summary>
		/// Renders a part of a video quickly and automatically.
		/// </summary>
		public class Render : BaseUncomprAlphaDatamosh {
			public override void Main(Vegas vegas, EntryPoint entryPoint) {
				var start = vegas.Transport.LoopRegionStart;
				var length = vegas.Transport.LoopRegionLength;

				try {
					string scriptDirectory;
					RenderTemplate template;
					if (!CheckEnvironment(vegas, out scriptDirectory, out template)) return;

					VideoTrack videoTrack = null;
					for (var i = vegas.Project.Tracks.Count - 1; i >= 0; i--) {
						videoTrack = vegas.Project.Tracks[i] as VideoTrack;
						if (videoTrack != null) {
							break;
						}
					}

					AudioTrack audioTrack = null;
					for (var i = 0; i < vegas.Project.Tracks.Count; i++) {
						audioTrack = vegas.Project.Tracks[i] as AudioTrack;
						if (audioTrack != null) {
							break;
						}
					}

					if (videoTrack == null && audioTrack == null) {
						EntryPoint.ShowError(new Exceptions.NoTrackFoundException(), ShowErrorState.SILENCE);
						return;
					}

					var finalFolder = (string)Registry.GetValue(Template.DataPath, "ClipFolder", ""); // RenderClipFolder
					if (string.IsNullOrEmpty(finalFolder) || !Directory.Exists(finalFolder)) {
						MessageBox.Show("Select the folder to put generated rendered clips into.\n" +
							"(As they are stored uncompressed with alpha, they can take a lot of space (think 1 GB/minute). " +
							"Choose a location with a lot of available space and go remove some clips there if you need space.)", Lang.str.rendering, MessageBoxButtons.OK, MessageBoxIcon.Warning);
						return;
					}

					var path = System.IO.Path.Combine(finalFolder, System.IO.Path.GetFileNameWithoutExtension(vegas.Project.FilePath) +
						"-" + Guid.NewGuid().ToString("B").ToUpper().Substring(1, 8) + ".avi");

					var renderArgs = new RenderArgs {
						OutputFile = path,
						Start = Timecode.FromFrames(start.FrameCount),
						Length = Timecode.FromFrames(length.FrameCount),
						RenderTemplate = template
					};
					var status = vegas.Render(renderArgs);
					if (status != RenderStatus.Complete) {
						EntryPoint.ShowError(new Exceptions.UnexpectedRenderStatus(status), ShowErrorState.SILENCE);
						return;
					}

					File.Delete(path + ".sfl");

					var media = vegas.Project.MediaPool.AddMedia(path);

					VideoEvent videoEvent = null;
					if (videoTrack != null) {
						videoEvent =
							videoTrack.AddVideoEvent(start, length);
						((VideoStream)videoEvent.AddTake(media.GetVideoStreamByIndex(0)).MediaStream).AlphaChannel =
							VideoAlphaType.Straight;
					}

					AudioEvent audioEvent = null;
					if (audioTrack != null) {
						audioEvent =
							audioTrack.AddAudioEvent(start, length);
						audioEvent.AddTake(media.GetAudioStreamByIndex(0));
					}

					if (videoTrack != null && audioTrack != null) {
						var group = new TrackEventGroup();
						vegas.Project.Groups.Add(group);
						group.Add(videoEvent);
						group.Add(audioEvent);
					}

				} catch (Exception e) {
					EntryPoint.ShowError(new Exceptions.UnknownException(e), e);
					Debug.WriteLine(e);
				}
			}
		}

		/// <summary>
		/// Scrambles clips/events quickly and automatically.
		/// </summary>
		public class Scramble : IDatamosh {
			private static readonly Random Random = new Random();

			public void Main(Vegas vegas, EntryPoint entryPoint) {
				var events = vegas.Project.Tracks
					.SelectMany(track => track.Events)
					.Where(t => t.Selected)
					.GroupBy(
					t => new {
						StartFrameCount = t.Start.FrameCount,
						LengthFrameCount = t.Length.FrameCount
					})
					.Select(grp => grp.ToList())
					.ToList();

				var prompt = new Form {
					Width = 500,
					Height = 130,
					Text = Lang.str.scrambling_parameters,
				};
				Template.OptimizePrompt(prompt, ImageBase64.ScrambleIcon);
				var textLabel = new Label { Left = 10, Top = 10, Text = Lang.str.scramble_size, AutoSize = true };
				var inputBox = new NumericUpDown {
					Left = 200,
					Top = 10,
					Width = 200,
					Minimum = 1,
					Maximum = 1000000000,
					Text = ""
				};
				var confirmation = new Button { Text = Lang.str.ok, Left = 200, Width = 100, Top = 40 };
				confirmation.Click += (sender, e) => {
					prompt.DialogResult = DialogResult.OK;
					prompt.Close();
				};
				prompt.Controls.Add(confirmation);
				prompt.Controls.Add(textLabel);
				prompt.Controls.Add(inputBox);
				inputBox.Select();
				prompt.AcceptButton = confirmation;
				if (prompt.ShowDialog() != DialogResult.OK) {
					return;
				}

				var size = (int)inputBox.Value;

				if (size <= 0) {
					EntryPoint.ShowError(new Exceptions.ScrambleSizeException(), ShowErrorState.SILENCE);
					return;
				}

				try {
					foreach (var e in events) {
						var order = new List<int>();
						var startFrameCount = e[0].Start.FrameCount;
						var endFrameCount = e[0].End.FrameCount;
						var n = (int)(endFrameCount - startFrameCount);
						var l = n / size;
						if (l == 0)
							continue;
						if (n % size != 0) {
							++l;
						}
						for (var i = 0; i < l; i++) {
							order.Add(i);
						}


						for (var i = 0; i < l - 1; i++) {
							var k = i + 1 + Random.Next(l - i - 1);
							var v = order[k];
							order[k] = order[i];
							order[i] = v;
						}

						foreach (var evt in e) {
							int offset;
							for (var i = l - 1; i > 0; i--) {
								var other = evt.Split(Timecode.FromFrames(i * size));
								offset = order[i] > order[l - 1] ? -(size - n % size) : 0;
								other.Start = Timecode.FromFrames(startFrameCount + offset + order[i] * size);
							}
							offset = order[0] > order[l - 1] ? -(size - n % size) : 0;
							evt.Start = Timecode.FromFrames(startFrameCount + offset + order[0] * size);
						}
					}
				} catch (Exception e) {
					EntryPoint.ShowError(new Exceptions.UnknownException(e), e);
					Debug.WriteLine(e);
				}
			}
		}

		/// <summary>
		/// Stutters clips/events (play forward, backward, ...).
		/// </summary>
		public class Stutter : IDatamosh {
			private static readonly Random Random = new Random();

			private static int Rand(int bound, double power) {
				return (int)Math.Pow(Random.Next((int)Math.Pow(bound, 1 / power)), power);
			}

			public void Main(Vegas vegas, EntryPoint entryPoint) {
				var events = vegas.Project.Tracks
					.SelectMany(track => track.Events)
					.Where(t => t.Selected)
					.GroupBy(
					t => new {
						StartFrameCount = t.Start.FrameCount,
						LengthFrameCount = t.Length.FrameCount
					})
					.Select(grp => grp.ToList())
					.ToList();
				if (events.Count == 0) {
					EntryPoint.ShowError(new Exceptions.NoSelectedClipException(true), ShowErrorState.SILENCE);
					return;
				}

				var prompt = new Form {
					Width = 500,
					Height = 160,
					Text = Lang.str.stutter_parameters,
				};
				Template.OptimizePrompt(prompt, ImageBase64.ScrambleIcon);
				var lengthLabel = new Label { Left = 10, Top = 10, Text = Lang.str.length_in_seconds, AutoSize = true };
				var lengthInput = new NumericUpDown {
					Left = 200,
					Top = 10,
					Width = 200,
					Minimum = 0,
					Maximum = 10000,
					Text = ""
				};
				var powLabel = new Label { Left = 10, Top = 40, Text = Lang.str.stutter_window_bias, AutoSize = true };
				var powInput = new NumericUpDown {
					Left = 200,
					Top = 40,
					Width = 200,
					Minimum = 0,
					Maximum = 100,
					Text = "1.2"
				};
				var confirmation = new Button { Text = Lang.str.ok, Left = 200, Width = 100, Top = 70 };
				confirmation.Click += (sender, e) => {
					prompt.DialogResult = DialogResult.OK;
					prompt.Close();
				};
				prompt.Controls.Add(confirmation);
				prompt.Controls.Add(lengthLabel);
				prompt.Controls.Add(lengthInput);
				prompt.Controls.Add(powLabel);
				prompt.Controls.Add(powInput);
				lengthInput.Select();
				prompt.AcceptButton = confirmation;
				if (prompt.ShowDialog() != DialogResult.OK) {
					return;
				}

				var size = (int)((double)lengthInput.Value * vegas.Project.Video.FrameRate);
				if (size <= 0) {
					EntryPoint.ShowError(new Exceptions.StutterLengthException(), ShowErrorState.SILENCE);
					return;
				}
				var power = (double)powInput.Value;
				if (power <= 0) {
					EntryPoint.ShowError(new Exceptions.StutterWindowBiasException(), ShowErrorState.SILENCE);
					return;
				}

				try {
					foreach (var e in events) {
						var reverseClips = new List<Subclip>(e.Count);
						foreach (var evt in e) {
							foreach (var media in vegas.Project.MediaPool) {
								if (!(media is Subclip)) continue;
								var clip = media as Subclip;
								if (!clip.IsReversed || clip.ParentMedia != evt.ActiveTake.Media || clip.Length != evt.ActiveTake.Media.Length) continue;
								reverseClips.Add(clip);
								goto outer;
							}
							if (evt.ActiveTake.Media.FilePath == null) {
								MessageBox.Show(Lang.str.stutter_generator_media_info, Lang.str.stutter, MessageBoxButtons.OK, MessageBoxIcon.Warning);
								return;
							}
							reverseClips.Add(new Subclip(evt.ActiveTake.Media.FilePath, Timecode.FromFrames(0), evt.ActiveTake.Media.Length, true, evt.ActiveTake.Media.Title + Lang.str.reverse_suffix_tag));
						outer:;
						}
						var startFrameCount = (int)e[0].Start.FrameCount;
						var endFrameCount = (int)e[0].End.FrameCount;
						var max = endFrameCount - startFrameCount;
						var cur = 0;
						var reverse = false;
						for (var total = startFrameCount; total < startFrameCount + size; reverse = !reverse) {
							int dur;
							if (!reverse) {
								dur = 1 + Rand(max - cur, power);
							} else {
								dur = 1 + Rand(cur, power);
							}

							var i = -1;
							foreach (var evt in e) {
								i++;
								var clip = evt.Copy(evt.Track, Timecode.FromFrames(total));
								clip.Length = Timecode.FromFrames(dur);
								if (!reverse) {
									clip.ActiveTake.Offset = Timecode.FromFrames(evt.ActiveTake.Offset.FrameCount + cur);
								} else {
									var reverseClip = reverseClips[i];
									var take = clip.AddTake(reverseClip.Streams[clip.ActiveTake.MediaStream.Index], true);
									take.Offset = Timecode.FromFrames((long)(evt.ActiveTake.MediaStream.Length.FrameCount / evt.PlaybackRate) - (evt.ActiveTake.Offset.FrameCount + cur));
								}
							}

							if (!reverse) {
								cur += dur;
							} else {
								cur -= dur;
							}
							total += dur;
						}

						foreach (var evt in e) {
							evt.Track.Events.Remove(evt);
						}
					}
				} catch (Exception e) {
					EntryPoint.ShowError(new Exceptions.UnknownException(e), e);
					Debug.WriteLine(e);
				}
			}
		}

		public static class Template {
			public const string DataPath = "HKEY_CURRENT_USER\\SOFTWARE\\VEGAS Creative Software\\Custom Presets";

			public enum Mode {
				Uncompressed,
				UncomprAlpha,
			}

			public static RenderTemplate GetTemplate(Vegas vegas, int frameRate, Mode mode) {
				if (frameRate >= 100 * 1000) {
					EntryPoint.ShowError(new Exceptions.RenderTemplateFrameRateException(), ShowErrorState.SILENCE);
				}

				var frameString = (frameRate / 1000).ToString("00") + "." + (frameRate % 1000).ToString("000");
				var name = (mode == Mode.Uncompressed ? "Uncompressed " : "UncomprAlpha ") + frameString;
				var template = vegas.Renderers.FindByRendererID(0).Templates.FindByName(name);
				if (template != null) {
					return template;
				}

				var appData = Environment.GetEnvironmentVariable("APPDATA");
				if (appData == null) {
					throw new Exceptions.AppdataNotSetException();
				}

				var folder = System.IO.Path.Combine(appData, "Sony", "Render Templates", "avi"); // TODO: Sony? MAGIX?
				Directory.CreateDirectory(folder);
				var file = System.IO.Path.Combine(folder, name + ".sft2");
				if (File.Exists(file)) {
					return null;
				}

				using (var writer = new BinaryWriter(new FileStream(file, FileMode.Create, FileAccess.Write))) {
					writer.Write(Array1(), 0, Array1().Length);
					var guid = Guid.NewGuid().ToByteArray();
					writer.Write(guid, 0, guid.Length);
					writer.Write(Array2(mode), 0, Array2(mode).Length);
					writer.Write((double)frameRate / 1000);
					writer.Write(Array3(mode), 0, Array3(mode).Length);
					var chars = frameString.ToCharArray();
					foreach (var ch in chars) {
						writer.Write((byte)ch);
						writer.Write((byte)0x00);
					}

					writer.Write(Array4(), 0, Array4().Length);
					return null;
				}
			}

			public static void GetStandardTemplates(Vegas vegas, Mode mode) {
				GetTemplate(vegas, 12000, mode);
				GetTemplate(vegas, 12500, mode);
				GetTemplate(vegas, 14000, mode);
				GetTemplate(vegas, 14985, mode);
				GetTemplate(vegas, 15000, mode);
				GetTemplate(vegas, 16000, mode);
				GetTemplate(vegas, 23976, mode);
				GetTemplate(vegas, 24000, mode);
				GetTemplate(vegas, 25000, mode);
				GetTemplate(vegas, 29970, mode);
				GetTemplate(vegas, 30000, mode);
				GetTemplate(vegas, 50000, mode);
				GetTemplate(vegas, 59940, mode);
				GetTemplate(vegas, 60000, mode);
			}

			private static byte[] Array1() {
				return new byte[] {
					0x42, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x7b, 0x28, 0x9d, 0xea, 0x5a, 0xc8, 0xd3, 0x11, 0xbb, 0x3a, 0x00, 0x50, 0xda, 0x1a,
					0x5b, 0x06
				};
			}

			private static byte[] Array2(Mode mode) {
				return new byte[] {
					0xc8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00,
					0x00, 0x11, 0x00, 0x00, 0x00, 0x80, 0xbb, 0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xee, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x28,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, (byte)(mode == Mode.Uncompressed ? 0x18 : 0x20), 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
				};
			}

			private static byte[] Array3(Mode mode) {
				return mode == Mode.Uncompressed ? new byte[] {
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0x44,
					0x49, 0x42, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55,
					0x00, 0x6e, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x6d, 0x00, 0x70, 0x00, 0x72, 0x00, 0x65, 0x00, 0x73, 0x00, 0x73, 0x00,
					0x65, 0x00, 0x64, 0x00, 0x20, 0x00
				} : new byte[] {
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x20, 0x00, 0x44,
					0x49, 0x42, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55,
					0x00, 0x6e, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x6d, 0x00, 0x70, 0x00, 0x72, 0x00, 0x41, 0x00, 0x6c, 0x00, 0x70, 0x00,
					0x68, 0x00, 0x61, 0x00, 0x20, 0x00
				};
			}

			private static byte[] Array4() { return new byte[] { 0x00, 0x00, 0x00, 0x00 }; }

			public static void OptimizePrompt(Form prompt, string iconBase64) {
				if (prompt == null) return;
				if (EntryPoint.instance.configForm != null)
					prompt.Font = EntryPoint.instance.configForm.Font;
				prompt.AutoScaleMode = AutoScaleMode.Dpi;
				prompt.FormBorderStyle = FormBorderStyle.FixedDialog;
				prompt.MinimizeBox = false;
				prompt.MaximizeBox = false;
				prompt.ShowInTaskbar = false;
				prompt.ShowIcon = true;
				prompt.Icon = ImageBase64.GetIcon(iconBase64);
				prompt.StartPosition = FormStartPosition.Manual;
				prompt.Location = new Point(240, 240);
				prompt.ReserveSystemMenuItems(SystemMenuItemType.MOVE | SystemMenuItemType.CLOSE);
			}
		}

		public class CameraShake : IDatamosh {
			private CameraShakeForm.Config config;

			public void Main(Vegas vegas, EntryPoint entryPoint) {
				VideoEvent[] videoEvents = entryPoint.GetSelectedEvents<VideoEvent>();
				if (videoEvents == null || videoEvents.Length == 0) {
					EntryPoint.ShowError(new Exceptions.NoVideoEventSelectedException(), ShowErrorState.SILENCE);
					return;
				}
				CameraShakeForm form = new CameraShakeForm(entryPoint);
				if (form.ShowDialog() != DialogResult.OK) return;
				config = form.GetConfig();
				foreach (VideoEvent videoEvent in videoEvents)
					ShakeClip(videoEvent);
			}

			private void ShakeClip(VideoEvent ve) {
				if (config.ShouldClearFrames) {
					// 移除所有平移/裁切关键帧
					ve.VideoMotion.Keyframes.Clear();
					// 恢复缩放到默认值
					if (config.ShouldResetPan)
						ResetPan(ve);
					// 填充关键帧：每帧一个
					Populate(ve);
				}
				// 摇晃镜头
				PanShake(ve);
			}

			private void PanShake(VideoEvent ve) {
				int i = 0;

				foreach (VideoMotionKeyframe key in ve.VideoMotion.Keyframes) {
					SafelyScaleVideo(key);
					VideoMotionVertex movertex = MoveDelta(i++);
					key.MoveBy(movertex);
				}
			}

			private void ResetPan(VideoEvent ve) {
				VideoStream v = ve.ActiveTake.Media.GetVideoStreamByIndex(0);
				ve.VideoMotion.Keyframes[0].Bounds = new VideoMotionBounds(new VideoMotionVertex(0, 0), new VideoMotionVertex(v.Width, 0), new VideoMotionVertex(v.Width, v.Height), new VideoMotionVertex(0, v.Height));
			}

			private void SafelyScaleVideo(VideoMotionKeyframe key) {
				VideoMotionVertex delta = new VideoMotionVertex(0, 0);

				// 获得每个轴的缩放比例
				delta.X = (-(2 * config.SkewOut * config.XToYRatio) + (key.TopRight.X - key.TopLeft.X)) / (key.TopRight.X - key.TopLeft.X);
				delta.Y = (-(2 * config.SkewOut) + (key.BottomLeft.Y - key.TopLeft.Y)) / (key.BottomLeft.Y - key.TopLeft.Y);

				key.ScaleBy(delta);
			}

			private VideoMotionVertex MoveDelta(int n) {
				VideoMotionVertex delta = new VideoMotionVertex(0, 0);

				delta.X = (float)Math.Sin(ToRads(n * config.SkewIn)) * config.SkewOut * config.XToYRatio;
				delta.Y = (float)Math.Cos(ToRads(n * config.SkewIn * config.SkewXY)) * config.SkewOut;

				return delta;
			}

			private double ToRads(double deg) {
				return deg * (Math.PI / 180);
			}

			private void Populate(VideoEvent ve) {
				for (int i = 0; i < ve.Length.FrameCount; i++) {
					VideoMotionKeyframe key = new VideoMotionKeyframe(Timecode.FromFrames(i));
					ve.VideoMotion.Keyframes.Add(key);
				}
			}
		}
	}
	#endregion

	#region 其它自定义控件部分
	partial class IntegerTrackWithBox {
		/// <summary>
		/// 必需的设计器变量。
		/// </summary>
		private System.ComponentModel.IContainer components = null;

		/// <summary>
		/// 清理所有正在使用的资源。
		/// </summary>
		/// <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
		protected override void Dispose(bool disposing) {
			if (disposing && (components != null)) {
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		#region 组件设计器生成的代码

		/// <summary>
		/// 设计器支持所需的方法 - 不要修改
		/// 使用代码编辑器修改此方法的内容。
		/// </summary>
		private void InitializeComponent() {
			this.tableLayoutPanel = new System.Windows.Forms.TableLayoutPanel();
			this.Track = new System.Windows.Forms.TrackBar();
			this.Numeric = new System.Windows.Forms.NumericUpDown();
			this.tableLayoutPanel.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.Track)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.Numeric)).BeginInit();
			this.SuspendLayout();
			//
			// tableLayoutPanel
			//
			this.tableLayoutPanel.BackColor = System.Drawing.Color.Transparent;
			this.tableLayoutPanel.ColumnCount = 2;
			this.tableLayoutPanel.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel.Controls.Add(this.Track, 0, 0);
			this.tableLayoutPanel.Controls.Add(this.Numeric, 1, 0);
			this.tableLayoutPanel.Dock = System.Windows.Forms.DockStyle.Fill;
			this.tableLayoutPanel.Location = new System.Drawing.Point(0, 0);
			this.tableLayoutPanel.Margin = new System.Windows.Forms.Padding(0);
			this.tableLayoutPanel.Name = "tableLayoutPanel";
			this.tableLayoutPanel.RowCount = 1;
			this.tableLayoutPanel.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel.Size = new System.Drawing.Size(377, 39);
			this.tableLayoutPanel.TabIndex = 1;
			//
			// Track
			//
			this.Track.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(249)))), ((int)(((byte)(249)))), ((int)(((byte)(249)))));
			this.Track.Dock = System.Windows.Forms.DockStyle.Fill;
			this.Track.Location = new System.Drawing.Point(0, 0);
			this.Track.Margin = new System.Windows.Forms.Padding(0, 0, 4, 0);
			this.Track.Maximum = 100;
			this.Track.Name = "Track";
			this.Track.Size = new System.Drawing.Size(294, 39);
			this.Track.TabIndex = 0;
			this.Track.TickFrequency = 10;
			this.Track.Scroll += new System.EventHandler(this.Track_Scroll);
			//
			// Numeric
			//
			this.Numeric.DecimalPlaces = 2;
			this.Numeric.Dock = System.Windows.Forms.DockStyle.Fill;
			this.Numeric.Font = new System.Drawing.Font("Segoe UI", 9F);
			this.Numeric.Location = new System.Drawing.Point(302, 0);
			this.Numeric.Margin = new System.Windows.Forms.Padding(4, 0, 0, 0);
			this.Numeric.Name = "Numeric";
			this.Numeric.Size = new System.Drawing.Size(75, 27);
			this.Numeric.TabIndex = 1;
			this.Numeric.ValueChanged += new System.EventHandler(this.Numeric_ValueChanged);
			//
			// IntegerTrackWithBox
			//
			this.AutoScaleDimensions = new System.Drawing.SizeF(120F, 120F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Dpi;
			this.BackColor = System.Drawing.Color.Transparent;
			this.Controls.Add(this.tableLayoutPanel);
			this.Font = new System.Drawing.Font("Microsoft YaHei UI", 9F);
			this.Margin = new System.Windows.Forms.Padding(4);
			this.Name = "IntegerTrackWithBox";
			this.Size = new System.Drawing.Size(377, 39);
			this.tableLayoutPanel.ResumeLayout(false);
			this.tableLayoutPanel.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.Track)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.Numeric)).EndInit();
			this.ResumeLayout(false);

		}

		#endregion

		private System.Windows.Forms.TableLayoutPanel tableLayoutPanel;
		private System.Windows.Forms.TrackBar Track;
		private System.Windows.Forms.NumericUpDown Numeric;
	}

	[ToolboxBitmap(typeof(TrackBar))]
	public partial class IntegerTrackWithBox : UserControl { // 兼容说明：后期被更新成带小数的了，但由于为了兼容只能保留 Integer 的字样。
		public IntegerTrackWithBox() {
			InitializeComponent();
			Track.MouseClick += new MouseEventHandler(Track_MouseClick);
			Track.MouseDown += new MouseEventHandler(Track_MouseDown);
			Numeric.MouseWheel += AutoLayoutTracksGridForm.NumericUpDown_MouseWheel;
			doubleClickTimer.Tick += new EventHandler((sender, e) => {
				isWaitingDoubleClick = false;
				doubleClickTimer.Stop();
			});
			Layout += (sender, e) => Track.BackColor = Parent.BackColor; // 设计视图中用了会引发异常。
		}

		private void Track_Scroll(object sender, EventArgs e) {
			Numeric.Value = Track.Value;
		}

		private void Numeric_ValueChanged(object sender, EventArgs e) {
			Track.Value = (int)Numeric.Value;
			OnValueChanged(e);
		}

		[Description("指示数值控件的当前值。"), Category("Behavior"), DefaultValue(0)]
		public decimal Value {
			get { return Numeric.Value; }
			set {
				Track.Value = (int)value;
				Numeric.Value = value;
			}
		}

		[Browsable(false), EditorBrowsable(EditorBrowsableState.Never), DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public double DoubleValue {
			get { return (double)Value; }
		}

		[Browsable(false), EditorBrowsable(EditorBrowsableState.Never), DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public float FloatValue {
			get { return (float)Value; }
		}

		[Browsable(false), EditorBrowsable(EditorBrowsableState.Never), DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public int IntValue {
			get { return (int)Value; }
		}

		[Description("指示数值控件的最小值。"), Category("Behavior"), DefaultValue(0)]
		public decimal Minimum {
			get { return Numeric.Minimum; }
			set {
				Track.Minimum = (int)value;
				Numeric.Minimum = value;
				UpdateTickFrequency();
			}
		}

		[Description("指示数值控件的最大值。"), Category("Behavior"), DefaultValue(100)]
		public decimal Maximum {
			get { return Numeric.Maximum; }
			set {
				Track.Maximum = (int)value;
				Numeric.Maximum = value;
				UpdateTickFrequency();
			}
		}

		private const int tickFrequency = 10;

		private void UpdateTickFrequency() {
			Track.TickFrequency = (Track.Maximum - Track.Minimum) / tickFrequency;
		}

		[Description("指示在跟踪条上的哪些位置显示刻度。"), Category("Appearance"), DefaultValue(typeof(TickStyle), "BottomRight")]
		public TickStyle TickStyle {
			get { return Track.TickStyle; }
			set { Track.TickStyle = value; }
		}

		[Description("数值选择控件的宽度。"), Category("Layout"), DefaultValue(75)]
		public int NumericUpDownWidth {
			get { return Numeric.Width; }
			set { Numeric.Width = value; }
		}

		private decimal defaultValue = 0;

		[Description("指示数值控件的默认值，当用户鼠标右键跟踪条时可以重置为默认值。"), Category("Behavior"), DefaultValue(0)]
		public decimal DefaultValue {
			get { return defaultValue; }
			set {
				if (value < Minimum || value > Maximum)
					throw new ArgumentOutOfRangeException("Value", "输入的默认值比最小值小或比最大值大。");
				defaultValue = value;
			}
		}

		[Description("指示要显示的小数位数。"), Category("Appearance"), DefaultValue(2)]
		public int DecimalPlace {
			get { return Numeric.DecimalPlaces; }
			set { Numeric.DecimalPlaces = value; }
		}

		/// <summary>
		/// 右键/中键滑动条，可以重置其值。
		/// </summary>
		private void Track_MouseClick(object sender, MouseEventArgs e) {
			if ((e.Button == MouseButtons.Middle || e.Button == MouseButtons.Right) && e.Clicks == 1) ResetDefaultValue();
		}

		/// <summary>
		/// 双击滑动条，也可以重置其值。
		/// </summary>
		private void Track_MouseDown(object sender, MouseEventArgs e) {
			if (e.Button == MouseButtons.Left && e.Clicks == 1) {
				if (!isWaitingDoubleClick) {
					isWaitingDoubleClick = true;
					doubleClickTimer.Start();
				} else {
					doubleClickTimer.Stop();
					isWaitingDoubleClick = false;
					ResetDefaultValue();
				}
			}
		}

		private const int DOUBLE_CLICK_DURATION = 500;
		private readonly System.Windows.Forms.Timer doubleClickTimer = new System.Windows.Forms.Timer { Interval = DOUBLE_CLICK_DURATION };
		private bool isWaitingDoubleClick = false;

		private void ResetDefaultValue() {
			Value = DefaultValue;
		}

		/// <summary>
		/// 设定数值控件的当前值，并确保不受最大值或最小值限制的干扰。
		/// </summary>
		/// <param name="value">设定值</param>
		/// <param name="def">如果设定失败后的默认值，如果为 null 表示不改变。</param>
		public void SetValue(decimal value, decimal? def = null) {
			if (value < Minimum || value > Maximum) {
				if (def == null || def < Minimum || def > Maximum) return;
				Value = (decimal)def;
			} else Value = value;
		}

		// 自定义值改变事件。
		private EventHandler onValueChanged;
		[Description("在控件中的值更改时发生。"), Category("Action")]
		public event EventHandler ValueChanged {
			add {
				onValueChanged += value;
			}
			remove {
				onValueChanged -= value;
			}
		}
		protected virtual void OnValueChanged(EventArgs e) {
			if (onValueChanged != null) onValueChanged.Invoke(this, e);
		}
	}

	[ToolboxBitmap(typeof(NumericUpDown))]
	public class TimecodeBox : NumericUpDown {
		public TimecodeBox() : base() { }

		#region | Fields |
		private bool useTimecodeDeal = false;
		private const string DEFAULT_TIME = "0:00.000";
		private const RulerFormat format = RulerFormat.Time;
		private Selection? lastSelection;
		#endregion

		#region | Properties |
		[Description("与控件关联的文本。"), Category("Appearance"), DefaultValue(DEFAULT_TIME)]
		public override string Text {
			get { return base.Text; }
			set {
				TimecodeText.TimeUnit unit = TimecodeText.GetUnit(TextBox.SelectionStart, base.Text);
				if (!useTimecodeDeal) base.Text = TimecodeText.DealLegal(value);
				else Timecode = Timecode.FromPositionString(value, format);
				Select(TimecodeText.GetPosition(unit, base.Text), 0);
			}
		}

		[Description("与控件关联的文本对应的毫秒整型值。"), Category("Behavior"), DefaultValue(0)]
		public new int Value {
			get { return new TimecodeText(Text).Ms; }
			set {
				if (!useTimecodeDeal) base.Text = new TimecodeText(value).ToString();
				else DoubleValue = value;
			}
		}

		[Description("与控件关联的文本对应的毫秒双精度浮点值。"), Category("Behavior"), DefaultValue(0)]
		public double DoubleValue {
			get { return Value; }
			set {
				if (!useTimecodeDeal) Value = (int)value;
				else Timecode = Timecode.FromMilliseconds(value);
			}
		}

		[Description("与控件关联的文本对应的毫秒整型值。"), Category("Behavior"), DefaultValue(0)]
		public int Milliseconds {
			get { return Value; }
			set { Value = value; }
		}

		[Description("与控件关联的文本对应的时间码值。"), Category("Behavior"), Browsable(false), EditorBrowsable(EditorBrowsableState.Never), DebuggerBrowsable(DebuggerBrowsableState.Never), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public Timecode Timecode {
			get {
				return Timecode.FromMilliseconds(DoubleValue);
			}
			set {
				base.Text = value.ToPositionString();
			}
		}

		[Description("是否使用 Vegas 时间码处理。"), Category("Behavior"), DefaultValue(false)]
		public bool UseTimecodeDeal {
			get { return useTimecodeDeal; }
			set { useTimecodeDeal = value; }
		}

		[Browsable(false), EditorBrowsable(EditorBrowsableState.Never), DebuggerBrowsable(DebuggerBrowsableState.Never), Obsolete("TimecodeBox 控件不支持此属性。"), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden), DefaultValue(3)]
		public new int DecimalPlaces {
			get {
				return base.DecimalPlaces;
			}
			set {
				base.DecimalPlaces = value;
			}
		}

		/// <summary>
		/// 获取或设置 <see cref="NumberFormatInfo"/>，它定义适合区域性的、显示数字、货币和百分比的格式。
		/// </summary>
		private static NumberFormatInfo NumberFormat { get { return CultureInfo.CurrentCulture.NumberFormat; } }
		#endregion

		#region | Classes |
		/// <summary>
		/// 时间码文本处理辅助类。
		/// </summary>
		private class TimecodeText {
			#region 逻辑方法部分
			/// <summary>
			/// 处理输入文本的合法性。
			/// </summary>
			/// <param name="raw">源输入文本。</param>
			/// <returns>合法的文本。</returns>
			public static string DealLegal(string raw) {
				raw = new Regex(@"[:：;；]+").Replace(raw, ":");
				raw = new Regex(@"[\.。．,，、]+").Replace(raw, ".");
				raw = new Regex(@"\s").Replace(raw, "");
				raw = new Regex(@"^\.").Replace(raw, "0.");
				MatchCollection matches = Regex.Matches(raw, @"(\d+:){0,2}\d+(\.\d{1,3})?");
				if (matches.Count == 0) return DEFAULT_TIME;
				else {
					string bestMatch = "";
					foreach (Match match in matches)
						if (match.ToString().Length > bestMatch.Length)
							bestMatch = match.ToString();
					raw = bestMatch;
				}
				return Format(raw);
			}

			/// <summary>
			/// 将输入的时间格式的字符串转换为毫秒。
			/// </summary>
			/// <param name="clipTrimTime">时间格式，如 “0:00.000”。</param>
			/// <returns>毫秒值。</returns>
			private static int ClipTrimTime2Ms(string clipTrimTime) {
				if (clipTrimTime == "") clipTrimTime = DEFAULT_TIME;
				int h = 0, m = 0, s = 0, ms = 0;
				string[] timeSplitDot = clipTrimTime.Split(NumberFormat.NumberDecimalSeparator[0]);
				if (timeSplitDot.Length >= 2) {
					string ms_str = timeSplitDot[1];
					while (ms_str.Length < 3) ms_str += '0';
					ms = int.Parse(ms_str);
				}
				string[] timeSplitColon = timeSplitDot[0].Split(':');
				var tryParseInt = new Func<string, int, int>((str, def) => {
					int result;
					bool ok = int.TryParse(str, out result);
					if (!ok) result = def;
					return result;
				});
				s = tryParseInt(timeSplitColon[timeSplitColon.Length - 1], 0); // timeSplitColon[^1]
				if (timeSplitColon.Length >= 2) m = tryParseInt(timeSplitColon[timeSplitColon.Length - 2], 0); // timeSplitColon[^2]
				if (timeSplitColon.Length >= 3) h = tryParseInt(timeSplitColon[timeSplitColon.Length - 3], 0); // timeSplitColon[^3]
				int value = ((h * 60 + m) * 60 + s) * 1000 + ms;
				return value;
			}

			/// <summary>
			/// 格式化时间值。
			/// </summary>
			/// <param name="value">毫秒值。</param>
			/// <returns>时间格式，如 “0:00.000”。</returns>
			private static string FormatClipTrimTime(int value) {
				int ms = value % 1000; value /= 1000;
				int s = value % 60; value /= 60;
				int m = value % 60; value /= 60;
				int h = value;
				return h == 0 ?
					string.Format("{0:D}:{1:D2}.{2:D3}", m, s, ms) :
					string.Format("{0:D}:{1:D2}:{2:D2}.{3:D3}", h, m, s, ms);
			}

			/// <summary>
			/// 格式化时间值。
			/// </summary>
			/// <param name="clipTrimTime">不规范的时间格式。</param>
			/// <returns>时间格式，如 “0:00.000”。</returns>
			public static string Format(string clipTrimTime) {
				return new TimecodeText(clipTrimTime).ToString();
			}
			#endregion

			private int ms = 0;
			/// <summary>毫秒值。</summary>
			public int Ms { get { return ms; } }

			/// <summary>
			/// 格式化时间值。
			/// </summary>
			/// <param name="clipTrimTime">不规范的时间格式。</param>
			public TimecodeText(string clipTrimTime) {
				ms = ClipTrimTime2Ms(clipTrimTime);
			}

			/// <summary>
			/// 从毫秒值初始化。
			/// </summary>
			/// <param name="ms">毫秒值。</param>
			public TimecodeText(int ms) {
				this.ms = ms;
			}

			/// <summary>
			/// 格式化时间值。
			/// </summary>
			/// <returns>时间格式，如 “0:00.000”。</returns>
			public override string ToString() {
				return FormatClipTrimTime(ms);
			}

			/// <summary>
			/// 对时间码加减。
			/// </summary>
			/// <param name="unit">单位。</param>
			/// <param name="value">数值。默认为加一。</param>
			/// <returns>返回自己，用于链式。</returns>
			public TimecodeText AddOrSub(TimeUnit unit, int value = 1) {
				int mul = unit == TimeUnit.SECONDS ? 1000 :
					unit == TimeUnit.MINUTES ? 60000 :
					unit == TimeUnit.HOURS ? 3600000 : 1;
				int _ms = ms;
				ms += value * mul;
				if (ms < 0) ms = _ms;
				return this;
			}

			/// <summary>
			/// 时间单位。
			/// </summary>
			public enum TimeUnit {
				MILLISECONDS, SECONDS, MINUTES, HOURS,
			}

			internal static TimeUnit GetUnit(int cursor, string text) {
				int dotPosition = text.IndexOf(NumberFormat.NumberDecimalSeparator[0]);
				if (dotPosition != -1 && cursor > dotPosition)
					return TimeUnit.MILLISECONDS;
				dotPosition = text.Length - 1;
				int colonCount = 0;
				char lastChar = '\0';
				for (int i = dotPosition - 1; i >= 0 && i >= cursor; i--) {
					char ch = text[i];
					if (ch == ':' && lastChar != ch)
						colonCount++;
					lastChar = ch;
				}
				return colonCount == 0 ? TimeUnit.SECONDS :
					colonCount == 1 ? TimeUnit.MINUTES : TimeUnit.HOURS;
			}

			internal static int GetPosition(TimeUnit unit, string text) {
				int newCursor = unit == TimeUnit.MILLISECONDS ? 0 :
					unit == TimeUnit.SECONDS ? 4 :
					unit == TimeUnit.MINUTES ? 7 : 10;
				newCursor = text.Length - newCursor;
				if (newCursor < 0) newCursor = 0;
				return newCursor;
			}
		}

		/// <summary>
		/// 选择区域。
		/// </summary>
		private struct Selection {
			public int start;
			public int end;
			public int length { get { return end - start; } }
			public Selection(int start, int end) {
				this.start = start;
				this.end = end;
			}
			public bool legal { get { return start < end; } }
		}
		#endregion

		#region | Methods |
		protected override void UpdateEditText() {
			Text = base.Text;
		}

		protected override void OnKeyDown(KeyEventArgs e) {
			if (e.KeyCode == Keys.Enter) return;
			base.OnKeyDown(e);
		}

		protected override void OnTextBoxKeyPress(object source, KeyPressEventArgs e) {
			string key = e.KeyChar.ToString();
			if (key == NumberFormat.NegativeSign) { // 禁止输入负号。
				e.Handled = true;
				System.Media.SystemSounds.Beep.Play();
			} else if (key == ":") { } // 允许输入冒号。
			else base.OnTextBoxKeyPress(source, e);
		}

		protected override void OnMouseClick(MouseEventArgs e) {
			base.OnMouseClick(e);
			string text = base.Text;
			if (TextBox.SelectionLength != 0) return;
			int cursor = TextBox.SelectionStart;
			if (e != null && lastSelection.HasValue && cursor >= lastSelection.Value.start && cursor <= lastSelection.Value.end) {
				lastSelection = null;
				return;
			}
			lastSelection = null;
			Selection selection = new Selection(0, text.Length);
			for (int i = cursor - 1; i >= 0; i--) {
				char ch = text[i];
				if (!char.IsDigit(ch)) {
					selection.start = i + 1;
					break;
				}
			}
			for (int i = cursor; i < text.Length; i++) {
				char ch = text[i];
				if (!char.IsDigit(ch)) {
					selection.end = i;
					break;
				}
			}
			if (selection.legal)
				Select(selection.start, selection.length);
			lastSelection = selection;
		}

		public override void UpButton() {
			OnUpDown(1);
		}
		public override void DownButton() {
			OnUpDown(-1);
		}
		protected void OnUpDown(int value) {
			string text = base.Text;
			TimecodeText.TimeUnit unit = TimecodeText.GetUnit(TextBox.SelectionStart, text);
			Value = new TimecodeText(text).AddOrSub(unit, value).Ms;
			int newCursor = TimecodeText.GetPosition(unit, base.Text);
			Select(newCursor, 0);
			OnMouseClick(null);
		}

		/// <summary>
		/// 获取控件中的文本框部分。
		/// </summary>
		protected TextBox TextBox {
			get {
				PropertyInfo property = typeof(NumericUpDown).GetProperty("TextBox", BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic); // 使用 GetType 差点栈溢出。
				if (property == null)
					throw new MissingFieldException(new StackTrace().GetFrame(0).ToString());
				return (TextBox)property.GetValue(this);
			}
		}
		#endregion
	}

	#region 进度条对话框动画资源
	/// <summary>
	/// Represents an animation for the <see cref="ProgressDialog"/> loaded from a Win32 resource.
	/// </summary>
	/// <threadsafety instance="false" static="true" />
	public sealed class AnimationResource {
		/// <summary>
		/// Initializes a new instance of the <see cref="AnimationResource"/> class.
		/// </summary>
		/// <param name="resourceFile">The file containing the animation resource.</param>
		/// <param name="resourceId">The resource ID of the animation resource.</param>
		/// <exception cref="ArgumentNullException"><paramref name="resourceFile"/> is <see langword="null"/>.</exception>
		public AnimationResource(string resourceFile, int resourceId) {
			if (resourceFile == null)
				throw new ArgumentNullException("resourceFile");

			ResourceFile = resourceFile;
			ResourceId = resourceId;
		}

		/// <summary>
		/// Gets the name of the file containing the animation resource.
		/// </summary>
		/// <value>
		/// The name of the file containing the animation resource. This is typically a DLL or EXE file.
		/// </value>
		public string ResourceFile { get; private set; }

		/// <summary>
		/// Gets the ID of the animation resource.
		/// </summary>
		/// <value>
		/// The ID of the animation resource.
		/// </value>
		public int ResourceId { get; private set; }

		/// <summary>
		/// Gets a default animation from shell32.dll.
		/// </summary>
		/// <param name="animation">The animation to get.</param>
		/// <returns>An instance of the <see cref="AnimationResource"/> class representing the specified animation.</returns>
		/// <exception cref="ArgumentOutOfRangeException">The <paramref name="animation"/> parameter was not a value defined in the
		/// <see cref="ShellAnimation"/> enumeration.</exception>
		public static AnimationResource GetShellAnimation(ShellAnimation animation) {
			if (!Enum.IsDefined(typeof(ShellAnimation), animation))
				throw new ArgumentOutOfRangeException("animation");

			return new AnimationResource("shell32.dll", (int)animation);
		}

		internal SafeModuleHandle LoadLibrary() {
			SafeModuleHandle handle = LoadLibraryEx(ResourceFile, IntPtr.Zero, LoadLibraryExFlags.LoadLibraryAsDatafile);
			if (handle.IsInvalid) {
				int error = Marshal.GetLastWin32Error();
				if (error == ErrorFileNotFound)
					throw new FileNotFoundException(ResourceFile);
				else
					throw new Win32Exception(error);
			}

			return handle;
		}
		public const int ErrorFileNotFound = 2;

		[DllImport("kernel32", CharSet = CharSet.Unicode, SetLastError = true)]
		public static extern SafeModuleHandle LoadLibraryEx(
			string lpFileName,
			IntPtr hFile,
			LoadLibraryExFlags dwFlags
			);

		[Flags]
		public enum LoadLibraryExFlags : uint {
			DontResolveDllReferences = 0x00000001,
			LoadLibraryAsDatafile = 0x00000002,
			LoadWithAlteredSearchPath = 0x00000008,
			LoadIgnoreCodeAuthzLevel = 0x00000010
		}
	}

	/// <summary>
	/// Resource identifiers for default animations from shell32.dll.
	/// </summary>
	public enum ShellAnimation {
		/// <summary>
		/// An animation representing a file move.
		/// </summary>
		FileMove = 160,
		/// <summary>
		/// An animation representing a file copy.
		/// </summary>
		FileCopy = 161,
		/// <summary>
		/// An animation showing flying papers.
		/// </summary>
		FlyingPapers = 165,
		/// <summary>
		/// An animation showing a magnifying glass over a globe.
		/// </summary>
		SearchGlobe = 166,
		/// <summary>
		/// An animation representing a permament delete.
		/// </summary>
		PermanentDelete = 164,
		/// <summary>
		/// An animation representing deleting an item from the recycle bin.
		/// </summary>
		FromRecycleBinDelete = 163,
		/// <summary>
		/// An animation representing a file move to the recycle bin.
		/// </summary>
		ToRecycleBinDelete = 162,
		/// <summary>
		/// An animation representing a search spanning the local computer.
		/// </summary>
		SearchComputer = 152,
		/// <summary>
		/// An animation representing a search in a document..
		/// </summary>
		SearchDocument = 151,
		/// <summary>
		/// An animation representing a search using a flashlight animation.
		/// </summary>
		SearchFlashlight = 150,
	}

	public class SafeModuleHandle : SafeHandle {
		public SafeModuleHandle() : base(IntPtr.Zero, true) {
		}

		public override bool IsInvalid {
			get { return handle == IntPtr.Zero; }
		}

		[ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]
		protected override bool ReleaseHandle() {
			return FreeLibrary(handle);
		}

		[DllImport("kernel32", SetLastError = true),
		ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
		[return: MarshalAs(UnmanagedType.Bool)]
		public static extern bool FreeLibrary(IntPtr hModule);
	}

	internal static class IIDGuid {
		internal const string IModalWindow = "b4db1657-70d7-485e-8e3e-6fcb5a5c1802";
		internal const string IFileDialog = "42f85136-db7e-439c-85f1-e4075d135fc8";
		internal const string IFileOpenDialog = "d57c7288-d4ad-4768-be02-9d969532d960";
		internal const string IFileSaveDialog = "84bccd23-5fde-4cdb-aea4-af64b83d78ab";
		internal const string IFileDialogEvents = "973510DB-7D7F-452B-8975-74A85828D354";
		internal const string IFileDialogControlEvents = "36116642-D713-4b97-9B83-7484A9D00433";
		internal const string IFileDialogCustomize = "e6fdd21a-163f-4975-9c8c-a69f1ba37034";
		internal const string IShellItem = "43826D1E-E718-42EE-BC55-A1E261C37BFE";
		internal const string IShellItemArray = "B63EA76D-1F85-456F-A19C-48159EFA858B";
		internal const string IKnownFolder = "38521333-6A87-46A7-AE10-0F16706816C3";
		internal const string IKnownFolderManager = "44BEAAEC-24F4-4E90-B3F0-23D258FBB146";
		internal const string IPropertyStore = "886D8EEB-8CF2-4446-8D02-CDBA1DBDCF99";
		internal const string IProgressDialog = "EBBC7C04-315E-11d2-B62F-006097DF5BD4";
	}

	internal static class CLSIDGuid {
		internal const string FileOpenDialog = "DC1C5A9C-E88A-4dde-A5A1-60F82A20AEF7";
		internal const string FileSaveDialog = "C0B4E2F3-BA21-4773-8DBA-335EC946EB8B";
		internal const string KnownFolderManager = "4df0c730-df9d-4ae3-9153-aa6b82e9795a";
		internal const string ProgressDialog = "F8383852-FCD3-11d1-A6B9-006097DF5BD4";
	}

	[ComImport]
	[Guid(CLSIDGuid.ProgressDialog)]
	internal class ProgressDialogRCW { }

	[ComImport,
	Guid(IIDGuid.IProgressDialog),
	CoClass(typeof(ProgressDialogRCW))]
	internal interface ProgressDialog : IProgressDialog { }

	[Flags]
	internal enum ProgressDialogFlags : uint {
		Normal = 0x00000000,
		Modal = 0x00000001,
		AutoTime = 0x00000002,
		NoTime = 0x00000004,
		NoMinimize = 0x00000008,
		NoProgressBar = 0x00000010,
		MarqueeProgress = 0x00000020,
		NoCancel = 0x00000040
	}

	[ComImport]
	[Guid(IIDGuid.IProgressDialog)]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	internal interface IProgressDialog {

		[PreserveSig]
		void StartProgressDialog(
				IntPtr hwndParent,
				[MarshalAs(UnmanagedType.IUnknown)]
				object punkEnableModless,
				ProgressDialogFlags dwFlags,
				IntPtr pvResevered
			);

		[PreserveSig]
		void StopProgressDialog();

		[PreserveSig]
		void SetTitle(
				[MarshalAs(UnmanagedType.LPWStr)]
				string pwzTitle
			);

		[PreserveSig]
		void SetAnimation(
				SafeModuleHandle hInstAnimation,
				ushort idAnimation
			);

		[PreserveSig]
		[return: MarshalAs(UnmanagedType.Bool)]
		bool HasUserCancelled();

		[PreserveSig]
		void SetProgress(
				uint dwCompleted,
				uint dwTotal
			);
		[PreserveSig]
		void SetProgress64(
				ulong ullCompleted,
				ulong ullTotal
			);

		[PreserveSig]
		void SetLine(
				uint dwLineNum,
				[MarshalAs(UnmanagedType.LPWStr)]
				string pwzString,
				[MarshalAs(UnmanagedType.VariantBool)]
				bool fCompactPath,
				IntPtr pvResevered
			);

		[PreserveSig]
		void SetCancelMsg(
				[MarshalAs(UnmanagedType.LPWStr)]
				string pwzCancelMsg,
				object pvResevered
			);

		[PreserveSig]
		void Timer(
				uint dwTimerAction,
				object pvResevered
			);
	}
	#endregion

	partial class ProgressForm {
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer components = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose(bool disposing) {
			if (disposing && (components != null)) {
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent() {
			this.tableLayoutPanel1 = new System.Windows.Forms.TableLayoutPanel();
			this.CancelBtn = new System.Windows.Forms.Button();
			this.tableLayoutPanel2 = new System.Windows.Forms.TableLayoutPanel();
			this.InfoLabel = new System.Windows.Forms.Label();
			this.PercentLabel = new System.Windows.Forms.Label();
			this.ProgressBar = new System.Windows.Forms.ProgressBar();
			this.RealTimeUpdateCheck = new System.Windows.Forms.CheckBox();
			this.tableLayoutPanel1.SuspendLayout();
			this.tableLayoutPanel2.SuspendLayout();
			this.SuspendLayout();
			//
			// tableLayoutPanel1
			//
			this.tableLayoutPanel1.BackColor = System.Drawing.SystemColors.Control;
			this.tableLayoutPanel1.ColumnCount = 2;
			this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute, 25F));
			this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute, 25F));
			this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute, 25F));
			this.tableLayoutPanel1.Controls.Add(this.CancelBtn, 1, 0);
			this.tableLayoutPanel1.Dock = System.Windows.Forms.DockStyle.Bottom;
			this.tableLayoutPanel1.Location = new System.Drawing.Point(0, 191);
			this.tableLayoutPanel1.Margin = new System.Windows.Forms.Padding(5);
			this.tableLayoutPanel1.Name = "tableLayoutPanel1";
			this.tableLayoutPanel1.Padding = new System.Windows.Forms.Padding(18, 4, 18, 4);
			this.tableLayoutPanel1.RowCount = 1;
			this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel1.Size = new System.Drawing.Size(589, 50);
			this.tableLayoutPanel1.TabIndex = 1;
			//
			// CancelBtn
			//
			this.CancelBtn.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.CancelBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.CancelBtn.Location = new System.Drawing.Point(472, 9);
			this.CancelBtn.Margin = new System.Windows.Forms.Padding(5);
			this.CancelBtn.Name = "CancelBtn";
			this.CancelBtn.Size = new System.Drawing.Size(94, 32);
			this.CancelBtn.TabIndex = 1;
			this.CancelBtn.Text = "取消(&C)";
			this.CancelBtn.UseVisualStyleBackColor = true;
			this.CancelBtn.Click += new System.EventHandler(this.CancelBtn_Click);
			//
			// tableLayoutPanel2
			//
			this.tableLayoutPanel2.ColumnCount = 1;
			this.tableLayoutPanel2.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel2.Controls.Add(this.InfoLabel, 0, 1);
			this.tableLayoutPanel2.Controls.Add(this.PercentLabel, 0, 0);
			this.tableLayoutPanel2.Controls.Add(this.ProgressBar, 0, 2);
			this.tableLayoutPanel2.Dock = System.Windows.Forms.DockStyle.Fill;
			this.tableLayoutPanel2.Location = new System.Drawing.Point(0, 0);
			this.tableLayoutPanel2.Margin = new System.Windows.Forms.Padding(4);
			this.tableLayoutPanel2.Name = "tableLayoutPanel2";
			this.tableLayoutPanel2.Padding = new System.Windows.Forms.Padding(18, 8, 18, 8);
			this.tableLayoutPanel2.RowCount = 4;
			this.tableLayoutPanel2.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 45F));
			this.tableLayoutPanel2.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 25F));
			this.tableLayoutPanel2.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 30F));
			this.tableLayoutPanel2.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel2.Size = new System.Drawing.Size(589, 191);
			this.tableLayoutPanel2.TabIndex = 2;
			//
			// InfoLabel
			//
			this.InfoLabel.AutoSize = true;
			this.InfoLabel.Dock = System.Windows.Forms.DockStyle.Fill;
			this.InfoLabel.Location = new System.Drawing.Point(24, 86);
			this.InfoLabel.Margin = new System.Windows.Forms.Padding(6, 0, 6, 0);
			this.InfoLabel.Name = "InfoLabel";
			this.InfoLabel.Padding = new System.Windows.Forms.Padding(0, 6, 0, 6);
			this.InfoLabel.Size = new System.Drawing.Size(541, 43);
			this.InfoLabel.TabIndex = 0;
			this.InfoLabel.Text = "正在生成音 MAD / YTPMV⋯⋯";
			this.InfoLabel.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// PercentLabel
			//
			this.PercentLabel.AutoSize = true;
			this.PercentLabel.Dock = System.Windows.Forms.DockStyle.Fill;
			this.PercentLabel.Font = new System.Drawing.Font("Segoe UI", 24F);
			this.PercentLabel.Location = new System.Drawing.Point(18, 8);
			this.PercentLabel.Margin = new System.Windows.Forms.Padding(0);
			this.PercentLabel.Name = "PercentLabel";
			this.PercentLabel.Size = new System.Drawing.Size(553, 78);
			this.PercentLabel.TabIndex = 1;
			this.PercentLabel.Text = "0%";
			this.PercentLabel.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// ProgressBar
			//
			this.ProgressBar.Dock = System.Windows.Forms.DockStyle.Top;
			this.ProgressBar.Location = new System.Drawing.Point(28, 133);
			this.ProgressBar.Margin = new System.Windows.Forms.Padding(10, 4, 10, 4);
			this.ProgressBar.Name = "ProgressBar";
			this.ProgressBar.Size = new System.Drawing.Size(533, 29);
			this.ProgressBar.Step = 1;
			this.ProgressBar.TabIndex = 2;
			this.ProgressBar.UseWaitCursor = true;
			//
			// RealTimeUpdateCheck
			//
			this.RealTimeUpdateCheck.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
			this.RealTimeUpdateCheck.AutoSize = true;
			this.RealTimeUpdateCheck.BackColor = System.Drawing.SystemColors.Control;
			this.RealTimeUpdateCheck.Location = new System.Drawing.Point(22, 205);
			this.RealTimeUpdateCheck.Margin = new System.Windows.Forms.Padding(4, 4, 4, 7);
			this.RealTimeUpdateCheck.Name = "RealTimeUpdateCheck";
			this.RealTimeUpdateCheck.Padding = new System.Windows.Forms.Padding(6, 0, 6, 0);
			this.RealTimeUpdateCheck.Size = new System.Drawing.Size(298, 24);
			this.RealTimeUpdateCheck.TabIndex = 6;
			this.RealTimeUpdateCheck.Text = "实时更新当前进度（会减慢生成速度）";
			this.RealTimeUpdateCheck.UseVisualStyleBackColor = true;
			//
			// ProgressForm
			//
			this.AutoScaleDimensions = new System.Drawing.SizeF(120F, 120F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Dpi;
			this.BackColor = System.Drawing.SystemColors.Window;
			this.CancelButton = this.CancelBtn;
			this.ClientSize = new System.Drawing.Size(589, 241);
			this.ControlBox = false;
			this.Controls.Add(this.RealTimeUpdateCheck);
			this.Controls.Add(this.tableLayoutPanel2);
			this.Controls.Add(this.tableLayoutPanel1);
			this.Font = new System.Drawing.Font("Microsoft YaHei UI", 9F);
			this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
			this.Margin = new System.Windows.Forms.Padding(5);
			this.MaximizeBox = false;
			this.MinimizeBox = false;
			this.Name = "ProgressForm";
			this.ShowInTaskbar = false;
			this.SizeGripStyle = System.Windows.Forms.SizeGripStyle.Hide;
			this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "正在处理它";
			this.tableLayoutPanel1.ResumeLayout(false);
			this.tableLayoutPanel2.ResumeLayout(false);
			this.tableLayoutPanel2.PerformLayout();
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion

		public System.Windows.Forms.TableLayoutPanel tableLayoutPanel1;
		public System.Windows.Forms.Button CancelBtn;
		public System.Windows.Forms.TableLayoutPanel tableLayoutPanel2;
		public System.Windows.Forms.Label InfoLabel;
		public System.Windows.Forms.Label PercentLabel;
		public System.Windows.Forms.ProgressBar ProgressBar;
		public System.Windows.Forms.CheckBox RealTimeUpdateCheck;
	}

	public partial class ProgressForm : Form, IInterpret {
		private AnimationResource Animation;
		private SafeModuleHandle _currentAnimationModuleHandle;
		private IProgressDialog _dialog;
		public bool isNativeStyle = true;

		public ProgressForm(bool isNativeStyle) {
			InitializeComponent();
			Icon = ConfigForm.icon;
			Translate();
			this.isNativeStyle = isNativeStyle;
			if (!isNativeStyle) {
				ProgressBar.Style = ProgressBarStyle.Marquee;
				this.ReserveSystemMenuItems(SystemMenuItemType.MOVE | SystemMenuItemType.CLOSE);
			} else {
				Animation = AnimationResource.GetShellAnimation(ShellAnimation.FlyingPapers);
				FormClosed += (sender, e) => Close();
			}
		}

		public new void Show() {
			if (!isNativeStyle) base.Show();
			else LoadAnimation();
		}

		public new void Close() {
			base.Close();
			if (_dialog != null) {
				_dialog.StopProgressDialog();
				Marshal.ReleaseComObject(_dialog);
				_dialog = null;
			}
			if (_currentAnimationModuleHandle != null) {
				_currentAnimationModuleHandle.Dispose();
				_currentAnimationModuleHandle = null;
			}
		}

		private void CancelBtn_Click(object sender, EventArgs e) {
			_requestAbort = true;
			Close();
		}

		private bool _requestAbort = false;
		public bool RequestAbort { get { return isNativeStyle && _dialog.HasUserCancelled() || _requestAbort; } }
		public int Minimum { get { return ProgressBar.Minimum; } }
		public int Maximum { get { return ProgressBar.Maximum; } }

		private void _ReportProgress(int value) {
			if (value < Minimum) value = Minimum;
			if (value > Maximum) value = Maximum;
			if (!isNativeStyle) {
				if (value == 0) ProgressBar.Style = ProgressBarStyle.Marquee;
				else ProgressBar.Style = ProgressBarStyle.Blocks;
				ProgressBar.Value = value;
				_Update();
			} else {
				if (_dialog == null) return;
				_dialog.SetProgress((uint)value, 100);
			}
		}

		public void ReportProgress(int value) {
			_ReportProgress(value);
			ProgressText = value + "%";
			//_Update();
		}

		public void ReportProgress(double value) {
			ReportProgress((int)value);
		}

		public void ReportProgress(int current, int length) {
			int value = (int)Math.Round(100.0 * current / length);
			_ReportProgress(value);
			ProgressText = current + " / " + length;
			//_Update();
		}

		private void _Update() {
			Application.DoEvents();
			ProgressBar.Update();
			ProgressBar.Refresh();
			PercentLabel.Update();
			PercentLabel.Refresh();
		}

		/// <summary>
		/// 对正在进行的操作的简短描述。
		/// </summary>
		public string ProgressText {
			get { return PercentLabel.Text ?? string.Empty; }
			set {
				PercentLabel.Text = value;
				if (_dialog != null)
					_dialog.SetLine(1, ProgressText, false, IntPtr.Zero);
			}
		}

		public int Progress {
			get { return ProgressBar.Value; }
			set { ReportProgress(value); }
		}

		/// <summary>
		/// 关于正在进行的操作的其他细节。
		/// </summary>
		public string Info {
			get { return InfoLabel.Text ?? Lang.str.processing_otomad; }
			set {
				if (Info == value) return;
				InfoLabel.Text = value != "" ? value : Lang.str.processing_otomad;
				if (!isNativeStyle) {
					InfoLabel.Update();
					InfoLabel.Refresh();
				}
				if (_dialog != null)
					_dialog.SetLine(2, Info, false, IntPtr.Zero);
			}
		}

		public void Translate() {
			Lang str = Lang.str;
			Font = new Font(str.ui_font, 9F);
			CancelBtn.Text = str.cancel;
			Text = str.processing_it;
			InfoLabel.Text = Lang.str.processing_otomad;
			RealTimeUpdateCheck.Text = Lang.str.real_time_update;
		}

		private void LoadAnimation() {
			if (Animation != null) {
				try {
					_currentAnimationModuleHandle = Animation.LoadLibrary();
				} catch (Exception ex) {
					throw new InvalidOperationException("Unsupport system.", ex);
				}
			}
			_dialog = new ProgressDialog();
			_dialog.SetTitle(Lang.str.processing_it);
			if (Animation != null)
				_dialog.SetAnimation(_currentAnimationModuleHandle, (ushort)Animation.ResourceId);
			_dialog.SetLine(1, ProgressText, false, IntPtr.Zero);
			_dialog.SetLine(2, Info, false, IntPtr.Zero);
			if (Animation != null)
				_dialog.SetAnimation(_currentAnimationModuleHandle, (ushort)Animation.ResourceId);
			ProgressDialogFlags flags = ProgressDialogFlags.Normal;
			if (ProgressBar.Style == ProgressBarStyle.Marquee)
				flags |= ProgressDialogFlags.MarqueeProgress;
			flags |= ProgressDialogFlags.AutoTime;
			flags |= ProgressDialogFlags.NoMinimize;
			_dialog.StartProgressDialog(IntPtr.Zero, null, flags, IntPtr.Zero);
			IntPtr hWnd = GetWindow();
			if (hWnd != IntPtr.Zero) {
				hWnd.ReserveSystemMenuItems(SystemMenuItemType.MOVE | SystemMenuItemType.CLOSE);
				if (showRealTimeUpdateCheck) {
					int y = ClientRectangle.Height - PointToClient(RealTimeUpdateCheck.PointToScreen(new Point(0, 0))).Y;//13;
					AlphaColorDialog.RECT rect = new AlphaColorDialog.RECT();
					AlphaColorDialog.GetClientRect(hWnd, ref rect);
					int newY = rect.Bottom - rect.Top - y;
					Rectangle bounds = RealTimeUpdateCheck.Bounds;
					bounds.Y = newY;
					RealTimeUpdateCheck.Bounds = bounds;
					NativeWin32API.SetParent(RealTimeUpdateCheck.Handle, hWnd);
				}
			}
		}

		private readonly bool showRealTimeUpdateCheck = false; // 开启之后即可在进度条对话框显示实时更新 UI 的复选框。但是启动会变慢。

		private IntPtr GetWindow() {
			IntPtr hWnd = IntPtr.Zero;
			if (_dialog != null) IUnknown_GetWindow(_dialog, out hWnd);
			return hWnd;
		}

		[DllImport("shlwapi", EntryPoint = "#172")]
		private static extern long IUnknown_GetWindow(
			[MarshalAs(UnmanagedType.IUnknown)]
			object punk,
			out IntPtr phwnd
		);
	}

	#region Vista 后文件夹选择器
	#region Editor
	/// <summary>
	/// FolderBrowser 的设计器基类
	/// </summary>
	public class FolderNameEditor : UITypeEditor {
		public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context) {
			return UITypeEditorEditStyle.Modal;
		}
		public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value) {
			FolderBrowserDialog browser = new FolderBrowserDialog();
			if (value != null) {
				browser.DirectoryPath = string.Format("{0}", value);
			}
			if (browser.ShowDialog(null) == DialogResult.OK)
				return browser.DirectoryPath;
			return value;
		}
	}
	#endregion

	#region FolderBrowserDialog Base

	/// <summary>
	/// Vista 样式的选择文件对话框的基类
	/// </summary>
	[Description("提供一个Vista样式的选择文件对话框")]
	[Editor(typeof(FolderNameEditor), typeof(UITypeEditor))]
	public class FolderBrowserDialog : Component {
		/// <summary>
		/// 初始化 FolderBrowser 的新实例
		/// </summary>
		public FolderBrowserDialog() {
		}

		#region Public Property
		/// <summary>
		/// 获取在 FolderBrowser 中选择的文件夹路径
		/// </summary>
		public string DirectoryPath { get; set; }
		/// <summary>
		/// 向用户显示 FolderBrowser 的对话框
		/// </summary>
		/// <param name="owner">任何实现 System.Windows.Forms.IWin32Window（表示将拥有模式对话框的顶级窗口）的对象。</param>
		/// <returns></returns>
		public DialogResult ShowDialog(IWin32Window owner) {
			IntPtr hwndOwner = owner != null ? owner.Handle : GetActiveWindow();
			IFileOpenDialog dialog = (IFileOpenDialog)new FileOpenDialog();
			try {
				IShellItem item;
				if (!string.IsNullOrEmpty(DirectoryPath)) {
					IntPtr idl;
					uint atts = 0;
					if (SHILCreateFromPath(DirectoryPath, out idl, ref atts) == 0) {
						if (SHCreateShellItem(IntPtr.Zero, IntPtr.Zero, idl, out item) == 0) {
							dialog.SetFolder(item);
						}
					}
				}
				dialog.SetOptions(FOS.FOS_PICKFOLDERS | FOS.FOS_FORCEFILESYSTEM);
				uint hr = dialog.Show(hwndOwner);
				if (hr == ERROR_CANCELLED)
					return DialogResult.Cancel;

				if (hr != 0)
					return DialogResult.Abort;
				dialog.GetResult(out item);
				string path;
				item.GetDisplayName(SIGDN.SIGDN_FILESYSPATH, out path);
				DirectoryPath = path;
				return DialogResult.OK;
			} finally {
				Marshal.ReleaseComObject(dialog);
			}
		}
		#endregion

		#region BaseType
		[DllImport("shell32.dll")]
		private static extern int SHILCreateFromPath([MarshalAs(UnmanagedType.LPWStr)] string pszPath, out IntPtr ppIdl, ref uint rgflnOut);
		[DllImport("shell32.dll")]
		private static extern int SHCreateShellItem(IntPtr pidlParent, IntPtr psfParent, IntPtr pidl, out IShellItem ppsi);
		[DllImport("user32.dll")]
		internal static extern IntPtr GetActiveWindow();
		private const uint ERROR_CANCELLED = 0x800704C7;
		[ComImport]
		[Guid("DC1C5A9C-E88A-4dde-A5A1-60F82A20AEF7")]
		private class FileOpenDialog {
		}
		[ComImport]
		[Guid("42f85136-db7e-439c-85f1-e4075d135fc8")]
		[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
		private interface IFileOpenDialog {
			[PreserveSig]
			uint Show([In] IntPtr parent); // IModalWindow
			void SetFileTypes();  // not fully defined
			void SetFileTypeIndex([In] uint iFileType);
			void GetFileTypeIndex(out uint piFileType);
			void Advise(); // not fully defined
			void Unadvise();
			void SetOptions([In] FOS fos);
			void GetOptions(out FOS pfos);
			void SetDefaultFolder(IShellItem psi);
			void SetFolder(IShellItem psi);
			void GetFolder(out IShellItem ppsi);
			void GetCurrentSelection(out IShellItem ppsi);
			void SetFileName([In, MarshalAs(UnmanagedType.LPWStr)] string pszName);
			void GetFileName([MarshalAs(UnmanagedType.LPWStr)] out string pszName);
			void SetTitle([In, MarshalAs(UnmanagedType.LPWStr)] string pszTitle);
			void SetOkButtonLabel([In, MarshalAs(UnmanagedType.LPWStr)] string pszText);
			void SetFileNameLabel([In, MarshalAs(UnmanagedType.LPWStr)] string pszLabel);
			void GetResult(out IShellItem ppsi);
			void AddPlace(IShellItem psi, int alignment);
			void SetDefaultExtension([In, MarshalAs(UnmanagedType.LPWStr)] string pszDefaultExtension);
			void Close(int hr);
			void SetClientGuid();  // not fully defined
			void ClearClientData();
			void SetFilter([MarshalAs(UnmanagedType.Interface)] IntPtr pFilter);
			void GetResults([MarshalAs(UnmanagedType.Interface)] out IntPtr ppenum); // not fully defined
			void GetSelectedItems([MarshalAs(UnmanagedType.Interface)] out IntPtr ppsai); // not fully defined
		}
		[ComImport]
		[Guid("43826D1E-E718-42EE-BC55-A1E261C37BFE")]
		[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
		private interface IShellItem {
			void BindToHandler(); // not fully defined
			void GetParent(); // not fully defined
			void GetDisplayName([In] SIGDN sigdnName, [MarshalAs(UnmanagedType.LPWStr)] out string ppszName);
			void GetAttributes();  // not fully defined
			void Compare();  // not fully defined
		}
		private enum SIGDN : uint {
			SIGDN_DESKTOPABSOLUTEEDITING = 0x8004c000,
			SIGDN_DESKTOPABSOLUTEPARSING = 0x80028000,
			SIGDN_FILESYSPATH = 0x80058000,
			SIGDN_NORMALDISPLAY = 0,
			SIGDN_PARENTRELATIVE = 0x80080001,
			SIGDN_PARENTRELATIVEEDITING = 0x80031001,
			SIGDN_PARENTRELATIVEFORADDRESSBAR = 0x8007c001,
			SIGDN_PARENTRELATIVEPARSING = 0x80018001,
			SIGDN_URL = 0x80068000
		}
		[Flags]
		private enum FOS {
			FOS_ALLNONSTORAGEITEMS = 0x80,
			FOS_ALLOWMULTISELECT = 0x200,
			FOS_CREATEPROMPT = 0x2000,
			FOS_DEFAULTNOMINIMODE = 0x20000000,
			FOS_DONTADDTORECENT = 0x2000000,
			FOS_FILEMUSTEXIST = 0x1000,
			FOS_FORCEFILESYSTEM = 0x40,
			FOS_FORCESHOWHIDDEN = 0x10000000,
			FOS_HIDEMRUPLACES = 0x20000,
			FOS_HIDEPINNEDPLACES = 0x40000,
			FOS_NOCHANGEDIR = 8,
			FOS_NODEREFERENCELINKS = 0x100000,
			FOS_NOREADONLYRETURN = 0x8000,
			FOS_NOTESTFILECREATE = 0x10000,
			FOS_NOVALIDATE = 0x100,
			FOS_OVERWRITEPROMPT = 2,
			FOS_PATHMUSTEXIST = 0x800,
			FOS_PICKFOLDERS = 0x20,
			FOS_SHAREAWARE = 0x4000,
			FOS_STRICTFILETYPES = 4
		}
		#endregion
	}
	#endregion
	#endregion

	public class ToolStripRadioButtonMenuItem : ToolStripMenuItem {
		public ToolStripRadioButtonMenuItem()
			: base() {
			Initialize();
		}

		public ToolStripRadioButtonMenuItem(string text)
			: base(text, null, (EventHandler)null) {
			Initialize();
		}

		public ToolStripRadioButtonMenuItem(Image image)
			: base(null, image, (EventHandler)null) {
			Initialize();
		}

		public ToolStripRadioButtonMenuItem(string text, Image image)
			: base(text, image, (EventHandler)null) {
			Initialize();
		}

		public ToolStripRadioButtonMenuItem(string text, Image image,
			EventHandler onClick)
			: base(text, image, onClick) {
			Initialize();
		}

		public ToolStripRadioButtonMenuItem(string text, Image image,
			EventHandler onClick, string name)
			: base(text, image, onClick, name) {
			Initialize();
		}

		public ToolStripRadioButtonMenuItem(string text, Image image,
			params ToolStripItem[] dropDownItems)
			: base(text, image, dropDownItems) {
			Initialize();
		}

		public ToolStripRadioButtonMenuItem(string text, Image image,
			EventHandler onClick, Keys shortcutKeys)
			: base(text, image, onClick) {
			Initialize();
			this.ShortcutKeys = shortcutKeys;
		}

		// 由所有构造函数调用以初始化“选中时单击”。
		private void Initialize() {
			CheckOnClick = true;
		}

		protected override void OnCheckedChanged(EventArgs e) {
			base.OnCheckedChanged(e);

			// 如果此项不再处于选中状态或其父项尚未初始化，则不执行任何操作。
			if (!Checked || Parent == null) return;

			// 清除所有同级的选中状态。
			foreach (ToolStripItem item in Parent.Items) {
				ToolStripRadioButtonMenuItem radioItem =
					item as ToolStripRadioButtonMenuItem;
				if (radioItem != null && radioItem != this && radioItem.Checked) {
					radioItem.Checked = false;

					// 一次只能选择一个项目，因此无需继续。
					return;
				}
			}
		}

		protected override void OnClick(EventArgs e) {
			// 如果该项已处于选中状态，则不要调用基方法，这样会切换该值。
			if (Checked) return;

			base.OnClick(e);
		}

		// 让项目自行绘制，然后绘制通常显示为复选标记的单选按钮。
		protected override void OnPaint(PaintEventArgs e) {
			if (Image != null) {
				// 如果客户端设置“图像”属性，则选择行为保持不变，但不显示单选按钮，并且选择仅由选择矩形指示。
				base.OnPaint(e);
				return;
			} else {
				// 如果未设置“图像”属性，请在暂时清除“选中状态”属性的情况下调用基类 OnPaint
				// 方法，以防止绘制复选标记。
				CheckState currentState = CheckState;
				CheckState = CheckState.Unchecked;
				base.OnPaint(e);
				CheckState = currentState;
			}

			// 确定单选按钮的正确状态。
			RadioButtonState buttonState = RadioButtonState.UncheckedNormal;
			if (Enabled) {
				if (mouseDownState)
					buttonState = Checked ? RadioButtonState.CheckedPressed : RadioButtonState.UncheckedPressed;
				else if (mouseHoverState)
					buttonState = Checked ? RadioButtonState.CheckedHot : RadioButtonState.UncheckedHot;
				else if (Checked) buttonState = RadioButtonState.CheckedNormal;
			} else buttonState = Checked ? RadioButtonState.CheckedDisabled : RadioButtonState.UncheckedDisabled;

			// 计算显示单选按钮的位置。
			int offset = (ContentRectangle.Height -
				RadioButtonRenderer.GetGlyphSize(
				e.Graphics, buttonState).Height) / 2;
			Point imageLocation = new Point(
				ContentRectangle.Location.X + 4,
				ContentRectangle.Location.Y + offset);

			// 绘制单选按钮。
			//RadioButtonRenderer.DrawRadioButton(e.Graphics, imageLocation, buttonState);

			// 重新画一下。
			const int CHECK_DOT_DIAMETER = 5;
			int checkAreaLength = ContentRectangle.Height;
			int checkTopLeft = (checkAreaLength - CHECK_DOT_DIAMETER) / 2;
			Rectangle checkRect = new Rectangle(checkTopLeft + 4, checkTopLeft, CHECK_DOT_DIAMETER, CHECK_DOT_DIAMETER);
			SolidBrush brush = new SolidBrush(Enabled ? Color.Black : Color.DarkGray);
			e.Graphics.SmoothingMode = SmoothingMode.AntiAlias;
			if (Checked) e.Graphics.FillEllipse(brush, checkRect);
		}

		private bool mouseHoverState = false;

		protected override void OnMouseEnter(EventArgs e) {
			mouseHoverState = true;

			// 强制项目使用新的单选按钮状态重新绘制。
			Invalidate();

			base.OnMouseEnter(e);
		}

		protected override void OnMouseLeave(EventArgs e) {
			mouseHoverState = false;
			base.OnMouseLeave(e);
		}

		private bool mouseDownState = false;

		protected override void OnMouseDown(MouseEventArgs e) {
			mouseDownState = true;

			// 强制项目使用新的单选按钮状态重新绘制。
			Invalidate();

			base.OnMouseDown(e);
		}

		protected override void OnMouseUp(MouseEventArgs e) {
			mouseDownState = false;
			base.OnMouseUp(e);
		}

		// 仅当其父项处于选中状态且其“启用”属性未显式设置为 false 时，才启用该项。
		public override bool Enabled {
			get {
				ToolStripMenuItem ownerMenuItem =
					OwnerItem as ToolStripMenuItem;

				// 在设计模式中使用基准值可防止设计者将基准值设置为计算值。
				if (!DesignMode &&
					ownerMenuItem != null && ownerMenuItem.CheckOnClick) {
					return base.Enabled && ownerMenuItem.Checked;
				} else {
					return base.Enabled;
				}
			}
			set {
				base.Enabled = value;
			}
		}

		// 当“父项”可用时，如果它是一个工具条菜单项，且“选中时单击”属性值为 true，
		// 则订阅其“选中状态更改”事件。
		protected override void OnOwnerChanged(EventArgs e) {
			ToolStripMenuItem ownerMenuItem =
				OwnerItem as ToolStripMenuItem;
			if (ownerMenuItem != null && ownerMenuItem.CheckOnClick) {
				ownerMenuItem.CheckedChanged +=
					new EventHandler(OwnerMenuItem_CheckedChanged);
			}
			base.OnOwnerChanged(e);
		}

		// 当父项的选中状态更改时，请重新绘制该项，以便显示新的启用状态。
		private void OwnerMenuItem_CheckedChanged(
			object sender, EventArgs e) {
			Invalidate();
		}
	}

	partial class ReplaceClipsForm {
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer components = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose(bool disposing) {
			if (disposing && (components != null)) {
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent() {
			this.dock = new System.Windows.Forms.TableLayoutPanel();
			this.OkBtn = new System.Windows.Forms.Button();
			this.CancelBtn = new System.Windows.Forms.Button();
			this.UseTrackEventGroupCheck = new System.Windows.Forms.CheckBox();
			this.ReserveOriginalNameCheck = new System.Windows.Forms.CheckBox();
			this.panel1 = new System.Windows.Forms.Panel();
			this.tabs = new System.Windows.Forms.TabControl();
			this.ClassicTab = new System.Windows.Forms.TabPage();
			this.table = new System.Windows.Forms.TableLayoutPanel();
			this.ReplacerCombo = new System.Windows.Forms.ListBox();
			this.ClassicReplacerLbl = new System.Windows.Forms.Label();
			this.ReplaceClipsLbl = new System.Windows.Forms.Label();
			this.ClassicReplacedLbl = new System.Windows.Forms.Label();
			this.SeparationTab = new System.Windows.Forms.TabPage();
			this.tableLayoutPanel1 = new System.Windows.Forms.TableLayoutPanel();
			this.tableLayoutPanel3 = new System.Windows.Forms.TableLayoutPanel();
			this.SeparationReplacerInfo = new System.Windows.Forms.Label();
			this.ReplacerIcon = new System.Windows.Forms.PictureBox();
			this.tableLayoutPanel5 = new System.Windows.Forms.TableLayoutPanel();
			this.SetReplacerBtn = new System.Windows.Forms.Button();
			this.BackToSelect2 = new System.Windows.Forms.Button();
			this.tableLayoutPanel2 = new System.Windows.Forms.TableLayoutPanel();
			this.SeparationReplacedInfo = new System.Windows.Forms.Label();
			this.ReplacedIcon = new System.Windows.Forms.PictureBox();
			this.SeparationReplacedLbl = new System.Windows.Forms.Label();
			this.SeparationReplacerLbl = new System.Windows.Forms.Label();
			this.tableLayoutPanel4 = new System.Windows.Forms.TableLayoutPanel();
			this.SetReplacedBtn = new System.Windows.Forms.Button();
			this.BackToSelect1 = new System.Windows.Forms.Button();
			this.flowLayoutPanel1 = new System.Windows.Forms.FlowLayoutPanel();
			this.ViewLbl = new System.Windows.Forms.Label();
			this.ViewSelectReplacedRadio = new System.Windows.Forms.RadioButton();
			this.ViewSelectReplacerRadio = new System.Windows.Forms.RadioButton();
			this.ViewSelectOriginalRadio = new System.Windows.Forms.RadioButton();
			this.dock.SuspendLayout();
			this.panel1.SuspendLayout();
			this.tabs.SuspendLayout();
			this.ClassicTab.SuspendLayout();
			this.table.SuspendLayout();
			this.SeparationTab.SuspendLayout();
			this.tableLayoutPanel1.SuspendLayout();
			this.tableLayoutPanel3.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.ReplacerIcon)).BeginInit();
			this.tableLayoutPanel5.SuspendLayout();
			this.tableLayoutPanel2.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.ReplacedIcon)).BeginInit();
			this.tableLayoutPanel4.SuspendLayout();
			this.flowLayoutPanel1.SuspendLayout();
			this.SuspendLayout();
			//
			// dock
			//
			this.dock.BackColor = System.Drawing.SystemColors.Control;
			this.dock.ColumnCount = 5;
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.dock.Controls.Add(this.OkBtn, 3, 0);
			this.dock.Controls.Add(this.CancelBtn, 4, 0);
			this.dock.Controls.Add(this.UseTrackEventGroupCheck, 0, 0);
			this.dock.Controls.Add(this.ReserveOriginalNameCheck, 1, 0);
			this.dock.Dock = System.Windows.Forms.DockStyle.Bottom;
			this.dock.Location = new System.Drawing.Point(0, 508);
			this.dock.Margin = new System.Windows.Forms.Padding(5, 5, 5, 5);
			this.dock.Name = "dock";
			this.dock.Padding = new System.Windows.Forms.Padding(8, 6, 8, 6);
			this.dock.RowCount = 1;
			this.dock.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.dock.Size = new System.Drawing.Size(870, 52);
			this.dock.TabIndex = 3;
			//
			// OkBtn
			//
			this.OkBtn.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.OkBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.OkBtn.Location = new System.Drawing.Point(662, 10);
			this.OkBtn.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.OkBtn.Name = "OkBtn";
			this.OkBtn.Size = new System.Drawing.Size(94, 32);
			this.OkBtn.TabIndex = 1;
			this.OkBtn.Text = "替换(&R)";
			this.OkBtn.UseVisualStyleBackColor = true;
			this.OkBtn.Click += new System.EventHandler(this.OkBtn_Click);
			//
			// CancelBtn
			//
			this.CancelBtn.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.CancelBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.CancelBtn.Location = new System.Drawing.Point(764, 10);
			this.CancelBtn.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.CancelBtn.Name = "CancelBtn";
			this.CancelBtn.Size = new System.Drawing.Size(94, 32);
			this.CancelBtn.TabIndex = 2;
			this.CancelBtn.Text = "关闭(&C)";
			this.CancelBtn.UseVisualStyleBackColor = true;
			this.CancelBtn.Click += new System.EventHandler(this.CancelBtn_Click);
			//
			// UseTrackEventGroupCheck
			//
			this.UseTrackEventGroupCheck.AutoSize = true;
			this.UseTrackEventGroupCheck.Checked = true;
			this.UseTrackEventGroupCheck.CheckState = System.Windows.Forms.CheckState.Checked;
			this.UseTrackEventGroupCheck.Dock = System.Windows.Forms.DockStyle.Fill;
			this.UseTrackEventGroupCheck.Location = new System.Drawing.Point(12, 10);
			this.UseTrackEventGroupCheck.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.UseTrackEventGroupCheck.Name = "UseTrackEventGroupCheck";
			this.UseTrackEventGroupCheck.Size = new System.Drawing.Size(196, 32);
			this.UseTrackEventGroupCheck.TabIndex = 0;
			this.UseTrackEventGroupCheck.Text = "同时替换分组内其它剪辑";
			this.UseTrackEventGroupCheck.UseVisualStyleBackColor = true;
			//
			// ReserveOriginalNameCheck
			//
			this.ReserveOriginalNameCheck.AutoSize = true;
			this.ReserveOriginalNameCheck.Dock = System.Windows.Forms.DockStyle.Fill;
			this.ReserveOriginalNameCheck.Location = new System.Drawing.Point(216, 10);
			this.ReserveOriginalNameCheck.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.ReserveOriginalNameCheck.Name = "ReserveOriginalNameCheck";
			this.ReserveOriginalNameCheck.Size = new System.Drawing.Size(136, 32);
			this.ReserveOriginalNameCheck.TabIndex = 3;
			this.ReserveOriginalNameCheck.Text = "保留原剪辑名称";
			this.ReserveOriginalNameCheck.UseVisualStyleBackColor = true;
			//
			// panel1
			//
			this.panel1.BackColor = System.Drawing.Color.Transparent;
			this.panel1.Controls.Add(this.tabs);
			this.panel1.Dock = System.Windows.Forms.DockStyle.Fill;
			this.panel1.Location = new System.Drawing.Point(0, 0);
			this.panel1.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.panel1.Name = "panel1";
			this.panel1.Padding = new System.Windows.Forms.Padding(10, 10, 10, 0);
			this.panel1.Size = new System.Drawing.Size(870, 508);
			this.panel1.TabIndex = 4;
			//
			// tabs
			//
			this.tabs.Controls.Add(this.ClassicTab);
			this.tabs.Controls.Add(this.SeparationTab);
			this.tabs.Dock = System.Windows.Forms.DockStyle.Fill;
			this.tabs.Location = new System.Drawing.Point(10, 10);
			this.tabs.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.tabs.Name = "tabs";
			this.tabs.SelectedIndex = 0;
			this.tabs.Size = new System.Drawing.Size(850, 498);
			this.tabs.TabIndex = 0;
			this.tabs.SelectedIndexChanged += new System.EventHandler(this.ReplacerCombo_SelectedIndexChanged);
			//
			// ClassicTab
			//
			this.ClassicTab.Controls.Add(this.table);
			this.ClassicTab.Location = new System.Drawing.Point(4, 29);
			this.ClassicTab.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.ClassicTab.Name = "ClassicTab";
			this.ClassicTab.Padding = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.ClassicTab.Size = new System.Drawing.Size(842, 465);
			this.ClassicTab.TabIndex = 0;
			this.ClassicTab.Text = "同时指定";
			this.ClassicTab.UseVisualStyleBackColor = true;
			//
			// table
			//
			this.table.AutoSize = true;
			this.table.ColumnCount = 1;
			this.table.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute, 832F));
			this.table.Controls.Add(this.ReplacerCombo, 0, 2);
			this.table.Controls.Add(this.ClassicReplacerLbl, 0, 1);
			this.table.Controls.Add(this.ReplaceClipsLbl, 0, 0);
			this.table.Controls.Add(this.ClassicReplacedLbl, 0, 3);
			this.table.Dock = System.Windows.Forms.DockStyle.Fill;
			this.table.Location = new System.Drawing.Point(4, 4);
			this.table.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.table.Name = "table";
			this.table.Padding = new System.Windows.Forms.Padding(0, 0, 0, 8);
			this.table.RowCount = 4;
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.table.Size = new System.Drawing.Size(834, 457);
			this.table.TabIndex = 7;
			//
			// ReplacerCombo
			//
			this.ReplacerCombo.Dock = System.Windows.Forms.DockStyle.Fill;
			this.ReplacerCombo.FormattingEnabled = true;
			this.ReplacerCombo.ItemHeight = 20;
			this.ReplacerCombo.Location = new System.Drawing.Point(4, 80);
			this.ReplacerCombo.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.ReplacerCombo.Name = "ReplacerCombo";
			this.ReplacerCombo.Size = new System.Drawing.Size(826, 345);
			this.ReplacerCombo.TabIndex = 3;
			this.ReplacerCombo.SelectedIndexChanged += new System.EventHandler(this.ReplacerCombo_SelectedIndexChanged);
			//
			// ClassicReplacerLbl
			//
			this.ClassicReplacerLbl.AutoSize = true;
			this.ClassicReplacerLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.ClassicReplacerLbl.Location = new System.Drawing.Point(4, 56);
			this.ClassicReplacerLbl.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.ClassicReplacerLbl.Name = "ClassicReplacerLbl";
			this.ClassicReplacerLbl.Size = new System.Drawing.Size(826, 20);
			this.ClassicReplacerLbl.TabIndex = 4;
			this.ClassicReplacerLbl.Text = "指定的替换项为";
			this.ClassicReplacerLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// ReplaceClipsLbl
			//
			this.ReplaceClipsLbl.AutoSize = true;
			this.ReplaceClipsLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.ReplaceClipsLbl.Location = new System.Drawing.Point(4, 8);
			this.ReplaceClipsLbl.Margin = new System.Windows.Forms.Padding(4, 8, 4, 8);
			this.ReplaceClipsLbl.Name = "ReplaceClipsLbl";
			this.ReplaceClipsLbl.Size = new System.Drawing.Size(826, 40);
			this.ReplaceClipsLbl.TabIndex = 1;
			this.ReplaceClipsLbl.Text = "请先在轨道窗口中选中替换与被替换的素材，然后指定一个素材为替换的素材，剩余素材均为被替换素材。\r\n请先将替换素材的音视频创建分组，并确保替换素材放置在时间靠后的位" +
	"置并且尽量不与其它被替换素材位于同一轨道。";
			this.ReplaceClipsLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// ClassicReplacedLbl
			//
			this.ClassicReplacedLbl.AutoSize = true;
			this.ClassicReplacedLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.ClassicReplacedLbl.Location = new System.Drawing.Point(4, 429);
			this.ClassicReplacedLbl.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.ClassicReplacedLbl.Name = "ClassicReplacedLbl";
			this.ClassicReplacedLbl.Size = new System.Drawing.Size(826, 20);
			this.ClassicReplacedLbl.TabIndex = 3;
			this.ClassicReplacedLbl.Text = "则剩余 0 项轨道剪辑将被替换为选定素材。";
			this.ClassicReplacedLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// SeparationTab
			//
			this.SeparationTab.Controls.Add(this.tableLayoutPanel1);
			this.SeparationTab.Location = new System.Drawing.Point(4, 29);
			this.SeparationTab.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.SeparationTab.Name = "SeparationTab";
			this.SeparationTab.Size = new System.Drawing.Size(842, 465);
			this.SeparationTab.TabIndex = 1;
			this.SeparationTab.Text = "分别指定";
			this.SeparationTab.UseVisualStyleBackColor = true;
			//
			// tableLayoutPanel1
			//
			this.tableLayoutPanel1.AutoSize = true;
			this.tableLayoutPanel1.ColumnCount = 1;
			this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel1.Controls.Add(this.tableLayoutPanel3, 0, 5);
			this.tableLayoutPanel1.Controls.Add(this.tableLayoutPanel5, 0, 6);
			this.tableLayoutPanel1.Controls.Add(this.tableLayoutPanel2, 0, 2);
			this.tableLayoutPanel1.Controls.Add(this.SeparationReplacedLbl, 0, 1);
			this.tableLayoutPanel1.Controls.Add(this.SeparationReplacerLbl, 0, 4);
			this.tableLayoutPanel1.Controls.Add(this.tableLayoutPanel4, 0, 3);
			this.tableLayoutPanel1.Controls.Add(this.flowLayoutPanel1, 0, 0);
			this.tableLayoutPanel1.Dock = System.Windows.Forms.DockStyle.Top;
			this.tableLayoutPanel1.Location = new System.Drawing.Point(0, 0);
			this.tableLayoutPanel1.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.tableLayoutPanel1.Name = "tableLayoutPanel1";
			this.tableLayoutPanel1.Padding = new System.Windows.Forms.Padding(4, 10, 4, 4);
			this.tableLayoutPanel1.RowCount = 7;
			this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 50F));
			this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel1.Size = new System.Drawing.Size(842, 411);
			this.tableLayoutPanel1.TabIndex = 0;
			//
			// tableLayoutPanel3
			//
			this.tableLayoutPanel3.AutoSize = true;
			this.tableLayoutPanel3.ColumnCount = 2;
			this.tableLayoutPanel3.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel3.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel3.Controls.Add(this.SeparationReplacerInfo, 0, 0);
			this.tableLayoutPanel3.Controls.Add(this.ReplacerIcon, 0, 0);
			this.tableLayoutPanel3.Dock = System.Windows.Forms.DockStyle.Fill;
			this.tableLayoutPanel3.Location = new System.Drawing.Point(8, 258);
			this.tableLayoutPanel3.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.tableLayoutPanel3.Name = "tableLayoutPanel3";
			this.tableLayoutPanel3.Padding = new System.Windows.Forms.Padding(12, 12, 12, 12);
			this.tableLayoutPanel3.RowCount = 1;
			this.tableLayoutPanel3.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel3.Size = new System.Drawing.Size(826, 92);
			this.tableLayoutPanel3.TabIndex = 10;
			//
			// SeparationReplacerInfo
			//
			this.SeparationReplacerInfo.AutoSize = true;
			this.SeparationReplacerInfo.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SeparationReplacerInfo.Location = new System.Drawing.Point(84, 12);
			this.SeparationReplacerInfo.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.SeparationReplacerInfo.Name = "SeparationReplacerInfo";
			this.SeparationReplacerInfo.Size = new System.Drawing.Size(726, 68);
			this.SeparationReplacerInfo.TabIndex = 5;
			this.SeparationReplacerInfo.Text = "音频：无\r\n视频：无";
			this.SeparationReplacerInfo.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// ReplacerIcon
			//
			this.ReplacerIcon.Dock = System.Windows.Forms.DockStyle.Fill;
			this.ReplacerIcon.Location = new System.Drawing.Point(16, 16);
			this.ReplacerIcon.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.ReplacerIcon.MinimumSize = new System.Drawing.Size(60, 60);
			this.ReplacerIcon.Name = "ReplacerIcon";
			this.ReplacerIcon.Size = new System.Drawing.Size(60, 60);
			this.ReplacerIcon.SizeMode = System.Windows.Forms.PictureBoxSizeMode.StretchImage;
			this.ReplacerIcon.TabIndex = 4;
			this.ReplacerIcon.TabStop = false;
			//
			// tableLayoutPanel5
			//
			this.tableLayoutPanel5.ColumnCount = 2;
			this.tableLayoutPanel5.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 50F));
			this.tableLayoutPanel5.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 50F));
			this.tableLayoutPanel5.Controls.Add(this.SetReplacerBtn, 0, 0);
			this.tableLayoutPanel5.Controls.Add(this.BackToSelect2, 1, 0);
			this.tableLayoutPanel5.Dock = System.Windows.Forms.DockStyle.Fill;
			this.tableLayoutPanel5.Location = new System.Drawing.Point(8, 358);
			this.tableLayoutPanel5.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.tableLayoutPanel5.Name = "tableLayoutPanel5";
			this.tableLayoutPanel5.RowCount = 1;
			this.tableLayoutPanel5.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 50F));
			this.tableLayoutPanel5.Size = new System.Drawing.Size(826, 45);
			this.tableLayoutPanel5.TabIndex = 9;
			//
			// SetReplacerBtn
			//
			this.SetReplacerBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SetReplacerBtn.Location = new System.Drawing.Point(4, 4);
			this.SetReplacerBtn.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.SetReplacerBtn.Name = "SetReplacerBtn";
			this.SetReplacerBtn.Size = new System.Drawing.Size(405, 37);
			this.SetReplacerBtn.TabIndex = 0;
			this.SetReplacerBtn.Text = "将选中的 0 个素材设为替换项";
			this.SetReplacerBtn.UseVisualStyleBackColor = true;
			this.SetReplacerBtn.Click += new System.EventHandler(this.SetReplacerBtn_Click);
			//
			// BackToSelect2
			//
			this.BackToSelect2.Dock = System.Windows.Forms.DockStyle.Fill;
			this.BackToSelect2.Location = new System.Drawing.Point(417, 4);
			this.BackToSelect2.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.BackToSelect2.Name = "BackToSelect2";
			this.BackToSelect2.Size = new System.Drawing.Size(405, 37);
			this.BackToSelect2.TabIndex = 1;
			this.BackToSelect2.Text = "返回 Vegas 选定素材";
			this.BackToSelect2.UseVisualStyleBackColor = true;
			this.BackToSelect2.Click += new System.EventHandler(this.BackToSelect_Click);
			//
			// tableLayoutPanel2
			//
			this.tableLayoutPanel2.AutoSize = true;
			this.tableLayoutPanel2.ColumnCount = 2;
			this.tableLayoutPanel2.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel2.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel2.Controls.Add(this.SeparationReplacedInfo, 0, 0);
			this.tableLayoutPanel2.Controls.Add(this.ReplacedIcon, 0, 0);
			this.tableLayoutPanel2.Dock = System.Windows.Forms.DockStyle.Fill;
			this.tableLayoutPanel2.Location = new System.Drawing.Point(8, 84);
			this.tableLayoutPanel2.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.tableLayoutPanel2.Name = "tableLayoutPanel2";
			this.tableLayoutPanel2.Padding = new System.Windows.Forms.Padding(12, 12, 12, 12);
			this.tableLayoutPanel2.RowCount = 1;
			this.tableLayoutPanel2.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel2.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 68F));
			this.tableLayoutPanel2.Size = new System.Drawing.Size(826, 92);
			this.tableLayoutPanel2.TabIndex = 6;
			//
			// SeparationReplacedInfo
			//
			this.SeparationReplacedInfo.AutoSize = true;
			this.SeparationReplacedInfo.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SeparationReplacedInfo.Location = new System.Drawing.Point(84, 12);
			this.SeparationReplacedInfo.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.SeparationReplacedInfo.Name = "SeparationReplacedInfo";
			this.SeparationReplacedInfo.Size = new System.Drawing.Size(726, 68);
			this.SeparationReplacedInfo.TabIndex = 5;
			this.SeparationReplacedInfo.Text = "已选中 0 个轨道素材，其中 0 个音频剪辑，0 个视频剪辑。";
			this.SeparationReplacedInfo.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// ReplacedIcon
			//
			this.ReplacedIcon.Dock = System.Windows.Forms.DockStyle.Fill;
			this.ReplacedIcon.Location = new System.Drawing.Point(16, 16);
			this.ReplacedIcon.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.ReplacedIcon.MinimumSize = new System.Drawing.Size(60, 60);
			this.ReplacedIcon.Name = "ReplacedIcon";
			this.ReplacedIcon.Size = new System.Drawing.Size(60, 60);
			this.ReplacedIcon.SizeMode = System.Windows.Forms.PictureBoxSizeMode.StretchImage;
			this.ReplacedIcon.TabIndex = 4;
			this.ReplacedIcon.TabStop = false;
			//
			// SeparationReplacedLbl
			//
			this.SeparationReplacedLbl.AutoSize = true;
			this.SeparationReplacedLbl.Location = new System.Drawing.Point(8, 60);
			this.SeparationReplacedLbl.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.SeparationReplacedLbl.Name = "SeparationReplacedLbl";
			this.SeparationReplacedLbl.Size = new System.Drawing.Size(69, 20);
			this.SeparationReplacedLbl.TabIndex = 0;
			this.SeparationReplacedLbl.Text = "被替换项";
			//
			// SeparationReplacerLbl
			//
			this.SeparationReplacerLbl.AutoSize = true;
			this.SeparationReplacerLbl.Location = new System.Drawing.Point(8, 234);
			this.SeparationReplacerLbl.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.SeparationReplacerLbl.Name = "SeparationReplacerLbl";
			this.SeparationReplacerLbl.Size = new System.Drawing.Size(54, 20);
			this.SeparationReplacerLbl.TabIndex = 1;
			this.SeparationReplacerLbl.Text = "替换项";
			//
			// tableLayoutPanel4
			//
			this.tableLayoutPanel4.AutoSize = true;
			this.tableLayoutPanel4.ColumnCount = 2;
			this.tableLayoutPanel4.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 50F));
			this.tableLayoutPanel4.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 50F));
			this.tableLayoutPanel4.Controls.Add(this.SetReplacedBtn, 0, 0);
			this.tableLayoutPanel4.Controls.Add(this.BackToSelect1, 1, 0);
			this.tableLayoutPanel4.Dock = System.Windows.Forms.DockStyle.Fill;
			this.tableLayoutPanel4.Location = new System.Drawing.Point(8, 184);
			this.tableLayoutPanel4.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.tableLayoutPanel4.Name = "tableLayoutPanel4";
			this.tableLayoutPanel4.RowCount = 1;
			this.tableLayoutPanel4.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 50F));
			this.tableLayoutPanel4.Size = new System.Drawing.Size(826, 46);
			this.tableLayoutPanel4.TabIndex = 8;
			//
			// SetReplacedBtn
			//
			this.SetReplacedBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SetReplacedBtn.Location = new System.Drawing.Point(4, 4);
			this.SetReplacedBtn.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.SetReplacedBtn.Name = "SetReplacedBtn";
			this.SetReplacedBtn.Size = new System.Drawing.Size(405, 38);
			this.SetReplacedBtn.TabIndex = 0;
			this.SetReplacedBtn.Text = "将选中的 0 个素材设为被替换项";
			this.SetReplacedBtn.UseVisualStyleBackColor = true;
			this.SetReplacedBtn.Click += new System.EventHandler(this.SetReplacedBtn_Click);
			//
			// BackToSelect1
			//
			this.BackToSelect1.Dock = System.Windows.Forms.DockStyle.Fill;
			this.BackToSelect1.Location = new System.Drawing.Point(417, 4);
			this.BackToSelect1.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.BackToSelect1.Name = "BackToSelect1";
			this.BackToSelect1.Size = new System.Drawing.Size(405, 38);
			this.BackToSelect1.TabIndex = 1;
			this.BackToSelect1.Text = "返回 Vegas 选定素材";
			this.BackToSelect1.UseVisualStyleBackColor = true;
			this.BackToSelect1.Click += new System.EventHandler(this.BackToSelect_Click);
			//
			// flowLayoutPanel1
			//
			this.flowLayoutPanel1.Controls.Add(this.ViewLbl);
			this.flowLayoutPanel1.Controls.Add(this.ViewSelectReplacedRadio);
			this.flowLayoutPanel1.Controls.Add(this.ViewSelectReplacerRadio);
			this.flowLayoutPanel1.Controls.Add(this.ViewSelectOriginalRadio);
			this.flowLayoutPanel1.Dock = System.Windows.Forms.DockStyle.Fill;
			this.flowLayoutPanel1.Location = new System.Drawing.Point(4, 14);
			this.flowLayoutPanel1.Margin = new System.Windows.Forms.Padding(0, 4, 0, 4);
			this.flowLayoutPanel1.Name = "flowLayoutPanel1";
			this.flowLayoutPanel1.Size = new System.Drawing.Size(834, 42);
			this.flowLayoutPanel1.TabIndex = 11;
			//
			// ViewLbl
			//
			this.ViewLbl.AutoSize = true;
			this.ViewLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.ViewLbl.Location = new System.Drawing.Point(4, 0);
			this.ViewLbl.Margin = new System.Windows.Forms.Padding(4, 0, 11, 0);
			this.ViewLbl.Name = "ViewLbl";
			this.ViewLbl.Size = new System.Drawing.Size(39, 32);
			this.ViewLbl.TabIndex = 0;
			this.ViewLbl.Text = "查看";
			this.ViewLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// ViewSelectReplacedRadio
			//
			this.ViewSelectReplacedRadio.AutoSize = true;
			this.ViewSelectReplacedRadio.Dock = System.Windows.Forms.DockStyle.Fill;
			this.ViewSelectReplacedRadio.Location = new System.Drawing.Point(58, 4);
			this.ViewSelectReplacedRadio.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.ViewSelectReplacedRadio.Name = "ViewSelectReplacedRadio";
			this.ViewSelectReplacedRadio.Size = new System.Drawing.Size(90, 24);
			this.ViewSelectReplacedRadio.TabIndex = 1;
			this.ViewSelectReplacedRadio.Text = "被替换项";
			this.ViewSelectReplacedRadio.UseVisualStyleBackColor = true;
			this.ViewSelectReplacedRadio.CheckedChanged += new System.EventHandler(this.ReplacerCombo_SelectedIndexChanged);
			//
			// ViewSelectReplacerRadio
			//
			this.ViewSelectReplacerRadio.AutoSize = true;
			this.ViewSelectReplacerRadio.Dock = System.Windows.Forms.DockStyle.Fill;
			this.ViewSelectReplacerRadio.Location = new System.Drawing.Point(156, 4);
			this.ViewSelectReplacerRadio.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.ViewSelectReplacerRadio.Name = "ViewSelectReplacerRadio";
			this.ViewSelectReplacerRadio.Size = new System.Drawing.Size(75, 24);
			this.ViewSelectReplacerRadio.TabIndex = 2;
			this.ViewSelectReplacerRadio.Text = "替换项";
			this.ViewSelectReplacerRadio.UseVisualStyleBackColor = true;
			this.ViewSelectReplacerRadio.CheckedChanged += new System.EventHandler(this.ReplacerCombo_SelectedIndexChanged);
			//
			// ViewSelectOriginalRadio
			//
			this.ViewSelectOriginalRadio.AutoSize = true;
			this.ViewSelectOriginalRadio.Checked = true;
			this.ViewSelectOriginalRadio.Dock = System.Windows.Forms.DockStyle.Fill;
			this.ViewSelectOriginalRadio.Location = new System.Drawing.Point(239, 4);
			this.ViewSelectOriginalRadio.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.ViewSelectOriginalRadio.Name = "ViewSelectOriginalRadio";
			this.ViewSelectOriginalRadio.Size = new System.Drawing.Size(75, 24);
			this.ViewSelectOriginalRadio.TabIndex = 3;
			this.ViewSelectOriginalRadio.TabStop = true;
			this.ViewSelectOriginalRadio.Text = "选中项";
			this.ViewSelectOriginalRadio.UseVisualStyleBackColor = true;
			this.ViewSelectOriginalRadio.CheckedChanged += new System.EventHandler(this.ReplacerCombo_SelectedIndexChanged);
			//
			// ReplaceClipsForm
			//
			this.AcceptButton = this.OkBtn;
			this.AutoScaleDimensions = new System.Drawing.SizeF(120F, 120F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Dpi;
			this.CancelButton = this.CancelBtn;
			this.ClientSize = new System.Drawing.Size(870, 560);
			this.Controls.Add(this.panel1);
			this.Controls.Add(this.dock);
			this.Font = new System.Drawing.Font("Microsoft YaHei UI", 9F);
			this.Location = new System.Drawing.Point(60, 60);
			this.Margin = new System.Windows.Forms.Padding(5, 5, 5, 5);
			this.MaximizeBox = false;
			this.MinimizeBox = false;
			this.MinimumSize = new System.Drawing.Size(886, 597);
			this.Name = "ReplaceClipsForm";
			this.ShowInTaskbar = false;
			this.StartPosition = System.Windows.Forms.FormStartPosition.Manual;
			this.Text = "替换轨道素材";
			this.FormClosing += new System.Windows.Forms.FormClosingEventHandler(this.ReplaceClipsForm_FormClosing);
			this.dock.ResumeLayout(false);
			this.dock.PerformLayout();
			this.panel1.ResumeLayout(false);
			this.tabs.ResumeLayout(false);
			this.ClassicTab.ResumeLayout(false);
			this.ClassicTab.PerformLayout();
			this.table.ResumeLayout(false);
			this.table.PerformLayout();
			this.SeparationTab.ResumeLayout(false);
			this.SeparationTab.PerformLayout();
			this.tableLayoutPanel1.ResumeLayout(false);
			this.tableLayoutPanel1.PerformLayout();
			this.tableLayoutPanel3.ResumeLayout(false);
			this.tableLayoutPanel3.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.ReplacerIcon)).EndInit();
			this.tableLayoutPanel5.ResumeLayout(false);
			this.tableLayoutPanel2.ResumeLayout(false);
			this.tableLayoutPanel2.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.ReplacedIcon)).EndInit();
			this.tableLayoutPanel4.ResumeLayout(false);
			this.flowLayoutPanel1.ResumeLayout(false);
			this.flowLayoutPanel1.PerformLayout();
			this.ResumeLayout(false);

		}

		#endregion

		private System.Windows.Forms.TableLayoutPanel dock;
		private System.Windows.Forms.Button OkBtn;
		private System.Windows.Forms.Button CancelBtn;
		private System.Windows.Forms.Panel panel1;
		private System.Windows.Forms.TabControl tabs;
		private System.Windows.Forms.TabPage ClassicTab;
		private System.Windows.Forms.TableLayoutPanel table;
		private System.Windows.Forms.Label ClassicReplacerLbl;
		private System.Windows.Forms.Label ReplaceClipsLbl;
		private System.Windows.Forms.Label ClassicReplacedLbl;
		private System.Windows.Forms.TabPage SeparationTab;
		private System.Windows.Forms.ListBox ReplacerCombo;
		private System.Windows.Forms.TableLayoutPanel tableLayoutPanel1;
		private System.Windows.Forms.TableLayoutPanel tableLayoutPanel2;
		private System.Windows.Forms.Label SeparationReplacedInfo;
		private System.Windows.Forms.PictureBox ReplacedIcon;
		private System.Windows.Forms.Label SeparationReplacedLbl;
		private System.Windows.Forms.Label SeparationReplacerLbl;
		private System.Windows.Forms.TableLayoutPanel tableLayoutPanel4;
		private System.Windows.Forms.TableLayoutPanel tableLayoutPanel5;
		private System.Windows.Forms.Button SetReplacerBtn;
		private System.Windows.Forms.Button BackToSelect2;
		private System.Windows.Forms.Button SetReplacedBtn;
		private System.Windows.Forms.Button BackToSelect1;
		private System.Windows.Forms.TableLayoutPanel tableLayoutPanel3;
		private System.Windows.Forms.Label SeparationReplacerInfo;
		private System.Windows.Forms.PictureBox ReplacerIcon;
		private System.Windows.Forms.CheckBox UseTrackEventGroupCheck;
		private System.Windows.Forms.FlowLayoutPanel flowLayoutPanel1;
		private System.Windows.Forms.Label ViewLbl;
		private System.Windows.Forms.RadioButton ViewSelectReplacedRadio;
		private System.Windows.Forms.RadioButton ViewSelectReplacerRadio;
		private System.Windows.Forms.RadioButton ViewSelectOriginalRadio;
		private System.Windows.Forms.CheckBox ReserveOriginalNameCheck;
	}

	public partial class ReplaceClipsForm : Form, IInterpret, IConfigIniUser {
		private readonly EntryPoint parent;
		private readonly TrackEvent[] events;
		private Vegas vegas { get { return parent.vegas; } }
		private ConfigIni configIni { get { return parent.configIni; } }
		private List<ValidTrack> validTracks;
		private int suggestTrack = 0;
		private SeparationSpecifier separation;
		private bool requestClearAllReplacementTag = true;
		public ReplaceClipsForm(EntryPoint entryPoint) {
			InitializeComponent();
			parent = entryPoint;
			Icon = ConfigForm.icon;
			this.ReserveSystemMenuItems(SystemMenuItemType.MOVE | SystemMenuItemType.SIZE | SystemMenuItemType.CLOSE);
			((Action)ReadIni).OnErrorBreak();
			Translate();
			events = parent.GetSelectedEvents();
			separation = new SeparationSpecifier(this);
			if (!FindReplacer() || validTracks.Count == 0) {
				EntryPoint.ShowError(new Exceptions.FailToSelectClipsException());
				Close();
			}
			if (requestClearAllReplacementTag) separation.ClearAllReplacementTag();
			UpdateSeparationInfo();
			UseTrackEventGroupCheck.CheckedChanged += (sender, e) => UpdateSeparationInfo();
		}

		private void CancelBtn_Click(object sender, EventArgs e) {
			Close();
		}

		private void OkBtn_Click(object sender, EventArgs e) {
			bool reserve = ReserveOriginalNameCheck.Checked;
			if (IsClassicTab) { // 同时指定
				ValidTrack replacerEvent = validTracks[ReplacerCombo.SelectedIndex];
				DoReplace(events, replacerEvent.LastSelectedAudioEvent, replacerEvent.LastSelectedVideoEvent, reserve);
			} else if (IsSeparationTab) { // 分别指定
				EntryPoint.EventSet replacer = separation.Replacer;
				DoReplace(separation.Replaced, replacer.audioEvent, replacer.videoEvent, reserve);
			}
			ResetSelect();
			Close();
		}

		private bool IsClassicTab { get { return tabs.SelectedTab == ClassicTab; } }
		private bool IsSeparationTab { get { return tabs.SelectedTab == SeparationTab; } }

		/// <summary>
		/// 执行替换轨道素材的主函数。
		/// </summary>
		/// <param name="replaced">被替换项的数组。</param>
		/// <param name="replacerAudio">替换项的音频部分。</param>
		/// <param name="replacerVideo">替换项的视频部分。</param>
		/// <param name="reserveClipName">保留原剪辑名称。</param>
		public static void DoReplace(TrackEvent[] replaced, AudioEvent replacerAudio, VideoEvent replacerVideo, bool reserveClipName = true) {
			foreach (TrackEvent trackEvent in replaced) {
				if (trackEvent == replacerAudio || trackEvent == replacerVideo) continue;
				Take expectTake;
				if (trackEvent.MediaType == MediaType.Video && replacerVideo != null)
					expectTake = replacerVideo.ActiveTake;
				else if (trackEvent.MediaType == MediaType.Audio && replacerAudio != null)
					expectTake = replacerAudio.ActiveTake;
				else continue;
				string name = trackEvent.ActiveTake.Name;
				trackEvent.Takes.Remove(trackEvent.ActiveTake);
				trackEvent.AddTake(expectTake.MediaStream, true);
				trackEvent.ActiveTake.Offset = expectTake.Offset;
				if (reserveClipName) trackEvent.ActiveTake.Name = name;
			}
		}

		#region 同时指定部分
		private class ValidTrack {
			private ReplaceClipsForm form;
			public Track Track;
			public List<TrackEvent> SelectedEvents = new List<TrackEvent>();
			public int TrackIndex { get { return Track.Index; } }
			public int SelectedEventsCount { get { return SelectedEvents.Count; } }
			public TrackEvent LastSelectedEvent = null;
			public VideoEvent LastSelectedVideoEvent = null;
			public AudioEvent LastSelectedAudioEvent = null;
			public ValidTrack(Track track, ReplaceClipsForm form) {
				Track = track;
				this.form = form;
				foreach (TrackEvent trackEvent in track.Events)
					if (trackEvent.Selected)
						SelectedEvents.Add(trackEvent);
				if (SelectedEventsCount != 0) {
					LastSelectedEvent = SelectedEvents[SelectedEventsCount - 1];
					if (LastSelectedEvent.MediaType == MediaType.Video) LastSelectedVideoEvent = LastSelectedEvent as VideoEvent;
					if (LastSelectedEvent.MediaType == MediaType.Audio) LastSelectedAudioEvent = LastSelectedEvent as AudioEvent;
					if (LastSelectedEvent.IsGrouped && form.UseTrackEventGroupCheck.Checked) {
						foreach (TrackEvent trackEvent in LastSelectedEvent.Group) {
							if (trackEvent == LastSelectedEvent) continue;
							if (LastSelectedEvent.MediaType == MediaType.Video && trackEvent.MediaType == MediaType.Audio) {
								LastSelectedAudioEvent = trackEvent as AudioEvent;
								break;
							}
							if (LastSelectedEvent.MediaType == MediaType.Audio && trackEvent.MediaType == MediaType.Video) {
								LastSelectedVideoEvent = trackEvent as VideoEvent;
								break;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// 查找用于替换的素材。
		/// </summary>
		/// <returns>返回是否成功找到。理论上不应该返回 false。</returns>
		private bool FindReplacer() {
			validTracks = new List<ValidTrack>();
			foreach (Track track in vegas.Project.Tracks) {
				ValidTrack validTrack = new ValidTrack(track, this);
				if (validTrack.SelectedEventsCount != 0) validTracks.Add(validTrack);
			}
			if (validTracks.Count == 0) return false;
			#region 去重
			/* var isEqualToTake = new Func<TrackEvent, TrackEvent, bool>((event1, event2) => {
				Take take1 = event1.ActiveTake, take2 = event2.ActiveTake;
				if (take1 == null || take2 == null) return true;
				return take1.Media == take2.Media && take1.Offset == take2.Offset;
			});
			for (int i = 1; i < validTracks.Count; i++)
				for (int j = 0; j < i; j++)
					if (isEqualToTake(validTracks[j].LastSelectedEvent, validTracks[i].LastSelectedEvent))
						validTracks.RemoveAt(i--); */
			var isEqualToTake2 = new Func<AudioEvent, VideoEvent, AudioEvent, VideoEvent, bool>((ae1, ve1, ae2, ve2) => {
				if (ae1 == null || ae2 == null) {
					if (ve1 == null || ve2 == null || ve1.ActiveTake == null || ve2.ActiveTake == null) return false;
					return ve1.ActiveTake.Media == ve2.ActiveTake.Media && ve1.ActiveTake.Offset == ve2.ActiveTake.Offset;
				} else if (ve1 == null || ve2 == null) {
					if (ae1 == null || ae2 == null || ae1.ActiveTake == null || ae2.ActiveTake == null) return false;
					return ae1.ActiveTake.Media == ae2.ActiveTake.Media && ae1.ActiveTake.Offset == ae2.ActiveTake.Offset;
				} else {
					if (ae1 == null || ae2 == null || ve1 == null || ve2 == null ||
						ae1.ActiveTake == null || ae2.ActiveTake == null || ve1.ActiveTake == null || ve2.ActiveTake == null) return false;
					return ae1.ActiveTake.Media == ae2.ActiveTake.Media && ae1.ActiveTake.Offset == ae2.ActiveTake.Offset &&
						ve1.ActiveTake.Media == ve2.ActiveTake.Media && ve1.ActiveTake.Offset == ve2.ActiveTake.Offset;
				}
			});
			for (int i = 1; i < validTracks.Count; i++)
				for (int j = 0; j < i; j++)
					if (isEqualToTake2(validTracks[j].LastSelectedAudioEvent, validTracks[j].LastSelectedVideoEvent,
						validTracks[i].LastSelectedAudioEvent, validTracks[i].LastSelectedVideoEvent))
						validTracks.RemoveAt(i--);
			if (validTracks.Count == 0) return false;
			#endregion
			int minCount = int.MaxValue;
			foreach (ValidTrack track in validTracks)
				if (track.SelectedEventsCount < minCount) minCount = track.SelectedEventsCount;
			if (minCount == int.MaxValue) return false;
			List<int> minCountTracks = new List<int>();
			for (int i = 0; i < validTracks.Count; i++)
				if (validTracks[i].SelectedEventsCount == minCount) minCountTracks.Add(i);
			if (minCountTracks.Count == 0) return false;
			else if (minCountTracks.Count == 1) suggestTrack = minCountTracks[0];
			else {
				double lastEventStart = -1;
				int lastEventIndex = -1;
				foreach (int i in minCountTracks) {
					TrackEvent lastEvent = validTracks[i].LastSelectedEvent;
					if (lastEvent == null) return false;
					double start = lastEvent.Start.ToMilliseconds();
					if (start > lastEventStart) {
						lastEventStart = start;
						lastEventIndex = i;
					}
				}
				if (lastEventStart == -1 || lastEventIndex == -1) return false;
				suggestTrack = lastEventIndex;
			}
			foreach (ValidTrack track in validTracks) {
				TrackEvent lastEvent = track.LastSelectedEvent;
				ReplacerCombo.Items.Add(string.Format("{5} {0:D}{4}{1}{3}{2}", track.TrackIndex, lastEvent.Start.ToString(), lastEvent.ActiveTake.Name, Lang.str.semicolon, Lang.str.colon, Lang.str.track));
			}
			ReplacerCombo.SelectedIndex = suggestTrack;
			return true;
		}

		private void SelectNone() {
			parent.SelectNoneEvents();
		}

		private void ResetSelect() {
			SelectNone();
			foreach (TrackEvent trackEvent in events)
				trackEvent.Selected = true;
		}

		private void SelectSpecifiedEvents(ValidTrack track) {
			SelectNone();
			if (track.LastSelectedVideoEvent != null) track.LastSelectedVideoEvent.Selected = true;
			if (track.LastSelectedAudioEvent != null) track.LastSelectedAudioEvent.Selected = true;
		}

		private void SelectSpecifiedEvents(TrackEvent[] events) {
			SelectNone();
			foreach (TrackEvent trackEvent in events)
				if (trackEvent != null)
					trackEvent.Selected = true;
		}

		private void SelectSpecifiedEvents(EntryPoint.EventSet eventSet) {
			TrackEvent[] events = { eventSet.audioEvent, eventSet.videoEvent };
			SelectSpecifiedEvents(events);
		}

		private void ReplacerCombo_SelectedIndexChanged(object sender, EventArgs e) {
			if (IsClassicTab) {
				int index = ReplacerCombo.SelectedIndex;
				ValidTrack track = validTracks[index];
				ClassicReplacedLbl.Text = string.Format(Lang.str.replaced_info, CountRemainEvents(track));
				SelectSpecifiedEvents(track);
				vegas.Transport.CursorPosition = track.LastSelectedEvent.Start.FixToFrame();
				vegas.Transport.ViewCursor(true);
				OkBtn.Enabled = ReplacerCombo.Items.Count > 0;
			} else if (IsSeparationTab) {
				SetReplacedBtn.Text = string.Format(Lang.str.separation_set_replaced, events.Length);
				SetReplacerBtn.Text = string.Format(Lang.str.separation_set_replacer, events.Length);
				if (ViewSelectOriginalRadio.Checked) SelectSpecifiedEvents(events);
				else if (ViewSelectReplacedRadio.Checked) SelectSpecifiedEvents(separation.Replaced);
				else if (ViewSelectReplacerRadio.Checked) SelectSpecifiedEvents(separation.Replacer);
				OkBtn.Enabled = IsSeparationReplacedOk && IsSeparationReplacerOk;
			}
			vegas.UpdateUI();
		}

		private int CountRemainEvents(ValidTrack replacer) {
			List<TrackEvent> remainEvents = new List<TrackEvent>();
			foreach (TrackEvent trackEvent in events) {
				if (trackEvent == replacer.LastSelectedAudioEvent || trackEvent == replacer.LastSelectedVideoEvent) continue;
				remainEvents.Add(trackEvent);
			}
			return remainEvents.Count;
		}
		#endregion

		public void Translate() {
			Lang str = Lang.str;
			Font = new Font(str.ui_font, 9F);
			OkBtn.Text = str.replace;
			CancelBtn.Text = str.close;
			ClassicReplacerLbl.Text = str.replacer_is;
			ReplaceClipsLbl.Text = str.replacer_info;
			ClassicReplacedLbl.Text = str.replaced_info;
			Text = str.replace_clips;
			ClassicTab.Text = str.replacements_classic_specify;
			SeparationTab.Text = str.replacements_separation_specify;
			SeparationReplacedLbl.Text = str.replaced_label;
			SeparationReplacerLbl.Text = str.replacer_label;
			BackToSelect1.Text = BackToSelect2.Text = str.separation_back_to_select;
			UseTrackEventGroupCheck.Text = str.separation_use_clip_group;
			ReserveOriginalNameCheck.Text = str.separation_reserve_original_name;
			SeparationReplacedInfo.Text = str.separation_replaced_info;
			SeparationReplacerInfo.Text = str.audio + str.colon + str.none + '\n' + str.video + str.colon + str.none;
			SetReplacedBtn.Text = str.separation_set_replaced;
			SetReplacerBtn.Text = str.separation_set_replacer;
			ViewLbl.Text = str.view;
			ViewSelectReplacedRadio.Text = str.replaced_label;
			ViewSelectReplacerRadio.Text = str.replacer_label;
			ViewSelectOriginalRadio.Text = str.selected_items;
		}

		#region 分别指定部分
		private void BackToSelect_Click(object sender, EventArgs e) {
			parent.configForm.CloseAfterOpenHelperCheck.Checked = true;
			OpenToolDirectlyNext = true;
			Close();
		}

		private bool OpenToolDirectlyNext = false;

		private void SetReplacedBtn_Click(object sender, EventArgs e) {
			separation.Replaced = events;
			UpdateSeparationInfo();
			ReplacerCombo_SelectedIndexChanged(null, null);
			(sender as Button).Enabled = false;
		}

		private void SetReplacerBtn_Click(object sender, EventArgs e) {
			separation.SetReplacer(events);
			UpdateSeparationInfo();
			ReplacerCombo_SelectedIndexChanged(null, null);
			(sender as Button).Enabled = false;
		}

		[DllImport("user32.dll", CharSet = CharSet.Auto)]
		private static extern bool MessageBeep(uint type);

		[DllImport("Shell32.dll")]
		public static extern int ExtractIconEx(string libName, int iconIndex, IntPtr[] largeIcon, IntPtr[] smallIcon, int nIcons);

		public static Icon LoadIconFromLib(int index, string libName = "imageres.dll") {
			IntPtr[] largeIcon = new IntPtr[1], smallIcon = new IntPtr[1];
			ExtractIconEx(libName, index, largeIcon, smallIcon, 1);
			Icon ic = Icon.FromHandle(largeIcon[0]);
			return ic;
		}

		private enum IconType {
			CROSS, CHECK
		}

		private Image GetIcon(IconType iconType) {
			return iconType == IconType.CROSS ? ImageBase64.GetImage(ImageBase64.CrossIcon) :
				iconType == IconType.CHECK ? ImageBase64.GetImage(ImageBase64.CheckIcon) :
				null;
		}

		private class SeparationSpecifier {
			private readonly ReplaceClipsForm form;
			private EntryPoint parent { get { return form.parent; } }
			private Vegas vegas { get { return form.vegas; } }
			private static readonly Guid _GUID = Guid.Parse("2671A8C8-FDB1-4653-8C79-5B91A0CCFD1E");
			public static Guid REPLACEMENT_TAG_GUID { get { return _GUID; } }
			public SeparationSpecifier(ReplaceClipsForm form) { this.form = form; }
			private bool UseTrackEventGroup { get { return form.UseTrackEventGroupCheck.Checked; } }
			// 此处不可以使用枚举类型来替代。
			private const int INVALID_TAG = 0;
			private const int REPLACED_TAG = 1;
			private const int REPLACER_TAG = 2;
			public TrackEvent[] Replaced {
				get {
					return GetSpecifiedReplacement(REPLACED_TAG);
				}
				set {
					DeleteSpecifiedReplacement(REPLACED_TAG);
					Action<TrackEvent> SetTag = @event => @event.CustomData.SetObject(REPLACEMENT_TAG_GUID, REPLACED_TAG);
					foreach (TrackEvent trackEvent in value) {
						SetTag(trackEvent);
						if (trackEvent.IsGrouped && UseTrackEventGroup)
							foreach (TrackEvent trackEventInGroup in trackEvent.Group)
								SetTag(trackEventInGroup);
					}
				}
			}
			public EntryPoint.EventSet Replacer {
				get {
					return new EntryPoint.EventSet(GetSpecifiedReplacement(REPLACER_TAG), false); // 尤其注意这里是 false 而不是 UseTrackEventGroup
				}
				set {
					DeleteSpecifiedReplacement(REPLACER_TAG);
					foreach (TrackEvent trackEvent in new TrackEvent[] { value.audioEvent, value.videoEvent })
						if (trackEvent != null)
							trackEvent.CustomData.SetObject(REPLACEMENT_TAG_GUID, REPLACER_TAG);
				}
			}
			public void SetReplacer(EntryPoint.EventSet value) {
				Replacer = value;
			}
			public void SetReplacer(TrackEvent[] events) {
				Replacer = new EntryPoint.EventSet(events, UseTrackEventGroup);
			}
			private TrackEvent[] GetSpecifiedReplacement(int replacementTag) {
				List<TrackEvent> replacements = new List<TrackEvent>();
				foreach (TrackEvent trackEvent in parent.GetAllEvents()) {
					object replacement = trackEvent.CustomData.GetObject(REPLACEMENT_TAG_GUID);
					if (replacement is int && (int)replacement == replacementTag)
						replacements.Add(trackEvent);
				}
				return replacements.ToArray();
			}
			private void DeleteSpecifiedReplacement(int replacementTag) {
				foreach (TrackEvent trackEvent in parent.GetAllEvents()) {
					object replacement = trackEvent.CustomData.GetObject(REPLACEMENT_TAG_GUID);
					if (replacement != null && replacement is int && (int)replacement == replacementTag)
						trackEvent.CustomData.DeleteData(REPLACEMENT_TAG_GUID);
				}
			}
			public void ClearAllReplacementTag() {
				ClearAllReplacementTag(parent);
			}

			// 在未实例化对象外使用。
			public static void ClearAllReplacementTag(EntryPoint ep) {
				foreach (TrackEvent trackEvent in ep.GetAllEvents())
					if (trackEvent.CustomData.GetObject(REPLACEMENT_TAG_GUID) != null)
						trackEvent.CustomData.DeleteData(REPLACEMENT_TAG_GUID);
			}
		}

		private void UpdateSeparationReplacedInfo() {
			TrackEvent[] replaceds = separation.Replaced;
			EntryPoint.CountEventsType counts = new EntryPoint.CountEventsType(replaceds);
			SeparationReplacedInfo.Text = string.Format(Lang.str.separation_replaced_info, counts.count, counts.audioCount, counts.videoCount);
			IsSeparationReplacedOk = counts.count > 0;
		}

		private void UpdateSeparationReplacerInfo() {
			EntryPoint.EventSet replacers = separation.Replacer;
			string audioName = Lang.str.none, videoName = Lang.str.none;
			if (replacers.audioEvent != null) audioName = replacers.audioEvent.ActiveTake.Name;
			if (replacers.videoEvent != null) videoName = replacers.videoEvent.ActiveTake.Name;
			SeparationReplacerInfo.Text = Lang.str.audio + Lang.str.colon + audioName + '\n' + Lang.str.video + Lang.str.colon + videoName;
			IsSeparationReplacerOk = replacers.audioEvent != null && replacers.videoEvent != null;
		}

		private bool _isSeparationReplacedOk = false;
		private bool IsSeparationReplacedOk {
			get { return _isSeparationReplacedOk; }
			set {
				_isSeparationReplacedOk = value;
				ReplacedIcon.Image = GetIcon(value ? IconType.CHECK : IconType.CROSS);
			}
		}
		private bool _isSeparationReplacerOk = false;
		private bool IsSeparationReplacerOk {
			get { return _isSeparationReplacerOk; }
			set {
				_isSeparationReplacerOk = value;
				ReplacerIcon.Image = GetIcon(value ? IconType.CHECK : IconType.CROSS);
			}
		}

		private void ExamineSetSelectEnable() {
			// HashSet 不知道为啥反正就是用不了。
			TrackEvent[] selected = UseTrackEventGroupCheck.Checked ? parent.AppendGroupedEvents(events) : events;
			SetReplacedBtn.Enabled = !CompareList(new List<TrackEvent>(selected), new List<TrackEvent>(separation.Replaced));
			EntryPoint.EventSet settedSet = separation.Replacer; // set 的过去式理应不变形但是那样无法体现功能。
			EntryPoint.EventSet settingSet = new EntryPoint.EventSet(events, UseTrackEventGroupCheck.Checked);
			SetReplacerBtn.Enabled = settedSet.audioEvent != settingSet.audioEvent || settedSet.videoEvent != settingSet.videoEvent;
		}

		/// <summary>
		/// 列表去重。
		/// </summary>
		/// <typeparam name="T">列表类型。</typeparam>
		/// <param name="list">列表。</param>
		/// <param name="modify">是否修改原列表。</param>
		/// <returns>去重后的列表。</returns>
		public static List<T> DistinctList<T>(List<T> list, bool modify = true) where T : class {
			List<T> dealt = new List<T>();
			for (int i = 0; i < list.Count; i++) {
				bool isSame = false;
				for (int j = i + 1; j < list.Count; j++)
					if (list[j] == list[i]) {
						isSame = true;
						break;
					}
				if (!isSame) dealt.Add(list[i]);
			}
			if (modify) {
				list.Clear();
				list.AddRange(dealt);
			}
			return dealt;
		}

		/// <summary>
		/// 判断两个列表内元素是否相等。不计顺序及重复。
		/// </summary>
		/// <typeparam name="T">列表类型。</typeparam>
		/// <param name="list1">列表 1。</param>
		/// <param name="list2">列表 2。</param>
		/// <returns>是否相等。</returns>
		public static bool CompareList<T>(List<T> list1, List<T> list2) where T : class {
			list1 = DistinctList(list1, false);
			list2 = DistinctList(list2, false);
			if (list1.Count != list2.Count) return false;
			foreach (T item in list1)
				if (!list2.Contains(item))
					return false;
			return true;
		}

		private void UpdateSeparationInfo() {
			UpdateSeparationReplacedInfo();
			UpdateSeparationReplacerInfo();
			ExamineSetSelectEnable();
		}
		#endregion

		public void SaveIni() {
			configIni.StartSection("ReplaceClips");
			configIni.Write("Mode", tabs.SelectedIndex);
			configIni.Write("UseTrackEventGroup", UseTrackEventGroupCheck.Checked);
			configIni.Write("OpenToolDirectlyNext", OpenToolDirectlyNext);
			configIni.Write("ReserveOriginalName", ReserveOriginalNameCheck.Checked);
			configIni.EndSection();
		}

		public void ReadIni() {
			configIni.StartSection("ReplaceClips");
			int startMode = configIni.Read("Mode", DEFAULT_START_MODE);
			if (startMode != 0 && startMode != 1) startMode = DEFAULT_START_MODE;
			tabs.SelectedIndex = startMode;
			UseTrackEventGroupCheck.Checked = configIni.Read("UseTrackEventGroup", true);
			if (configIni.Read("OpenToolDirectlyNext", false))
				requestClearAllReplacementTag = false;
			configIni.Write("OpenToolDirectlyNext", false);
			ReserveOriginalNameCheck.Checked = configIni.Read("ReserveOriginalName", false);
			configIni.EndSection();
		}

		private const int DEFAULT_START_MODE = 1;

		private void ReplaceClipsForm_FormClosing(object sender, FormClosingEventArgs e) {
			if (!OpenToolDirectlyNext) {
				bool cancel = false;
				if (IsSeparationReplacedOk || IsSeparationReplacerOk)
					e.Cancel = cancel = MessageBoxEx.Show(Lang.str.replace_clips_form_ensure_to_close, "", MessageBoxButtons.OKCancel, new string[] { Lang.str.exit, Lang.str.cancel }, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button2) != DialogResult.OK;
				if (!cancel) separation.ClearAllReplacementTag();
			}
			ResetSelect();
			SaveIni();
		}
	}

	/// <summary>
	/// Base64 图片操作类。
	/// </summary>
	public static class ImageBase64 {
		/// <summary>
		/// 根据 Base64 编码获得 <see cref="Image"/> 类型图片。
		/// </summary>
		/// <param name="base64">Base64 编码字符串。</param>
		/// <returns><see cref="Image"/> 类型图片。</returns>
		public static Image GetImage(string base64) {
			byte[] buffer = Convert.FromBase64String(base64);
			using (MemoryStream memory = new MemoryStream(buffer)) {
				return Image.FromStream(memory);
			}
		}

		/// <summary>
		/// 根据 Base64 编码获得 <see cref="Icon"/> 类型图标。
		/// </summary>
		/// <param name="base64">Base64 编码字符串。</param>
		/// <returns><see cref="Icon"/> 类型图标。</returns>
		public static Icon GetIcon(string base64) {
			byte[] buffer = Convert.FromBase64String(base64);
			using (MemoryStream memory = new MemoryStream(buffer)) {
				return new Icon(memory, new Size(16, 16));
			}
		}

		#region 一堆数据
		public const string CrossIcon = "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAAEnQAABJ0Ad5mH3gAABR5SURBVHhe1ZvpV1ZXlsZZS5mnV0BBmV4wvVZ/rNZEcWAUBVEZHBEFyVRVqR6S/0A/V1fHpKq766N/gv0fEEcUZXAEma4CDqCJ/alSlQ/n1H723ufc++KLdiomlb5rPetckpV3vb/9PHufcy8k5ce+gu54fLp3Y3/QW302OFl9fravanT2RFUwe7LK0mp0tTMn4sHsifjAdE/8/FRP/MzUsfKOcfpv9WP+f11Bb7w+OPXO2dneqiDoe8fO9lZbKoCdPQkp+Ik4a6Ynbklm5nilIXg7fTxup7orSRWyHqscnTpafnbqcFmDfvzP8wr647Ggr/o0KSBYA2gvBicBHLDseJVlYAj33ZVm6nilFOBYhVHh3lIBzNTRCjt5tCKYPFLaP95Z8vNJRtDpwN95qU6boG8jnOZ4w/lHfdV2/lS1fdpfbZ69X2UXoQ+q7NIHcbP4ftwuvR83z/rj9smpuH3cW2kfnai0s1QMwE9CgD9Sbh+QaDW0Bg8Ol53+uxfiUd8/fEqw3zAwiZ0HNN0vnAJstVn8sNo+/2ijXcL6QZVZYvBQKACrv9Lr2Smowj7rq7BPTlaYoLvcTB6VAhC46FCpGT+4IaD1lH6dn+4K+v8xHvRuHGC3T2rcKeJzpzbax+9X2yUCfv5RtXn+IQETOMtDxw0cRwIW3w+hQ3gCJy1qAVi95eZpb7mdO15mqAXMxKFS++AgF8BOHNzAhfjJ0iCuV4vrvVC1fUh69iGgHXh1IviHVaH7zvGo6+y4wC/2lRsHDmiCp7WM9exkmXl6sszOdZeaycOldqJrvZnoogJ0bbDjneu/udtZ0q9f88e5MNnJeXJc4GfI9YV+giZghldwWQnaFQCOJ4CTTlUaga8wLu7iukBj5QIotNeJUvPkRKl90lNqZ49usPe7Su39Tlo719t7pPH2ktP6dd/uRXE/51yfkWEnrn/MrovbLBf10HVAL/UDONF1Vl9YAIEnYAeu67MTZQzN8AQOPe3ZQPcb7MJxaoMugu8oEbUXm3sHSs7p134712xf9Sim+oy6ThPdoM+XCFzcV3gBDwcdOc/uA1wiz667PpfIVzCoxD0Cr26TFFbAAf3k+HqGf3x8Pe7tQvd6O3WwxDB8O4pAeltFmDm18RygsYfP0IRf6CdQBZe4J052dltXByzQ0QEH59HrBOsiz0WQmIvbXAC+l8gTOMOLGL57vXlM8E+OlfA6c7DE3j1QbO/uX2fuYN237ocVgcBPA94VwMG7uKPHEXPZ0xXeuc4FIFGP85BDj5Pbrs/ZaV1ZkT5/xs7TfQ8ir+AReLgOYIbHeqyEtXC02M50FZs7KMD+YntnH61t6/62mUDb26fiOhWATmq0r3Ovc19zARja9zjDw/GI8+K69rnrcXVcwENolnPdRT0BPHScYA27ruAsgl84QqJ1qnMd4Fm3962lJJR8v7MCHkIo7i/5yNpTZebpJBeJuxRAnX6lAAoeDje3rTG49LsHJqfDe++4G3DJ4i7AxYaAWQCGHh9ZZxaOrLPzqgcda+3tNipA21p7a2/Ry9HW2P/9nEAPJwHBm+kTcsBZ/MA7nhB1Bx6d7onwKh1urzhOcj3Ozh8ncEjhZcjRqnGPOu7AWQS8cFgKwEU4vM7OHYLzRQZFuLV3rR3bWzSgeK+/Jnvi/fxw0lNlp0jc3wrP9+K8B38GcECzBNz1fGLc6R7T3bnuwJ3bTjThAc79jajTugBgheYCiNseWKDXUhHWmnkCd3rYVWQAzwVoLbKjews+U8zkF6JPT2cBPZEZwM/1csQTY+4dh8T1pOAkD40CONepz8PJDoXgDA9wN+TUbY67rt5xD67y4EVUhCI7f5DWg0V2cn+hATyrhVqhIRZT3Fcviv5pPJICfpbkejxaAA9N4rgD3kVdwdHr7LxAL+vzDby3vwLuoNX5KDw77+IeKYDAO2he7RxBA37uYKGd6yo0j7oK7e3WAoIvtKNQc0HyXYHdPx4PpvBc3l1pF/p0Swsnu7pNP7vjq+9z2dPZcfR7FJrBSYh6xPWn1OsJwy10nOAJ+pjG3bvO4AbQAk+RP4TIK/zBQnYccvAkO9dZYKcOFNqxPQRPGmsp+CZpCia74/2AnyT4mW7aryXuy+HZdY57ZLon9HgCuBxoEqOuArh3Xd0meHbbgaPP1XFMdh502ucKz46z6wQccV5E8CSDFSkYoQKM7C5InoJJcp9kHxyrtPO9gNZtjRyX/pYDDcAdvAfHqtDf/PEz+5f/fWH//GTWfv3HT7kIbrIzsAp97k5wCs/iAvCAE/AXf/gX/rxvH8/YF7//ZwJ3jgPWFaCQC8CwAm4eEfSjDi4ArWvsg31UAIIfbsa6ZlSx5ZrqjjcAHMK7uMS4SwHCuIvr3OdYE3vcfEvg3333ndfX//1v4jw57uKuCSDgcD9HjztF4aOfhUIAPIRX8NBxvnfwAJ/D2h4zDw/EqA1QgDWsGw2x8B3jZHfFuQdHKywU9Dh4cpzWBHh2m4D5+Tx0XeBJ1Of4ktEvDX39X1QE3+sadY25i/vjo+Q+Yq5aDg8hBYg997mDjsJ3rGGx81jb1xC8CAW430rwu1TNsbOKTwU4VjEC+AnS4z6F9m5DEnO4vhzcHWLcZIfjy7849PV//qvEPBJ57m8nBi/m4YaoJ/uM51/+hl1fDh66DXgChsj1RwfEeVG+nWrLt8NNMXOzideA4TH9Hxyl+B+p4ATIoGNo6XUBF+cVWg40Co9tTQ8zmOzY0uB4MgAugos8CqDQvGK4vQE+wXnEnOQcZ2AGV8fbHbjAP9yfb4O2PDO8K2ZvNpEa8w3vBg+OlndOEPz4kXI7fcxNdpLs5ew4CuBdBzSvmO7Uy1FF9nPAJgNBtBMGHU123tpIr3Xeua3gDM8FEPcBzEXgAiSCM/y+PPuQNNacb280khryzVBDbn/K+OGK0xOHy8344TL78Hg06uE7OAw3By97uQPWYyxvbQJOzrrJbl5bBAWXg8wbYq+uO2jnPKs97PXQcSrG/nzD8PvydOV7e3e3FGCoIQ/6IuX+kbLzgL9/qNTO9yQOuIQCMLhEnvd1gebI++neDXjpb2xxGHTJhhkEYDm9vQb+C4LHcHPQWF2Puz6H89Trrt8DdZzBSXCe1Qbl2vGWPHujPs9QAuxQfe65lInDZaPjh8vt+KFyFIChl21trzrPrpPLup8zdHiYEelwe3yk2Lz4Q3JAgD9fEf4TAtZex1THCrcJnF2PQBMwrRRzhde4C3xbrlFxAaZbcs1QPaWgntfRlPsHS4NxfsdeZh7T83gCOH7mVaMehUfM4To5zQcaN9jcVIf0iQ1RX6kIycTwiLz2t3ebV4k6F4B7XR1P6rpAQ7N7c1jTrTl2qI7gRbNUAIo/6V6XG27qNjsursPppxx3fUZ30FHHFR6FcOAOHhMeR9fnX765CM+//IQj73scU16nejjcUABxXeFD6NB1As61D/fmGgfPas221+ty7XVKwbXaXJtyD/Cku514E6Pv3Bk+dDx6dEWf8ylOHE9wnWPvtjWGpx7XIacHGPPi978xycAhdh7A7DpHPpTGPQLOww3Ay12fhet7cwgcK/1Mrs8QOOBnW7LN9dpc0c4ckwJwCAnwDy0YcBFwXjHoxGnvvI86g7PrGnm8nKAi+Kc1Ob3hiQ1TPRk8hAJEI8/AcN1FPRJ39LuHjoIzfBh5wHMBWrK94Py12hx7bUe2SbnXscHc7aAidBAkQa/8mCo97uX2cXWbn9Sc6+K4PLRADF/EW1oy8KiWzv6aHU88yEgBgv2JbkcGnRRAoYPWHCPOe9fZ+Zk9WXwvBSDtzKEW6NgQuBQsdPOAi2xr3nVW6HYI7vdyuK6OyxObntnl9EbOf5IUOJmWPv+VQEf3cshFftlkR9RDt7NNMtcBjgJMNWeaaztz7SDB0zqbcrd9/QjJ3D5QYuePqesSc4HX6c79TXJvXzX2Ecchgo6Cq1ZyfumLX7PjSf/d2V8JvMo5rvAadXLaOU/AcB5OqwQeru/JYvehiV1ZBtG/uiPbXt2ePZpy+8D687fb11to9hCgE6PuXffAiDtNdZ3sYdwFXOD1vE5aEV6jjh5fsQj/8ctIj+eFPR4tgHdc4h51m7U7k+Azsdpp0r3GLDu4Iwfw9sq2rP9JIfCzXID9xWaya2Vwlr6R4QGHhxff5wCXV1JwnFc6wWGoJQWLwLsJv/T5CkX4HRWBT3Gk6JamMWehvxXcuY0VwFwAqDnDTDdn2LH6LMAbFGCwJus0JaCkH/GHxtsp4ivAS58zuMadJLACTm478Pk3wbsTnJPGfOnzXybdIhe5COGQkwIwMEWdgFsE2Dk/u0dWFGC6Gcrw642dVIBtWVyAi1uyOlNGO0vit/YXUwKoCLTO04DzfQ6XHXgYdzuXpM858oDHwHsNfDjd88MHFu1xaJFin+y/XfzdxxHXfdTZeR91krqu8BlyvyvdTO/KsFO70u2gRN9eqcm0V7ZnVPI7gVv7igOSHSMFh9T1aJ871+F2tNe1zwHuHlZWgn9OQ00OMVKAhKc1v51BuQaOJ/uMxX+nIgCYpa6rBFxdx71GfmZXhgE4CjDekG4YHtqSGb4XJPizt/atM2NtxXaiPYy8c50dx+rAI0NOwHXtKDB4bbX8i7Pz6rpz3LmOqf6wzU93neq5BPtqEf788nk43NT1WdfjDl6hAQznp5oAT2pKNyM7yXVy/nINEpAV/up8tLWoYWzvWjO6d50dawOoOu4UcVxfP3vn4To/rekRdvk7QQw37fNX4s7Ou22NBpzA63ZGUV/87ccJn/Wn+WkPzy7TigIIOKIOaIk6oAWe/llTGhUijeKfRfBUgK2Z5tK7GYl/eDm2d10w2rrWogiTHeq273Vx2xcB4OQ2XI/Co7/h9rcLM/Yv5BZiHwH3UdfY82BTeD/kHDxPdFqf/fYj+rxpdh/36rzvc446HCfnE8AZmp23041p5k5dumHwrZn24tYMeR8YvYZbi84AHkW4QyngYeecdnKOR8H9ayjZzkiyvTnXZY06LrBuBTweXAiW93RMdi2AH3BRCTyASRJ5jrrAG4ADGPBTjWmihlRztSbDXtqSzgW4vCXj1b8XwAvCkZailyMthWakZa2d6XDwBC3wLAbHqi8nAJ74qEpuRx9axOnokOPVH1/ZdQ+dcIILJXHnqEOAZvAEeHKeYCPgk42prNu16Rbgl7ZkUPyzAj/9l1/De4rODLcU2WH+HVqheUgxd46HzofQbksTeIDT6sCxwnXucQLHIcY77lwHuMDztkbTPAEew01XAHPsdcAB2oG7HkfcvesoQAMVgHR1a7q5+B4l4D1KwJaMM4r76oUUEPzL4d0F5ubuQjvRhl53z+ciBx46ztA+6s716FT353c+uhJ4eJARcBFvZw5ep7tuZ3A9EneAsuNOEWgFp9jbyfrVZnR7GjuPAlzckhEM1GS8/i9Fbu4u+HSY4FGAESrETLu4LtBwX6BD1wVaBxspnPKA9j2uceeoswAte7iHdvfS5wqt0gmP7cw5rnE3U42ppNBxgJPseF0qw1/aQoOPCpC095NdN5sLB0gWGqFCELC+hITTLD7IuJcSrgBRcHE87PNEcBJOcwqOiDto3Psed3LwUdfVbXaehhyv9akMPlmfaifqVtsrW9PF+XfTzYX3kkz+la7B1lj8RnPByxu71pibuwrMnT3kvJ7f3QlOezwBmnvcgwt8dMBJ3L3jofuAhuMoQGRbi4K7bU3jbnjASdTNlDhOYvdZw9tSqe8zLYHbC5vTvhn4xRuiv/y60RT7DPBDTWvsjcaYwS8W3WvnaORdAcKp7lZxPPKMHkZcxcARcHd8DeFlwjvHVcY5zgXQuE/WuXWVGSF4Bofz76bbgXczX/+3QStdQ00FXwB+qDFmhxrX2HstMXGbRPBh3CPQ/iCjceep7qRuy+qOrt51GmwC7aPO/a3QWgDnuvZ6KAJ/QLEn5yXyBE7O05r2w/54eqgpdg7wQ/hdGhXi7h6Kvz60uH09dDzb0MCTie7hQ8cZXh0XeD23s+P6xOZ6PNH1EJ76XCSOA5rcp3WVHalZTcDsPOurzWlv5++FhxpiA0P1+GVivrlOxbjVnGdnfI/jBSTv6ey4nub4PtrjAPcFSIg5w3to7nVynE9zrzgurgMawOL8ajuxc5UZ2prqwQU+PfGvQH7oda0hdu5afZ4ZrMu3g/X4vVoe/5rJT3Za2e2o4wIfcRxxp1Xdds57cB5wOtEjrvuYk+tRx6F7O1fZy+8BmpzflGYI3H616S05v/warMs7c43guQh1efZabZ650yRDTia89vlyeEDTGj6miuvY0yOuy7ambvOgC3vdDTo7WbvKQBO11O81NOwIGL3O4JvT7MDm9C/06/4417Xa2GfX6vJfDhI8yV6tzbXXSfd2URIQed3S3KqHGN/nfHwlYBZirr3uT3Da41HnXeRZtavsnR2rzeX3MOAEmp3fRFvdpvS/bdp/32uwIRYn+OAqCrAjx1zdmWsh/LLhbiOloJl6XY+wbsgJuB5jI0dXL+c4+jwae5ruEBwf2bbaDhK4uK2ObyL9U+rA997n38Z1pTa3/+qOvODKjlzL2p5jrmzLNoM7su1wbZa53wj3Cdz3eXJ4Bl7mOPd57WpzZ0eqvVlD53na2hw4xZzAodSXdP+pfp2/zzVYE4tf2plz5sr23ODy9hzL2pZlLm3LpjXbXNmeZa/vyLKjtZn2bl2GvV+fbiYaJPbkuIfHuf1ebaodE2AzyMdYAkbMacABmguwiQqxKe0lxf70wC9e83e/P/WFp6yLNdn9BB1crpECXKqhIuC+JovvL9JDCT2YmIt4K4MHlK1ZvF7gI2smg35FJzheIRpu7DbD08+b0gKK/JmfFXiy61JNRgOBn7u0NXuU4QmURfBcAJKD9vAAhzaHUVfHCTr9LPX4z/t/nl7pQjIGNmd10mPpaXL8/IUtWaMEGlwg5wGMM7vAZgS0jlLkz194N/Ms9Xf/G5/df/CVkvJXoSEuLojp87YAAAAASUVORK5CYII=";
		public const string CheckIcon = "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAALpUlEQVR4nNWbf4xcVRXHv+e+N7M7291tqZC0gQpCKVawLSJqBf7QmFAw0kJarPywtbQU/oBq6I/4B/8oBqUlkR/RIIQfEZBQNTa01hATjVh+xCAGiqWFxthCAdlSujPd3Zmdecec++O9+2Zndmdmf/Yls/ftPffdOZ97zz333Pvu0NJnZoMZyWXvGeRuksQrFz/DXjZTWmbuTwewGIz5DHwWTPMAzGLGdABdtt48gOPM+ADAATC9xcA+MF5i4L1YB3bfR0jlDdGHEr24hq5MsSwcJ/iLAFzHjCuhoZMvTimd1NvFjC4AZ4Dpi+zXzXgLwB+Z8TQYr44lvFx01W9mjxW8QKwH8D0An6v1xXXgvToT5YbIDdy/wXgMwENsrGZU8CI3DTA6+BkANjDjdgAzh5QjhgoiIIhAZFItkK8itooSOJJUgcsKUaQAScsBOKIUnK3/YwD3M+M+AJ+0Cq/VuOrp2a3CE5hWAdjKjFNT5YgRZMqgbBmkoiG9mjQeasu8VBohKmUQFTMGIm01PWBsYtATYJvVBLwkqkX4uWB6AcBjPjxUhLBjANnuPqhcadTwui2DClRuAMGMPNS0Pm1Bnj6nMugxMF5g4Jxm4UWmWoBfAaZXAVziZAIadAwg09kPlakMD9YEvEtjnTJlBF0FqM4+3die2V8Cxj+ZsaIZ+NgCGoSXltoGpmcBdDtZmCsi7OqHCiupOsYaPmUVYRmquwCV6/fHfDeAZ8HYxmZ4jggvf1SD8FkAT4LpDieTXpcel3FeXcd4wvsp2kpQnQWwivz67wDTk1rnEeDlUg3C7wDTdU6msoPIdJnxOFnwsc5hBao7D8qWfMDrwNgBIDscvGZpwOwfBdMSJwvaStrsU9PSJMGzr29HP6i96AMuYRbd9WRb1x8o1IeX624wXR/DtxcRtJemHHysd/sAKNfvA17PwE9HnAbrwC8H0xa/54O2wSkLH+vfVgS3Dfhmv5n1zDUU3lhAbfizwfSIkymZfqZwz/up3FJuANxW8s3+YWGqhhceVSfCewLAdOftJbg5WeBdOeroAwcVp5SwPJH4A8Q8CkOU1+HtpfE83zH1HN5I8H4jeGZ/KQOrfXi5VBW8LGzu8YOcqTDVtQKv07AMlkZI8n7GoBnwnlUePOyq7jTY8HYyg5xRw7ty4hTtUGDQaWBs8OtQHnynXdIaQXtpysEzGLICkCV21Eyj6ZA5Nvvb7eaLsQBvo+IWt56XhcZExvYjQQhspOHtvW2MehYwxFIyg4CquDxhXJ+yADZLwpvdQzLnTxl41+s6j+3H3Ee28EjDReeLFSR5681sh3gaXAzgXD3tyQ7OOC5pG4WXtOKA/Z5nQiTwdnPEb4RhfUS2ZJbQRjYXjMU6DrA4K2KTyJSnBHxkFaow4YrPrMTubx/Eb695DVfOXWkmL0byadRBZkue/nSttgBbeIkTOM8/efCMKDJmXokYV569Ej+85AF0Zrsxq3MObr/4Li13kBE3PjtwpuTg5Y8slvS2+Bnx1jXxmGxjtQofMXsWACyfvx4bLv4J/CtfOq7/i+xSVRemxuMCHQtGevicB2BOCOArrpDs3k6m2bP2S2aKW71wI25auAXV1yOvbUUUAcpCE6gxeGch0gjFrGNaLJHgIlOIQDbqm5wxbyxAzHv1wk014X/0wm3YeeCZGJbcfmaj8JIGZZ9pQcjAfBcLoNr8GwSJasA38mysVIR4elu1cDNuWri5JvyuA88YS7XoZtZqAt7uMnvy+SGYznQtKA3QCrxRXqtkU+8aQSnX8xVt9puwdlEaXsb8j/92G/763916gCiNbx02NdHILi+9f3im+IDZ7BE3a/YcuXk6CVYAY57kWn1YeAwLf+uuZdh/dK95kUQqMfpW4PVIjxDE5ejUMI6LXaVNwMNOKc57C8wFp31Z57/x0StGaVDSqL7Dixw8Y/WCjTXhb9m1DAeO7tVzNRGlvH5L8LY3nM+T9U/ovaJO3tU1YwG2YvHM6xbdiavPW4eAQjz/n+2456UNOrJ0zopjK3HRHAz8hVtqw/fshVKJNek+anLMD81j/0VtV9iM06oFH/sBMJbOW6ODS+mtK875jlb77j23xUo7C3AWs+bCzVi7aNMQ+PU7l+Hto29AEaXhm/H2tfI8U0wWQ95rZu3AWpnqImMBb/zvFQ0Pa/rSCI986y/Ihd2p8R7VgX+/cAi37BSzf9Oa/NjDc5TEDcIuwyufmo6ahCdnlyBsfWUjPiwc1p7aXfNO+TweuHwHpmW6UdENxdjwpbtqwkvPv9Wz1yzIBJ7GGJ7jse/KFGQ1+L7JIP1+vqmej83ItMGH+Xfxgz8vxweFQym4c2degAeX7MCsaXNw52UPYuX569Pw+UO4+blleK/3XR3hjRu8tlaPEeihb/zqjN+B6RrJCOTtSqb+YqieEpG1nsGIUa5Agz645A+Y3fnpFGi+1IuubHcq70je9Pz7+cOaNiDSjYAWgpyR4LXFFrNQvd0u//eyI7QvfrhS3wKGU4LsF4jyAYk5v4vv7vga3j66NwVbC/7mnVfjSO9h7fDGG17fl0M/f59sir4ePyxHUpqE932BfAwIo1Dsxa27zTxe6zpizf6D/CEEygCPO7xcwhg7QXpd2aNoxpTLQUvwfllRXjy4QBVsJCdhbHXPr3vOmL0e8xPR8zalwYyDF9nLYgGHwdgPO0VElaA1eE4CSeUagYAT5ePY+PyNePL1X+hY4R9H/o610vOFwwgUmbneObzxhhfz105Qwx8A4xB9/ZdzRP5zlv1yKSSHDnLFpuH9L44iL863Kz33P3FiJWQby13jCa875sQ0qL4O97ycMPu+2xLbbiokRKXsqODdEjX2CbFfIITKfEzPTyy8JGqgPX4ewHaRmV1hxosMekcLJFIqhS3Dx6lrBIW4p2VI+P9PKHyxDWxjAADvMONFbRW252V4PuQeivrbRwUftzIlQVL88cb6RMHroX2iw8GL7CEnUt4rIzl+ekxuIjmlORiOCt5P41V2g+XHGh6lrHGARiaMcWcrr1VkUXRf7Mj62scEfrjnJgJe0qDQ6cvu99c/qqpC8Ywf6QcrAXgge9LDq/52UCUOfj6yZ4xtQe+EiE3l4PEWNywqfTnwYHDSwlMpg6DQlUR+wBZ70DpeFdY4I0SPg7HHVVQ50XFSwsufKvg9zHjch9cWUgUP+9Z5FVj/ggOoKPCJ3MkHn+/Scb+9hGWVlnjw8sc7I5TaDTrIjHVOFhWzYHGKJwm8RHw00B53vWU5WA0vl6oB7yqW6HArW5OJJIoaaJv68P0dOtz14LcZlqHwehoc4ZcWW8D0VCzryw0bJE2FnleFaT78UwA214P3LKAmvH5dLPuXYPwpfqivHZGNqqaaw6vqedF5jX7lXQdeN8Aw8O4hOVWw1P5qy+QNtCE63g0MhpMOL1NdeGwmqD815p8WncFUGg5eW80I8O4hOSd7AwP3xjLZWent0n5hsuAlyAmPz/C9vZS7F8ANjcDrOhqAdzKZQjYyIEdLemNZoQP8STdQykwYvMT24cczq+f5XmZcC2DjSGYf64Xqo7KN/cxku/wwkhl7YplYg8y7n0zXhw/GC16WtMGxmQiPT/fDW9gg5wvDefta8MkQaBzeyWTv4DLrIHviFaVsp+U7QR+fAoijrPYRLcDLKk68e6bnU3o7m6y52zI94uiYcVm9eX44eFmnBnMun9EsvN+7/2LQw2AUASxgRs6UIb39TOIfiu2AbERWQlBFmeN5foPA7EUiCvRHnBqV2rRTC050QvXnQIPZWj+c3Gp/nvsyrJ7Nwmsn+tVtZ7UKX61Ulz2BuQb61EkiH+pnkvpTinpKJnkpHfbpn8GY9XzeL9MKvL5bvO2ssYCvBrmIQTeC8U1mzB0lvAy3XQB+zYxXUaNMq/ByQ4u3njXW8NU9f7o5lYnzwTiPgXlgmgXgFGZI5CK/wykw9E7NMWYcALAfTG8y8BIY71VDjRU8APwfxQH1HAUKo0gAAAAASUVORK5CYII=";
		public const string DatamoshIcon = "AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAQAQAAAAAAAAAAAAAAAAAAAAAAAAAAAD/AAAA/wAAAP8AAAD/AAAA/w0NDf8QEBD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/CQkJ/ygoKP8AAAD/jY2N/1paWv98fHz/YGBg/35+fv9qamr/fHx8/2dnZ/98fHz/ZmZm/4mJif9kZGT/cXFx/21tbf9ycnL/dXV1/1RUVP9VVVX/YWFh/1ZWVv9gYGD/W1tb/2FhYf9ZWVn/YGBg/1lZWf9kZGT/WFhY/11dXf9bW1v/XFxc/0xMTP+lpaX///////////////////////////////////////////////////////7+/v+4urr///////////+lpaX/oKCg////////////juP7/zHk//+H1/D/Mub9/9/y///f4OD/hIeH/zY6O/8DCQr/CxAR/4+QkP//////oKCg/6CgoP///////////73h9P/R3+r/1tnd/7HX6f/J5vj/WVth/yMnKf8oLi7/Ky8x/yUqKv+Zmpr//////6CgoP+goKD////////////u7u7/9PPz/+3u7v/i4uH/1NTU/25vdf8yNzj/SU9Q/2htbv87P0H/nJ6e//////+goKD/oKCg//////+joaP/oqKi/7vt/P/h4OH/8O/v/wAAAP+Ympr/en5//7O1tv+ZnJ3/aGxt/8TExf//////oKCg/6CgoP///////////yMjJP+XxMn/p77L/1laWv9jY2P/goWF/ygtLv+Iiov//////////////////////6CgoP+goKD///////////+cm53/x8fH/2FhYf8/Pz//5eXl/83Nzf98f4D/TlRU/x0jJP9ydHX/8/T0//////+goKD/oKCg/////////////////7++v/+5ubn/4N/g/////////////////7S3t/+Dh4j/GiAh////////////oKCg/6CgoP//////////////////////////////////////////////////////3Nzd/9/g4P///////////6CgoP+jo6P///////////////////////////////////////////////////////////////////////////+ioqL/Xl5e/3Nzc/96enr/c3Nz/3p6ev93d3f/enp6/3V1df95eXn/dXV1/3x8fP90dHT/d3d3/3Z2dv93d3f/WFhY/4yMjP9YWFj/enp6/11dXf98fHz/a2tr/319ff9paWn/fn5+/2hoaP+Li4v/ZmZm/25ubv9sbGz/cnJy/3Nzc/8iIiL/Hx8f/y0tLf8vLy//JSUl/yMjI/8UFBT/AAAA/wAAAP8AAAD/AAAA/wAAAP83Nzf/KSkp/x8fH/8oKCj/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==";
		public const string DatamixIcon = "AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAQAQAAAAAAAAAAAAAAAAAAAAAAAAAAAD/AAAA/wAAAP8AAAD/AAAA/w0NDf8QEBD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/CQkJ/ygoKP8AAAD/jY2N/1paWv98fHz/YGBg/35+fv9qamr/fHx8/2dnZ/98fHz/ZmZm/4mJif9kZGT/cXFx/21tbf9ycnL/dXV1/1RUVP9VVVX/YWFh/1ZWVv9gYGD/W1tb/2FhYf9ZWVn/YGBg/1lZWf9kZGT/WFhY/11dXf9bW1v/XFxc/0xMTP+lpaX///////////////////////////////////////////////////////////////////////////+lpaX/oKCg///////psf///v3///////+7u///AAD//wAA//8AAP//AAD//7u7////////////////////////oKCg/6CgoP//////6bH//9td///psP//vLv//wkA//8AAP//AAD//wAA//+8vP///////////////////////6CgoP+goKD////////////24///6bH//9gy///psf//cRr//x0O//////////////////////////////////+goKD/oKCg///////////////////////+/f//6bH//9Av///QL///6bD///79////////////////////////oKCg/6CgoP////////////////////////////////81Lv//dy///+mx///bXf//6bD///79/////////////6CgoP+goKD/////////////////////////////////T0///09P////////9uP//+mx///YMv//6bH///////+goKD/oKCg//////////////////////+lpf//AAD//wAA//8AAP//AAD//6Wl/////////v3//+qy////////oKCg/6CgoP//////////////////////srL//yoq//8AAP//AAD//yoq//+ysv///////////////////////6CgoP+jo6P///////////////////////////////////////////////////////////////////////////+ioqL/Xl5e/3Nzc/96enr/c3Nz/3p6ev93d3f/enp6/3V1df95eXn/dXV1/3x8fP90dHT/d3d3/3Z2dv93d3f/WFhY/4yMjP9YWFj/enp6/11dXf98fHz/a2tr/319ff9paWn/fn5+/2hoaP+Li4v/ZmZm/25ubv9sbGz/cnJy/3Nzc/8iIiL/Hx8f/y0tLf8vLy//JSUl/yMjI/8UFBT/AAAA/wAAAP8AAAD/AAAA/wAAAP83Nzf/KSkp/x8fH/8oKCj/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==";
		public const string LayerIcon = "AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAQAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACkpKf/Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//x8fI/8fHyP/Hx8j/AAAAAAAAAAApKSn/vLy9/7y8vf+pqav/qamr/6mpq/+pqav/qamr/6mpq/+pqav/qamr/7Cwsv+wsLL/sLCy/wAAAAAAAAAAKSkp/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz/8AAAAAAAAAACkpKf8pKSn/KSkp/ykpKf8pKSn/KSkp/ykpKf8pKSn/KSkp/ykpKf8pKSn/KSkp/ykpKf8pKSn/AAAAAAAAAAAAAAAAAAAAAAAAAAApKSn/z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/wAAAAAAAAAAAAAAAAAAAAAAAAAAKSkp/7y8vf+8vL3/qamr/6mpq/+pqav/qamr/6mpq/+pqav/qamr/6mpq/8AAAAAAAAAAAAAAAAAAAAAAAAAACkpKf/Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//AAAAAAAAAAAAAAAAAAAAAAAAAAApKSn/KSkp/ykpKf8pKSn/KSkp/ykpKf8pKSn/KSkp/ykpKf8pKSn/KSkp/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKSkp/8vLy//Ly8v/x8fI/8/Pz//Pz8//z8/P/8/Pz/8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACkpKf/AwMD/wMDA/7Cwsv+pqav/qamr/6mpq/+pqav/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApKSn/z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKSkp/ykpKf8pKSn/KSkp/ykpKf8pKSn/KSkp/ykpKf8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApKSn/xcXG/8XFxv+8vL3/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKSkp/8XFxv/Fxcb/vLy9/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACkpKf8pKSn/KSkp/ykpKf8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAMAAAADAAAAAwAAAAPgAAAD4AAAA+AAAAPgAAAD/AAAA/wAAAP8AAAD/AAAA//AAAP/wAAD/8AAA//8AAA==";
		public const string RenderIcon = "AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAQAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuJBD/7CTUP8AAAAAoJFn/52bcf8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnZtx/65hRv+zc0H/qqdl/6xcSP+1f0T/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALeCP5ytekv/p3ZT/72qSP+pVE7/qldL/7yeQ/+sXEj/qldL/7yeQ/+wZ0T/sGdE/7BnRP+wZ0T/AAAAAAAAAAC3gj+Ct4I//7BnRP+sXEj/sGdE/6xcSP+qV0v/t4I//7NzQf+pVE7/uYo+/8GiPv/Boj7/waI+/wAAAAAAAAAAAAAAAJmXdma5ij7/qVRO/7eCP/+2fED/qVRO/6ybWv+8sE3/vpk+/5mXdmY0MjH/AAAAAFZPSf8AAAAAAAAAAAAAAAAAAAAAsJNQ/6lUTv+0l0z/uadM/7eCP/+Zl3Zmf7Bs/5jEcP+Mwnb/AAAA/xgVFP9WT0n/AAAAAAAAAAAAAAAAAAAAAKybWv+sXEj/qqdl/wAAAAATExP/nNmE/5zZhP+c2YT/nNmE/wICAv8AAAAAVk9J/wAAAAAAAAAAAAAAAAAAAAAAAAAAtrJY/4aBbv8xLyz/Dg0M/5zZhP+c2YT/nNmE/5zZhP8ODQz/JSIf/1ZPSf8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABWT0n/AAAAACQgHv+c2YT/nNmE/5zZhP+c2YT/JCAe/wAAAABWT0n/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVk9J/1ZPSf9DPTn/nNmE/5zZhP+c2YT/nNmE/0M9Of9WT0n/Vk9J/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFZPSf8AAAAAZl1W/5zZhP+c2YT/nNmE/5zZhP9mXVb/AAAAAFZPSf8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABWT0n/m46EiAAAAACc2YT/nNmE/5zZhP+c2YT/AAAAAJuOhIhWT0n/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVk9J/wAAAABWT0n/Vk9J/1ZPSf9WT0n/Vk9J/1ZPSf8AAAAAVk9J/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8n8AAOB/AAAAAwAAAAMAAIALAADAAwAAxAsAAOADAAD0CwAA8AMAAPQLAADyEwAA9AsAAP//AAD//wAA//8AAA==";
		public const string ScrambleIcon = "AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAQAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAc3WCzDg/cf8yOm//TVN3/wAAAAAAAAAAAAAAAAAAAABiZX3/R011/0dNdf9dYXz/AAAAAAAAAAAAAAAAAAAAAD1Ecv84QHX/bXOY/zI6b/9DSXT/AAAAAAAAAABiZX3/Mjpv/0BJe/9KUoL/Mjpv/1hdev8AAAAAAAAAAAAAAAAyOm//io2p//////+mpbz/Mjpv/2Jlff8AAAAAQ0l0/0BJe////////////2Bnkf84P3H/AAAAAAAAAAAAAAAAOD9x/21zmP///////////0pSgv9BRmz/AAAAADA2Zv9gZ5H///////////97f6H/Mjpv/wAAAAAAAAAAAAAAAFJXeP8yOm//wMDR//////9UXIn/Ki9S/zMxL/8mKkb/Mjpv/3t/of+Kjan/Mjpv/0dNdf8AAAAAAAAAAAAAAAAAAAAAOD9x/zI6b/9gZ5H/Mjpv/zk/Xv8fHBr/zsnK/zI5Xv8yOm//Mjpv/0NJdP8AAAAAAAAAAAAAAAAAAP9lAAD/FXd5g0RNU3f/Mjpv/yovUv89OTf/hXlx/7+3sf8mIyH/dXZ8iHd5g0QAAAAAAAAAAAAA/ygAAP+oAAD/4gAA/5cAAAAAAAAAAAAAAABGREP/JiMg/+3r6f89ODT/WlhX/wAAAAAAAAAAAAD/FQAA/6AAAP/FAAD/ugAA/90AAP/3AAD/iwAAAAAAAAAALCko/6SZkP8AAAAAHxwa/0ZEQ/8AAAAAAAD/FQAA/8kAAP/qAAD/2gAA/7cAAP/aAAD/5gAA/2QAAAAAWlhX/z04NP/t6+n/JiMg/7GnoP8mIyD/bm1t/wAAAAAAAP9hAAD/rQAA/+AAAP+XAAD/yAAA/ygAAAAAAAAAACYjIf+/t7H/ZFxV/x8cGv8AAAAAhXlx/zk3Nf8AAAAAAAAAAAAAAAAAAP96AAD/ngAA/zYAAAAAAAAAAE1MS/9VTUj/v7ex/yYjIf9hYF//JiMg/+3r6f8yLir/YWBf/wAAAAAAAAAAAAAAAAAA/xUAAAAAAAAAAAAAAAAfHBr/3dnW/0hBPf9UUlH/AAAAAEA+Pf90amL/pJmQ/zk3Nf8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALCko/3RqYv8sKSj/AAAAAAAAAAAAAAAAJiMh/3RqYv9APj3/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEA+Pf8fHBr/bm1t/wAAAAAAAAAAAAAAAFRSUf8fHBr/VFJR/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABaWFf/RkRD/wAAAAAAAAAAAAAAAAAAAAAAAAAAMzEv/3Rzc8wAAAAAAAAAAAAAAAAAAAAAh4cAAIMDAACBAwAAgQMAAIADAADABwAAAAwAADgwAAAZIAAAEBAAADCcAABgDgAA4Q8AAOOPAADjjwAA588AAA==";
		public const string AutomatorIcon = "AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAQAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADY2Ngw2Njb/NjY2/zY2Nrk2NjYXNjY2FjY2Nt42Njb/NjY2ujY2NgwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2NjYRNjY28DY2NvI2Njb6NjY23jY2NrY2NjbfNjY27TY2Nvc2NjZcNjY2HTY2NgkAAAAAAAAAAAAAAAAAAAAANjY2HDY2NvA2NjbxNjY2/zY2Nv82Nja3NjY2szY2NrM2Nja3NjY2/zY2Nvc2Nja5NjY2CgAAAAA2NjYMNjY2HzY2Nss2NjbnNjY2tTY2Nis2NjYZLy+RCi8vkQo2NjYHNjY2DjY2Nrc2Njb9NjY2/zY2NlQ2NjYDNjY2/zY2Nv82Njb/NjY2uDY2Ng4WFu4DFhbuIhYW7mQWFu5iFhbuDxYW7gM2NjYONjY2vTY2Nv82NjYzAAAAADY2Nv82NjbqNjY2/zY2NhkWFu4DFhbuahYW7v8WFu7/Fhbu/xYW7v8WFu5VFhbuAzY2NhQ2NjbpNjY25jY2Ng42NjYhNjY2/zY2NmA2NjYDFhbuFRYW7v8WFu7/FhbuMhYW7lwWFu7/Fhbu/xYW7g82NjYHNjY2sjY2Nrc2NjYWJye+GzU1VP8yMnVcHR3eExYW7icWFu7/FhbuvhYW7hMWFu4PFhbuKRYW7v8WFu5ZHx/ZDzQ0YF01NUn/NTVL3xYW7v8WFu7/Fhbu/xYW7v8WFu7/Fhbu/xYW7v8WFu7/Fhbu/xYW7v8WFu7/Fhbu6BYW7rQaGubCIyPO/yMjzvkjI84XNDRcujQ0XbYiItIZFhbuZBYW7v8WFu6YFhbuWRYW7lEWFu5YFhbuzRYW7uYYGOu6ICDX/xYW7v8YGOu7NjY2CjY2Nso2Nja3NjY2BxYW7h4WFu7/Fhbu/xYW7rkWFu4cFhbuXBYW7v8WFu4bMzNvLzU1Sv8zM2iYKCi5DTY2NhY2Njb/NjY2/zY2NiA2NjYDFhbuJBYW7ssWFu7nFhbu/xYW7v8WFu7/Ly+MKzY2Nv82NjbUNjY2YjY2NgM2NjYHNjY2vDY2Nvo2Njb/NjY2YDY2NhUWFu4KFhbuDhYW7hAdHd4TLi6WJTY2Nv82Njb/NjY2/zY2NlQ2NjYDNjY2BzY2Nrs2Njb+NjY2/zY2Nv42NjbJNjY2FjY2Ngo2NjYmNjY2cDY2Nv82Njb/NjY22zY2Nv82NjYPAAAAADY2Ngc2NjaxNjY26jY2Nv82NjbqNjY2/zY2Nv82Nja7NjY2/zY2Nv82Njb/NjY2JDY2Ng02NjYMAAAAAAAAAAAAAAAANjY2BzY2Ng42NjYXNjY2DjY2NiI2Njb/NjY2/zY2Nvk2Njb5NjY2uTY2NgcAAAAAAAAAAAAAAAAAAAAAwA8AAMADAADAAQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAwAAgA8AAA==";
		#endregion
	}

	partial class SelectIntervalForm {
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer components = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose(bool disposing) {
			if (disposing && (components != null)) {
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent() {
			this.dock = new System.Windows.Forms.TableLayoutPanel();
			this.ApplyBtn = new System.Windows.Forms.Button();
			this.CancelBtn = new System.Windows.Forms.Button();
			this.table = new System.Windows.Forms.TableLayoutPanel();
			this.SubmitSelectBtn = new System.Windows.Forms.Button();
			this.SelectHowManyEachTimesBox = new System.Windows.Forms.NumericUpDown();
			this.SelectHowManyEachTimesLbl = new System.Windows.Forms.Label();
			this.SelectWhichEachGroupBox = new System.Windows.Forms.NumericUpDown();
			this.SelectOneEveryFewLbl = new System.Windows.Forms.Label();
			this.SelectWhichEachGroupLbl = new System.Windows.Forms.Label();
			this.SelectOneEveryFewBox = new System.Windows.Forms.NumericUpDown();
			this.ResetBtn = new System.Windows.Forms.Button();
			this.SelectIntervalLbl = new System.Windows.Forms.Label();
			this.SelectInfo = new System.Windows.Forms.Label();
			this.dock.SuspendLayout();
			this.table.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.SelectHowManyEachTimesBox)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.SelectWhichEachGroupBox)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.SelectOneEveryFewBox)).BeginInit();
			this.SuspendLayout();
			//
			// dock
			//
			this.dock.BackColor = System.Drawing.SystemColors.Control;
			this.dock.ColumnCount = 3;
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.dock.Controls.Add(this.ApplyBtn, 1, 0);
			this.dock.Controls.Add(this.CancelBtn, 2, 0);
			this.dock.Dock = System.Windows.Forms.DockStyle.Bottom;
			this.dock.Location = new System.Drawing.Point(0, 281);
			this.dock.Margin = new System.Windows.Forms.Padding(4);
			this.dock.Name = "dock";
			this.dock.Padding = new System.Windows.Forms.Padding(8, 6, 8, 6);
			this.dock.RowCount = 1;
			this.dock.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.dock.Size = new System.Drawing.Size(682, 52);
			this.dock.TabIndex = 7;
			//
			// ApplyBtn
			//
			this.ApplyBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.ApplyBtn.Location = new System.Drawing.Point(474, 10);
			this.ApplyBtn.Margin = new System.Windows.Forms.Padding(4);
			this.ApplyBtn.Name = "ApplyBtn";
			this.ApplyBtn.Size = new System.Drawing.Size(94, 32);
			this.ApplyBtn.TabIndex = 1;
			this.ApplyBtn.Text = "应用(&A)";
			this.ApplyBtn.UseVisualStyleBackColor = true;
			this.ApplyBtn.Click += new System.EventHandler(this.ApplyBtn_Click);
			//
			// CancelBtn
			//
			this.CancelBtn.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.CancelBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.CancelBtn.Location = new System.Drawing.Point(576, 10);
			this.CancelBtn.Margin = new System.Windows.Forms.Padding(4);
			this.CancelBtn.Name = "CancelBtn";
			this.CancelBtn.Size = new System.Drawing.Size(94, 32);
			this.CancelBtn.TabIndex = 2;
			this.CancelBtn.Text = "关闭(&C)";
			this.CancelBtn.UseVisualStyleBackColor = true;
			this.CancelBtn.Click += new System.EventHandler(this.CancelBtn_Click);
			//
			// table
			//
			this.table.AutoSize = true;
			this.table.ColumnCount = 2;
			this.table.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.table.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.table.Controls.Add(this.SubmitSelectBtn, 1, 5);
			this.table.Controls.Add(this.SelectHowManyEachTimesBox, 1, 4);
			this.table.Controls.Add(this.SelectHowManyEachTimesLbl, 0, 4);
			this.table.Controls.Add(this.SelectWhichEachGroupBox, 1, 3);
			this.table.Controls.Add(this.SelectOneEveryFewLbl, 0, 2);
			this.table.Controls.Add(this.SelectWhichEachGroupLbl, 0, 3);
			this.table.Controls.Add(this.SelectOneEveryFewBox, 1, 2);
			this.table.Controls.Add(this.ResetBtn, 0, 5);
			this.table.Controls.Add(this.SelectIntervalLbl, 0, 0);
			this.table.Controls.Add(this.SelectInfo, 0, 1);
			this.table.Dock = System.Windows.Forms.DockStyle.Top;
			this.table.Location = new System.Drawing.Point(0, 0);
			this.table.Margin = new System.Windows.Forms.Padding(4);
			this.table.Name = "table";
			this.table.Padding = new System.Windows.Forms.Padding(8);
			this.table.RowCount = 6;
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 25F));
			this.table.Size = new System.Drawing.Size(682, 240);
			this.table.TabIndex = 8;
			//
			// SubmitSelectBtn
			//
			this.SubmitSelectBtn.Dock = System.Windows.Forms.DockStyle.Left;
			this.SubmitSelectBtn.Location = new System.Drawing.Point(134, 197);
			this.SubmitSelectBtn.Margin = new System.Windows.Forms.Padding(4);
			this.SubmitSelectBtn.Name = "SubmitSelectBtn";
			this.SubmitSelectBtn.Size = new System.Drawing.Size(94, 31);
			this.SubmitSelectBtn.TabIndex = 10;
			this.SubmitSelectBtn.Text = "设定选中(&S)";
			this.SubmitSelectBtn.UseVisualStyleBackColor = true;
			this.SubmitSelectBtn.Visible = false;
			this.SubmitSelectBtn.Click += new System.EventHandler(this.SubmitSelectBtn_Click);
			//
			// SelectHowManyEachTimesBox
			//
			this.SelectHowManyEachTimesBox.Dock = System.Windows.Forms.DockStyle.Left;
			this.SelectHowManyEachTimesBox.Location = new System.Drawing.Point(134, 162);
			this.SelectHowManyEachTimesBox.Margin = new System.Windows.Forms.Padding(4);
			this.SelectHowManyEachTimesBox.Maximum = new decimal(new int[] {
			2,
			0,
			0,
			0});
			this.SelectHowManyEachTimesBox.Minimum = new decimal(new int[] {
			1,
			0,
			0,
			0});
			this.SelectHowManyEachTimesBox.Name = "SelectHowManyEachTimesBox";
			this.SelectHowManyEachTimesBox.Size = new System.Drawing.Size(94, 27);
			this.SelectHowManyEachTimesBox.TabIndex = 4;
			this.SelectHowManyEachTimesBox.Value = new decimal(new int[] {
			1,
			0,
			0,
			0});
			//
			// SelectHowManyEachTimesLbl
			//
			this.SelectHowManyEachTimesLbl.AutoSize = true;
			this.SelectHowManyEachTimesLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SelectHowManyEachTimesLbl.Location = new System.Drawing.Point(12, 158);
			this.SelectHowManyEachTimesLbl.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.SelectHowManyEachTimesLbl.Name = "SelectHowManyEachTimesLbl";
			this.SelectHowManyEachTimesLbl.Size = new System.Drawing.Size(114, 35);
			this.SelectHowManyEachTimesLbl.TabIndex = 8;
			this.SelectHowManyEachTimesLbl.Text = "每次要选取几个";
			this.SelectHowManyEachTimesLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// SelectWhichEachGroupBox
			//
			this.SelectWhichEachGroupBox.Dock = System.Windows.Forms.DockStyle.Left;
			this.SelectWhichEachGroupBox.Location = new System.Drawing.Point(134, 127);
			this.SelectWhichEachGroupBox.Margin = new System.Windows.Forms.Padding(4);
			this.SelectWhichEachGroupBox.Maximum = new decimal(new int[] {
			2,
			0,
			0,
			0});
			this.SelectWhichEachGroupBox.Minimum = new decimal(new int[] {
			1,
			0,
			0,
			0});
			this.SelectWhichEachGroupBox.Name = "SelectWhichEachGroupBox";
			this.SelectWhichEachGroupBox.Size = new System.Drawing.Size(94, 27);
			this.SelectWhichEachGroupBox.TabIndex = 3;
			this.SelectWhichEachGroupBox.Value = new decimal(new int[] {
			1,
			0,
			0,
			0});
			//
			// SelectOneEveryFewLbl
			//
			this.SelectOneEveryFewLbl.AutoSize = true;
			this.SelectOneEveryFewLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SelectOneEveryFewLbl.Location = new System.Drawing.Point(12, 88);
			this.SelectOneEveryFewLbl.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.SelectOneEveryFewLbl.Name = "SelectOneEveryFewLbl";
			this.SelectOneEveryFewLbl.Size = new System.Drawing.Size(114, 35);
			this.SelectOneEveryFewLbl.TabIndex = 0;
			this.SelectOneEveryFewLbl.Text = "每几个选择一个";
			this.SelectOneEveryFewLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// SelectWhichEachGroupLbl
			//
			this.SelectWhichEachGroupLbl.AutoSize = true;
			this.SelectWhichEachGroupLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SelectWhichEachGroupLbl.Location = new System.Drawing.Point(12, 123);
			this.SelectWhichEachGroupLbl.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.SelectWhichEachGroupLbl.Name = "SelectWhichEachGroupLbl";
			this.SelectWhichEachGroupLbl.Size = new System.Drawing.Size(114, 35);
			this.SelectWhichEachGroupLbl.TabIndex = 1;
			this.SelectWhichEachGroupLbl.Text = "选择每组第几个";
			this.SelectWhichEachGroupLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// SelectOneEveryFewBox
			//
			this.SelectOneEveryFewBox.Dock = System.Windows.Forms.DockStyle.Left;
			this.SelectOneEveryFewBox.Location = new System.Drawing.Point(134, 92);
			this.SelectOneEveryFewBox.Margin = new System.Windows.Forms.Padding(4);
			this.SelectOneEveryFewBox.Minimum = new decimal(new int[] {
			2,
			0,
			0,
			0});
			this.SelectOneEveryFewBox.Name = "SelectOneEveryFewBox";
			this.SelectOneEveryFewBox.Size = new System.Drawing.Size(94, 27);
			this.SelectOneEveryFewBox.TabIndex = 2;
			this.SelectOneEveryFewBox.Value = new decimal(new int[] {
			2,
			0,
			0,
			0});
			this.SelectOneEveryFewBox.ValueChanged += new System.EventHandler(this.SelectOneEveryFewBox_ValueChanged);
			//
			// ResetBtn
			//
			this.ResetBtn.AutoSize = true;
			this.ResetBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.ResetBtn.Location = new System.Drawing.Point(12, 197);
			this.ResetBtn.Margin = new System.Windows.Forms.Padding(4);
			this.ResetBtn.MaximumSize = new System.Drawing.Size(0, 31);
			this.ResetBtn.Name = "ResetBtn";
			this.ResetBtn.Size = new System.Drawing.Size(114, 31);
			this.ResetBtn.TabIndex = 5;
			this.ResetBtn.Text = "重置选择(&R)";
			this.ResetBtn.UseVisualStyleBackColor = true;
			this.ResetBtn.Click += new System.EventHandler(this.ResetBtn_Click);
			//
			// SelectIntervalLbl
			//
			this.SelectIntervalLbl.AutoSize = true;
			this.table.SetColumnSpan(this.SelectIntervalLbl, 2);
			this.SelectIntervalLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SelectIntervalLbl.Font = new System.Drawing.Font("微软雅黑", 9F);
			this.SelectIntervalLbl.Location = new System.Drawing.Point(12, 16);
			this.SelectIntervalLbl.Margin = new System.Windows.Forms.Padding(4, 8, 4, 8);
			this.SelectIntervalLbl.Name = "SelectIntervalLbl";
			this.SelectIntervalLbl.Size = new System.Drawing.Size(658, 40);
			this.SelectIntervalLbl.TabIndex = 5;
			this.SelectIntervalLbl.Text = "请先在 Vegas 轨道中选中一些素材，然后再打开本对话框，使用下面的功能。\r\n本功能旨在辅助用户每隔一个或几个选中一个素材，然后可以执行“粘贴事件属性”等操作。" +
	"";
			this.SelectIntervalLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// SelectInfo
			//
			this.SelectInfo.AutoSize = true;
			this.table.SetColumnSpan(this.SelectInfo, 2);
			this.SelectInfo.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SelectInfo.Location = new System.Drawing.Point(12, 64);
			this.SelectInfo.Margin = new System.Windows.Forms.Padding(4, 0, 4, 4);
			this.SelectInfo.Name = "SelectInfo";
			this.SelectInfo.Size = new System.Drawing.Size(658, 20);
			this.SelectInfo.TabIndex = 6;
			this.SelectInfo.Text = "已选中 0 个轨道剪辑。";
			this.SelectInfo.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// SelectIntervalForm
			//
			this.AcceptButton = this.ApplyBtn;
			this.AutoScaleDimensions = new System.Drawing.SizeF(120F, 120F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Dpi;
			this.BackColor = System.Drawing.SystemColors.Window;
			this.CancelButton = this.CancelBtn;
			this.ClientSize = new System.Drawing.Size(682, 333);
			this.Controls.Add(this.table);
			this.Controls.Add(this.dock);
			this.Font = new System.Drawing.Font("Microsoft YaHei UI", 9F);
			this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
			this.Location = new System.Drawing.Point(60, 60);
			this.Margin = new System.Windows.Forms.Padding(5);
			this.MaximizeBox = false;
			this.MinimizeBox = false;
			this.Name = "SelectIntervalForm";
			this.ShowInTaskbar = false;
			this.StartPosition = System.Windows.Forms.FormStartPosition.Manual;
			this.Text = "快速间隔选择";
			this.dock.ResumeLayout(false);
			this.table.ResumeLayout(false);
			this.table.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.SelectHowManyEachTimesBox)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.SelectWhichEachGroupBox)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.SelectOneEveryFewBox)).EndInit();
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion

		public System.Windows.Forms.TableLayoutPanel dock;
		public System.Windows.Forms.Button ApplyBtn;
		public System.Windows.Forms.Button CancelBtn;
		public System.Windows.Forms.TableLayoutPanel table;
		public System.Windows.Forms.NumericUpDown SelectWhichEachGroupBox;
		public System.Windows.Forms.Label SelectOneEveryFewLbl;
		public System.Windows.Forms.Label SelectWhichEachGroupLbl;
		public System.Windows.Forms.NumericUpDown SelectOneEveryFewBox;
		public System.Windows.Forms.Button ResetBtn;
		public System.Windows.Forms.Label SelectIntervalLbl;
		public System.Windows.Forms.Label SelectInfo;
		public System.Windows.Forms.NumericUpDown SelectHowManyEachTimesBox;
		public System.Windows.Forms.Label SelectHowManyEachTimesLbl;
		public System.Windows.Forms.Button SubmitSelectBtn;
	}

	public partial class SelectIntervalForm : Form, IInterpret {
		private readonly EntryPoint parent;
		private TrackEvent[] events;
		private Vegas vegas { get { return parent.vegas; } }
		internal const int MARGIN = 60;
		public SelectIntervalForm(EntryPoint entryPoint) {
			InitializeComponent();
			parent = entryPoint;
			Icon = ConfigForm.icon;
			this.ReserveSystemMenuItems(SystemMenuItemType.MOVE | SystemMenuItemType.CLOSE);
			Translate();
			Height = table.Height + dock.Height + MARGIN;
			SubmitSelectBtn_Click(null, null);
			foreach (Control control in table.Controls)
				if (control is NumericUpDown)
					control.MouseWheel += AutoLayoutTracksGridForm.NumericUpDown_MouseWheel;
		}

		private void CancelBtn_Click(object sender, EventArgs e) {
			Close();
		}

		private void ApplyBtn_Click(object sender, EventArgs e) {
			SelectInterval((int)SelectOneEveryFewBox.Value, (int)SelectWhichEachGroupBox.Value, (int)SelectHowManyEachTimesBox.Value);
			vegas.UpdateUI();
		}

		private void SelectOneEveryFewBox_ValueChanged(object sender, EventArgs e) {
			int divisor = (int)SelectOneEveryFewBox.Value, remainder = (int)SelectWhichEachGroupBox.Value, remainder2 = (int)SelectHowManyEachTimesBox.Value;
			if (remainder > divisor) SelectWhichEachGroupBox.Value = remainder = divisor;
			if (remainder2 > divisor) SelectHowManyEachTimesBox.Value = remainder2 = divisor;
			SelectWhichEachGroupBox.Maximum = divisor;
			SelectHowManyEachTimesBox.Maximum = divisor;
		}

		private void SubmitSelectBtn_Click(object sender, EventArgs e) {
			events = parent.GetSelectedEvents();
			SelectInfo.Text = string.Format(Lang.str.select_events_count_info, events.Length);
		}

		private void ResetBtn_Click(object sender, EventArgs e) {
			ResetSelect();
			vegas.UpdateUI();
		}

		/// <summary>
		/// 每几个选第几个。
		/// </summary>
		/// <param name="everyFew">每几个</param>
		/// <param name="whichOne">第几个</param>
		/// <param name="howMany">选几个</param>
		public void SelectInterval(int everyFew, int whichOne, int howMany) {
			ResetSelect();
			whichOne--; howMany--;
			if (everyFew < 2 || whichOne < 0 || howMany < 0 || whichOne > everyFew) return;
			foreach (Track track in vegas.Project.Tracks) {
				int j = -1;
				foreach (TrackEvent trackEvent in track.Events)
					if (trackEvent.Selected) {
						j = (j + 1) % everyFew;
						bool selected = j >= whichOne && j <= whichOne + howMany || j + everyFew >= whichOne && j + everyFew <= whichOne + howMany;
						trackEvent.Selected = selected;
					}
			}
		}

		public void ResetSelect() {
			var contains = new Func<TrackEvent[], TrackEvent, bool>((list, item) => {
				foreach (TrackEvent control in list)
					if (control == item)
						return true;
				return false;
			});
			foreach (Track track in vegas.Project.Tracks)
				foreach (TrackEvent trackEvent in track.Events)
					trackEvent.Selected = contains(events, trackEvent);
		}

		public void Translate() {
			Lang str = Lang.str;
			Font = new Font(str.ui_font, 9F);
			SelectIntervalLbl.Font = new Font(str.info_label_font, 9F);
			ApplyBtn.Text = str.apply;
			CancelBtn.Text = str.close;
			SubmitSelectBtn.Text = str.submit_select;
			SelectHowManyEachTimesLbl.Text = str.select_how_many;
			SelectOneEveryFewLbl.Text = str.every_few;
			SelectWhichEachGroupLbl.Text = str.which_one;
			ResetBtn.Text = str.reset_select;
			SelectIntervalLbl.Text = str.select_interval_info + "\n" + str.select_interval_configform_info;
			SelectInfo.Text = str.select_events_count_info;
			Text = str.quick_select_interval;
		}
	}

	/// <summary>
	/// 需要解释翻译的接口。
	/// </summary>
	public interface IInterpret {
		/// <summary>
		/// 本地化字符串。
		/// </summary>
		void Translate();
	}

	/// <summary>
	/// 自动布局轨道类的接口。
	/// </summary>
	public interface IAutoLayoutTracks {
		/// <summary>
		/// 自动布局轨道的方法。
		/// </summary>
		void Arrange();
		/// <summary>
		/// 从自动布局轨道属性对象中读取配置。
		/// </summary>
		//void ReadFromInfo(AutoLayoutTracksInfos.BaseAutoLayoutTracksInfo info = null);
	}

	public static class TrackHelper {
		/// <summary>
		/// 一个简单的生成轨道辅助类。直接放弃泛型成弱类型语言了。
		/// </summary>
		/// <param name="entryPoint">Vegas 入口类。</param>
		/// <param name="audio">音频轨道参照。可以是现有轨道、表示序号的整型数字、空。</param>
		/// <param name="video">视频轨道参照。可以是现有轨道、表示序号的整型数字、空。</param>
		/// <param name="audioSingleTrack">音频是否仅生成单轨？</param>
		/// <param name="videoSingleTrack">视频是否仅生成单轨？</param>
		/// <param name="name">轨道名称。</param>
		/// <returns></returns>
		public static TrackHelper<A, V> New<A, V>(EntryPoint entryPoint, A audio, V video, bool audioSingleTrack, bool videoSingleTrack, string name = "") {
			return new TrackHelper<A, V>(entryPoint, audio, video, audioSingleTrack, videoSingleTrack, name, name);
		}
	}

	/// <summary>
	/// 生成轨道辅助类。
	/// 用于自动处理新增轨道、剪辑重叠、轨道位置等麻烦问题。
	/// </summary>
	/// <typeparam name="A">音频轨道参照类型。可以是现有轨道或表示序号的整型数字。</typeparam>
	/// <typeparam name="V">视频轨道参照类型。可以是现有轨道或表示序号的整型数字。</typeparam>
	public class TrackHelper<A, V> {
		private readonly EntryPoint entryPoint;
		private Vegas vegas { get { return entryPoint.vegas; } }
		private Tracks Tracks { get { return vegas.Project.Tracks; } }
		private A audio;
		private V video;
		public List<AudioTrack> audioTracks = new List<AudioTrack>();
		public List<VideoTrack> videoTracks = new List<VideoTrack>();
		private bool NoAudio { get { return audio == null; } }
		private bool NoVideo { get { return video == null; } }
		private readonly bool isAudioAboveVideo = false;
		public string audioName;
		public string videoName;
		public const string EXAMPLE_EVENT_NAME = "(Example Track Event)";
		public List<Track> AllTracks { get { return videoTracks.Cast<Track>().Concat(audioTracks.Cast<Track>()).ToList(); } }
		public readonly bool audioSingleTrack;
		public readonly bool videoSingleTrack;
		private int topmostTrackIndex = int.MaxValue;
		private void SetTopmostTrackIndex(int value) { if (value < topmostTrackIndex) topmostTrackIndex = value; }
		private bool IsAAlwaysNewTrack { get { return audio == null || audio is int; } }
		private bool IsVAlwaysNewTrack { get { return video == null || video is int; } }
		private bool IsAlwaysNewTrack<T>() where T : TrackEvent { return IsAudio<T>() ? IsAAlwaysNewTrack : IsVAlwaysNewTrack; }

		/// <summary>
		/// 构造生成轨道辅助类。
		/// </summary>
		/// <param name="entryPoint">Vegas 入口类。</param>
		/// <param name="audio">音频轨道参照。可以是现有轨道、表示序号的整型数字、空。</param>
		/// <param name="video">视频轨道参照。可以是现有轨道、表示序号的整型数字、空。</param>
		/// <param name="audioSingleTrack">音频是否仅生成单轨？</param>
		/// <param name="videoSingleTrack">视频是否仅生成单轨？</param>
		/// <param name="audioName">音频轨道名称。</param>
		/// <param name="videoName">视频轨道名称。</param>
		/// <exception cref="NullReferenceException">传入的 audio 或 video 类型不合法。</exception>
		public TrackHelper(EntryPoint entryPoint, A audio, V video, bool audioSingleTrack, bool videoSingleTrack, string audioName = "", string videoName = "") {
			this.entryPoint = entryPoint;
			this.audio = audio;
			this.video = video;
			this.audioName = audioName;
			this.videoName = videoName;
			this.audioSingleTrack = audioSingleTrack;
			this.videoSingleTrack = videoSingleTrack;
			if (audio is AudioTrack) {
				AudioTrack track = audio as AudioTrack;
				while (track != null) {
					audioTracks.Add(track);
					if (audioSingleTrack) break;
					track = GetNextTrack(track);
				}
			}
			if (video is VideoTrack) {
				VideoTrack track = video as VideoTrack;
				while (track != null) {
					videoTracks.Add(track);
					if (videoSingleTrack) break;
					track = GetPreviousTrack(track);
				}
			}
			if (!NoAudio && !NoVideo) {
				int? audioIndex = audio is AudioTrack ? (audio as AudioTrack).Index : audio as int?;
				int? videoIndex = video is VideoTrack ? (video as VideoTrack).Index : video as int?;
				if (!audioIndex.HasValue || !videoIndex.HasValue) throw new NullReferenceException();
				if (audioIndex.Value < videoIndex.Value) isAudioAboveVideo = true; // 相等时也为 false。
			}
		}

		/// <summary>
		/// 获取上一轨道。
		/// </summary>
		/// <typeparam name="T">轨道类型。</typeparam>
		/// <param name="track">轨道。</param>
		/// <returns>上一轨道。</returns>
		public static T GetPreviousTrack<T>(T track) where T : Track {
			Tracks tracks = track.Project.Tracks;
			int index = tracks.IndexOf(track);
			if (index <= 0) return null;
			T thatTrack = tracks[index - 1] as T;
			return EntryPoint.IsAdjustmentTrack(thatTrack) ? null : thatTrack;
		}

		/// <summary>
		/// 获取下一轨道。
		/// </summary>
		/// <typeparam name="T">轨道类型。</typeparam>
		/// <param name="track">轨道。</param>
		/// <returns>下一轨道。</returns>
		public static T GetNextTrack<T>(T track) where T : Track {
			Tracks tracks = track.Project.Tracks;
			int index = tracks.IndexOf(track);
			if (index < 0 || index >= tracks.Count - 1) return null;
			T thatTrack = tracks[index + 1] as T;
			return EntryPoint.IsAdjustmentTrack(thatTrack) ? null : thatTrack;
		}

		/// <summary>
		/// 音频参照索引值加一。
		/// </summary>
		private void AudioIndexAddOne() {
			if (!isAudioAboveVideo && audio is int) audio = (A)(object)((int)(object)audio + 1);
		}

		/// <summary>
		/// 视频参照索引值加一。
		/// </summary>
		private void VideoIndexAddOne() {
			if (isAudioAboveVideo && video is int) video = (V)(object)((int)(object)video + 1);
		}

		/// <summary>
		/// 在之后新增一条音频轨道。
		/// </summary>
		/// <returns>新增的音频轨道。</returns>
		public AudioTrack AddAudioTrackAfter() {
			Func<int?, AudioTrack> Add = index => {
				AudioTrack track = new AudioTrack(vegas.Project, index.Value, audioName);
				Tracks.Add(track);
				audioTracks.Add(track);
				return track;
			};
			VideoIndexAddOne();
			return audioTracks.Count == 0 ? Add(audio as int?) : Add(audioTracks.LastOrDefault().Index + 1);
		}

		/// <summary>
		/// 在之前新增一条视频轨道。
		/// </summary>
		/// <returns>新增的视频轨道。</returns>
		public VideoTrack AddVideoTrackBefore() {
			Func<int?, VideoTrack> Add = index => {
				VideoTrack track = new VideoTrack(vegas.Project, index.Value, videoName);
				Tracks.Add(track);
				videoTracks.Add(track);
				return track;
			};
			AudioIndexAddOne();
			return videoTracks.Count == 0 ? Add(video as int?) : Add(videoTracks.LastOrDefault().Index);
		}

		/// <summary>
		/// 在之后新增一条视频轨道。
		/// </summary>
		/// <returns>新增的视频轨道。</returns>
		public VideoTrack AddVideoTrackAfter() {
			Func<int?, VideoTrack> Add = index => {
				VideoTrack track = new VideoTrack(vegas.Project, index.Value, videoName);
				Tracks.Add(track);
				videoTracks.Insert(0, track);
				return track;
			};
			AudioIndexAddOne();
			return videoTracks.Count == 0 ? Add(video as int?) : Add(videoTracks[0].Index + 1);
		}

		/// <summary>
		/// 在<b>单轨</b>模式下，根据给定的新轨道事件的开始时间和长度，如指定轨道的对应位置已有其它事件，则将其它事件<b>让位</b>给新事件。<br />
		/// 如果开始时间完全相同的话，则建议不新增该事件。
		/// </summary>
		/// <typeparam name="T">轨道事件类型。</typeparam>
		/// <param name="track">指定的轨道。</param>
		/// <param name="start">开始时间。</param>
		/// <param name="length">长度。</param>
		/// <returns>一个布尔值，如是表示已经<b>腾出空位</b>可供使用了，如否则表示函数<b>建议不要新增该事件</b>。</returns>
		private bool TrackVacateSpace<T>(Track track, Timecode start, Timecode length) where T : TrackEvent {
			if (!IsSingleTrack<T>()) return true;
			Timecode end = start + length;
			{
				TrackEvent trackEvent = track.Events.LastOrDefault();
				if (trackEvent == null || IsExampleEvent(trackEvent)) { }
				else if (trackEvent.Start == start) return false;
				else if (trackEvent.End <= end)
					trackEvent.Length = start - trackEvent.Start;
			}
			if (!IsAlwaysNewTrack<T>()) {
				bool hasEqualedStart;
				List<TrackEvent> inEvents = FindEventsAlmostIn(track, start, end, out hasEqualedStart, EXAMPLE_EVENT_NAME);
				if (hasEqualedStart) return false;
				foreach (TrackEvent trackEvent in inEvents)
					if (trackEvent.Start < start && trackEvent.End <= end)
						trackEvent.Length = start - trackEvent.Start;
			}
			return true;
		}

		/// <summary>
		/// 添加轨道事件。
		/// </summary>
		/// <typeparam name="T">轨道事件类型。</typeparam>
		/// <param name="trackEvent">轨道事件。</param>
		/// <param name="start">开始时间。</param>
		/// <param name="length">长度。</param>
		/// <param name="exceptTracks">指定排除在外的轨道。</param>
		/// <param name="isSampleEvent">是否是示例轨道事件。</param>
		/// <returns>返回添加的轨道事件。</returns>
		public T AddEvent<T>(T trackEvent, Timecode start, Timecode length, IEnumerable<Track> exceptTracks = null, bool isSampleEvent = false) where T : TrackEvent {
			if (trackEvent == null) return null;
			Track track = FindASuitableTrack<T>(start, length, exceptTracks, isSampleEvent);
			if (track == null) return null;
			if (!isSampleEvent && !TrackVacateSpace<T>(track, start, length)) return null;
			T copiedEvent = trackEvent.Copy(track, start) as T;
			if (copiedEvent.Name == EXAMPLE_EVENT_NAME) copiedEvent.Name = "";
			copiedEvent.Length = length;
			SetTopmostTrackIndex(track.Index);
			return copiedEvent;
		}

		/// <summary>
		/// 添加轨道事件。
		/// </summary>
		/// <typeparam name="T">轨道事件类型。</typeparam>
		/// <param name="start">开始时间。</param>
		/// <param name="length">长度。</param>
		/// <param name="exceptTracks">指定排除在外的轨道。</param>
		/// <param name="isSampleEvent">是否是示例轨道事件。</param>
		/// <returns>返回添加的轨道事件。</returns>
		public T AddEvent<T>(Timecode start, Timecode length, IEnumerable<Track> exceptTracks = null, bool isSampleEvent = false) where T : TrackEvent {
			Track track = FindASuitableTrack<T>(start, length, exceptTracks, isSampleEvent);
			if (track == null) return null;
			if (!isSampleEvent && !TrackVacateSpace<T>(track, start, length)) return null;
			T trackEvent = IsAudio<T>() ? new AudioEvent(start, length) as T : new VideoEvent(start, length) as T;
			track.Events.Add(trackEvent);
			SetTopmostTrackIndex(track.Index);
			return trackEvent;
		}

		/// <summary>
		/// 添加示例轨道事件。
		/// </summary>
		/// <typeparam name="T">轨道事件类型。</typeparam>
		/// <param name="start">开始时间。</param>
		/// <param name="length">长度。</param>
		/// <param name="name">示例事件名称。</param>
		/// <returns>示例轨道事件。</returns>
		public T AddSampleEvent<T>(Timecode start, Timecode length, string name = EXAMPLE_EVENT_NAME) where T : TrackEvent {
			T sampleEvent = AddEvent<T>(start, length, null, true);
			if (sampleEvent == null) return null;
			sampleEvent.Name = name;
			sampleEvent.Length = Timecode.FromMilliseconds(0);
			return sampleEvent;
		}

		/// <summary>
		/// 添加示例轨道事件。
		/// </summary>
		/// <typeparam name="T">轨道事件类型。</typeparam>
		/// <param name="start">开始时间。</param>
		/// <param name="name">示例事件名称。</param>
		/// <returns>示例轨道事件。</returns>
		public T AddSampleEvent<T>(T trackEvent, Timecode start, string name = EXAMPLE_EVENT_NAME) where T : TrackEvent {
			T sampleEvent = AddEvent(trackEvent, start, trackEvent.Length, null, true);
			if (sampleEvent == null) return null;
			sampleEvent.Name = name;
			sampleEvent.Length = Timecode.FromMilliseconds(0);
			return sampleEvent;
		}

		/// <summary>
		/// 查找一个可以容下剪辑的轨道。
		/// </summary>
		/// <typeparam name="T">轨道事件类型。</typeparam>
		/// <param name="trackEvent">准备好的示例轨道事件。</param>
		/// <param name="start">开始时间。</param>
		/// <param name="length">长度。</param>
		/// <param name="exceptTracks">指定排除在外的轨道。</param>
		/// <param name="isSampleEvent">是否是示例轨道事件。</param>
		/// <returns>适合的轨道。</returns>
		private Track FindASuitableTrack<T>(Timecode start, Timecode length, IEnumerable<Track> exceptTracks = null, bool isSampleEvent = false) where T : TrackEvent {
			if (typeof(T) == typeof(AudioEvent) && NoAudio || typeof(T) == typeof(VideoEvent) && NoVideo) return null;
			Track track = null;
			IEnumerable<Track> tracks = IsAudio<T>() ? audioTracks.Cast<Track>() : videoTracks.Cast<Track>();
			if (!IsSingleTrack<T>()) {
				Timecode end = start + length;
				foreach (Track otherTrack in tracks) {
					if (exceptTracks != null && exceptTracks.Contains(otherTrack)) continue;
					TrackOtherInfo info = GetTrackOtherInfo(otherTrack);
					if (length.ToMilliseconds() == 0) goto ok;
					if (info.length > Round(start)) continue;
					if (!IsAlwaysNewTrack<T>()) {
						bool _;
						List<TrackEvent> inEvents = FindEventsAlmostIn(otherTrack, start, end, out _, EXAMPLE_EVENT_NAME, true);
						if (inEvents.Count != 0) continue;
					}
				ok:
					track = otherTrack;
					if (!isSampleEvent) info.Length = end;
					break;
				}
			} else track = tracks.FirstOrDefault();
			if (track == null)
				track = IsAudio<T>() ? AddAudioTrackAfter() as Track : AddVideoTrackBefore() as Track;
			return track;
		}

		/// <summary>
		/// 查找轨道中不完全在指定的时间范围内的所有事件。
		/// </summary>
		/// <remarks>注意：使用本函数会非常地慢。</remarks>
		/// <param name="track">轨道。</param>
		/// <param name="start">开始时间。</param>
		/// <param name="end">结束时间。</param>
		/// <param name="hasEqualedStart">返回是否有开始时间相等的事件。</param>
		/// <param name="exceptName">如事件名称为此的话则排除在外。</param>
		/// <param name="justFindOne">只找一个，用于仅判断是否有内容而不是获取内容，以节约性能。</param>
		/// <returns>在指定的时间范围内的所有轨道事件。</returns>
		public static List<TrackEvent> FindEventsAlmostIn(Track track, Timecode start, Timecode end, out bool hasEqualedStart, string exceptName = null, bool justFindOne = false) {
			hasEqualedStart = false;
			if (end < start) return null;
			int rsStart = Round(start), rsEnd = Round(end);
			TrackOtherInfo info = GetTrackOtherInfo(track);
			List<TrackEvent> trackEvents = new List<TrackEvent>();
			foreach (TrackEvent trackEvent in info.originalEvents) {
				int curStart = Round(trackEvent.Start), curEnd = Round(trackEvent.End);
				if (exceptName != null && trackEvent.Name == exceptName) continue;
				else if (curStart >= rsStart && curStart < rsEnd ||
					curEnd > rsStart && curEnd <= rsEnd ||
					curStart <= rsStart && curEnd >= rsEnd) {
					trackEvents.Add(trackEvent);
					if (curStart == rsStart) hasEqualedStart = true;
					if (justFindOne) break;
				} else if (curEnd <= rsStart) break;
			}
			return trackEvents;
		}
		private readonly static Dictionary<Track, TrackOtherInfo> trackOtherInfos = new Dictionary<Track, TrackOtherInfo>();
		private class TrackOtherInfo {
			public List<TrackEvent> originalEvents;
			public int length = -1;
			public Timecode Length {
				set {
					int ms = Round(value);
					if (ms > length) length = ms;
				}
			}
			public TrackOtherInfo(Track track) {
				originalEvents = track.Events.ToList();
			}
		}

		/// <summary>
		/// 获取轨道的附加信息，如为空则自动创建一个新的。
		/// </summary>
		/// <param name="track">参考轨道。</param>
		/// <returns>轨道其它信息。</returns>
		private static TrackOtherInfo GetTrackOtherInfo(Track track) {
			TrackOtherInfo info;
			if (!trackOtherInfos.TryGetValue(track, out info)) {
				info = new TrackOtherInfo(track);
				info.originalEvents.Sort((x, y) => Math.Sign(y.End.ToMilliseconds() - x.End.ToMilliseconds()));
				trackOtherInfos.Add(track, info);
			}
			return info;
		}

		/// <summary>
		/// 四舍五入取整（不是四舍六入五成双）。
		/// </summary>
		/// <param name="value">浮点数值。</param>
		/// <returns>舍入后取整值。</returns>
		private static int Round(double value) {
			return (int)Math.Round(value, MidpointRounding.AwayFromZero);
		}

		/// <summary>
		/// 四舍五入取整（不是四舍六入五成双）。
		/// </summary>
		/// <param name="timecode">时间码。</param>
		/// <returns>舍入后取整值。</returns>
		private static int Round(Timecode timecode) {
			return Round(timecode.ToMilliseconds());
		}

		/// <summary>
		/// 快速判断泛型类型是否为音频。
		/// </summary>
		/// <typeparam name="T">要检测的轨道事件类型。</typeparam>
		/// <returns>是否是音频轨道事件。</returns>
		private bool IsAudio<T>() where T : TrackEvent {
			return typeof(T) == typeof(AudioEvent);
		}

		/// <summary>
		/// 快速验证指定泛型类型是否是单轨。
		/// </summary>
		/// <typeparam name="T">要检测的轨道事件类型。</typeparam>
		/// <returns>该类型是否是单轨。</returns>
		private bool IsSingleTrack<T>() where T : TrackEvent {
			bool isAudio = IsAudio<T>();
			return isAudio && audioSingleTrack || !isAudio && videoSingleTrack;
		}

		/// <summary>
		/// 总结，结算。<br />
		/// 在某个乐轨完成后调用。
		/// </summary>
		/// <returns>
		/// 如果轨道完全没有被使用过，完全没有新增任何轨道事件，则返回 <c>null</c>，这样生成下一组乐轨时仍然可以继续沿用现有设定。<br />
		/// 如果轨道使用过至少一次了（添加示例轨道事件除外），则根据生成后的轨道情况提供一个建议的新参照轨道索引值。
		/// </returns>
		public int? SumUp() {
			return topmostTrackIndex == int.MaxValue ? null : topmostTrackIndex as int?;
		}

		/// <summary>
		/// 快速验证指定轨道事件是否是范例样本。
		/// </summary>
		/// <param name="trackEvent">要检测的轨道事件。</param>
		/// <returns>该轨道事件是否是范例样本。</returns>
		public static bool IsExampleEvent(TrackEvent trackEvent) {
			return trackEvent.Name == EXAMPLE_EVENT_NAME;
		}
	}

	partial class AutoLayoutTracksGridForm {
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer components = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose(bool disposing) {
			if (disposing && (components != null)) {
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent() {
			this.dock = new System.Windows.Forms.TableLayoutPanel();
			this.OkBtn = new System.Windows.Forms.Button();
			this.CancelBtn = new System.Windows.Forms.Button();
			this.table = new System.Windows.Forms.TableLayoutPanel();
			this.SquareRadio = new System.Windows.Forms.RadioButton();
			this.CustomRadio = new System.Windows.Forms.RadioButton();
			this.CustomGroup = new System.Windows.Forms.GroupBox();
			this.CustomTable = new System.Windows.Forms.TableLayoutPanel();
			this.MinColumnsLink = new System.Windows.Forms.LinkLabel();
			this.MaxColumnsLink = new System.Windows.Forms.LinkLabel();
			this.RowCountBox = new System.Windows.Forms.NumericUpDown();
			this.RowCountLbl = new System.Windows.Forms.Label();
			this.ColumnCountLbl = new System.Windows.Forms.Label();
			this.ColumnCountBox = new System.Windows.Forms.NumericUpDown();
			this.flowLayoutPanel1 = new System.Windows.Forms.FlowLayoutPanel();
			this.FillRadio = new System.Windows.Forms.RadioButton();
			this.AdaptRadio = new System.Windows.Forms.RadioButton();
			this.ReverseTracksCheck = new System.Windows.Forms.CheckBox();
			this.tableLayoutPanel4 = new System.Windows.Forms.TableLayoutPanel();
			this.PaddingLbl = new System.Windows.Forms.Label();
			this.PaddingBox = new System.Windows.Forms.NumericUpDown();
			this.FlipGroup = new System.Windows.Forms.GroupBox();
			this.tableLayoutPanel1 = new System.Windows.Forms.TableLayoutPanel();
			this.VFlipCombo = new System.Windows.Forms.ComboBox();
			this.VFlipLbl = new System.Windows.Forms.Label();
			this.HFlipLbl = new System.Windows.Forms.Label();
			this.HFlipCombo = new System.Windows.Forms.ComboBox();
			this.dock.SuspendLayout();
			this.table.SuspendLayout();
			this.CustomGroup.SuspendLayout();
			this.CustomTable.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.RowCountBox)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.ColumnCountBox)).BeginInit();
			this.flowLayoutPanel1.SuspendLayout();
			this.tableLayoutPanel4.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.PaddingBox)).BeginInit();
			this.FlipGroup.SuspendLayout();
			this.tableLayoutPanel1.SuspendLayout();
			this.SuspendLayout();
			//
			// dock
			//
			this.dock.BackColor = System.Drawing.SystemColors.Control;
			this.dock.ColumnCount = 3;
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.dock.Controls.Add(this.OkBtn, 1, 0);
			this.dock.Controls.Add(this.CancelBtn, 2, 0);
			this.dock.Dock = System.Windows.Forms.DockStyle.Bottom;
			this.dock.Location = new System.Drawing.Point(0, 403);
			this.dock.Margin = new System.Windows.Forms.Padding(5);
			this.dock.Name = "dock";
			this.dock.Padding = new System.Windows.Forms.Padding(8, 6, 8, 6);
			this.dock.RowCount = 1;
			this.dock.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.dock.Size = new System.Drawing.Size(355, 52);
			this.dock.TabIndex = 7;
			//
			// OkBtn
			//
			this.OkBtn.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.OkBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.OkBtn.Location = new System.Drawing.Point(147, 10);
			this.OkBtn.Margin = new System.Windows.Forms.Padding(4);
			this.OkBtn.Name = "OkBtn";
			this.OkBtn.Size = new System.Drawing.Size(94, 32);
			this.OkBtn.TabIndex = 1;
			this.OkBtn.Text = "完成(&O)";
			this.OkBtn.UseVisualStyleBackColor = true;
			this.OkBtn.Click += new System.EventHandler(this.OkBtn_Click);
			//
			// CancelBtn
			//
			this.CancelBtn.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.CancelBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.CancelBtn.Location = new System.Drawing.Point(249, 10);
			this.CancelBtn.Margin = new System.Windows.Forms.Padding(4);
			this.CancelBtn.Name = "CancelBtn";
			this.CancelBtn.Size = new System.Drawing.Size(94, 32);
			this.CancelBtn.TabIndex = 2;
			this.CancelBtn.Text = "取消(&C)";
			this.CancelBtn.UseVisualStyleBackColor = true;
			this.CancelBtn.Click += new System.EventHandler(this.CancelBtn_Click);
			//
			// table
			//
			this.table.AutoSize = true;
			this.table.ColumnCount = 1;
			this.table.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.table.Controls.Add(this.SquareRadio, 0, 0);
			this.table.Controls.Add(this.CustomRadio, 0, 1);
			this.table.Controls.Add(this.CustomGroup, 0, 2);
			this.table.Controls.Add(this.ReverseTracksCheck, 0, 4);
			this.table.Controls.Add(this.tableLayoutPanel4, 0, 5);
			this.table.Controls.Add(this.FlipGroup, 0, 3);
			this.table.Dock = System.Windows.Forms.DockStyle.Top;
			this.table.Location = new System.Drawing.Point(0, 0);
			this.table.Margin = new System.Windows.Forms.Padding(4);
			this.table.Name = "table";
			this.table.Padding = new System.Windows.Forms.Padding(11);
			this.table.RowCount = 6;
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.table.Size = new System.Drawing.Size(355, 403);
			this.table.TabIndex = 9;
			//
			// SquareRadio
			//
			this.SquareRadio.AutoSize = true;
			this.SquareRadio.Checked = true;
			this.SquareRadio.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SquareRadio.Location = new System.Drawing.Point(15, 15);
			this.SquareRadio.Margin = new System.Windows.Forms.Padding(4);
			this.SquareRadio.Name = "SquareRadio";
			this.SquareRadio.Size = new System.Drawing.Size(325, 24);
			this.SquareRadio.TabIndex = 0;
			this.SquareRadio.TabStop = true;
			this.SquareRadio.Text = "平方";
			this.SquareRadio.UseVisualStyleBackColor = true;
			this.SquareRadio.CheckedChanged += new System.EventHandler(this.CustomRadio_CheckedChanged);
			//
			// CustomRadio
			//
			this.CustomRadio.AutoSize = true;
			this.CustomRadio.Dock = System.Windows.Forms.DockStyle.Fill;
			this.CustomRadio.Location = new System.Drawing.Point(15, 47);
			this.CustomRadio.Margin = new System.Windows.Forms.Padding(4);
			this.CustomRadio.Name = "CustomRadio";
			this.CustomRadio.Size = new System.Drawing.Size(325, 24);
			this.CustomRadio.TabIndex = 1;
			this.CustomRadio.Text = "自定义";
			this.CustomRadio.UseVisualStyleBackColor = true;
			this.CustomRadio.CheckedChanged += new System.EventHandler(this.CustomRadio_CheckedChanged);
			//
			// CustomGroup
			//
			this.CustomGroup.AutoSize = true;
			this.CustomGroup.Controls.Add(this.CustomTable);
			this.CustomGroup.Dock = System.Windows.Forms.DockStyle.Top;
			this.CustomGroup.Location = new System.Drawing.Point(15, 75);
			this.CustomGroup.Margin = new System.Windows.Forms.Padding(4, 0, 4, 4);
			this.CustomGroup.Name = "CustomGroup";
			this.CustomGroup.Padding = new System.Windows.Forms.Padding(4);
			this.CustomGroup.Size = new System.Drawing.Size(325, 138);
			this.CustomGroup.TabIndex = 2;
			this.CustomGroup.TabStop = false;
			//
			// CustomTable
			//
			this.CustomTable.AutoSize = true;
			this.CustomTable.ColumnCount = 4;
			this.CustomTable.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.CustomTable.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.CustomTable.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.CustomTable.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.CustomTable.Controls.Add(this.MinColumnsLink, 2, 0);
			this.CustomTable.Controls.Add(this.MaxColumnsLink, 3, 0);
			this.CustomTable.Controls.Add(this.RowCountBox, 1, 1);
			this.CustomTable.Controls.Add(this.RowCountLbl, 0, 1);
			this.CustomTable.Controls.Add(this.ColumnCountLbl, 0, 0);
			this.CustomTable.Controls.Add(this.ColumnCountBox, 1, 0);
			this.CustomTable.Controls.Add(this.flowLayoutPanel1, 0, 2);
			this.CustomTable.Dock = System.Windows.Forms.DockStyle.Top;
			this.CustomTable.Location = new System.Drawing.Point(4, 24);
			this.CustomTable.Margin = new System.Windows.Forms.Padding(4);
			this.CustomTable.Name = "CustomTable";
			this.CustomTable.RowCount = 3;
			this.CustomTable.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.CustomTable.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.CustomTable.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.CustomTable.Size = new System.Drawing.Size(317, 110);
			this.CustomTable.TabIndex = 2;
			//
			// MinColumnsLink
			//
			this.MinColumnsLink.AutoSize = true;
			this.MinColumnsLink.Dock = System.Windows.Forms.DockStyle.Fill;
			this.MinColumnsLink.Location = new System.Drawing.Point(152, 0);
			this.MinColumnsLink.Name = "MinColumnsLink";
			this.MinColumnsLink.Size = new System.Drawing.Size(54, 35);
			this.MinColumnsLink.TabIndex = 5;
			this.MinColumnsLink.TabStop = true;
			this.MinColumnsLink.Text = "最小值";
			this.MinColumnsLink.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			this.MinColumnsLink.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.MinColumnsLink_LinkClicked);
			//
			// MaxColumnsLink
			//
			this.MaxColumnsLink.AutoSize = true;
			this.MaxColumnsLink.Dock = System.Windows.Forms.DockStyle.Fill;
			this.MaxColumnsLink.Location = new System.Drawing.Point(212, 0);
			this.MaxColumnsLink.Name = "MaxColumnsLink";
			this.MaxColumnsLink.Size = new System.Drawing.Size(102, 35);
			this.MaxColumnsLink.TabIndex = 6;
			this.MaxColumnsLink.TabStop = true;
			this.MaxColumnsLink.Text = "最大值";
			this.MaxColumnsLink.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			this.MaxColumnsLink.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.MaxColumnsLink_LinkClicked);
			//
			// RowCountBox
			//
			this.RowCountBox.Dock = System.Windows.Forms.DockStyle.Left;
			this.RowCountBox.Enabled = false;
			this.RowCountBox.Location = new System.Drawing.Point(51, 39);
			this.RowCountBox.Margin = new System.Windows.Forms.Padding(4);
			this.RowCountBox.Minimum = new decimal(new int[] {
			1,
			0,
			0,
			0});
			this.RowCountBox.Name = "RowCountBox";
			this.RowCountBox.ReadOnly = true;
			this.RowCountBox.Size = new System.Drawing.Size(94, 27);
			this.RowCountBox.TabIndex = 3;
			this.RowCountBox.Value = new decimal(new int[] {
			1,
			0,
			0,
			0});
			//
			// RowCountLbl
			//
			this.RowCountLbl.AutoSize = true;
			this.RowCountLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.RowCountLbl.Location = new System.Drawing.Point(4, 35);
			this.RowCountLbl.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.RowCountLbl.Name = "RowCountLbl";
			this.RowCountLbl.Size = new System.Drawing.Size(39, 35);
			this.RowCountLbl.TabIndex = 1;
			this.RowCountLbl.Text = "行数";
			this.RowCountLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// ColumnCountLbl
			//
			this.ColumnCountLbl.AutoSize = true;
			this.ColumnCountLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.ColumnCountLbl.Location = new System.Drawing.Point(4, 0);
			this.ColumnCountLbl.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.ColumnCountLbl.Name = "ColumnCountLbl";
			this.ColumnCountLbl.Size = new System.Drawing.Size(39, 35);
			this.ColumnCountLbl.TabIndex = 0;
			this.ColumnCountLbl.Text = "列数";
			this.ColumnCountLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// ColumnCountBox
			//
			this.ColumnCountBox.Dock = System.Windows.Forms.DockStyle.Left;
			this.ColumnCountBox.Location = new System.Drawing.Point(51, 4);
			this.ColumnCountBox.Margin = new System.Windows.Forms.Padding(4);
			this.ColumnCountBox.Minimum = new decimal(new int[] {
			1,
			0,
			0,
			0});
			this.ColumnCountBox.Name = "ColumnCountBox";
			this.ColumnCountBox.Size = new System.Drawing.Size(94, 27);
			this.ColumnCountBox.TabIndex = 2;
			this.ColumnCountBox.Value = new decimal(new int[] {
			1,
			0,
			0,
			0});
			this.ColumnCountBox.ValueChanged += new System.EventHandler(this.ColumnCountBox_ValueChanged);
			//
			// flowLayoutPanel1
			//
			this.flowLayoutPanel1.AutoSize = true;
			this.CustomTable.SetColumnSpan(this.flowLayoutPanel1, 4);
			this.flowLayoutPanel1.Controls.Add(this.FillRadio);
			this.flowLayoutPanel1.Controls.Add(this.AdaptRadio);
			this.flowLayoutPanel1.Dock = System.Windows.Forms.DockStyle.Top;
			this.flowLayoutPanel1.Location = new System.Drawing.Point(4, 74);
			this.flowLayoutPanel1.Margin = new System.Windows.Forms.Padding(4);
			this.flowLayoutPanel1.Name = "flowLayoutPanel1";
			this.flowLayoutPanel1.Size = new System.Drawing.Size(309, 32);
			this.flowLayoutPanel1.TabIndex = 4;
			this.flowLayoutPanel1.WrapContents = false;
			//
			// FillRadio
			//
			this.FillRadio.AutoSize = true;
			this.FillRadio.Checked = true;
			this.FillRadio.Location = new System.Drawing.Point(4, 4);
			this.FillRadio.Margin = new System.Windows.Forms.Padding(4);
			this.FillRadio.Name = "FillRadio";
			this.FillRadio.Size = new System.Drawing.Size(60, 24);
			this.FillRadio.TabIndex = 0;
			this.FillRadio.TabStop = true;
			this.FillRadio.Text = "填充";
			this.FillRadio.UseVisualStyleBackColor = true;
			//
			// AdaptRadio
			//
			this.AdaptRadio.AutoSize = true;
			this.AdaptRadio.Location = new System.Drawing.Point(72, 4);
			this.AdaptRadio.Margin = new System.Windows.Forms.Padding(4);
			this.AdaptRadio.Name = "AdaptRadio";
			this.AdaptRadio.Size = new System.Drawing.Size(60, 24);
			this.AdaptRadio.TabIndex = 1;
			this.AdaptRadio.Text = "适应";
			this.AdaptRadio.UseVisualStyleBackColor = true;
			//
			// ReverseTracksCheck
			//
			this.ReverseTracksCheck.AutoSize = true;
			this.ReverseTracksCheck.Dock = System.Windows.Forms.DockStyle.Fill;
			this.ReverseTracksCheck.Location = new System.Drawing.Point(15, 329);
			this.ReverseTracksCheck.Margin = new System.Windows.Forms.Padding(4);
			this.ReverseTracksCheck.Name = "ReverseTracksCheck";
			this.ReverseTracksCheck.Size = new System.Drawing.Size(325, 24);
			this.ReverseTracksCheck.TabIndex = 4;
			this.ReverseTracksCheck.Text = "降序排序";
			this.ReverseTracksCheck.UseVisualStyleBackColor = true;
			//
			// tableLayoutPanel4
			//
			this.tableLayoutPanel4.AutoSize = true;
			this.tableLayoutPanel4.ColumnCount = 2;
			this.tableLayoutPanel4.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel4.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel4.Controls.Add(this.PaddingLbl, 0, 0);
			this.tableLayoutPanel4.Controls.Add(this.PaddingBox, 1, 0);
			this.tableLayoutPanel4.Dock = System.Windows.Forms.DockStyle.Fill;
			this.tableLayoutPanel4.Location = new System.Drawing.Point(11, 357);
			this.tableLayoutPanel4.Margin = new System.Windows.Forms.Padding(0);
			this.tableLayoutPanel4.Name = "tableLayoutPanel4";
			this.tableLayoutPanel4.RowCount = 1;
			this.tableLayoutPanel4.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel4.Size = new System.Drawing.Size(333, 35);
			this.tableLayoutPanel4.TabIndex = 5;
			//
			// PaddingLbl
			//
			this.PaddingLbl.AutoSize = true;
			this.PaddingLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.PaddingLbl.Location = new System.Drawing.Point(4, 0);
			this.PaddingLbl.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.PaddingLbl.Name = "PaddingLbl";
			this.PaddingLbl.Size = new System.Drawing.Size(39, 35);
			this.PaddingLbl.TabIndex = 0;
			this.PaddingLbl.Text = "边距";
			this.PaddingLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// PaddingBox
			//
			this.PaddingBox.Dock = System.Windows.Forms.DockStyle.Left;
			this.PaddingBox.Location = new System.Drawing.Point(51, 4);
			this.PaddingBox.Margin = new System.Windows.Forms.Padding(4);
			this.PaddingBox.Maximum = new decimal(new int[] {
			50,
			0,
			0,
			0});
			this.PaddingBox.Name = "PaddingBox";
			this.PaddingBox.Size = new System.Drawing.Size(94, 27);
			this.PaddingBox.TabIndex = 1;
			//
			// FlipGroup
			//
			this.FlipGroup.AutoSize = true;
			this.FlipGroup.Controls.Add(this.tableLayoutPanel1);
			this.FlipGroup.Dock = System.Windows.Forms.DockStyle.Fill;
			this.FlipGroup.Location = new System.Drawing.Point(15, 221);
			this.FlipGroup.Margin = new System.Windows.Forms.Padding(4);
			this.FlipGroup.Name = "FlipGroup";
			this.FlipGroup.Padding = new System.Windows.Forms.Padding(4);
			this.FlipGroup.Size = new System.Drawing.Size(325, 100);
			this.FlipGroup.TabIndex = 3;
			this.FlipGroup.TabStop = false;
			this.FlipGroup.Text = "镜像边缘";
			//
			// tableLayoutPanel1
			//
			this.tableLayoutPanel1.AutoSize = true;
			this.tableLayoutPanel1.ColumnCount = 2;
			this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel1.Controls.Add(this.VFlipCombo, 1, 1);
			this.tableLayoutPanel1.Controls.Add(this.VFlipLbl, 0, 1);
			this.tableLayoutPanel1.Controls.Add(this.HFlipLbl, 0, 0);
			this.tableLayoutPanel1.Controls.Add(this.HFlipCombo, 1, 0);
			this.tableLayoutPanel1.Dock = System.Windows.Forms.DockStyle.Fill;
			this.tableLayoutPanel1.Location = new System.Drawing.Point(4, 24);
			this.tableLayoutPanel1.Name = "tableLayoutPanel1";
			this.tableLayoutPanel1.Padding = new System.Windows.Forms.Padding(0, 0, 0, 4);
			this.tableLayoutPanel1.RowCount = 2;
			this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel1.Size = new System.Drawing.Size(317, 72);
			this.tableLayoutPanel1.TabIndex = 0;
			//
			// VFlipCombo
			//
			this.VFlipCombo.Dock = System.Windows.Forms.DockStyle.Left;
			this.VFlipCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.VFlipCombo.FormattingEnabled = true;
			this.VFlipCombo.Items.AddRange(new object[] {
			"不翻转",
			"偶数行",
			"奇数行"});
			this.VFlipCombo.Location = new System.Drawing.Point(80, 37);
			this.VFlipCombo.MinimumSize = new System.Drawing.Size(150, 0);
			this.VFlipCombo.Name = "VFlipCombo";
			this.VFlipCombo.Size = new System.Drawing.Size(150, 28);
			this.VFlipCombo.TabIndex = 4;
			//
			// VFlipLbl
			//
			this.VFlipLbl.AutoSize = true;
			this.VFlipLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VFlipLbl.Location = new System.Drawing.Point(4, 34);
			this.VFlipLbl.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.VFlipLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.VFlipLbl.Name = "VFlipLbl";
			this.VFlipLbl.Size = new System.Drawing.Size(69, 34);
			this.VFlipLbl.TabIndex = 2;
			this.VFlipLbl.Text = "垂直翻转";
			this.VFlipLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// HFlipLbl
			//
			this.HFlipLbl.AutoSize = true;
			this.HFlipLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.HFlipLbl.Location = new System.Drawing.Point(4, 0);
			this.HFlipLbl.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.HFlipLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.HFlipLbl.Name = "HFlipLbl";
			this.HFlipLbl.Size = new System.Drawing.Size(69, 34);
			this.HFlipLbl.TabIndex = 1;
			this.HFlipLbl.Text = "水平翻转";
			this.HFlipLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// HFlipCombo
			//
			this.HFlipCombo.Dock = System.Windows.Forms.DockStyle.Left;
			this.HFlipCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.HFlipCombo.FormattingEnabled = true;
			this.HFlipCombo.Items.AddRange(new object[] {
			"不翻转",
			"偶数列",
			"奇数列"});
			this.HFlipCombo.Location = new System.Drawing.Point(80, 3);
			this.HFlipCombo.MinimumSize = new System.Drawing.Size(150, 0);
			this.HFlipCombo.Name = "HFlipCombo";
			this.HFlipCombo.Size = new System.Drawing.Size(150, 28);
			this.HFlipCombo.TabIndex = 3;
			//
			// AutoLayoutTracksGridForm
			//
			this.AcceptButton = this.OkBtn;
			this.AutoScaleDimensions = new System.Drawing.SizeF(120F, 120F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Dpi;
			this.AutoSize = true;
			this.BackColor = System.Drawing.SystemColors.Window;
			this.CancelButton = this.CancelBtn;
			this.ClientSize = new System.Drawing.Size(355, 455);
			this.Controls.Add(this.table);
			this.Controls.Add(this.dock);
			this.Font = new System.Drawing.Font("Microsoft YaHei UI", 9F);
			this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
			this.Location = new System.Drawing.Point(60, 60);
			this.Margin = new System.Windows.Forms.Padding(5);
			this.MaximizeBox = false;
			this.MinimizeBox = false;
			this.Name = "AutoLayoutTracksGridForm";
			this.ShowInTaskbar = false;
			this.StartPosition = System.Windows.Forms.FormStartPosition.Manual;
			this.Text = "自动布局轨道 - 网格布局";
			this.dock.ResumeLayout(false);
			this.table.ResumeLayout(false);
			this.table.PerformLayout();
			this.CustomGroup.ResumeLayout(false);
			this.CustomGroup.PerformLayout();
			this.CustomTable.ResumeLayout(false);
			this.CustomTable.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.RowCountBox)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.ColumnCountBox)).EndInit();
			this.flowLayoutPanel1.ResumeLayout(false);
			this.flowLayoutPanel1.PerformLayout();
			this.tableLayoutPanel4.ResumeLayout(false);
			this.tableLayoutPanel4.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.PaddingBox)).EndInit();
			this.FlipGroup.ResumeLayout(false);
			this.FlipGroup.PerformLayout();
			this.tableLayoutPanel1.ResumeLayout(false);
			this.tableLayoutPanel1.PerformLayout();
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion
		public System.Windows.Forms.TableLayoutPanel dock;
		public System.Windows.Forms.Button OkBtn;
		public System.Windows.Forms.Button CancelBtn;
		private System.Windows.Forms.TableLayoutPanel table;
		private System.Windows.Forms.RadioButton SquareRadio;
		private System.Windows.Forms.RadioButton CustomRadio;
		private System.Windows.Forms.GroupBox CustomGroup;
		private System.Windows.Forms.TableLayoutPanel CustomTable;
		private System.Windows.Forms.Label RowCountLbl;
		private System.Windows.Forms.Label ColumnCountLbl;
		private System.Windows.Forms.FlowLayoutPanel flowLayoutPanel1;
		private System.Windows.Forms.RadioButton FillRadio;
		private System.Windows.Forms.RadioButton AdaptRadio;
		private System.Windows.Forms.CheckBox ReverseTracksCheck;
		private System.Windows.Forms.TableLayoutPanel tableLayoutPanel4;
		private System.Windows.Forms.Label PaddingLbl;
		private System.Windows.Forms.NumericUpDown PaddingBox;
		private System.Windows.Forms.LinkLabel MinColumnsLink;
		private System.Windows.Forms.LinkLabel MaxColumnsLink;
		private System.Windows.Forms.NumericUpDown RowCountBox;
		private System.Windows.Forms.NumericUpDown ColumnCountBox;
		private System.Windows.Forms.GroupBox FlipGroup;
		private System.Windows.Forms.TableLayoutPanel tableLayoutPanel1;
		private System.Windows.Forms.Label VFlipLbl;
		private System.Windows.Forms.Label HFlipLbl;
		private System.Windows.Forms.ComboBox VFlipCombo;
		private System.Windows.Forms.ComboBox HFlipCombo;
	}

	public partial class AutoLayoutTracksGridForm : Form, IAutoLayoutTracks, IConfigIniUser, IInterpret {
		private readonly EntryPoint parent;
		private Vegas vegas { get { return parent.vegas; } }
		private ConfigIni configIni { get { return parent.configIni; } }
		private AutoLayoutTracksInfos.GridInfo info;
		private readonly VideoTrack[] tracks;
		private int Count {
			get {
				return info != null ? info.Channels.Count : tracks != null ? tracks.Length : 0;
			}
		}
		public bool IsToolMode { get { return info == null; } }
		public AutoLayoutTracksGridForm(EntryPoint e) : this(e, null, null) { }
		public AutoLayoutTracksGridForm(EntryPoint entryPoint, AutoLayoutTracksInfos.GridInfo info = null, VideoTrack[] tracks = null) {
			InitializeComponent();
			parent = entryPoint;
			this.info = info;
			Icon = ConfigForm.icon;
			this.ReserveSystemMenuItems(SystemMenuItemType.MOVE | SystemMenuItemType.CLOSE);
			Translate();
			Height = table.Height + dock.Height + SelectIntervalForm.MARGIN;
			CustomGroup.Enabled = false;
			this.tracks = tracks ?? parent.GetSelectedVideoTracks();
			if (Count == 0) {
				EntryPoint.ShowError(new Exceptions.FailToSelectTracksException());
				Close();
			} else if (Count > 100) {
				MessageBox.Show(string.Format(Lang.str.selected_tracks_too_much, Count),
					Lang.str.selected_tracks_too_much_title, MessageBoxButtons.OK, MessageBoxIcon.Error);
				Close();
			}
			if (IsToolMode) ColumnCountBox.Maximum = Math.Min(Count, 100);
			((Action)ReadIni).OnErrorBreak();
			ReadFromInfo();
			CustomRadio_CheckedChanged(null, null);
			ColumnCountBox.MouseWheel += NumericUpDown_MouseWheel;
			if (tracks == null) FormClosing += (sender, e) => SaveIni();
		}

		public static void NumericUpDown_MouseWheel(object sender, MouseEventArgs e) {
			NumericUpDown numeric = sender as NumericUpDown;
			HandledMouseEventArgs hme = e as HandledMouseEventArgs;
			if (hme != null) hme.Handled = true;
			// if (e is HandledMouseEventArgs hme) hme.Handled = true; // 不支持
			decimal increment = numeric.Increment;
			if (e.Delta > 0) {
				if (numeric.Value + increment > numeric.Maximum) numeric.Value = numeric.Maximum;
				else numeric.Value += increment;
			} else if (e.Delta < 0) {
				if (numeric.Value - increment < numeric.Minimum) numeric.Value = numeric.Minimum;
				else numeric.Value -= increment;
			}
		}

		private void CancelBtn_Click(object sender, EventArgs e) {
			Close();
		}

		public void OkBtn_Click(object sender, EventArgs e) {
			if (IsToolMode) Arrange();
			else {
				info.enabled = true;
				info.isSquare = SquareRadio.Checked;
				info.columns = (int)ColumnCountBox.Value;
				info.isFill = FillRadio.Checked;
				info.padding = (int)PaddingBox.Value;
				info.descending = ReverseTracksCheck.Checked;
				info.horizontalFlip = HFlipCombo.SelectedIndex;
				info.verticalFlip = VFlipCombo.SelectedIndex;
			}
			Close();
		}

		private void ReadFromInfo(AutoLayoutTracksInfos.GridInfo _info = null) {
			if (_info != null) info = _info;
			if (IsToolMode || !info.enabled) return;

			if (info.isSquare) SquareRadio.Checked = true; else CustomRadio.Checked = true;
			ColumnCountBox.SetValue(info.columns);
			if (info.columns > ColumnCountBox.Maximum) ColumnCountBox.Value = ColumnCountBox.Maximum;
			if (info.isFill) FillRadio.Checked = true; else AdaptRadio.Checked = true;
			PaddingBox.SetValue(info.padding);
			ReverseTracksCheck.Checked = info.descending;
			if (_info != null) ReverseTracksCheck.Checked = !ReverseTracksCheck.Checked;
			HFlipCombo.SelectedIndex = info.horizontalFlip;
			VFlipCombo.SelectedIndex = info.verticalFlip;

			if (_info != null) info = null;
		}

		private bool IsCustom { get { return CustomRadio.Checked; } }
		private bool IsFill { get { return FillRadio.Checked; } }
		private int Column { get { return (int)ColumnCountBox.Value; } }
		private int Row {
			get {
				return !IsCustom ? Column : GetRow(Count, Column);
			}
		}
		private bool IsReverse { get { return ReverseTracksCheck.Checked; } }
		private int TracksPadding { get { return (int)PaddingBox.Value; } }
		private MirrorEdgesType HFlip { get { return (MirrorEdgesType)HFlipCombo.SelectedIndex; } }
		private MirrorEdgesType VFlip { get { return (MirrorEdgesType)VFlipCombo.SelectedIndex; } }

		private void ColumnCountBox_ValueChanged(object sender, EventArgs e) {
			if (!IsCustom) ColumnCountBox.SetValue(GetSquareSide(Count));
			RowCountBox.SetValue(Row);
		}

		public static int GetRow(int count, int column) {
			return (int)Math.Ceiling(count / (double)column);
		}
		public static int GetSquareSide(int count) {
			return (int)Math.Ceiling(Math.Sqrt(count));
		}

		private void CustomRadio_CheckedChanged(object sender, EventArgs e) {
			CustomGroup.Enabled = IsCustom;
			ColumnCountBox_ValueChanged(null, null);
		}

		private static readonly Guid MarkedFillEffectGuid = Guid.Parse("{074E8B0D-6AAE-4F96-858C-72FE1E8E3447}");
		// 由于暂时并没有办法标记通过脚本生成的用于“填充”的裁剪效果。
		// 目前暂时只能检查是否有完全相同的 X 隔断和 Y 隔断的值来进行辨认。
		// 另外也不能手动编写一个序列化类，因为目前这是一次性的脚本文档，而不是 DLL 动态链接库。
		// 每一次生成的程序集都会不一样的。

		private static Effect GetExistFillEffect(Track track) {
			Tuple<double, double> existData = track.CustomData.GetObject(MarkedFillEffectGuid) as Tuple<double, double>;
			if (existData != null) {
				foreach (Effect effect in track.Effects)
					if (effect.PlugIn == Plugin.crop) {
						double xCur = (effect.OFXEffect.FindParameterByName("XScale") as OFXDoubleParameter).Value;
						double yCur = (effect.OFXEffect.FindParameterByName("YScale") as OFXDoubleParameter).Value;
						if (AlmostEquals(xCur, existData.Item1) && AlmostEquals(yCur, existData.Item2))
							return effect;
					}
			}
			return null;
		}

		/// <summary>
		/// 当两个数相差小于 0.001 就认为两者相等。
		/// </summary>
		private static bool AlmostEquals(double a, double b) {
			const double PRECISION = 1e-3;
			return Math.Abs(a - b) < PRECISION;
		}

		public void Arrange() {
			ColumnCountBox_ValueChanged(null, null);
			int HEIGHT = vegas.Project.Video.Height, WIDTH = vegas.Project.Video.Width;
			float padding = (100 - TracksPadding) / 100.0f;
			for (int index = 0; index < Count; index++) {
				VideoTrack track = tracks[index];
				int n = !IsReverse ? index : Count - 1 - index; // 序数
				int i = n % Column; // 列
				int j = n / Column; // 行
				TrackMotionKeyframe frame = track.TrackMotion.MotionKeyframes[0];
				double x = WIDTH / 2.0 * ((2.0 * i + 1.0) / Column - 1.0);
				double y = HEIGHT / 2.0 * (1.0 - (2.0 * j + 1.0) / Row);
				frame.PositionX = x;
				frame.PositionY = y;
				double width = (double)WIDTH / Column, height = (double)HEIGHT / Row;
				double newWidth = width, newHeight = width / WIDTH * HEIGHT;
				if (IsCustom && (newHeight < height && IsFill || newHeight > height && !IsFill)) {
					newHeight = height;
					newWidth = height / HEIGHT * WIDTH;
				}
				int flipX = (HFlip == MirrorEdgesType.EVEN && IsEven(i + 1) || HFlip == MirrorEdgesType.ODD && IsOdd(i + 1)) ? -1 : 1,
					flipY = (VFlip == MirrorEdgesType.EVEN && IsEven(j + 1) || VFlip == MirrorEdgesType.ODD && IsOdd(j + 1)) ? -1 : 1;
				frame.Width = flipX * newWidth * padding;
				frame.Height = flipY * newHeight * padding;
				Plugin.Init(vegas);
				if (Plugin.crop == null) { EntryPoint.ShowError(new Exceptions.NoPluginNameException(Lang.str.crop)); return; }
				Effect effect = GetExistFillEffect(track);
				if (IsCustom && IsFill) {
					if (effect == null) effect = track.Effects.AddEffect(Plugin.crop);
					double xScale = (effect.OFXEffect.FindParameterByName("XScale") as OFXDoubleParameter).Value = width / newWidth;
					double yScale = (effect.OFXEffect.FindParameterByName("YScale") as OFXDoubleParameter).Value = height / newHeight;
					track.CustomData.SetObject(MarkedFillEffectGuid, new Tuple<double, double>(xScale, yScale));
				} else {
					track.CustomData.DeleteData(MarkedFillEffectGuid);
					if (effect != null) track.Effects.Remove(effect);
				}
			}
		}

		public static void Arrange(VideoTrack[] tracks, AutoLayoutTracksInfos.GridInfo info, EntryPoint entryPoint) {
			if (!info.enabled) return;
			AutoLayoutTracksGridForm me = new AutoLayoutTracksGridForm(entryPoint, null, tracks);
			me.ReadFromInfo(info);
			me.Arrange();
		}

		public static bool IsEven(int n) {
			return n % 2 == 0;
		}
		public static bool IsOdd(int n) {
			return n % 2 != 0; // ±1
		}

		public void Translate() {
			Lang str = Lang.str;
			Font = new Font(str.ui_font, 9F);
			OkBtn.Text = str.complete;
			CancelBtn.Text = str.cancel;
			SquareRadio.Text = str.square;
			CustomRadio.Text = str.custom;
			RowCountLbl.Text = str.row_count;
			ColumnCountLbl.Text = str.column_count;
			FillRadio.Text = str.fill;
			AdaptRadio.Text = str.adapt;
			ReverseTracksCheck.Text = IsToolMode ? str.descending : str.ascending;
			PaddingLbl.Text = str.increase_padding;
			MinColumnsLink.Text = str.min;
			MaxColumnsLink.Text = str.max;
			FlipGroup.Text = str.mirror_edges;
			HFlipLbl.Text = str.h_flip;
			VFlipLbl.Text = str.v_flip;
			HFlipCombo.Items.Clear();
			HFlipCombo.Items.AddRange(new object[] {
				str.disable_flip, str.even_column, str.odd_column
			});
			VFlipCombo.Items.Clear();
			VFlipCombo.Items.AddRange(new object[] {
				str.disable_flip, str.even_row, str.odd_row
			});
			Text = str.auto_layout_tracks + " - " + str.grid_layout;
		}

		public void ReadIni() {
			configIni.StartSection("AutoLayoutTracksGrid");
			ReverseTracksCheck.Checked = configIni.Read("Reversed", true);
			PaddingBox.SetValue(configIni.Read("Padding", 0), 0);
			bool isSquare = configIni.Read("IsSquare", true);
			if (isSquare) SquareRadio.Checked = true;
			else {
				CustomRadio.Checked = true;
				if (configIni.Read("IsFill", true)) FillRadio.Checked = true;
				else AdaptRadio.Checked = true;
				ColumnCountBox.SetValue(configIni.Read("ColumnCount", -1), null);
			}
			HFlipCombo.SetIndex(configIni.Read("HorizontalFlip", 0), 0);
			VFlipCombo.SetIndex(configIni.Read("VerticalFlip", 0), 0);
			configIni.EndSection();
		}

		public void SaveIni() {
			configIni.StartSection("AutoLayoutTracksGrid");
			configIni.Write("IsSquare", SquareRadio.Checked);
			configIni.Write("IsFill", FillRadio.Checked);
			configIni.Write("Reversed", ReverseTracksCheck.Checked);
			configIni.Write("ColumnCount", ColumnCountBox.Value);
			configIni.Write("Padding", PaddingBox.Value);
			configIni.Write("HorizontalFlip", HFlipCombo.SelectedIndex);
			configIni.Write("VerticalFlip", VFlipCombo.SelectedIndex);
			configIni.EndSection();
		}

		private void MinColumnsLink_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e) {
			ColumnCountBox.Value = ColumnCountBox.Minimum;
		}

		private void MaxColumnsLink_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e) {
			ColumnCountBox.Value = ColumnCountBox.Maximum;
		}
	}

	partial class AutoLayoutTracksBox3dForm {
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer components = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose(bool disposing) {
			if (disposing && (components != null)) {
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent() {
			this.OkBtn = new System.Windows.Forms.Button();
			this.CancelBtn = new System.Windows.Forms.Button();
			this.dock = new System.Windows.Forms.TableLayoutPanel();
			this.table = new System.Windows.Forms.TableLayoutPanel();
			this.BottomCombo = new System.Windows.Forms.ComboBox();
			this.TopCombo = new System.Windows.Forms.ComboBox();
			this.RightCombo = new System.Windows.Forms.ComboBox();
			this.LeftCombo = new System.Windows.Forms.ComboBox();
			this.BackCombo = new System.Windows.Forms.ComboBox();
			this.BottomLbl = new System.Windows.Forms.Label();
			this.TopLbl = new System.Windows.Forms.Label();
			this.RightLbl = new System.Windows.Forms.Label();
			this.LeftLbl = new System.Windows.Forms.Label();
			this.BackLbl = new System.Windows.Forms.Label();
			this.InfoLbl = new System.Windows.Forms.Label();
			this.FrontLbl = new System.Windows.Forms.Label();
			this.FrontCombo = new System.Windows.Forms.ComboBox();
			this.DelOrigTrackCheck = new System.Windows.Forms.CheckBox();
			this.UseVideoLongerSideCheck = new System.Windows.Forms.CheckBox();
			this.dock.SuspendLayout();
			this.table.SuspendLayout();
			this.SuspendLayout();
			//
			// OkBtn
			//
			this.OkBtn.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.OkBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.OkBtn.Location = new System.Drawing.Point(374, 10);
			this.OkBtn.Margin = new System.Windows.Forms.Padding(4);
			this.OkBtn.Name = "OkBtn";
			this.OkBtn.Size = new System.Drawing.Size(94, 32);
			this.OkBtn.TabIndex = 1;
			this.OkBtn.Text = "完成(&O)";
			this.OkBtn.UseVisualStyleBackColor = true;
			this.OkBtn.Click += new System.EventHandler(this.OkBtn_Click);
			//
			// CancelBtn
			//
			this.CancelBtn.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.CancelBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.CancelBtn.Location = new System.Drawing.Point(476, 10);
			this.CancelBtn.Margin = new System.Windows.Forms.Padding(4);
			this.CancelBtn.Name = "CancelBtn";
			this.CancelBtn.Size = new System.Drawing.Size(94, 32);
			this.CancelBtn.TabIndex = 2;
			this.CancelBtn.Text = "取消(&C)";
			this.CancelBtn.UseVisualStyleBackColor = true;
			this.CancelBtn.Click += new System.EventHandler(this.CancelBtn_Click);
			//
			// dock
			//
			this.dock.BackColor = System.Drawing.SystemColors.Control;
			this.dock.ColumnCount = 3;
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.dock.Controls.Add(this.OkBtn, 1, 0);
			this.dock.Controls.Add(this.CancelBtn, 2, 0);
			this.dock.Dock = System.Windows.Forms.DockStyle.Bottom;
			this.dock.Location = new System.Drawing.Point(0, 421);
			this.dock.Margin = new System.Windows.Forms.Padding(4);
			this.dock.Name = "dock";
			this.dock.Padding = new System.Windows.Forms.Padding(8, 6, 8, 6);
			this.dock.RowCount = 1;
			this.dock.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.dock.Size = new System.Drawing.Size(582, 52);
			this.dock.TabIndex = 10;
			//
			// table
			//
			this.table.AutoSize = true;
			this.table.ColumnCount = 2;
			this.table.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.table.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.table.Controls.Add(this.BottomCombo, 1, 6);
			this.table.Controls.Add(this.TopCombo, 1, 5);
			this.table.Controls.Add(this.RightCombo, 1, 4);
			this.table.Controls.Add(this.LeftCombo, 1, 3);
			this.table.Controls.Add(this.BackCombo, 1, 2);
			this.table.Controls.Add(this.BottomLbl, 0, 6);
			this.table.Controls.Add(this.TopLbl, 0, 5);
			this.table.Controls.Add(this.RightLbl, 0, 4);
			this.table.Controls.Add(this.LeftLbl, 0, 3);
			this.table.Controls.Add(this.BackLbl, 0, 2);
			this.table.Controls.Add(this.InfoLbl, 0, 0);
			this.table.Controls.Add(this.FrontLbl, 0, 1);
			this.table.Controls.Add(this.FrontCombo, 1, 1);
			this.table.Controls.Add(this.DelOrigTrackCheck, 0, 7);
			this.table.Controls.Add(this.UseVideoLongerSideCheck, 0, 8);
			this.table.Dock = System.Windows.Forms.DockStyle.Top;
			this.table.Location = new System.Drawing.Point(0, 0);
			this.table.Margin = new System.Windows.Forms.Padding(5);
			this.table.Name = "table";
			this.table.Padding = new System.Windows.Forms.Padding(12, 14, 12, 14);
			this.table.RowCount = 9;
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 25F));
			this.table.Size = new System.Drawing.Size(582, 388);
			this.table.TabIndex = 12;
			//
			// BottomCombo
			//
			this.BottomCombo.Dock = System.Windows.Forms.DockStyle.Fill;
			this.BottomCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.BottomCombo.FormattingEnabled = true;
			this.BottomCombo.Location = new System.Drawing.Point(63, 274);
			this.BottomCombo.Margin = new System.Windows.Forms.Padding(4);
			this.BottomCombo.Name = "BottomCombo";
			this.BottomCombo.Size = new System.Drawing.Size(503, 28);
			this.BottomCombo.TabIndex = 12;
			this.BottomCombo.SelectedIndexChanged += new System.EventHandler(this.Combo_SelectedIndexChanged);
			//
			// TopCombo
			//
			this.TopCombo.Dock = System.Windows.Forms.DockStyle.Fill;
			this.TopCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.TopCombo.FormattingEnabled = true;
			this.TopCombo.Location = new System.Drawing.Point(63, 238);
			this.TopCombo.Margin = new System.Windows.Forms.Padding(4);
			this.TopCombo.Name = "TopCombo";
			this.TopCombo.Size = new System.Drawing.Size(503, 28);
			this.TopCombo.TabIndex = 11;
			this.TopCombo.SelectedIndexChanged += new System.EventHandler(this.Combo_SelectedIndexChanged);
			//
			// RightCombo
			//
			this.RightCombo.Dock = System.Windows.Forms.DockStyle.Fill;
			this.RightCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.RightCombo.FormattingEnabled = true;
			this.RightCombo.Location = new System.Drawing.Point(63, 202);
			this.RightCombo.Margin = new System.Windows.Forms.Padding(4);
			this.RightCombo.Name = "RightCombo";
			this.RightCombo.Size = new System.Drawing.Size(503, 28);
			this.RightCombo.TabIndex = 10;
			this.RightCombo.SelectedIndexChanged += new System.EventHandler(this.Combo_SelectedIndexChanged);
			//
			// LeftCombo
			//
			this.LeftCombo.Dock = System.Windows.Forms.DockStyle.Fill;
			this.LeftCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.LeftCombo.FormattingEnabled = true;
			this.LeftCombo.Location = new System.Drawing.Point(63, 166);
			this.LeftCombo.Margin = new System.Windows.Forms.Padding(4);
			this.LeftCombo.Name = "LeftCombo";
			this.LeftCombo.Size = new System.Drawing.Size(503, 28);
			this.LeftCombo.TabIndex = 9;
			this.LeftCombo.SelectedIndexChanged += new System.EventHandler(this.Combo_SelectedIndexChanged);
			//
			// BackCombo
			//
			this.BackCombo.Dock = System.Windows.Forms.DockStyle.Fill;
			this.BackCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.BackCombo.FormattingEnabled = true;
			this.BackCombo.Location = new System.Drawing.Point(63, 130);
			this.BackCombo.Margin = new System.Windows.Forms.Padding(4);
			this.BackCombo.Name = "BackCombo";
			this.BackCombo.Size = new System.Drawing.Size(503, 28);
			this.BackCombo.TabIndex = 8;
			this.BackCombo.SelectedIndexChanged += new System.EventHandler(this.Combo_SelectedIndexChanged);
			//
			// BottomLbl
			//
			this.BottomLbl.AutoSize = true;
			this.BottomLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.BottomLbl.Location = new System.Drawing.Point(16, 270);
			this.BottomLbl.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.BottomLbl.Name = "BottomLbl";
			this.BottomLbl.Size = new System.Drawing.Size(39, 36);
			this.BottomLbl.TabIndex = 6;
			this.BottomLbl.Text = "底面";
			this.BottomLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// TopLbl
			//
			this.TopLbl.AutoSize = true;
			this.TopLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.TopLbl.Location = new System.Drawing.Point(16, 234);
			this.TopLbl.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.TopLbl.Name = "TopLbl";
			this.TopLbl.Size = new System.Drawing.Size(39, 36);
			this.TopLbl.TabIndex = 5;
			this.TopLbl.Text = "顶面";
			this.TopLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// RightLbl
			//
			this.RightLbl.AutoSize = true;
			this.RightLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.RightLbl.Location = new System.Drawing.Point(16, 198);
			this.RightLbl.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.RightLbl.Name = "RightLbl";
			this.RightLbl.Size = new System.Drawing.Size(39, 36);
			this.RightLbl.TabIndex = 4;
			this.RightLbl.Text = "右面";
			this.RightLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// LeftLbl
			//
			this.LeftLbl.AutoSize = true;
			this.LeftLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.LeftLbl.Location = new System.Drawing.Point(16, 162);
			this.LeftLbl.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.LeftLbl.Name = "LeftLbl";
			this.LeftLbl.Size = new System.Drawing.Size(39, 36);
			this.LeftLbl.TabIndex = 3;
			this.LeftLbl.Text = "左面";
			this.LeftLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// BackLbl
			//
			this.BackLbl.AutoSize = true;
			this.BackLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.BackLbl.Location = new System.Drawing.Point(16, 126);
			this.BackLbl.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.BackLbl.Name = "BackLbl";
			this.BackLbl.Size = new System.Drawing.Size(39, 36);
			this.BackLbl.TabIndex = 2;
			this.BackLbl.Text = "后面";
			this.BackLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// InfoLbl
			//
			this.InfoLbl.AutoSize = true;
			this.table.SetColumnSpan(this.InfoLbl, 2);
			this.InfoLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.InfoLbl.Location = new System.Drawing.Point(16, 22);
			this.InfoLbl.Margin = new System.Windows.Forms.Padding(4, 8, 4, 8);
			this.InfoLbl.Name = "InfoLbl";
			this.InfoLbl.Size = new System.Drawing.Size(550, 60);
			this.InfoLbl.TabIndex = 0;
			this.InfoLbl.Text = "由于脚本功能限制，将会新建轨道并将选定轨道中的剪辑移动过去，原轨道中的轨道运动、效果等信息将会丢失。\r\n请在下方选定立方体的各个面所使用的轨道，如果为空则表示不设" +
	"定该面。";
			this.InfoLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// FrontLbl
			//
			this.FrontLbl.AutoSize = true;
			this.FrontLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.FrontLbl.Location = new System.Drawing.Point(16, 90);
			this.FrontLbl.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.FrontLbl.Name = "FrontLbl";
			this.FrontLbl.Size = new System.Drawing.Size(39, 36);
			this.FrontLbl.TabIndex = 1;
			this.FrontLbl.Text = "前面";
			this.FrontLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// FrontCombo
			//
			this.FrontCombo.Dock = System.Windows.Forms.DockStyle.Fill;
			this.FrontCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.FrontCombo.FormattingEnabled = true;
			this.FrontCombo.Location = new System.Drawing.Point(63, 94);
			this.FrontCombo.Margin = new System.Windows.Forms.Padding(4);
			this.FrontCombo.Name = "FrontCombo";
			this.FrontCombo.Size = new System.Drawing.Size(503, 28);
			this.FrontCombo.TabIndex = 7;
			this.FrontCombo.SelectedIndexChanged += new System.EventHandler(this.Combo_SelectedIndexChanged);
			//
			// DelOrigTrackCheck
			//
			this.DelOrigTrackCheck.AutoSize = true;
			this.DelOrigTrackCheck.Checked = true;
			this.DelOrigTrackCheck.CheckState = System.Windows.Forms.CheckState.Checked;
			this.table.SetColumnSpan(this.DelOrigTrackCheck, 2);
			this.DelOrigTrackCheck.Dock = System.Windows.Forms.DockStyle.Fill;
			this.DelOrigTrackCheck.Location = new System.Drawing.Point(16, 314);
			this.DelOrigTrackCheck.Margin = new System.Windows.Forms.Padding(4, 8, 4, 4);
			this.DelOrigTrackCheck.Name = "DelOrigTrackCheck";
			this.DelOrigTrackCheck.Size = new System.Drawing.Size(550, 24);
			this.DelOrigTrackCheck.TabIndex = 13;
			this.DelOrigTrackCheck.Text = "删除原轨道";
			this.DelOrigTrackCheck.UseVisualStyleBackColor = true;
			//
			// UseVideoLongerSideCheck
			//
			this.UseVideoLongerSideCheck.AutoSize = true;
			this.table.SetColumnSpan(this.UseVideoLongerSideCheck, 2);
			this.UseVideoLongerSideCheck.Dock = System.Windows.Forms.DockStyle.Fill;
			this.UseVideoLongerSideCheck.Location = new System.Drawing.Point(16, 346);
			this.UseVideoLongerSideCheck.Margin = new System.Windows.Forms.Padding(4);
			this.UseVideoLongerSideCheck.Name = "UseVideoLongerSideCheck";
			this.UseVideoLongerSideCheck.Size = new System.Drawing.Size(550, 24);
			this.UseVideoLongerSideCheck.TabIndex = 14;
			this.UseVideoLongerSideCheck.Text = "使用视频的长边作为立方体的棱长";
			this.UseVideoLongerSideCheck.UseVisualStyleBackColor = true;
			//
			// AutoLayoutTracksBox3dForm
			//
			this.AcceptButton = this.OkBtn;
			this.AutoScaleDimensions = new System.Drawing.SizeF(120F, 120F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Dpi;
			this.BackColor = System.Drawing.SystemColors.Window;
			this.CancelButton = this.CancelBtn;
			this.ClientSize = new System.Drawing.Size(582, 473);
			this.Controls.Add(this.table);
			this.Controls.Add(this.dock);
			this.Font = new System.Drawing.Font("Microsoft YaHei UI", 9F);
			this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
			this.Location = new System.Drawing.Point(60, 60);
			this.Margin = new System.Windows.Forms.Padding(5);
			this.MaximizeBox = false;
			this.MinimizeBox = false;
			this.Name = "AutoLayoutTracksBox3dForm";
			this.ShowInTaskbar = false;
			this.StartPosition = System.Windows.Forms.FormStartPosition.Manual;
			this.Text = "自动布局轨道 - 3D 方盒布局";
			this.dock.ResumeLayout(false);
			this.table.ResumeLayout(false);
			this.table.PerformLayout();
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion

		public System.Windows.Forms.Button OkBtn;
		public System.Windows.Forms.Button CancelBtn;
		public System.Windows.Forms.TableLayoutPanel dock;
		private System.Windows.Forms.TableLayoutPanel table;
		private System.Windows.Forms.ComboBox BottomCombo;
		private System.Windows.Forms.ComboBox TopCombo;
		private System.Windows.Forms.ComboBox RightCombo;
		private System.Windows.Forms.ComboBox LeftCombo;
		private System.Windows.Forms.ComboBox BackCombo;
		private System.Windows.Forms.Label BottomLbl;
		private System.Windows.Forms.Label TopLbl;
		private System.Windows.Forms.Label RightLbl;
		private System.Windows.Forms.Label LeftLbl;
		private System.Windows.Forms.Label BackLbl;
		private System.Windows.Forms.Label InfoLbl;
		private System.Windows.Forms.Label FrontLbl;
		private System.Windows.Forms.ComboBox FrontCombo;
		private System.Windows.Forms.CheckBox DelOrigTrackCheck;
		private System.Windows.Forms.CheckBox UseVideoLongerSideCheck;
	}

	public partial class AutoLayoutTracksBox3dForm : Form, IAutoLayoutTracks, IConfigIniUser, IInterpret {
		private readonly EntryPoint parent;
		private Vegas vegas { get { return parent.vegas; } }
		private ConfigIni configIni { get { return parent.configIni; } }
		private readonly List<VideoTrack> tracks;
		private readonly List<string> trackNames;
		private readonly ComboBox[] combos;
		public AutoLayoutTracksBox3dForm(EntryPoint entryPoint) {
			InitializeComponent();
			parent = entryPoint;
			Icon = ConfigForm.icon;
			this.ReserveSystemMenuItems(SystemMenuItemType.MOVE | SystemMenuItemType.CLOSE);
			Translate();
			Height = table.Height + dock.Height + SelectIntervalForm.MARGIN;
			Lang str = Lang.str;
			ToolTip toolTip = new ToolTip();
			toolTip.SetToolTip(UseVideoLongerSideCheck, str.use_video_longer_side_tooltip);
			SideName = new string[] { str.front_surface, str.back_surface, str.left_surface, str.right_surface, str.top_surface, str.bottom_surface };
			tracks = new List<VideoTrack> { null };
			VideoTrack[] _ = parent.GetSelectedVideoTracks();
			if (_.Length == 0) {
				EntryPoint.ShowError(new Exceptions.FailToSelectTracksException());
				Close();
			}
			tracks.AddRange(_);
			trackNames = new List<string>();
			foreach (VideoTrack track in tracks) {
				string name = "";
				if (track != null) {
					name += str.track + " " + (track.Index + 1);
					if (!string.IsNullOrWhiteSpace(track.Name)) name += str.colon + track.Name;
				}
				trackNames.Add(name);
			}
			combos = new ComboBox[] { FrontCombo, BackCombo, LeftCombo, RightCombo, TopCombo, BottomCombo };
			int _count = trackNames.Count;
			for (int i = 0; i < combos.Length; i++) {
				int j = i + 1;
				ComboBox combo = combos[i];
				combo.Items.AddRange(trackNames.ToArray());
				if (j < _count) combo.SelectedIndex = j;
				else combo.SelectedIndex = 0;
			}
			((Action)ReadIni).OnErrorBreak();
			FormClosing += (sender, e) => SaveIni();
		}

		private void CancelBtn_Click(object sender, EventArgs e) {
			Close();
		}

		public void OkBtn_Click(object sender, EventArgs e) {
			Arrange();
			Close();
		}

		public void ReadIni() {
			configIni.StartSection("AutoLayoutTracksBox3d");
			DelOrigTrackCheck.Checked = configIni.Read("DeleteOriginalTracks", true);
			UseVideoLongerSideCheck.Checked = configIni.Read("UseVideoLongerSide", false);
			configIni.EndSection();
		}

		public void SaveIni() {
			configIni.StartSection("AutoLayoutTracksBox3d");
			configIni.Write("DeleteOriginalTracks", DelOrigTrackCheck.Checked);
			configIni.Write("UseVideoLongerSide", UseVideoLongerSideCheck.Checked);
			configIni.EndSection();
		}

		private void Combo_SelectedIndexChanged(object sender, EventArgs e) {
			if (!(sender is ComboBox)) return;
			ComboBox combo = sender as ComboBox;
			int selected = combo.SelectedIndex;
			if (selected == 0 || selected == -1) return;
			foreach (Control control in table.Controls) {
				if (control is ComboBox) {
					ComboBox comboBox = control as ComboBox;
					if (comboBox == combo) continue;
					if (comboBox.SelectedIndex == selected) comboBox.SelectedIndex = 0;
				}
			}
		}

		private enum Side {
			FRONT, BACK, LEFT, RIGHT, TOP, BOTTOM
		}
		private static string[] SideName;
		private readonly VideoTrack[] origTracks = new VideoTrack[6];
		private readonly VideoTrack[] newTracks = new VideoTrack[6];
		private VideoTrack parentTrack;
		private int parentNestLevel = NONE_TRACKS_USED;
		private int childNestLevel { get { return parentNestLevel + 1; } }
		private int firstTrackIndex = NONE_TRACKS_USED;
		private const int NONE_TRACKS_USED = -1;

		/// <summary>
		/// 移动轨道。<br />
		/// 由于功能限制，只能移动轨道剪辑，不能移动轨道运动和轨道效果等信息。
		/// </summary>
		/// <param name="orig">原轨道</param>
		/// <param name="side">是立方体的哪一边</param>
		/// <param name="index">移动到哪个序号</param>
		/// <returns></returns>
		private VideoTrack MoveTrack(VideoTrack orig, Side side, int index = 1) {
			if (orig == null) return null;
			string name = orig.Name;
			string extendedName = SideName[(int)side];
			if (!string.IsNullOrWhiteSpace(name)) extendedName += "：" + name;
			VideoTrack track = new VideoTrack(vegas.Project, index, extendedName);
			vegas.Project.Tracks.Add(track);
			while (orig.Events.Count != 0) orig.Events[0].Track = track;
			track.CompositeNestingLevel = childNestLevel;
			track.CompositeMode = CompositeMode.SrcAlpha3D;
			TrackMotionKeyframe frame = track.TrackMotion.MotionKeyframes[0];
			double trans = (
				!UseVideoLongerSideCheck.Checked ?
				Math.Min(vegas.Project.Video.Height, vegas.Project.Video.Width) :
				Math.Max(vegas.Project.Video.Height, vegas.Project.Video.Width)
			) / 2;
			switch (side) {
				case Side.FRONT:
					frame.PositionZ = -trans;
					break;
				case Side.BACK:
					frame.PositionZ = trans;
					frame.OrientationY = 180;
					break;
				case Side.LEFT:
					frame.PositionX = -trans;
					frame.OrientationY = 90;
					break;
				case Side.RIGHT:
					frame.PositionX = trans;
					frame.OrientationY = -90;
					break;
				case Side.TOP:
					frame.PositionY = trans;
					frame.OrientationX = -90;
					break;
				case Side.BOTTOM:
					frame.PositionY = trans;
					frame.OrientationX = -90;
					break;
				default:
					break;
			}

			if (DelOrigTrackCheck.Checked) vegas.Project.Tracks.Remove(orig);
			return track;
		}

		public void Arrange() {
			for (int i = 0; i < origTracks.Length; i++) {
				VideoTrack track = origTracks[i] = tracks[combos[i].SelectedIndex];
				if (track != null && parentNestLevel == NONE_TRACKS_USED) {
					parentNestLevel = track.CompositeNestingLevel;
					firstTrackIndex = track.Index;
				}
			}
			if (parentNestLevel == NONE_TRACKS_USED) return;
			vegas.Project.Tracks.Add(parentTrack = new VideoTrack(vegas.Project, firstTrackIndex++, ""));
			parentTrack.CompositeNestingLevel = parentNestLevel;
			for (int i = newTracks.Length - 1; i >= 0; i--)
				newTracks[i] = MoveTrack(origTracks[i], (Side)i, firstTrackIndex);
			parentTrack.CompositeMode = CompositeMode.SrcAlpha3D;
			parentTrack.ParentCompositeMode = CompositeMode.SrcAlpha3D;
			TrackMotionKeyframe example = parentTrack.ParentTrackMotion.MotionKeyframes[0];
			example.Width = example.Height = example.Depth = vegas.Project.Video.Height / 2.0;
			example.OrientationX = 35;
			example.OrientationY = 30;
			example.OrientationZ = -20;
		}

		public void Translate() {
			Lang str = Lang.str;
			Font = new Font(str.ui_font, 9F);
			OkBtn.Text = str.complete;
			CancelBtn.Text = str.cancel;
			BottomLbl.Text = str.bottom_surface;
			TopLbl.Text = str.top_surface;
			RightLbl.Text = str.right_surface;
			LeftLbl.Text = str.left_surface;
			BackLbl.Text = str.back_surface;
			FrontLbl.Text = str.front_surface;
			InfoLbl.Text = str.box_3d_layout_info;
			DelOrigTrackCheck.Text =str.delete_original_tracks;
			UseVideoLongerSideCheck.Text = str.use_video_longer_side;
			Text = str.auto_layout_tracks + " - " + str.box_3d_layout;
		}

		private void ReadFromInfo() {
			throw new NotImplementedException();
		}
	}

	partial class GradientTracksForm {
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer components = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose(bool disposing) {
			if (disposing && (components != null)) {
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent() {
			this.OkBtn = new System.Windows.Forms.Button();
			this.CancelBtn = new System.Windows.Forms.Button();
			this.table = new System.Windows.Forms.TableLayoutPanel();
			this.InfoLbl = new System.Windows.Forms.Label();
			this.EffectsCombo = new System.Windows.Forms.ComboBox();
			this.ReverseCheck = new System.Windows.Forms.CheckBox();
			this.dock = new System.Windows.Forms.TableLayoutPanel();
			this.table.SuspendLayout();
			this.dock.SuspendLayout();
			this.SuspendLayout();
			//
			// OkBtn
			//
			this.OkBtn.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.OkBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.OkBtn.Location = new System.Drawing.Point(397, 10);
			this.OkBtn.Margin = new System.Windows.Forms.Padding(4);
			this.OkBtn.Name = "OkBtn";
			this.OkBtn.Size = new System.Drawing.Size(94, 32);
			this.OkBtn.TabIndex = 1;
			this.OkBtn.Text = "完成(&O)";
			this.OkBtn.UseVisualStyleBackColor = true;
			this.OkBtn.Click += new System.EventHandler(this.OkBtn_Click);
			//
			// CancelBtn
			//
			this.CancelBtn.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.CancelBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.CancelBtn.Location = new System.Drawing.Point(499, 10);
			this.CancelBtn.Margin = new System.Windows.Forms.Padding(4);
			this.CancelBtn.Name = "CancelBtn";
			this.CancelBtn.Size = new System.Drawing.Size(94, 32);
			this.CancelBtn.TabIndex = 2;
			this.CancelBtn.Text = "取消(&C)";
			this.CancelBtn.UseVisualStyleBackColor = true;
			this.CancelBtn.Click += new System.EventHandler(this.CancelBtn_Click);
			//
			// table
			//
			this.table.AutoSize = true;
			this.table.ColumnCount = 1;
			this.table.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.table.Controls.Add(this.InfoLbl, 0, 0);
			this.table.Controls.Add(this.EffectsCombo, 0, 1);
			this.table.Controls.Add(this.ReverseCheck, 0, 2);
			this.table.Dock = System.Windows.Forms.DockStyle.Top;
			this.table.Location = new System.Drawing.Point(0, 0);
			this.table.Margin = new System.Windows.Forms.Padding(5);
			this.table.Name = "table";
			this.table.Padding = new System.Windows.Forms.Padding(12, 14, 12, 14);
			this.table.RowCount = 3;
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 25F));
			this.table.Size = new System.Drawing.Size(605, 132);
			this.table.TabIndex = 14;
			//
			// InfoLbl
			//
			this.InfoLbl.AutoSize = true;
			this.InfoLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.InfoLbl.Location = new System.Drawing.Point(12, 22);
			this.InfoLbl.Margin = new System.Windows.Forms.Padding(0, 8, 0, 4);
			this.InfoLbl.Name = "InfoLbl";
			this.InfoLbl.Size = new System.Drawing.Size(581, 20);
			this.InfoLbl.TabIndex = 0;
			this.InfoLbl.Text = "选择一种渐变效果应用到所选的视频轨道：";
			this.InfoLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// EffectsCombo
			//
			this.EffectsCombo.Dock = System.Windows.Forms.DockStyle.Fill;
			this.EffectsCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.EffectsCombo.FormattingEnabled = true;
			this.EffectsCombo.Items.AddRange(new object[] {
			"彩虹色",
			"逐渐饱和",
			"逐渐对比",
			"阈值",
			"彩灰交替",
			"正负交替"});
			this.EffectsCombo.Location = new System.Drawing.Point(16, 50);
			this.EffectsCombo.Margin = new System.Windows.Forms.Padding(4);
			this.EffectsCombo.Name = "EffectsCombo";
			this.EffectsCombo.Size = new System.Drawing.Size(573, 28);
			this.EffectsCombo.TabIndex = 1;
			//
			// ReverseCheck
			//
			this.ReverseCheck.AutoSize = true;
			this.ReverseCheck.Checked = true;
			this.ReverseCheck.CheckState = System.Windows.Forms.CheckState.Checked;
			this.ReverseCheck.Location = new System.Drawing.Point(16, 90);
			this.ReverseCheck.Margin = new System.Windows.Forms.Padding(4, 8, 4, 4);
			this.ReverseCheck.Name = "ReverseCheck";
			this.ReverseCheck.Size = new System.Drawing.Size(91, 24);
			this.ReverseCheck.TabIndex = 2;
			this.ReverseCheck.Text = "降序排序";
			this.ReverseCheck.UseVisualStyleBackColor = true;
			//
			// dock
			//
			this.dock.BackColor = System.Drawing.SystemColors.Control;
			this.dock.ColumnCount = 3;
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.dock.Controls.Add(this.OkBtn, 1, 0);
			this.dock.Controls.Add(this.CancelBtn, 2, 0);
			this.dock.Dock = System.Windows.Forms.DockStyle.Bottom;
			this.dock.Location = new System.Drawing.Point(0, 137);
			this.dock.Margin = new System.Windows.Forms.Padding(4);
			this.dock.Name = "dock";
			this.dock.Padding = new System.Windows.Forms.Padding(8, 6, 8, 6);
			this.dock.RowCount = 1;
			this.dock.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.dock.Size = new System.Drawing.Size(605, 52);
			this.dock.TabIndex = 13;
			//
			// GradientTracksForm
			//
			this.AcceptButton = this.OkBtn;
			this.AutoScaleDimensions = new System.Drawing.SizeF(120F, 120F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Dpi;
			this.BackColor = System.Drawing.SystemColors.Window;
			this.CancelButton = this.CancelBtn;
			this.ClientSize = new System.Drawing.Size(605, 189);
			this.Controls.Add(this.table);
			this.Controls.Add(this.dock);
			this.Font = new System.Drawing.Font("Microsoft YaHei UI", 9F);
			this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
			this.Location = new System.Drawing.Point(60, 60);
			this.Margin = new System.Windows.Forms.Padding(5);
			this.MaximizeBox = false;
			this.MinimizeBox = false;
			this.Name = "GradientTracksForm";
			this.ShowInTaskbar = false;
			this.StartPosition = System.Windows.Forms.FormStartPosition.Manual;
			this.Text = "渐变轨道";
			this.table.ResumeLayout(false);
			this.table.PerformLayout();
			this.dock.ResumeLayout(false);
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion
		private System.Windows.Forms.TableLayoutPanel table;
		public System.Windows.Forms.Button OkBtn;
		public System.Windows.Forms.Button CancelBtn;
		public System.Windows.Forms.TableLayoutPanel dock;
		private System.Windows.Forms.Label InfoLbl;
		private System.Windows.Forms.ComboBox EffectsCombo;
		private System.Windows.Forms.CheckBox ReverseCheck;
	}

	public partial class GradientTracksForm : Form, IAutoLayoutTracks, IInterpret, IConfigIniUser {
		private readonly EntryPoint parent;
		private Vegas vegas { get { return parent.vegas; } }
		private ConfigIni configIni { get { return parent.configIni; } }
		private AutoLayoutTracksInfos.GradientTracksInfo info;
		private readonly VideoTrack[] tracks;
		public bool IsToolMode { get { return info == null; } }
		public bool EnableAutoLayoutTracksGrid { get { return info != null && info.AllInfos.Grid.enabled || gridInfo != null && gridInfo.enabled; } }
		private AutoLayoutTracksInfos.GridInfo gridInfo;
		public GradientTracksForm(EntryPoint e) : this(e, null, null) { }
		public GradientTracksForm(EntryPoint entryPoint, AutoLayoutTracksInfos.GradientTracksInfo info = null, VideoTrack[] tracks = null) {
			InitializeComponent();
			parent = entryPoint;
			this.info = info;
			Icon = ConfigForm.icon;
			this.ReserveSystemMenuItems(SystemMenuItemType.MOVE | SystemMenuItemType.CLOSE);
			Translate();
			EffectsCombo.SelectedIndex = 0;
			ReverseCheck.Checked = true;
			((Action)ReadIni).OnErrorBreak();
			FormClosing += (sender, e) => SaveIni();
			ReadFromInfo();
			this.tracks = tracks ?? parent.GetSelectedVideoTracks();
		}

		private void CancelBtn_Click(object sender, EventArgs e) {
			Close();
		}

		public void OkBtn_Click(object sender, EventArgs e) {
			if (IsToolMode) Arrange();
			else {
				info.enabled = true;
				info.descending = ReverseCheck.Checked;
				info.effect = (VideoTrackGradientEffectType)EffectsCombo.SelectedIndex;
			}
			Close();
		}

		private void ReadFromInfo(AutoLayoutTracksInfos.GradientTracksInfo _info = null) {
			if (_info != null) info = _info;
			if (IsToolMode || !info.enabled) return;

			EffectsCombo.SetIndex((int)info.effect, 0);
			ReverseCheck.Checked = info.descending;
			if (_info != null) ReverseCheck.Checked = !ReverseCheck.Checked;
			if (_info != null && _info.AllInfos.Grid.enabled) gridInfo = _info.AllInfos.Grid;

			if (_info != null) info = null;
		}

		public void Arrange() {
			Plugin.Init(vegas);
			VideoTrackGradientEffectType effect = (VideoTrackGradientEffectType)EffectsCombo.SelectedIndex;
			bool isReversed = ReverseCheck.Checked;
			int gridColumn = 0; // 0 表示无效值。
			if (EnableAutoLayoutTracksGrid && gridInfo != null)
				gridColumn = gridInfo.isSquare ? AutoLayoutTracksGridForm.GetSquareSide(tracks.Length) : gridInfo.columns;
			switch (effect) {
				case VideoTrackGradientEffectType.RAINBOW:
					if (Plugin.hslAdjust == null) { EntryPoint.ShowError(new Exceptions.NoPluginNameException(Lang.str.hsl_adjust)); return; }
					Plugin.ForVideoTracks.Rainbow(tracks, isReversed);
					break;
				case VideoTrackGradientEffectType.GRADUALLY_SATURATED:
					if (Plugin.hslAdjust == null) { EntryPoint.ShowError(new Exceptions.NoPluginNameException(Lang.str.hsl_adjust)); return; }
					Plugin.ForVideoTracks.Saturated(tracks, isReversed);
					break;
				case VideoTrackGradientEffectType.GRADUALLY_CONTRASTED:
					if (Plugin.contrast == null) { EntryPoint.ShowError(new Exceptions.NoPluginNameException(Lang.str.brightness_and_contrast)); return; }
					Plugin.ForVideoTracks.Contrasted(tracks, isReversed);
					break;
				case VideoTrackGradientEffectType.THRESHOLD:
					if (Plugin.contrast == null) { EntryPoint.ShowError(new Exceptions.NoPluginNameException(Lang.str.brightness_and_contrast)); return; }
					Plugin.ForVideoTracks.Threshold(tracks, isReversed);
					break;
				case VideoTrackGradientEffectType.ALTERNATELY_CHROMATIC:
					if (Plugin.blackAndWhite == null) { EntryPoint.ShowError(new Exceptions.NoPluginNameException(Lang.str.black_and_white)); return; }
					Plugin.ForVideoTracks.Chromatic(tracks, isReversed, gridColumn);
					break;
				case VideoTrackGradientEffectType.ALTERNATELY_NEGATIVE:
					if (Plugin.invert == null) { EntryPoint.ShowError(new Exceptions.NoPluginNameException(Lang.str.invert)); return; }
					Plugin.ForVideoTracks.Negative(tracks, isReversed, gridColumn);
					break;
				default:
					break;
			}
		}

		public static void Arrange(VideoTrack[] tracks, AutoLayoutTracksInfos.GradientTracksInfo info, EntryPoint entryPoint) {
			if (!info.enabled) return;
			GradientTracksForm me = new GradientTracksForm(entryPoint, null, tracks);
			me.ReadFromInfo(info);
			me.Arrange();
		}

		public void Translate() {
			Lang str = Lang.str;
			Font = new Font(str.ui_font, 9F);
			OkBtn.Text = str.complete;
			CancelBtn.Text = str.cancel;
			InfoLbl.Text = str.gradient_tracks_info;
			EffectsCombo.Items.Clear();
			EffectsCombo.Items.AddRange(new string[] {
				str.rainbow_color, str.gradually_saturated, str.gradually_contrasted,
				str.threshold, str.alternately_chromatic, str.alternately_negative
			});
			ReverseCheck.Text = IsToolMode ? str.descending : str.ascending;
			Text = str.gradient_tracks;
		}

		public void ReadIni() {
			configIni.StartSection("GradientTracks");
			EffectsCombo.SetIndex(configIni.Read("Effect", 0), 0);
			ReverseCheck.Checked = configIni.Read("Reversed", true);
			configIni.EndSection();
		}

		public void SaveIni() {
			configIni.StartSection("GradientTracks");
			configIni.Write("Effect", EffectsCombo.SelectedIndex);
			configIni.Write("Reversed", ReverseCheck.Checked);
			configIni.EndSection();
		}
	}

	partial class ChangeTuneMethodForm {
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer components = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose(bool disposing) {
			if (disposing && (components != null)) {
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent() {
			this.OkBtn = new System.Windows.Forms.Button();
			this.CancelBtn = new System.Windows.Forms.Button();
			this.dock = new System.Windows.Forms.TableLayoutPanel();
			this.table = new System.Windows.Forms.TableLayoutPanel();
			this.InfoLbl = new System.Windows.Forms.Label();
			this.TimeStretchPitchShiftGroup = new System.Windows.Forms.GroupBox();
			this.tableLayoutPanel2 = new System.Windows.Forms.TableLayoutPanel();
			this.FormantLockCheck = new System.Windows.Forms.CheckBox();
			this.StretchAttrCombo = new System.Windows.Forms.ComboBox();
			this.FormantChangeLbl = new System.Windows.Forms.Label();
			this.PitchChangeLbl = new System.Windows.Forms.Label();
			this.StretchAttrLbl = new System.Windows.Forms.Label();
			this.MethodLbl = new System.Windows.Forms.Label();
			this.MethodCombo = new System.Windows.Forms.ComboBox();
			this.tableLayoutPanel1 = new System.Windows.Forms.TableLayoutPanel();
			this.LockPitchInsteadOfRateCheck = new System.Windows.Forms.CheckBox();
			this.PitchLockCheck = new System.Windows.Forms.CheckBox();
			this.dock.SuspendLayout();
			this.table.SuspendLayout();
			this.TimeStretchPitchShiftGroup.SuspendLayout();
			this.tableLayoutPanel2.SuspendLayout();
			this.tableLayoutPanel1.SuspendLayout();
			this.SuspendLayout();
			//
			// OkBtn
			//
			this.OkBtn.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.OkBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.OkBtn.Location = new System.Drawing.Point(474, 10);
			this.OkBtn.Margin = new System.Windows.Forms.Padding(4);
			this.OkBtn.Name = "OkBtn";
			this.OkBtn.Size = new System.Drawing.Size(94, 32);
			this.OkBtn.TabIndex = 1;
			this.OkBtn.Text = "完成(&O)";
			this.OkBtn.UseVisualStyleBackColor = true;
			this.OkBtn.Click += new System.EventHandler(this.OkBtn_Click);
			//
			// CancelBtn
			//
			this.CancelBtn.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.CancelBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.CancelBtn.Location = new System.Drawing.Point(576, 10);
			this.CancelBtn.Margin = new System.Windows.Forms.Padding(4);
			this.CancelBtn.Name = "CancelBtn";
			this.CancelBtn.Size = new System.Drawing.Size(94, 32);
			this.CancelBtn.TabIndex = 2;
			this.CancelBtn.Text = "取消(&C)";
			this.CancelBtn.UseVisualStyleBackColor = true;
			this.CancelBtn.Click += new System.EventHandler(this.CancelBtn_Click);
			//
			// dock
			//
			this.dock.BackColor = System.Drawing.SystemColors.Control;
			this.dock.ColumnCount = 3;
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.dock.Controls.Add(this.OkBtn, 1, 0);
			this.dock.Controls.Add(this.CancelBtn, 2, 0);
			this.dock.Dock = System.Windows.Forms.DockStyle.Bottom;
			this.dock.Location = new System.Drawing.Point(0, 271);
			this.dock.Margin = new System.Windows.Forms.Padding(4);
			this.dock.Name = "dock";
			this.dock.Padding = new System.Windows.Forms.Padding(8, 6, 8, 6);
			this.dock.RowCount = 1;
			this.dock.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.dock.Size = new System.Drawing.Size(682, 52);
			this.dock.TabIndex = 15;
			//
			// table
			//
			this.table.AutoSize = true;
			this.table.ColumnCount = 1;
			this.table.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.table.Controls.Add(this.InfoLbl, 0, 0);
			this.table.Controls.Add(this.TimeStretchPitchShiftGroup, 0, 1);
			this.table.Dock = System.Windows.Forms.DockStyle.Top;
			this.table.Location = new System.Drawing.Point(0, 0);
			this.table.Margin = new System.Windows.Forms.Padding(5);
			this.table.Name = "table";
			this.table.Padding = new System.Windows.Forms.Padding(12, 14, 12, 14);
			this.table.RowCount = 2;
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.table.Size = new System.Drawing.Size(682, 248);
			this.table.TabIndex = 17;
			//
			// InfoLbl
			//
			this.InfoLbl.AutoSize = true;
			this.InfoLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.InfoLbl.Font = new System.Drawing.Font("微软雅黑", 9F);
			this.InfoLbl.Location = new System.Drawing.Point(12, 22);
			this.InfoLbl.Margin = new System.Windows.Forms.Padding(0, 8, 0, 8);
			this.InfoLbl.Name = "InfoLbl";
			this.InfoLbl.Size = new System.Drawing.Size(658, 20);
			this.InfoLbl.TabIndex = 0;
			this.InfoLbl.Text = "仅支持音频事件属性中的调音方法，不支持“移调”插件中的调音方法。";
			this.InfoLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// TimeStretchPitchShiftGroup
			//
			this.TimeStretchPitchShiftGroup.AutoSize = true;
			this.TimeStretchPitchShiftGroup.Controls.Add(this.tableLayoutPanel2);
			this.TimeStretchPitchShiftGroup.Dock = System.Windows.Forms.DockStyle.Fill;
			this.TimeStretchPitchShiftGroup.Location = new System.Drawing.Point(16, 54);
			this.TimeStretchPitchShiftGroup.Margin = new System.Windows.Forms.Padding(4);
			this.TimeStretchPitchShiftGroup.Name = "TimeStretchPitchShiftGroup";
			this.TimeStretchPitchShiftGroup.Padding = new System.Windows.Forms.Padding(6);
			this.TimeStretchPitchShiftGroup.Size = new System.Drawing.Size(650, 176);
			this.TimeStretchPitchShiftGroup.TabIndex = 1;
			this.TimeStretchPitchShiftGroup.TabStop = false;
			this.TimeStretchPitchShiftGroup.Text = "时间拉伸/音调转换";
			//
			// tableLayoutPanel2
			//
			this.tableLayoutPanel2.AutoSize = true;
			this.tableLayoutPanel2.ColumnCount = 2;
			this.tableLayoutPanel2.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel2.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel2.Controls.Add(this.FormantLockCheck, 1, 3);
			this.tableLayoutPanel2.Controls.Add(this.StretchAttrCombo, 1, 1);
			this.tableLayoutPanel2.Controls.Add(this.FormantChangeLbl, 0, 3);
			this.tableLayoutPanel2.Controls.Add(this.PitchChangeLbl, 0, 2);
			this.tableLayoutPanel2.Controls.Add(this.StretchAttrLbl, 0, 1);
			this.tableLayoutPanel2.Controls.Add(this.MethodLbl, 0, 0);
			this.tableLayoutPanel2.Controls.Add(this.MethodCombo, 1, 0);
			this.tableLayoutPanel2.Controls.Add(this.tableLayoutPanel1, 1, 2);
			this.tableLayoutPanel2.Dock = System.Windows.Forms.DockStyle.Fill;
			this.tableLayoutPanel2.Location = new System.Drawing.Point(6, 26);
			this.tableLayoutPanel2.Margin = new System.Windows.Forms.Padding(4);
			this.tableLayoutPanel2.Name = "tableLayoutPanel2";
			this.tableLayoutPanel2.RowCount = 4;
			this.tableLayoutPanel2.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel2.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel2.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel2.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel2.Size = new System.Drawing.Size(638, 144);
			this.tableLayoutPanel2.TabIndex = 0;
			//
			// FormantLockCheck
			//
			this.FormantLockCheck.AutoSize = true;
			this.FormantLockCheck.Dock = System.Windows.Forms.DockStyle.Left;
			this.FormantLockCheck.Location = new System.Drawing.Point(96, 112);
			this.FormantLockCheck.Margin = new System.Windows.Forms.Padding(4);
			this.FormantLockCheck.Name = "FormantLockCheck";
			this.FormantLockCheck.Size = new System.Drawing.Size(106, 28);
			this.FormantLockCheck.TabIndex = 7;
			this.FormantLockCheck.Text = "保持共振峰";
			this.FormantLockCheck.UseVisualStyleBackColor = true;
			//
			// StretchAttrCombo
			//
			this.StretchAttrCombo.Dock = System.Windows.Forms.DockStyle.Top;
			this.StretchAttrCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.StretchAttrCombo.FormattingEnabled = true;
			this.StretchAttrCombo.Location = new System.Drawing.Point(96, 40);
			this.StretchAttrCombo.Margin = new System.Windows.Forms.Padding(4);
			this.StretchAttrCombo.Name = "StretchAttrCombo";
			this.StretchAttrCombo.Size = new System.Drawing.Size(538, 28);
			this.StretchAttrCombo.TabIndex = 5;
			this.StretchAttrCombo.SelectedIndexChanged += new System.EventHandler(this.MethodCombo_SelectedIndexChanged);
			//
			// FormantChangeLbl
			//
			this.FormantChangeLbl.AutoSize = true;
			this.FormantChangeLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.FormantChangeLbl.Location = new System.Drawing.Point(4, 108);
			this.FormantChangeLbl.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.FormantChangeLbl.MinimumSize = new System.Drawing.Size(0, 36);
			this.FormantChangeLbl.Name = "FormantChangeLbl";
			this.FormantChangeLbl.Size = new System.Drawing.Size(84, 36);
			this.FormantChangeLbl.TabIndex = 3;
			this.FormantChangeLbl.Text = "共振峰移位";
			this.FormantChangeLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// PitchChangeLbl
			//
			this.PitchChangeLbl.AutoSize = true;
			this.PitchChangeLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.PitchChangeLbl.Location = new System.Drawing.Point(4, 72);
			this.PitchChangeLbl.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.PitchChangeLbl.MinimumSize = new System.Drawing.Size(0, 36);
			this.PitchChangeLbl.Name = "PitchChangeLbl";
			this.PitchChangeLbl.Size = new System.Drawing.Size(84, 36);
			this.PitchChangeLbl.TabIndex = 2;
			this.PitchChangeLbl.Text = "音调更改";
			this.PitchChangeLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// StretchAttrLbl
			//
			this.StretchAttrLbl.AutoSize = true;
			this.StretchAttrLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.StretchAttrLbl.Location = new System.Drawing.Point(4, 36);
			this.StretchAttrLbl.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.StretchAttrLbl.MinimumSize = new System.Drawing.Size(0, 36);
			this.StretchAttrLbl.Name = "StretchAttrLbl";
			this.StretchAttrLbl.Size = new System.Drawing.Size(84, 36);
			this.StretchAttrLbl.TabIndex = 1;
			this.StretchAttrLbl.Text = "拉伸属性";
			this.StretchAttrLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// MethodLbl
			//
			this.MethodLbl.AutoSize = true;
			this.MethodLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.MethodLbl.Location = new System.Drawing.Point(4, 0);
			this.MethodLbl.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.MethodLbl.MinimumSize = new System.Drawing.Size(0, 36);
			this.MethodLbl.Name = "MethodLbl";
			this.MethodLbl.Size = new System.Drawing.Size(84, 36);
			this.MethodLbl.TabIndex = 0;
			this.MethodLbl.Text = "方法";
			this.MethodLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// MethodCombo
			//
			this.MethodCombo.Dock = System.Windows.Forms.DockStyle.Top;
			this.MethodCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.MethodCombo.FormattingEnabled = true;
			this.MethodCombo.Items.AddRange(new object[] {
			"无",
			"élastique",
			"古典"});
			this.MethodCombo.Location = new System.Drawing.Point(96, 4);
			this.MethodCombo.Margin = new System.Windows.Forms.Padding(4);
			this.MethodCombo.Name = "MethodCombo";
			this.MethodCombo.Size = new System.Drawing.Size(538, 28);
			this.MethodCombo.TabIndex = 4;
			this.MethodCombo.SelectedIndexChanged += new System.EventHandler(this.MethodCombo_SelectedIndexChanged);
			//
			// tableLayoutPanel1
			//
			this.tableLayoutPanel1.AutoSize = true;
			this.tableLayoutPanel1.ColumnCount = 2;
			this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute, 20F));
			this.tableLayoutPanel1.Controls.Add(this.LockPitchInsteadOfRateCheck, 0, 0);
			this.tableLayoutPanel1.Controls.Add(this.PitchLockCheck, 0, 0);
			this.tableLayoutPanel1.Dock = System.Windows.Forms.DockStyle.Fill;
			this.tableLayoutPanel1.Location = new System.Drawing.Point(92, 72);
			this.tableLayoutPanel1.Margin = new System.Windows.Forms.Padding(0);
			this.tableLayoutPanel1.Name = "tableLayoutPanel1";
			this.tableLayoutPanel1.RowCount = 1;
			this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel1.Size = new System.Drawing.Size(546, 36);
			this.tableLayoutPanel1.TabIndex = 8;
			//
			// LockPitchInsteadOfRateCheck
			//
			this.LockPitchInsteadOfRateCheck.AutoSize = true;
			this.LockPitchInsteadOfRateCheck.Checked = true;
			this.LockPitchInsteadOfRateCheck.CheckState = System.Windows.Forms.CheckState.Checked;
			this.LockPitchInsteadOfRateCheck.Dock = System.Windows.Forms.DockStyle.Left;
			this.LockPitchInsteadOfRateCheck.Location = new System.Drawing.Point(118, 4);
			this.LockPitchInsteadOfRateCheck.Margin = new System.Windows.Forms.Padding(4);
			this.LockPitchInsteadOfRateCheck.Name = "LockPitchInsteadOfRateCheck";
			this.LockPitchInsteadOfRateCheck.Size = new System.Drawing.Size(166, 28);
			this.LockPitchInsteadOfRateCheck.TabIndex = 8;
			this.LockPitchInsteadOfRateCheck.Text = "锁定音高而不是速度";
			this.LockPitchInsteadOfRateCheck.UseVisualStyleBackColor = true;
			//
			// PitchLockCheck
			//
			this.PitchLockCheck.AutoSize = true;
			this.PitchLockCheck.Dock = System.Windows.Forms.DockStyle.Fill;
			this.PitchLockCheck.Location = new System.Drawing.Point(4, 4);
			this.PitchLockCheck.Margin = new System.Windows.Forms.Padding(4);
			this.PitchLockCheck.Name = "PitchLockCheck";
			this.PitchLockCheck.Size = new System.Drawing.Size(106, 28);
			this.PitchLockCheck.TabIndex = 7;
			this.PitchLockCheck.Text = "锁定以拉伸";
			this.PitchLockCheck.UseVisualStyleBackColor = true;
			//
			// ChangeTuneMethodForm
			//
			this.AcceptButton = this.OkBtn;
			this.AutoScaleDimensions = new System.Drawing.SizeF(120F, 120F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Dpi;
			this.BackColor = System.Drawing.SystemColors.Window;
			this.CancelButton = this.CancelBtn;
			this.ClientSize = new System.Drawing.Size(682, 323);
			this.Controls.Add(this.table);
			this.Controls.Add(this.dock);
			this.Font = new System.Drawing.Font("Microsoft YaHei UI", 9F);
			this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
			this.Location = new System.Drawing.Point(60, 60);
			this.Margin = new System.Windows.Forms.Padding(5);
			this.MaximizeBox = false;
			this.MinimizeBox = false;
			this.Name = "ChangeTuneMethodForm";
			this.ShowInTaskbar = false;
			this.StartPosition = System.Windows.Forms.FormStartPosition.Manual;
			this.Text = "更改调音算法";
			this.dock.ResumeLayout(false);
			this.table.ResumeLayout(false);
			this.table.PerformLayout();
			this.TimeStretchPitchShiftGroup.ResumeLayout(false);
			this.TimeStretchPitchShiftGroup.PerformLayout();
			this.tableLayoutPanel2.ResumeLayout(false);
			this.tableLayoutPanel2.PerformLayout();
			this.tableLayoutPanel1.ResumeLayout(false);
			this.tableLayoutPanel1.PerformLayout();
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion

		public System.Windows.Forms.Button OkBtn;
		public System.Windows.Forms.Button CancelBtn;
		public System.Windows.Forms.TableLayoutPanel dock;
		private System.Windows.Forms.TableLayoutPanel table;
		private System.Windows.Forms.Label InfoLbl;
		private System.Windows.Forms.GroupBox TimeStretchPitchShiftGroup;
		private System.Windows.Forms.TableLayoutPanel tableLayoutPanel2;
		private System.Windows.Forms.CheckBox FormantLockCheck;
		private System.Windows.Forms.ComboBox StretchAttrCombo;
		private System.Windows.Forms.Label FormantChangeLbl;
		private System.Windows.Forms.Label PitchChangeLbl;
		private System.Windows.Forms.Label StretchAttrLbl;
		private System.Windows.Forms.Label MethodLbl;
		private System.Windows.Forms.ComboBox MethodCombo;
		private System.Windows.Forms.TableLayoutPanel tableLayoutPanel1;
		private System.Windows.Forms.CheckBox LockPitchInsteadOfRateCheck;
		private System.Windows.Forms.CheckBox PitchLockCheck;
	}

	public partial class ChangeTuneMethodForm : Form, IInterpret {
		private readonly EntryPoint parent;
		private Vegas vegas { get { return parent.vegas; } }
		public ChangeTuneMethodForm(EntryPoint entryPoint) {
			InitializeComponent();
			parent = entryPoint;
			Icon = ConfigForm.icon;
			this.ReserveSystemMenuItems(SystemMenuItemType.MOVE | SystemMenuItemType.CLOSE);
			Translate();
			Height = table.Height + dock.Height + SelectIntervalForm.MARGIN;
			MethodCombo.SelectedIndex = 1;
			MethodCombo_SelectedIndexChanged(null, null);
		}

		private void CancelBtn_Click(object sender, EventArgs e) {
			Close();
		}

		private void OkBtn_Click(object sender, EventArgs e) {
			Close();
			#if VER_GEQ_16 // 不重要了，低于 16 的版本整个功能都不能用了，加上仅保证不会报错。
			TimeStretchPitchShift method = GetMethod(MethodCombo.SelectedIndex);
			bool isLockPitch = PitchLockCheck.Checked;
			bool isLockFormant = FormantLockCheck.Checked;
			ElastiqueStretchAttributes elastique = new ElastiqueStretchAttributes();
			ClassicStretchAttributes classic = new ClassicStretchAttributes();
			if (method == TimeStretchPitchShift.Elastique) elastique = (ElastiqueStretchAttributes)StretchAttrCombo.SelectedIndex;
			if (method == TimeStretchPitchShift.Classic) classic = (ClassicStretchAttributes)StretchAttrCombo.SelectedIndex;
			AudioEvent[] audioEvents = parent.GetSelectedAudioEvents();
			foreach (AudioEvent audioEvent in audioEvents) {
				audioEvent.Method = method;
				if (method == TimeStretchPitchShift.None) continue;
					if (method == TimeStretchPitchShift.Elastique) audioEvent.ElastiqueAttribute = elastique;
					if (method == TimeStretchPitchShift.Classic) audioEvent.ClassicAttribute = classic;
					if (method == TimeStretchPitchShift.Elastique && elastique == ElastiqueStretchAttributes.Pro) audioEvent.FormantLock = isLockFormant;
				if (audioEvent.PitchLock != isLockPitch) {
					if (LockPitchInsteadOfRateCheck.Checked) {
						if (isLockPitch) {
							double originalPitch = audioEvent.PitchSemis;
							audioEvent.PitchLock = isLockPitch;
							audioEvent.AdjustPlaybackRate(EntryPoint.Pitch2Stretch(originalPitch), true);
						} else {
							double originalRate = audioEvent.PlaybackRate;
							audioEvent.PitchLock = isLockPitch;
							audioEvent.PitchSemis = EntryPoint.Stretch2Pitch(originalRate);
						}
					} else audioEvent.PitchLock = isLockPitch;
				}
			}
			#endif
		}

		private TimeStretchPitchShift GetMethod(int selectedIndex) {
			return selectedIndex == 1 ? TimeStretchPitchShift.Elastique :
				selectedIndex == 2 ? TimeStretchPitchShift.Classic :
				TimeStretchPitchShift.None;
		}

		private void MethodCombo_SelectedIndexChanged(object sender, EventArgs e) {
			#if VER_GEQ_16
			TimeStretchPitchShift method = GetMethod(MethodCombo.SelectedIndex);
			LockPitchInsteadOfRateCheck.Enabled = StretchAttrCombo.Enabled = PitchLockCheck.Enabled = method != TimeStretchPitchShift.None;
			FormantLockCheck.Enabled = method == TimeStretchPitchShift.Elastique && StretchAttrCombo.SelectedIndex == 0;
			if (method != lastMethod) {
				lastMethod = method;
				StretchAttrCombo.Items.Clear();
				if (method == TimeStretchPitchShift.Elastique) {
					StretchAttrCombo.Items.AddRange(ElastiqueAttrArray);
					StretchAttrCombo.SelectedIndex = 1;
				} else if (method == TimeStretchPitchShift.Classic) {
					StretchAttrCombo.Items.AddRange(ClassicAttrArray);
					StretchAttrCombo.SelectedIndex = 0;
				}
			}
				if (method == TimeStretchPitchShift.Elastique) {
					ElastiqueStretchAttributes attr = (ElastiqueStretchAttributes)StretchAttrCombo.SelectedIndex;
					if (attr == ElastiqueStretchAttributes.Efficient || attr == ElastiqueStretchAttributes.Soloist_Speech) FormantLockCheck.Checked = false;
					else if (attr == ElastiqueStretchAttributes.Soloist_Monophonic) FormantLockCheck.Checked = true;
				}
			if (PitchLockCheck.Checked) StretchAttrCombo.Enabled = FormantLockCheck.Enabled = false;
			#endif
		}

		public static string[] ElastiqueAttrArray {
			get {
				Lang str = Lang.str;
				return new string[] {
					str.elastique_pro, str.elastique_efficient, str.elastique_soloist_monophonic, str.elastique_soloist_speech
				};
			}
		}
		public static string[] ClassicAttrArray {
			get {
				Lang str = Lang.str;
				return new string[] {
					str.classic_a01, str.classic_a02, str.classic_a03, str.classic_a04, str.classic_a05, str.classic_a06,
					str.classic_a07, str.classic_a08, str.classic_a09, str.classic_a10, str.classic_a11, str.classic_a12,
					str.classic_a13, str.classic_a14, str.classic_a15, str.classic_a16, str.classic_a17, str.classic_a18,
					str.classic_a19,
				};
			}
		}
		private TimeStretchPitchShift? lastMethod = null;

		public void Translate() {
			Lang str = Lang.str;
			Font = new Font(str.ui_font, 9F);
			InfoLbl.Font = new Font(str.info_label_font, 9F);
			OkBtn.Text = str.complete;
			CancelBtn.Text = str.cancel;
			InfoLbl.Text = str.change_tune_method_info;
			TimeStretchPitchShiftGroup.Text = str.time_stretch_pitch_shift;
			FormantLockCheck.Text = str.reserve_formant;
			FormantChangeLbl.Text = str.formant_change;
			PitchChangeLbl.Text = str.pitch_change;
			StretchAttrLbl.Text = str.stretch_attr;
			MethodLbl.Text = str.method;
			MethodCombo.Items.Clear();
			MethodCombo.Items.AddRange(new string[] {
				str.none, str.elastique, str.classic
			});
			PitchLockCheck.Text = str.pitch_lock;
			LockPitchInsteadOfRateCheck.Text = str.lock_pitch_instead_of_rate;
			Text = str.change_tune_method;
		}

		#if !VER_GEQ_16
			public enum TimeStretchPitchShift { // 兼容使用，不起任何效果。
				Classic,
				AcidStyle,
				Elastique,
				None,
			}
		#endif
	}

	partial class BatchSubtitleGenerationForm {
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer components = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose(bool disposing) {
			if (disposing && (components != null)) {
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent() {
			this.OkBtn = new System.Windows.Forms.Button();
			this.CancelBtn = new System.Windows.Forms.Button();
			this.table = new System.Windows.Forms.TableLayoutPanel();
			this.tableLayoutPanel2 = new System.Windows.Forms.TableLayoutPanel();
			this.ImportFromFileLbl = new System.Windows.Forms.Label();
			this.ImportFromFileBtn = new System.Windows.Forms.Button();
			this.PresetsLbl = new System.Windows.Forms.Label();
			this.PresetsCombo = new System.Windows.Forms.ComboBox();
			this.SubtitlesLbl = new System.Windows.Forms.Label();
			this.SubtitlesTxt = new System.Windows.Forms.TextBox();
			this.SuggestionInfo = new System.Windows.Forms.Label();
			this.tableLayoutPanel1 = new System.Windows.Forms.TableLayoutPanel();
			this.SingleDurationLbl = new System.Windows.Forms.Label();
			this.SingleDurationTxt = new System.Windows.Forms.TextBox();
			this.dock = new System.Windows.Forms.TableLayoutPanel();
			this.table.SuspendLayout();
			this.tableLayoutPanel2.SuspendLayout();
			this.tableLayoutPanel1.SuspendLayout();
			this.dock.SuspendLayout();
			this.SuspendLayout();
			//
			// OkBtn
			//
			this.OkBtn.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.OkBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.OkBtn.Location = new System.Drawing.Point(597, 10);
			this.OkBtn.Margin = new System.Windows.Forms.Padding(4);
			this.OkBtn.Name = "OkBtn";
			this.OkBtn.Size = new System.Drawing.Size(94, 32);
			this.OkBtn.TabIndex = 1;
			this.OkBtn.Text = "确定(&O)";
			this.OkBtn.UseVisualStyleBackColor = true;
			this.OkBtn.Click += new System.EventHandler(this.OkBtn_Click);
			//
			// CancelBtn
			//
			this.CancelBtn.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.CancelBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.CancelBtn.Location = new System.Drawing.Point(699, 10);
			this.CancelBtn.Margin = new System.Windows.Forms.Padding(4);
			this.CancelBtn.Name = "CancelBtn";
			this.CancelBtn.Size = new System.Drawing.Size(94, 32);
			this.CancelBtn.TabIndex = 2;
			this.CancelBtn.Text = "取消(&C)";
			this.CancelBtn.UseVisualStyleBackColor = true;
			this.CancelBtn.Click += new System.EventHandler(this.CancelBtn_Click);
			//
			// table
			//
			this.table.AutoSize = true;
			this.table.ColumnCount = 1;
			this.table.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.table.Controls.Add(this.tableLayoutPanel2, 0, 2);
			this.table.Controls.Add(this.PresetsLbl, 0, 0);
			this.table.Controls.Add(this.PresetsCombo, 0, 1);
			this.table.Controls.Add(this.SubtitlesLbl, 0, 3);
			this.table.Controls.Add(this.SubtitlesTxt, 0, 4);
			this.table.Controls.Add(this.SuggestionInfo, 0, 6);
			this.table.Controls.Add(this.tableLayoutPanel1, 0, 5);
			this.table.Dock = System.Windows.Forms.DockStyle.Fill;
			this.table.Location = new System.Drawing.Point(0, 0);
			this.table.Margin = new System.Windows.Forms.Padding(5);
			this.table.Name = "table";
			this.table.Padding = new System.Windows.Forms.Padding(12, 14, 12, 14);
			this.table.RowCount = 7;
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.table.Size = new System.Drawing.Size(805, 574);
			this.table.TabIndex = 19;
			//
			// tableLayoutPanel2
			//
			this.tableLayoutPanel2.AutoSize = true;
			this.tableLayoutPanel2.ColumnCount = 2;
			this.tableLayoutPanel2.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel2.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel2.Controls.Add(this.ImportFromFileLbl, 0, 0);
			this.tableLayoutPanel2.Controls.Add(this.ImportFromFileBtn, 1, 0);
			this.tableLayoutPanel2.Dock = System.Windows.Forms.DockStyle.Fill;
			this.tableLayoutPanel2.Location = new System.Drawing.Point(12, 70);
			this.tableLayoutPanel2.Margin = new System.Windows.Forms.Padding(0, 4, 0, 0);
			this.tableLayoutPanel2.Name = "tableLayoutPanel2";
			this.tableLayoutPanel2.RowCount = 1;
			this.tableLayoutPanel2.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel2.Size = new System.Drawing.Size(781, 38);
			this.tableLayoutPanel2.TabIndex = 7;
			//
			// ImportFromFileLbl
			//
			this.ImportFromFileLbl.AutoSize = true;
			this.ImportFromFileLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.ImportFromFileLbl.Location = new System.Drawing.Point(4, 0);
			this.ImportFromFileLbl.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.ImportFromFileLbl.Name = "ImportFromFileLbl";
			this.ImportFromFileLbl.Size = new System.Drawing.Size(677, 38);
			this.ImportFromFileLbl.TabIndex = 0;
			this.ImportFromFileLbl.Text = "从文件中导入";
			this.ImportFromFileLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// ImportFromFileBtn
			//
			this.ImportFromFileBtn.Location = new System.Drawing.Point(688, 3);
			this.ImportFromFileBtn.Name = "ImportFromFileBtn";
			this.ImportFromFileBtn.Size = new System.Drawing.Size(90, 32);
			this.ImportFromFileBtn.TabIndex = 1;
			this.ImportFromFileBtn.Text = "浏览...";
			this.ImportFromFileBtn.UseVisualStyleBackColor = true;
			this.ImportFromFileBtn.Click += new System.EventHandler(this.ImportFromFileBtn_Click);
			//
			// PresetsLbl
			//
			this.PresetsLbl.AutoSize = true;
			this.PresetsLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.PresetsLbl.Location = new System.Drawing.Point(16, 14);
			this.PresetsLbl.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.PresetsLbl.Name = "PresetsLbl";
			this.PresetsLbl.Size = new System.Drawing.Size(773, 20);
			this.PresetsLbl.TabIndex = 0;
			this.PresetsLbl.Text = "选择一个预先设定好的“字幕和文字”媒体发生器的预设：";
			this.PresetsLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// PresetsCombo
			//
			this.PresetsCombo.Dock = System.Windows.Forms.DockStyle.Fill;
			this.PresetsCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.PresetsCombo.FormattingEnabled = true;
			this.PresetsCombo.Location = new System.Drawing.Point(16, 38);
			this.PresetsCombo.Margin = new System.Windows.Forms.Padding(4);
			this.PresetsCombo.Name = "PresetsCombo";
			this.PresetsCombo.Size = new System.Drawing.Size(773, 28);
			this.PresetsCombo.TabIndex = 1;
			//
			// SubtitlesLbl
			//
			this.SubtitlesLbl.AutoSize = true;
			this.SubtitlesLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SubtitlesLbl.Location = new System.Drawing.Point(16, 116);
			this.SubtitlesLbl.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.SubtitlesLbl.Name = "SubtitlesLbl";
			this.SubtitlesLbl.Size = new System.Drawing.Size(773, 20);
			this.SubtitlesLbl.TabIndex = 2;
			this.SubtitlesLbl.Text = "输入要插入的字幕文本（一行一个，忽略空行）：";
			this.SubtitlesLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// SubtitlesTxt
			//
			this.SubtitlesTxt.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SubtitlesTxt.Location = new System.Drawing.Point(16, 140);
			this.SubtitlesTxt.Margin = new System.Windows.Forms.Padding(4);
			this.SubtitlesTxt.MaxLength = 65535;
			this.SubtitlesTxt.Multiline = true;
			this.SubtitlesTxt.Name = "SubtitlesTxt";
			this.SubtitlesTxt.ScrollBars = System.Windows.Forms.ScrollBars.Both;
			this.SubtitlesTxt.Size = new System.Drawing.Size(773, 353);
			this.SubtitlesTxt.TabIndex = 3;
			this.SubtitlesTxt.WordWrap = false;
			//
			// SuggestionInfo
			//
			this.SuggestionInfo.AutoSize = true;
			this.SuggestionInfo.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SuggestionInfo.Location = new System.Drawing.Point(16, 540);
			this.SuggestionInfo.Margin = new System.Windows.Forms.Padding(4, 8, 4, 0);
			this.SuggestionInfo.Name = "SuggestionInfo";
			this.SuggestionInfo.Size = new System.Drawing.Size(773, 20);
			this.SuggestionInfo.TabIndex = 5;
			this.SuggestionInfo.Text = "稍后可开启“自动跟进”功能以便后续调整时间。";
			this.SuggestionInfo.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// tableLayoutPanel1
			//
			this.tableLayoutPanel1.AutoSize = true;
			this.tableLayoutPanel1.ColumnCount = 2;
			this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel1.Controls.Add(this.SingleDurationLbl, 0, 0);
			this.tableLayoutPanel1.Controls.Add(this.SingleDurationTxt, 1, 0);
			this.tableLayoutPanel1.Dock = System.Windows.Forms.DockStyle.Fill;
			this.tableLayoutPanel1.Location = new System.Drawing.Point(12, 497);
			this.tableLayoutPanel1.Margin = new System.Windows.Forms.Padding(0);
			this.tableLayoutPanel1.Name = "tableLayoutPanel1";
			this.tableLayoutPanel1.RowCount = 1;
			this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel1.Size = new System.Drawing.Size(781, 35);
			this.tableLayoutPanel1.TabIndex = 6;
			//
			// SingleDurationLbl
			//
			this.SingleDurationLbl.AutoSize = true;
			this.SingleDurationLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SingleDurationLbl.Location = new System.Drawing.Point(4, 0);
			this.SingleDurationLbl.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.SingleDurationLbl.Name = "SingleDurationLbl";
			this.SingleDurationLbl.Size = new System.Drawing.Size(129, 35);
			this.SingleDurationLbl.TabIndex = 0;
			this.SingleDurationLbl.Text = "每个字幕持续时间";
			this.SingleDurationLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// SingleDurationTxt
			//
			this.SingleDurationTxt.Dock = System.Windows.Forms.DockStyle.Left;
			this.SingleDurationTxt.Location = new System.Drawing.Point(141, 4);
			this.SingleDurationTxt.Margin = new System.Windows.Forms.Padding(4);
			this.SingleDurationTxt.Name = "SingleDurationTxt";
			this.SingleDurationTxt.Size = new System.Drawing.Size(186, 27);
			this.SingleDurationTxt.TabIndex = 1;
			this.SingleDurationTxt.Leave += new System.EventHandler(this.SingleDurationTxt_Leave);
			//
			// dock
			//
			this.dock.BackColor = System.Drawing.SystemColors.Control;
			this.dock.ColumnCount = 3;
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.dock.Controls.Add(this.OkBtn, 1, 0);
			this.dock.Controls.Add(this.CancelBtn, 2, 0);
			this.dock.Dock = System.Windows.Forms.DockStyle.Bottom;
			this.dock.Location = new System.Drawing.Point(0, 574);
			this.dock.Margin = new System.Windows.Forms.Padding(4);
			this.dock.Name = "dock";
			this.dock.Padding = new System.Windows.Forms.Padding(8, 6, 8, 6);
			this.dock.RowCount = 1;
			this.dock.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.dock.Size = new System.Drawing.Size(805, 52);
			this.dock.TabIndex = 18;
			//
			// BatchSubtitleGenerationForm
			//
			this.AutoScaleDimensions = new System.Drawing.SizeF(120F, 120F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Dpi;
			this.BackColor = System.Drawing.SystemColors.Window;
			this.CancelButton = this.CancelBtn;
			this.ClientSize = new System.Drawing.Size(805, 626);
			this.Controls.Add(this.table);
			this.Controls.Add(this.dock);
			this.Font = new System.Drawing.Font("微软雅黑", 9F);
			this.Location = new System.Drawing.Point(60, 60);
			this.Margin = new System.Windows.Forms.Padding(4, 5, 4, 5);
			this.MinimizeBox = false;
			this.MinimumSize = new System.Drawing.Size(820, 663);
			this.Name = "BatchSubtitleGenerationForm";
			this.ShowInTaskbar = false;
			this.StartPosition = System.Windows.Forms.FormStartPosition.Manual;
			this.Text = "批量生成字幕";
			this.table.ResumeLayout(false);
			this.table.PerformLayout();
			this.tableLayoutPanel2.ResumeLayout(false);
			this.tableLayoutPanel2.PerformLayout();
			this.tableLayoutPanel1.ResumeLayout(false);
			this.tableLayoutPanel1.PerformLayout();
			this.dock.ResumeLayout(false);
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion
		private System.Windows.Forms.TableLayoutPanel table;
		private System.Windows.Forms.Label PresetsLbl;
		private System.Windows.Forms.ComboBox PresetsCombo;
		private System.Windows.Forms.Label SubtitlesLbl;
		private System.Windows.Forms.TextBox SubtitlesTxt;
		private System.Windows.Forms.Label SuggestionInfo;
		private System.Windows.Forms.TableLayoutPanel tableLayoutPanel1;
		private System.Windows.Forms.Label SingleDurationLbl;
		private System.Windows.Forms.TextBox SingleDurationTxt;
		private System.Windows.Forms.Button OkBtn;
		private System.Windows.Forms.Button CancelBtn;
		private System.Windows.Forms.TableLayoutPanel dock;
		private System.Windows.Forms.TableLayoutPanel tableLayoutPanel2;
		private System.Windows.Forms.Label ImportFromFileLbl;
		private System.Windows.Forms.Button ImportFromFileBtn;
	}

	public partial class BatchSubtitleGenerationForm : Form, IInterpret, IConfigIniUser {
		private readonly EntryPoint parent;
		private Vegas vegas { get { return parent.vegas; } }
		private ConfigIni configIni { get { return parent.configIni; } }
		public BatchSubtitleGenerationForm(EntryPoint entryPoint) {
			InitializeComponent();
			parent = entryPoint;
			Icon = ConfigForm.icon;
			this.DeleteSystemMenuItems(SystemMenuItemType.MINIMIZE);
			Translate();
			FormClosing += (sender, e) => SaveIni();
			Plugin.Init(vegas);
			PresetsCombo.Items.Clear();
			PresetsCombo.Items.AddRange(new List<EffectPreset>(Plugin.titlesAndText.Presets).ToArray());
			PresetsCombo.SelectedIndex = 0;
			((Action)ReadIni).OnErrorBreak();
		}

		public void ReadIni() {
			configIni.StartSection("BatchSubtitleGeneration");
			SingleDurationTxt.Text = Timecode.FromMilliseconds(configIni.Read("SingleDuration", DEFAULT_SINGLE_DURATION_MS)).ToString();
			SingleDurationTxt_Leave(null, null);
			string preset = configIni.Read("Preset", "");
			foreach (EffectPreset curPreset in PresetsCombo.Items)
				if (curPreset.ToString() == preset)
					PresetsCombo.SelectedItem = curPreset;
			configIni.EndSection();
		}

		public void SaveIni() {
			configIni.StartSection("BatchSubtitleGeneration");
			configIni.Write("SingleDuration", SingleDuration.ToMilliseconds());
			configIni.Write("Preset", PresetsCombo.SelectedItem);
			configIni.EndSection();
		}

		public void Translate() {
			Lang str = Lang.str;
			Font = new Font(str.ui_font, 9F);
			PresetsLbl.Text = str.batch_subtitle_generation_presets;
			SubtitlesLbl.Text = str.batch_subtitle_generation_subtitles;
			SingleDurationLbl.Text = str.batch_subtitle_generation_single_duration;
			SuggestionInfo.Text = str.batch_subtitle_generation_suggestion_info;
			ImportFromFileBtn.Text = str.browse;
			ImportFromFileLbl.Text = str.import_from_file;
			Text = str.batch_subtitle_generation;
			OkBtn.Text = str.ok;
			CancelBtn.Text = str.cancel;
		}

		private void CancelBtn_Click(object sender, EventArgs e) {
			Close();
		}

		private void OkBtn_Click(object sender, EventArgs e) {
			Close();
			Generate();
		}

		private const double MIN_SINGLE_DURATION_MS = 10;
		private const double DEFAULT_SINGLE_DURATION_MS = 1000;
		private void SingleDurationTxt_Leave(object sender, EventArgs e) {
			SingleDurationTxt.Text = SingleDuration.ToString();
		}

		private static Timecode GetSingleDuration(string text) {
			Timecode timecode = Timecode.FromString(text);
			if (timecode.ToMilliseconds() <= 0)
				timecode = Timecode.FromMilliseconds(DEFAULT_SINGLE_DURATION_MS);
			else if (timecode.ToMilliseconds() < MIN_SINGLE_DURATION_MS)
				timecode = Timecode.FromMilliseconds(MIN_SINGLE_DURATION_MS);
			return timecode;
		}

		private Timecode SingleDuration { get { return GetSingleDuration(SingleDurationTxt.Text); } }

		public bool PresetsContains(string preset) {
			List<string> presetNames = new List<string>();
			foreach (EffectPreset _preset in Plugin.titlesAndText.Presets) presetNames.Add(_preset.ToString());
			return presetNames.Contains(preset);
		}

		private void Generate() {
			List<string> lines = new List<string>();
			foreach (string line in SubtitlesTxt.Lines) {
				if (string.IsNullOrWhiteSpace(line)) continue;
				lines.Add(line.Trim());
			}
			if (lines.Count == 0) return;
			VideoTrack track;
			vegas.Project.Tracks.Add(track = new VideoTrack());
			Timecode duration = SingleDuration;
			foreach (string line in lines) {
				VideoEvent subtitle = track.AddVideoEvent(track.Length, duration);
				Media media = new Media(Plugin.titlesAndText) { Length = duration };
				subtitle.AddTake(media.GetVideoStreamByIndex(0));
				Effect gen = subtitle.ActiveTake.Media.Generator;
				gen.Preset = PresetsCombo.SelectedItem.ToString();
				OFXStringParameter textParam = gen.OFXEffect.FindParameterByName("Text") as OFXStringParameter;
				string templateRtf = textParam.Value;
				RichTextBox rtfBox = new RichTextBox { Rtf = templateRtf, Text = line };
				textParam.Value = rtfBox.Rtf;
			}
		}

		private void ImportFromFileBtn_Click(object sender, EventArgs e) {
			OpenFileDialog openFileDialog = new OpenFileDialog {
				Filter = EntryPoint.GetOpenFileDialogFilter(Lang.str.text_document, "*.txt;*.text;*.log;*.md;*.lrc;*.srt", Lang.str.all_files, "*.*"),
				RestoreDirectory = false,
				FilterIndex = 1,
				Title = Lang.str.open,
			};
			if (openFileDialog.ShowDialog() != DialogResult.OK) return;
			long fileSize = new FileInfo(openFileDialog.FileName).Length;
			const long LARGE_FILE_SIZE = 1024L * 1024L; // 设 1 MB 以上文件为大文件。
			if (fileSize > LARGE_FILE_SIZE)
				if (MessageBox.Show(Lang.str.file_too_large_info, "", MessageBoxButtons.YesNo, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button2) == DialogResult.No) return;
			if (!string.IsNullOrWhiteSpace(SubtitlesTxt.Text))
				if (MessageBox.Show(Lang.str.will_clear_existing_text_info, "", MessageBoxButtons.OKCancel, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button2) == DialogResult.Cancel) return;
			string text = File.ReadAllText(openFileDialog.FileName);
			text = Regex.Replace(text, @"\r\n|\n\r|\r|\n", "\n");
			SubtitlesTxt.Text = text;
		}
	}

	partial class FindClipsForm {
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer components = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose(bool disposing) {
			if (disposing && (components != null)) {
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent() {
			this.MatchSourceAndOffsetRadio = new System.Windows.Forms.RadioButton();
			this.MatchSourceRadio = new System.Windows.Forms.RadioButton();
			this.table = new System.Windows.Forms.TableLayoutPanel();
			this.MatchNameRadio = new System.Windows.Forms.RadioButton();
			this.SelectInfo = new System.Windows.Forms.Label();
			this.ClipNameTxt = new System.Windows.Forms.TextBox();
			this.ClipNameList = new System.Windows.Forms.ListView();
			this.nameHeader = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
			this.numHeader = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
			this.FindClipsInfo = new System.Windows.Forms.Label();
			this.OkBtn = new System.Windows.Forms.Button();
			this.CancelBtn = new System.Windows.Forms.Button();
			this.dock = new System.Windows.Forms.TableLayoutPanel();
			this.table.SuspendLayout();
			this.dock.SuspendLayout();
			this.SuspendLayout();
			//
			// MatchSourceAndOffsetRadio
			//
			this.MatchSourceAndOffsetRadio.AutoSize = true;
			this.MatchSourceAndOffsetRadio.Dock = System.Windows.Forms.DockStyle.Fill;
			this.MatchSourceAndOffsetRadio.Location = new System.Drawing.Point(15, 83);
			this.MatchSourceAndOffsetRadio.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.MatchSourceAndOffsetRadio.Name = "MatchSourceAndOffsetRadio";
			this.MatchSourceAndOffsetRadio.Size = new System.Drawing.Size(559, 24);
			this.MatchSourceAndOffsetRadio.TabIndex = 1;
			this.MatchSourceAndOffsetRadio.Text = "与选中轨道剪辑相同且开始偏移量相等的所有剪辑";
			this.MatchSourceAndOffsetRadio.UseVisualStyleBackColor = true;
			this.MatchSourceAndOffsetRadio.CheckedChanged += new System.EventHandler(this.SetEnabled);
			//
			// MatchSourceRadio
			//
			this.MatchSourceRadio.AutoSize = true;
			this.MatchSourceRadio.Dock = System.Windows.Forms.DockStyle.Fill;
			this.MatchSourceRadio.Location = new System.Drawing.Point(15, 51);
			this.MatchSourceRadio.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.MatchSourceRadio.Name = "MatchSourceRadio";
			this.MatchSourceRadio.Size = new System.Drawing.Size(559, 24);
			this.MatchSourceRadio.TabIndex = 0;
			this.MatchSourceRadio.Text = "与选中轨道剪辑相同的所有剪辑";
			this.MatchSourceRadio.UseVisualStyleBackColor = true;
			this.MatchSourceRadio.CheckedChanged += new System.EventHandler(this.SetEnabled);
			//
			// table
			//
			this.table.AutoSize = true;
			this.table.ColumnCount = 1;
			this.table.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.table.Controls.Add(this.MatchSourceRadio, 0, 1);
			this.table.Controls.Add(this.MatchSourceAndOffsetRadio, 0, 2);
			this.table.Controls.Add(this.MatchNameRadio, 0, 3);
			this.table.Controls.Add(this.SelectInfo, 0, 0);
			this.table.Controls.Add(this.ClipNameTxt, 0, 4);
			this.table.Controls.Add(this.ClipNameList, 0, 5);
			this.table.Controls.Add(this.FindClipsInfo, 0, 6);
			this.table.Dock = System.Windows.Forms.DockStyle.Fill;
			this.table.Location = new System.Drawing.Point(0, 0);
			this.table.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.table.Name = "table";
			this.table.Padding = new System.Windows.Forms.Padding(11, 11, 11, 11);
			this.table.RowCount = 7;
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.table.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.table.Size = new System.Drawing.Size(589, 622);
			this.table.TabIndex = 11;
			//
			// MatchNameRadio
			//
			this.MatchNameRadio.AutoSize = true;
			this.MatchNameRadio.Checked = true;
			this.MatchNameRadio.Dock = System.Windows.Forms.DockStyle.Fill;
			this.MatchNameRadio.Location = new System.Drawing.Point(15, 115);
			this.MatchNameRadio.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.MatchNameRadio.Name = "MatchNameRadio";
			this.MatchNameRadio.Size = new System.Drawing.Size(559, 24);
			this.MatchNameRadio.TabIndex = 2;
			this.MatchNameRadio.TabStop = true;
			this.MatchNameRadio.Text = "与指定名称相匹配的剪辑";
			this.MatchNameRadio.UseVisualStyleBackColor = true;
			this.MatchNameRadio.CheckedChanged += new System.EventHandler(this.SetEnabled);
			//
			// SelectInfo
			//
			this.SelectInfo.AutoSize = true;
			this.SelectInfo.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SelectInfo.Location = new System.Drawing.Point(11, 19);
			this.SelectInfo.Margin = new System.Windows.Forms.Padding(0, 8, 0, 8);
			this.SelectInfo.Name = "SelectInfo";
			this.SelectInfo.Size = new System.Drawing.Size(567, 20);
			this.SelectInfo.TabIndex = 3;
			this.SelectInfo.Text = "选中的第一个轨道剪辑：无";
			this.SelectInfo.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// ClipNameTxt
			//
			this.ClipNameTxt.Dock = System.Windows.Forms.DockStyle.Fill;
			this.ClipNameTxt.Location = new System.Drawing.Point(15, 151);
			this.ClipNameTxt.Margin = new System.Windows.Forms.Padding(4, 8, 4, 4);
			this.ClipNameTxt.Name = "ClipNameTxt";
			this.ClipNameTxt.Size = new System.Drawing.Size(559, 27);
			this.ClipNameTxt.TabIndex = 4;
			this.ClipNameTxt.Click += new System.EventHandler(this.AutoSelectMatchName);
			this.ClipNameTxt.TextChanged += new System.EventHandler(this.ClipNameTxt_TextChanged);
			//
			// ClipNameList
			//
			this.ClipNameList.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
			this.nameHeader,
			this.numHeader});
			this.ClipNameList.Dock = System.Windows.Forms.DockStyle.Fill;
			this.ClipNameList.FullRowSelect = true;
			this.ClipNameList.HideSelection = false;
			this.ClipNameList.Location = new System.Drawing.Point(15, 186);
			this.ClipNameList.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.ClipNameList.Name = "ClipNameList";
			this.ClipNameList.Size = new System.Drawing.Size(559, 393);
			this.ClipNameList.TabIndex = 5;
			this.ClipNameList.UseCompatibleStateImageBehavior = false;
			this.ClipNameList.View = System.Windows.Forms.View.Details;
			this.ClipNameList.SelectedIndexChanged += new System.EventHandler(this.AutoSelectMatchName);
			//
			// nameHeader
			//
			this.nameHeader.Text = "名称";
			this.nameHeader.Width = 300;
			//
			// numHeader
			//
			this.numHeader.Text = "数目";
			this.numHeader.Width = 75;
			//
			// FindClipsInfo
			//
			this.FindClipsInfo.AutoSize = true;
			this.FindClipsInfo.Dock = System.Windows.Forms.DockStyle.Fill;
			this.FindClipsInfo.Location = new System.Drawing.Point(11, 587);
			this.FindClipsInfo.Margin = new System.Windows.Forms.Padding(0, 4, 0, 4);
			this.FindClipsInfo.Name = "FindClipsInfo";
			this.FindClipsInfo.Size = new System.Drawing.Size(567, 20);
			this.FindClipsInfo.TabIndex = 6;
			this.FindClipsInfo.Text = "在上方选中相匹配的剪辑，确定之后将会选中这些剪辑。";
			this.FindClipsInfo.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// OkBtn
			//
			this.OkBtn.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.OkBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.OkBtn.Location = new System.Drawing.Point(381, 10);
			this.OkBtn.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.OkBtn.Name = "OkBtn";
			this.OkBtn.Size = new System.Drawing.Size(94, 32);
			this.OkBtn.TabIndex = 1;
			this.OkBtn.Text = "确定(&O)";
			this.OkBtn.UseVisualStyleBackColor = true;
			this.OkBtn.Click += new System.EventHandler(this.OkBtn_Click);
			//
			// CancelBtn
			//
			this.CancelBtn.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.CancelBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.CancelBtn.Location = new System.Drawing.Point(483, 10);
			this.CancelBtn.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.CancelBtn.Name = "CancelBtn";
			this.CancelBtn.Size = new System.Drawing.Size(94, 32);
			this.CancelBtn.TabIndex = 2;
			this.CancelBtn.Text = "取消(&C)";
			this.CancelBtn.UseVisualStyleBackColor = true;
			this.CancelBtn.Click += new System.EventHandler(this.CancelBtn_Click);
			//
			// dock
			//
			this.dock.BackColor = System.Drawing.SystemColors.Control;
			this.dock.ColumnCount = 3;
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.dock.Controls.Add(this.OkBtn, 1, 0);
			this.dock.Controls.Add(this.CancelBtn, 2, 0);
			this.dock.Dock = System.Windows.Forms.DockStyle.Bottom;
			this.dock.Location = new System.Drawing.Point(0, 622);
			this.dock.Margin = new System.Windows.Forms.Padding(5, 5, 5, 5);
			this.dock.Name = "dock";
			this.dock.Padding = new System.Windows.Forms.Padding(8, 6, 8, 6);
			this.dock.RowCount = 1;
			this.dock.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.dock.Size = new System.Drawing.Size(589, 52);
			this.dock.TabIndex = 10;
			//
			// FindClipsForm
			//
			this.AcceptButton = this.OkBtn;
			this.AutoScaleDimensions = new System.Drawing.SizeF(120F, 120F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Dpi;
			this.BackColor = System.Drawing.SystemColors.Window;
			this.CancelButton = this.CancelBtn;
			this.ClientSize = new System.Drawing.Size(589, 674);
			this.Controls.Add(this.table);
			this.Controls.Add(this.dock);
			this.Font = new System.Drawing.Font("微软雅黑", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(134)));
			this.Location = new System.Drawing.Point(60, 60);
			this.Margin = new System.Windows.Forms.Padding(4, 5, 4, 5);
			this.MaximizeBox = false;
			this.MinimizeBox = false;
			this.MinimumSize = new System.Drawing.Size(604, 711);
			this.Name = "FindClipsForm";
			this.ShowInTaskbar = false;
			this.SizeGripStyle = System.Windows.Forms.SizeGripStyle.Show;
			this.StartPosition = System.Windows.Forms.FormStartPosition.Manual;
			this.Text = "查找轨道素材";
			this.table.ResumeLayout(false);
			this.table.PerformLayout();
			this.dock.ResumeLayout(false);
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion

		private System.Windows.Forms.RadioButton MatchSourceAndOffsetRadio;
		private System.Windows.Forms.RadioButton MatchSourceRadio;
		private System.Windows.Forms.TableLayoutPanel table;
		private System.Windows.Forms.RadioButton MatchNameRadio;
		private System.Windows.Forms.Label SelectInfo;
		private System.Windows.Forms.TextBox ClipNameTxt;
		private System.Windows.Forms.ListView ClipNameList;
		public System.Windows.Forms.Button OkBtn;
		public System.Windows.Forms.Button CancelBtn;
		public System.Windows.Forms.TableLayoutPanel dock;
		private System.Windows.Forms.ColumnHeader nameHeader;
		private System.Windows.Forms.ColumnHeader numHeader;
		private System.Windows.Forms.Label FindClipsInfo;
	}

	public partial class FindClipsForm : Form, IConfigIniUser, IInterpret {
		private readonly EntryPoint parent;
		private Vegas vegas { get { return parent.vegas; } }
		private ConfigIni configIni { get { return parent.configIni; } }
		private readonly TrackEvent selectedFirstEvent = null;
		public FindClipsForm(EntryPoint entryPoint) {
			InitializeComponent();
			parent = entryPoint;
			Icon = ConfigForm.icon;
			this.ReserveSystemMenuItems(SystemMenuItemType.MOVE | SystemMenuItemType.SIZE | SystemMenuItemType.CLOSE);
			Translate();
			((Action)ReadIni).OnErrorBreak();
			selectedFirstEvent = parent.GetSelectedFirstEvent<VideoEvent>();
			if (selectedFirstEvent == null) {
				MatchSourceRadio.Enabled = MatchSourceAndOffsetRadio.Enabled = false;
				MatchNameRadio.Checked = true;
			} else SelectInfo.Text = Lang.str.find_clips_select_info + Lang.str.colon + selectedFirstEvent.ActiveTake.Name;
			SetEnabled(null, null);
		}

		private void OkBtn_Click(object sender, EventArgs e) {
			SaveIni();
			ApplySelection();
			Close();
		}

		private void CancelBtn_Click(object sender, EventArgs e) {
			Close();
		}

		private void ApplySelection() {
			parent.SelectNoneEvents();
			if (MatchMethod == MatchMethodType.MATCH_NAME)
				foreach (ListViewItem item in ClipNameList.SelectedItems)
					foreach (TrackEvent trackEvent in parent.GetEventsByTakeName(item.Text))
						trackEvent.Selected = true;
			else foreach (TrackEvent trackEvent in parent.GetAllEvents()) {
				if (trackEvent.ActiveTake.Media != selectedFirstEvent.ActiveTake.Media) continue;
				if (MatchMethod == MatchMethodType.MATCH_SOURCE_AND_OFFSET &&
					trackEvent.ActiveTake.Offset != selectedFirstEvent.ActiveTake.Offset) continue;
				trackEvent.Selected = true;
			}
		}

		private void SetEnabled(object sender, EventArgs e) {
			bool isMatchName = MatchNameRadio.Checked;
			ClipNameTxt.Enabled = ClipNameList.Enabled = isMatchName;
			ClipNameList.HideSelection = !ClipNameList.Enabled;
			OkBtn.Enabled = MatchMethod != MatchMethodType.NONE && (
				MatchMethod != MatchMethodType.MATCH_NAME && selectedFirstEvent != null ||
				MatchMethod == MatchMethodType.MATCH_NAME && ClipNameList.SelectedItems.Count > 0
			);
		}

		private void AutoSelectMatchName(object sender, EventArgs e) {
			MatchNameRadio.Checked = true;
			SetEnabled(null, null);
		}

		private void ClipNameTxt_TextChanged(object sender, EventArgs e) {
			ClipNameList.Items.Clear();
			string query = ClipNameTxt.Text.Trim().ToLower();
			if (string.IsNullOrWhiteSpace(query)) goto check;
			List<string> eventNames = new List<string>();
			foreach (TrackEvent trackEvent in parent.GetAllEvents()) {
				if (trackEvent.ActiveTake == null) continue;
				string eventName = trackEvent.ActiveTake.Name;
				if (!eventName.ToLower().Contains(query) || eventNames.Contains(eventName)) continue;
				eventNames.Add(eventName);
				ListViewItem item = new ListViewItem(new string[] { eventName, parent.GetEventsByTakeName(eventName).Length.ToString() });
				if (eventName == query) item.Selected = true;
				ClipNameList.Items.Add(item);
			}
		check:
			AutoSelectMatchName(null, null);
		}

		public void Translate() {
			Lang str = Lang.str;
			Font = new Font(str.ui_font, 9F);
			SelectInfo.Text = str.find_clips_select_info + str.colon + str.none;
			FindClipsInfo.Text = str.find_clips_info;
			nameHeader.Text = str.find_clips_header_name;
			numHeader.Text = str.find_clips_header_num;
			MatchSourceRadio.Text = str.find_clips_match_source;
			MatchSourceAndOffsetRadio.Text = str.find_clips_match_source_and_offset;
			MatchNameRadio.Text = str.find_clips_match_name;
			Text = str.find_clips;
			OkBtn.Text = str.ok;
			CancelBtn.Text = str.cancel;
		}

		private RadioButton[] MatchMethodRadios {
			get {
				return new RadioButton[] {
					MatchSourceRadio,
					MatchSourceAndOffsetRadio,
					MatchNameRadio,
				};
			}
		}

		private int MatchMethod_int {
			get {
				for (int i = 0; i < MatchMethodRadios.Length; i++) {
					RadioButton radio = MatchMethodRadios[i];
					if (radio.Checked) return i;
				}
				return -1;
			}
			set {
				if (value >= 0 && value < MatchMethodRadios.Length)
					MatchMethodRadios[value].Checked = true;
			}
		}

		private MatchMethodType MatchMethod {
			get { return (MatchMethodType)MatchMethod_int; }
			set { MatchMethod_int = (int)value; }
		}

		private enum MatchMethodType {
			NONE = -1,
			MATCH_SOURCE,
			MATCH_SOURCE_AND_OFFSET,
			MATCH_NAME,
		}

		public void SaveIni() {
			configIni.StartSection("FindClips");
			configIni.Write("MatchMethod", MatchMethod_int);
			configIni.EndSection();
		}

		public void ReadIni() {
			configIni.StartSection("FindClips");
			MatchMethod_int = configIni.Read("MatchMethod", 2);
			configIni.EndSection();
		}
	}

	partial class MidiChannelAdvancedForm {
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer components = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose(bool disposing) {
			if (disposing && (components != null)) {
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent() {
			this.dock = new System.Windows.Forms.TableLayoutPanel();
			this.OkBtn = new System.Windows.Forms.Button();
			this.CancelBtn = new System.Windows.Forms.Button();
			this.tableLayoutPanel1 = new System.Windows.Forms.TableLayoutPanel();
			this.AutoLayoutTracksGroup = new System.Windows.Forms.GroupBox();
			this.tableLayoutPanel2 = new System.Windows.Forms.TableLayoutPanel();
			this.ResetAutoLayoutTracksBtn = new System.Windows.Forms.Button();
			this.AutoLayoutTracksButtons = new System.Windows.Forms.TableLayoutPanel();
			this.GradientTracksBtn = new System.Windows.Forms.Button();
			this.AutoLayoutTracksBox3dBtn = new System.Windows.Forms.Button();
			this.AutoLayoutTracksGridBtn = new System.Windows.Forms.Button();
			this.MidiChannelAdvancedAutoLayoutTracksInfo = new System.Windows.Forms.Label();
			this.ChannelListView = new System.Windows.Forms.ListView();
			this.ChannelHeader = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
			this.NameHeader = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
			this.InstrumentHeader = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
			this.IsDrumsKitHeader = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
			this.NoteCountHeader = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
			this.PanHeader = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
			this.BeginNoteHeader = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
			this.flowLayoutPanel1 = new System.Windows.Forms.FlowLayoutPanel();
			this.EditNotesBtn = new System.Windows.Forms.Button();
			this.SelectAllBtn = new System.Windows.Forms.Button();
			this.InvertSelectionButton = new System.Windows.Forms.Button();
			this.dock.SuspendLayout();
			this.tableLayoutPanel1.SuspendLayout();
			this.AutoLayoutTracksGroup.SuspendLayout();
			this.tableLayoutPanel2.SuspendLayout();
			this.AutoLayoutTracksButtons.SuspendLayout();
			this.flowLayoutPanel1.SuspendLayout();
			this.SuspendLayout();
			//
			// dock
			//
			this.dock.BackColor = System.Drawing.SystemColors.Control;
			this.dock.ColumnCount = 3;
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.dock.Controls.Add(this.OkBtn, 1, 0);
			this.dock.Controls.Add(this.CancelBtn, 2, 0);
			this.dock.Dock = System.Windows.Forms.DockStyle.Bottom;
			this.dock.Location = new System.Drawing.Point(0, 447);
			this.dock.Margin = new System.Windows.Forms.Padding(2, 4, 2, 4);
			this.dock.Name = "dock";
			this.dock.Padding = new System.Windows.Forms.Padding(6, 8, 6, 8);
			this.dock.RowCount = 1;
			this.dock.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.dock.Size = new System.Drawing.Size(582, 56);
			this.dock.TabIndex = 11;
			//
			// OkBtn
			//
			this.OkBtn.AutoSize = true;
			this.OkBtn.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.OkBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.OkBtn.Location = new System.Drawing.Point(382, 12);
			this.OkBtn.Margin = new System.Windows.Forms.Padding(2, 4, 2, 4);
			this.OkBtn.Name = "OkBtn";
			this.OkBtn.Size = new System.Drawing.Size(94, 32);
			this.OkBtn.TabIndex = 1;
			this.OkBtn.Text = "完成(&O)";
			this.OkBtn.UseVisualStyleBackColor = true;
			this.OkBtn.Click += new System.EventHandler(this.OkBtn_Click);
			//
			// CancelBtn
			//
			this.CancelBtn.AutoSize = true;
			this.CancelBtn.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.CancelBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.CancelBtn.Location = new System.Drawing.Point(480, 12);
			this.CancelBtn.Margin = new System.Windows.Forms.Padding(2, 4, 2, 4);
			this.CancelBtn.Name = "CancelBtn";
			this.CancelBtn.Size = new System.Drawing.Size(94, 32);
			this.CancelBtn.TabIndex = 2;
			this.CancelBtn.Text = "取消(&C)";
			this.CancelBtn.UseVisualStyleBackColor = true;
			this.CancelBtn.Click += new System.EventHandler(this.CancelBtn_Click);
			//
			// tableLayoutPanel1
			//
			this.tableLayoutPanel1.ColumnCount = 1;
			this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel1.Controls.Add(this.AutoLayoutTracksGroup, 0, 2);
			this.tableLayoutPanel1.Controls.Add(this.ChannelListView, 0, 0);
			this.tableLayoutPanel1.Controls.Add(this.flowLayoutPanel1, 0, 1);
			this.tableLayoutPanel1.Dock = System.Windows.Forms.DockStyle.Fill;
			this.tableLayoutPanel1.Location = new System.Drawing.Point(0, 0);
			this.tableLayoutPanel1.Margin = new System.Windows.Forms.Padding(2);
			this.tableLayoutPanel1.Name = "tableLayoutPanel1";
			this.tableLayoutPanel1.Padding = new System.Windows.Forms.Padding(6);
			this.tableLayoutPanel1.RowCount = 3;
			this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel1.Size = new System.Drawing.Size(582, 447);
			this.tableLayoutPanel1.TabIndex = 13;
			//
			// AutoLayoutTracksGroup
			//
			this.AutoLayoutTracksGroup.AutoSize = true;
			this.AutoLayoutTracksGroup.Controls.Add(this.tableLayoutPanel2);
			this.AutoLayoutTracksGroup.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AutoLayoutTracksGroup.Location = new System.Drawing.Point(8, 313);
			this.AutoLayoutTracksGroup.Margin = new System.Windows.Forms.Padding(2);
			this.AutoLayoutTracksGroup.Name = "AutoLayoutTracksGroup";
			this.AutoLayoutTracksGroup.Padding = new System.Windows.Forms.Padding(2);
			this.AutoLayoutTracksGroup.Size = new System.Drawing.Size(566, 126);
			this.AutoLayoutTracksGroup.TabIndex = 19;
			this.AutoLayoutTracksGroup.TabStop = false;
			this.AutoLayoutTracksGroup.Text = "自动布局轨道";
			//
			// tableLayoutPanel2
			//
			this.tableLayoutPanel2.AutoSize = true;
			this.tableLayoutPanel2.ColumnCount = 1;
			this.tableLayoutPanel2.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel2.Controls.Add(this.ResetAutoLayoutTracksBtn, 0, 2);
			this.tableLayoutPanel2.Controls.Add(this.AutoLayoutTracksButtons, 0, 1);
			this.tableLayoutPanel2.Controls.Add(this.MidiChannelAdvancedAutoLayoutTracksInfo, 0, 0);
			this.tableLayoutPanel2.Dock = System.Windows.Forms.DockStyle.Fill;
			this.tableLayoutPanel2.Location = new System.Drawing.Point(2, 22);
			this.tableLayoutPanel2.Name = "tableLayoutPanel2";
			this.tableLayoutPanel2.Padding = new System.Windows.Forms.Padding(5);
			this.tableLayoutPanel2.RowCount = 3;
			this.tableLayoutPanel2.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel2.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel2.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel2.Size = new System.Drawing.Size(562, 102);
			this.tableLayoutPanel2.TabIndex = 0;
			//
			// ResetAutoLayoutTracksBtn
			//
			this.ResetAutoLayoutTracksBtn.AutoSize = true;
			this.ResetAutoLayoutTracksBtn.Dock = System.Windows.Forms.DockStyle.Left;
			this.ResetAutoLayoutTracksBtn.ForeColor = System.Drawing.Color.Red;
			this.ResetAutoLayoutTracksBtn.Location = new System.Drawing.Point(7, 63);
			this.ResetAutoLayoutTracksBtn.Margin = new System.Windows.Forms.Padding(2);
			this.ResetAutoLayoutTracksBtn.MaximumSize = new System.Drawing.Size(300, 32);
			this.ResetAutoLayoutTracksBtn.Name = "ResetAutoLayoutTracksBtn";
			this.ResetAutoLayoutTracksBtn.Size = new System.Drawing.Size(134, 32);
			this.ResetAutoLayoutTracksBtn.TabIndex = 10;
			this.ResetAutoLayoutTracksBtn.Text = "重置";
			this.ResetAutoLayoutTracksBtn.UseVisualStyleBackColor = true;
			this.ResetAutoLayoutTracksBtn.Click += new System.EventHandler(this.ResetAutoLayoutTracksBtn_Click);
			//
			// AutoLayoutTracksButtons
			//
			this.AutoLayoutTracksButtons.AutoSize = true;
			this.AutoLayoutTracksButtons.ColumnCount = 4;
			this.AutoLayoutTracksButtons.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.AutoLayoutTracksButtons.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.AutoLayoutTracksButtons.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.AutoLayoutTracksButtons.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.AutoLayoutTracksButtons.Controls.Add(this.GradientTracksBtn, 0, 0);
			this.AutoLayoutTracksButtons.Controls.Add(this.AutoLayoutTracksBox3dBtn, 0, 0);
			this.AutoLayoutTracksButtons.Controls.Add(this.AutoLayoutTracksGridBtn, 0, 0);
			this.AutoLayoutTracksButtons.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AutoLayoutTracksButtons.Location = new System.Drawing.Point(5, 25);
			this.AutoLayoutTracksButtons.Margin = new System.Windows.Forms.Padding(0);
			this.AutoLayoutTracksButtons.Name = "AutoLayoutTracksButtons";
			this.AutoLayoutTracksButtons.RowCount = 1;
			this.AutoLayoutTracksButtons.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.AutoLayoutTracksButtons.Size = new System.Drawing.Size(552, 36);
			this.AutoLayoutTracksButtons.TabIndex = 9;
			//
			// GradientTracksBtn
			//
			this.GradientTracksBtn.AutoSize = true;
			this.GradientTracksBtn.Dock = System.Windows.Forms.DockStyle.Left;
			this.GradientTracksBtn.Location = new System.Drawing.Point(278, 2);
			this.GradientTracksBtn.Margin = new System.Windows.Forms.Padding(2);
			this.GradientTracksBtn.Name = "GradientTracksBtn";
			this.GradientTracksBtn.Size = new System.Drawing.Size(134, 32);
			this.GradientTracksBtn.TabIndex = 5;
			this.GradientTracksBtn.Text = "渐变轨道...";
			this.GradientTracksBtn.UseVisualStyleBackColor = true;
			this.GradientTracksBtn.Click += new System.EventHandler(this.GradientTracksBtn_Click);
			//
			// AutoLayoutTracksBox3dBtn
			//
			this.AutoLayoutTracksBox3dBtn.AutoSize = true;
			this.AutoLayoutTracksBox3dBtn.Dock = System.Windows.Forms.DockStyle.Left;
			this.AutoLayoutTracksBox3dBtn.Location = new System.Drawing.Point(140, 2);
			this.AutoLayoutTracksBox3dBtn.Margin = new System.Windows.Forms.Padding(2);
			this.AutoLayoutTracksBox3dBtn.Name = "AutoLayoutTracksBox3dBtn";
			this.AutoLayoutTracksBox3dBtn.Size = new System.Drawing.Size(134, 32);
			this.AutoLayoutTracksBox3dBtn.TabIndex = 4;
			this.AutoLayoutTracksBox3dBtn.Text = "3D 方盒布局...";
			this.AutoLayoutTracksBox3dBtn.UseVisualStyleBackColor = true;
			this.AutoLayoutTracksBox3dBtn.Click += new System.EventHandler(this.AutoLayoutTracksBox3dBtn_Click);
			//
			// AutoLayoutTracksGridBtn
			//
			this.AutoLayoutTracksGridBtn.AutoSize = true;
			this.AutoLayoutTracksGridBtn.Dock = System.Windows.Forms.DockStyle.Left;
			this.AutoLayoutTracksGridBtn.Location = new System.Drawing.Point(2, 2);
			this.AutoLayoutTracksGridBtn.Margin = new System.Windows.Forms.Padding(2);
			this.AutoLayoutTracksGridBtn.Name = "AutoLayoutTracksGridBtn";
			this.AutoLayoutTracksGridBtn.Size = new System.Drawing.Size(134, 32);
			this.AutoLayoutTracksGridBtn.TabIndex = 3;
			this.AutoLayoutTracksGridBtn.Text = "网格布局...";
			this.AutoLayoutTracksGridBtn.UseVisualStyleBackColor = true;
			this.AutoLayoutTracksGridBtn.Click += new System.EventHandler(this.AutoLayoutTracksGridBtn_Click);
			//
			// MidiChannelAdvancedAutoLayoutTracksInfo
			//
			this.MidiChannelAdvancedAutoLayoutTracksInfo.AutoSize = true;
			this.MidiChannelAdvancedAutoLayoutTracksInfo.Dock = System.Windows.Forms.DockStyle.Fill;
			this.MidiChannelAdvancedAutoLayoutTracksInfo.Location = new System.Drawing.Point(8, 5);
			this.MidiChannelAdvancedAutoLayoutTracksInfo.Name = "MidiChannelAdvancedAutoLayoutTracksInfo";
			this.MidiChannelAdvancedAutoLayoutTracksInfo.Size = new System.Drawing.Size(546, 20);
			this.MidiChannelAdvancedAutoLayoutTracksInfo.TabIndex = 0;
			this.MidiChannelAdvancedAutoLayoutTracksInfo.Text = "仅在生成视频且不启用五线谱可视化效果时有效。";
			//
			// ChannelListView
			//
			this.ChannelListView.AllowColumnReorder = true;
			this.ChannelListView.CheckBoxes = true;
			this.ChannelListView.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
			this.ChannelHeader,
			this.NameHeader,
			this.InstrumentHeader,
			this.IsDrumsKitHeader,
			this.NoteCountHeader,
			this.PanHeader,
			this.BeginNoteHeader});
			this.ChannelListView.Dock = System.Windows.Forms.DockStyle.Fill;
			this.ChannelListView.FullRowSelect = true;
			this.ChannelListView.HideSelection = false;
			this.ChannelListView.Location = new System.Drawing.Point(8, 8);
			this.ChannelListView.Margin = new System.Windows.Forms.Padding(2);
			this.ChannelListView.Name = "ChannelListView";
			this.ChannelListView.ShowItemToolTips = true;
			this.ChannelListView.Size = new System.Drawing.Size(566, 257);
			this.ChannelListView.TabIndex = 13;
			this.ChannelListView.UseCompatibleStateImageBehavior = false;
			this.ChannelListView.View = System.Windows.Forms.View.Details;
			this.ChannelListView.ItemChecked += new System.Windows.Forms.ItemCheckedEventHandler(this.ChannelListView_ItemChecked);
			this.ChannelListView.SelectedIndexChanged += new System.EventHandler(this.ChannelListView_SelectedIndexChanged);
			//
			// ChannelHeader
			//
			this.ChannelHeader.Text = "通道";
			//
			// NameHeader
			//
			this.NameHeader.Text = "名称";
			this.NameHeader.Width = 160;
			//
			// InstrumentHeader
			//
			this.InstrumentHeader.Text = "乐器";
			this.InstrumentHeader.Width = 120;
			//
			// IsDrumsKitHeader
			//
			this.IsDrumsKitHeader.Text = "鼓组";
			//
			// NoteCountHeader
			//
			this.NoteCountHeader.Text = "音符数";
			//
			// PanHeader
			//
			this.PanHeader.Text = "声像";
			//
			// BeginNoteHeader
			//
			this.BeginNoteHeader.Text = "起音";
			this.BeginNoteHeader.Width = 120;
			//
			// flowLayoutPanel1
			//
			this.flowLayoutPanel1.AutoSize = true;
			this.flowLayoutPanel1.Controls.Add(this.EditNotesBtn);
			this.flowLayoutPanel1.Controls.Add(this.SelectAllBtn);
			this.flowLayoutPanel1.Controls.Add(this.InvertSelectionButton);
			this.flowLayoutPanel1.Dock = System.Windows.Forms.DockStyle.Fill;
			this.flowLayoutPanel1.Location = new System.Drawing.Point(9, 270);
			this.flowLayoutPanel1.Name = "flowLayoutPanel1";
			this.flowLayoutPanel1.Size = new System.Drawing.Size(564, 38);
			this.flowLayoutPanel1.TabIndex = 17;
			//
			// EditNotesBtn
			//
			this.EditNotesBtn.AutoSize = true;
			this.EditNotesBtn.Dock = System.Windows.Forms.DockStyle.Left;
			this.EditNotesBtn.Location = new System.Drawing.Point(2, 2);
			this.EditNotesBtn.Margin = new System.Windows.Forms.Padding(2);
			this.EditNotesBtn.Name = "EditNotesBtn";
			this.EditNotesBtn.Size = new System.Drawing.Size(201, 34);
			this.EditNotesBtn.TabIndex = 15;
			this.EditNotesBtn.Text = "编辑所选轨道音符...";
			this.EditNotesBtn.UseVisualStyleBackColor = true;
			this.EditNotesBtn.Click += new System.EventHandler(this.EditNotesBtn_Click);
			//
			// SelectAllBtn
			//
			this.SelectAllBtn.AutoSize = true;
			this.SelectAllBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SelectAllBtn.Location = new System.Drawing.Point(208, 3);
			this.SelectAllBtn.MinimumSize = new System.Drawing.Size(94, 32);
			this.SelectAllBtn.Name = "SelectAllBtn";
			this.SelectAllBtn.Size = new System.Drawing.Size(94, 32);
			this.SelectAllBtn.TabIndex = 16;
			this.SelectAllBtn.Text = "全选";
			this.SelectAllBtn.UseVisualStyleBackColor = true;
			this.SelectAllBtn.Click += new System.EventHandler(this.SelectAllBtn_Click);
			//
			// InvertSelectionButton
			//
			this.InvertSelectionButton.AutoSize = true;
			this.InvertSelectionButton.Dock = System.Windows.Forms.DockStyle.Fill;
			this.InvertSelectionButton.Location = new System.Drawing.Point(308, 3);
			this.InvertSelectionButton.MinimumSize = new System.Drawing.Size(94, 32);
			this.InvertSelectionButton.Name = "InvertSelectionButton";
			this.InvertSelectionButton.Size = new System.Drawing.Size(94, 32);
			this.InvertSelectionButton.TabIndex = 17;
			this.InvertSelectionButton.Text = "反选";
			this.InvertSelectionButton.UseVisualStyleBackColor = true;
			this.InvertSelectionButton.Click += new System.EventHandler(this.InvertSelectionButton_Click);
			//
			// MidiChannelAdvancedForm
			//
			this.AcceptButton = this.OkBtn;
			this.AutoScaleDimensions = new System.Drawing.SizeF(120F, 120F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Dpi;
			this.CancelButton = this.CancelBtn;
			this.ClientSize = new System.Drawing.Size(582, 503);
			this.Controls.Add(this.tableLayoutPanel1);
			this.Controls.Add(this.dock);
			this.Font = new System.Drawing.Font("Segoe UI", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(134)));
			this.Margin = new System.Windows.Forms.Padding(2, 4, 2, 4);
			this.MaximizeBox = false;
			this.MinimizeBox = false;
			this.MinimumSize = new System.Drawing.Size(600, 550);
			this.Name = "MidiChannelAdvancedForm";
			this.ShowInTaskbar = false;
			this.StartPosition = System.Windows.Forms.FormStartPosition.CenterParent;
			this.Text = "MIDI 轨道高级属性";
			this.dock.ResumeLayout(false);
			this.dock.PerformLayout();
			this.tableLayoutPanel1.ResumeLayout(false);
			this.tableLayoutPanel1.PerformLayout();
			this.AutoLayoutTracksGroup.ResumeLayout(false);
			this.AutoLayoutTracksGroup.PerformLayout();
			this.tableLayoutPanel2.ResumeLayout(false);
			this.tableLayoutPanel2.PerformLayout();
			this.AutoLayoutTracksButtons.ResumeLayout(false);
			this.AutoLayoutTracksButtons.PerformLayout();
			this.flowLayoutPanel1.ResumeLayout(false);
			this.flowLayoutPanel1.PerformLayout();
			this.ResumeLayout(false);

		}

		#endregion

		private System.Windows.Forms.TableLayoutPanel dock;
		private System.Windows.Forms.Button OkBtn;
		private System.Windows.Forms.Button CancelBtn;
		private System.Windows.Forms.TableLayoutPanel tableLayoutPanel1;
		public System.Windows.Forms.ListView ChannelListView;
		private System.Windows.Forms.ColumnHeader ChannelHeader;
		private System.Windows.Forms.ColumnHeader NameHeader;
		private System.Windows.Forms.ColumnHeader InstrumentHeader;
		private System.Windows.Forms.ColumnHeader NoteCountHeader;
		private System.Windows.Forms.ColumnHeader BeginNoteHeader;
		private System.Windows.Forms.GroupBox AutoLayoutTracksGroup;
		private System.Windows.Forms.TableLayoutPanel tableLayoutPanel2;
		private System.Windows.Forms.Button ResetAutoLayoutTracksBtn;
		private System.Windows.Forms.TableLayoutPanel AutoLayoutTracksButtons;
		private System.Windows.Forms.Button GradientTracksBtn;
		private System.Windows.Forms.Button AutoLayoutTracksBox3dBtn;
		private System.Windows.Forms.Button AutoLayoutTracksGridBtn;
		private System.Windows.Forms.Label MidiChannelAdvancedAutoLayoutTracksInfo;
		private System.Windows.Forms.FlowLayoutPanel flowLayoutPanel1;
		private System.Windows.Forms.Button EditNotesBtn;
		private System.Windows.Forms.Button SelectAllBtn;
		private System.Windows.Forms.Button InvertSelectionButton;
		private System.Windows.Forms.ColumnHeader IsDrumsKitHeader;
		private System.Windows.Forms.ColumnHeader PanHeader;
	}

	public partial class MidiChannelAdvancedForm : Form, IInterpret {
		private readonly ConfigForm configForm;
		private EntryPoint entryPoint { get { return configForm.parent; } }
		private readonly MidiChannels channels;
		private readonly AutoLayoutTracksInfos layoutInfos;
		public MidiChannels Channels { get { return channels; } }
		public AutoLayoutTracksInfos LayoutInfos { get { return layoutInfos; } }
		public MidiChannelAdvancedForm(ConfigForm configForm, MidiChannels existChannel = null, AutoLayoutTracksInfos existLayoutInfos = null) {
			InitializeComponent();
			this.configForm = configForm;
			Icon = configForm.Icon;
			this.ReserveSystemMenuItems(SystemMenuItemType.MOVE | SystemMenuItemType.SIZE | SystemMenuItemType.CLOSE);
			Translate();
			CheckNonEmpty(true);
			channels = existChannel == null ? new MidiChannels() : new MidiChannels(existChannel);
			layoutInfos = existLayoutInfos == null ? new AutoLayoutTracksInfos(channels) : AutoLayoutTracksInfos.CopyFrom(existLayoutInfos, channels);
			CheckAutoLayoutTracksButtonActived();
			ChannelListView_SelectedIndexChanged(null, null);
			foreach (object _midiChannel in configForm.MidiChannelCombo.Items)
				if (_midiChannel is MIDI.TrackInfo) {
					MIDI.TrackInfo midiChannel = _midiChannel as MIDI.TrackInfo;
					string pan =
						midiChannel.Pan == MIDI.INITIAL_PAN ? "" : // 轨道不包含声像信息
						midiChannel.Pan < 60 ? Lang.str.pan_left_abbr :
						midiChannel.Pan > 68 ? Lang.str.pan_right_abbr :
						Lang.str.pan_center_abbr; // 60 ~ 68 之间判定为中置声道。
					if (midiChannel.IsDynamicPan) pan += " " + Lang.str.pan_dynamic_abbr;
					ListViewItem item = ChannelListView.Items.Add(new ListViewItem(new string[] {
						midiChannel.Index.ToString(), midiChannel.Name, midiChannel.Instrument,
						midiChannel.IsDrumKit ? Lang.str.yes : "",
						midiChannel.NotesCount.ToString(), pan, midiChannel.BeginNote
					}));
					item.Tag = midiChannel;
					if (existChannel == null) {
						if (configForm.MidiChannelCombo.SelectedItem == _midiChannel) item.Checked = true;
					} else if (existChannel.Contains(midiChannel)) item.Checked = true;
				}
		}

		private void OkBtn_Click(object sender, EventArgs e) {
			Close();
		}

		private void CancelBtn_Click(object sender, EventArgs e) {
			Close();
		}

		private void CommingSoon() {
			MessageBox.Show("Comming soon in v5.x!", "", MessageBoxButtons.OK, MessageBoxIcon.Information);
		}

		private bool CheckNonEmpty(bool isInitial = false) {
			bool result = OkBtn.Enabled =
				configForm.MidiChannelCombo.Items.Count != 0 && (isInitial || ChannelListView.CheckedItems.Count != 0);
			AutoLayoutTracksGroup.Enabled = result && ChannelListView.CheckedItems.Count >= 2;
			return result;
		}

		private void EditNotesBtn_Click(object sender, EventArgs e) {
			CommingSoon();
		}

		private void AutoLayoutTracksBox3dBtn_Click(object sender, EventArgs e) {
			CommingSoon();
		}

		private void AutoLayoutTracksGridBtn_Click(object sender, EventArgs e) {
			new AutoLayoutTracksGridForm(entryPoint, layoutInfos.Grid).ShowDialog();
			CheckAutoLayoutTracksButtonActived();
		}

		private void GradientTracksBtn_Click(object sender, EventArgs e) {
			new GradientTracksForm(entryPoint, layoutInfos.GradientTracks).ShowDialog();
			CheckAutoLayoutTracksButtonActived();
		}

		public void QuickEnableAllAutoLayoutTracks(bool grid = true, bool box3d = true, bool gradient = true) {
			if (grid) new AutoLayoutTracksGridForm(entryPoint, layoutInfos.Grid).OkBtn_Click(null, null);
			if (gradient) new GradientTracksForm(entryPoint, layoutInfos.GradientTracks).OkBtn_Click(null, null);
		}

		private void ResetAutoLayoutTracksBtn_Click(object sender, EventArgs e) {
			layoutInfos.Grid.enabled = false;
			layoutInfos.GradientTracks.enabled = false;
			CheckAutoLayoutTracksButtonActived();
		}

		private void CheckAutoLayoutTracksButtonActived() {
			SetButtonActive(AutoLayoutTracksGridBtn, layoutInfos.Grid.enabled);
			SetButtonActive(GradientTracksBtn, layoutInfos.GradientTracks.enabled);
		}

		public void ChannelListView_ItemChecked(object sender, ItemCheckedEventArgs e) {
			channels.Clear();
			channels.AddRange(ChannelListView.CheckedItems);
			CheckNonEmpty();
			string selectAllBtnText = !IsCheckAll ? Lang.str.select_all : Lang.str.select_none; // 注意此处按钮文本应该和当前情况相反。
			if (SelectAllBtn.Text != selectAllBtnText) SelectAllBtn.Text = selectAllBtnText;
		}

		private void SetButtonActive(Button button, bool isActive) {
			Lang str = Lang.str;
			Dictionary<Button, string> dict = new Dictionary<Button, string> {
				{ AutoLayoutTracksGridBtn, str.grid_layout },
				{ AutoLayoutTracksBox3dBtn, str.box_3d_layout },
				{ GradientTracksBtn, str.gradient_tracks }
			};
			if (!dict.ContainsKey(button)) return;
			button.Text = (isActive ? "* " : "") + dict[button] + str.dialog_sign;
			button.ForeColor = isActive ? Color.Green : SystemColors.ControlText;
		}

		public void Translate() {
			Lang str = Lang.str;
			Font = new Font(str.ui_font, 9F);
			Text = str.midi_channel_advanced;
			EditNotesBtn.Text = str.edit_notes;
			AutoLayoutTracksGroup.Text = str.auto_layout_tracks;
			MidiChannelAdvancedAutoLayoutTracksInfo.Text = str.auto_layout_tracks_midi_channel_advanced_info;
			ResetAutoLayoutTracksBtn.Text = str.reset;
			AutoLayoutTracksGridBtn.Text = str.grid_layout + str.dialog_sign;
			AutoLayoutTracksBox3dBtn.Text = str.box_3d_layout + str.dialog_sign;
			GradientTracksBtn.Text = str.gradient_tracks + str.dialog_sign;
			OkBtn.Text = str.complete;
			CancelBtn.Text = str.cancel;
			ChannelHeader.Text = str.channel;
			NameHeader.Text = str.name;
			InstrumentHeader.Text = str.instrument;
			NoteCountHeader.Text = str.midi_notes_count;
			BeginNoteHeader.Text = str.midi_begin_note;
			IsDrumsKitHeader.Text = str.drum_kit;
			PanHeader.Text = str.pan;
			SelectAllBtn.Text = str.select_all;
			InvertSelectionButton.Text = str.invert_selection;
		}

		private void ChannelListView_SelectedIndexChanged(object sender, EventArgs e) {
			EditNotesBtn.Enabled = ChannelListView.SelectedItems.Count == 1;
		}

		private void SelectAllBtn_Click(object sender, EventArgs e) {
			bool check = !IsCheckAll;
			foreach (ListViewItem item in ChannelListView.Items)
				item.Checked = check;
		}

		private void InvertSelectionButton_Click(object sender, EventArgs e) {
			foreach (ListViewItem item in ChannelListView.Items)
				item.Checked = !item.Checked;
		}

		private bool IsCheckAll {
			get {
				return ChannelListView.Items.Count != 0 && ChannelListView.CheckedItems.Count == ChannelListView.Items.Count;
			}
		}
	}

	public class MidiChannels : List<MIDI.TrackInfo> {
		public void Next() {
			if (Count != 0) {
				RemoveAt(0);
				currentChannel++;
			}
		}
		private int selectedChannelCount = 0;
		public int SelectedChannelCount { get { return selectedChannelCount; } }
		private int currentChannel = 0;
		public int CurrentChannel { get { return currentChannel; } }
		public void CompleteConfig() {
			selectedChannelCount = Count;
			// 将鼓组轨道移至末尾
			List<MIDI.TrackInfo> drumChannels = FindAll(t => t.IsDrumKit);
			foreach (MIDI.TrackInfo track in drumChannels) {
				Remove(track);
				Add(track);
			}
		}
		public double GetPercent(double currentTrackPercent) {
			double aChannelPercent = 100.0 / selectedChannelCount;
			double completedChannelPercent = currentChannel * aChannelPercent;
			double currentChannelPercent = currentTrackPercent / 100.0 * aChannelPercent;
			return completedChannelPercent + currentChannelPercent;
		}
		public MidiChannels() : base() { }
		public MidiChannels(IEnumerable<MIDI.TrackInfo> tracks) : base(tracks) { }
		public MidiChannels(ListView.CheckedListViewItemCollection items) : base() {
			AddRange(items);
		}
		public void AddRange(ListView.CheckedListViewItemCollection items) {
			foreach (ListViewItem item in items)
				if (item.Tag is MIDI.TrackInfo)
					Add(item.Tag as MIDI.TrackInfo);
		}

		public override string ToString() {
			List<string> list = new List<string>();
			foreach (MIDI.TrackInfo track in this) {
				StringBuilder text = new StringBuilder(track.Index.ToString());
				if (track.HasName) text.Append(" ").Append(track.Name);
				list.Add(text.ToString());
			}
			return string.Join(Lang.str.semicolon, list);
		}

		public bool IsMultiMidiChannel { get { return selectedChannelCount > 1; } }
		public bool IsNonEmpty { get { return Count > 0; } }
		public bool HasDrumKitChannel { get { return FindAll(channel => channel.IsDrumKit).Count != 0; } }

		// 用于解决新问题：直接将本对象添加进入下拉菜单会显示为“(集合)”而不是重写的 toString 方法，需使用下面这个属性解决。
		public string DisplayValue { get { return ToString(); } }
	}

	public class AutoLayoutTracksInfos {
		public readonly MidiChannels channels;
		public AutoLayoutTracksInfos(MidiChannels channels) {
			this.channels = channels;
			gradientTracks = new GradientTracksInfo(this);
			grid = new GridInfo(this);
		}
		public abstract class BaseAutoLayoutTracksInfo {
			public bool enabled = false;
			public MidiChannels Channels { get { return allInfos.channels; } }
			private AutoLayoutTracksInfos allInfos;
			public AutoLayoutTracksInfos AllInfos { get { return allInfos; } }
			public BaseAutoLayoutTracksInfo(AutoLayoutTracksInfos allInfos) {
				this.allInfos = allInfos;
			}
			public BaseAutoLayoutTracksInfo Clone(AutoLayoutTracksInfos allInfos) {
				BaseAutoLayoutTracksInfo clone = MemberwiseClone() as BaseAutoLayoutTracksInfo;
				clone.allInfos = allInfos;
				return clone;
			}
		}
		[Serializable]
		public class GradientTracksInfo : BaseAutoLayoutTracksInfo {
			public GradientTracksInfo(AutoLayoutTracksInfos allInfos) : base(allInfos) { }
			public VideoTrackGradientEffectType effect;
			public bool descending;
		}
		[Serializable]
		public class GridInfo : BaseAutoLayoutTracksInfo {
			public GridInfo(AutoLayoutTracksInfos allInfos) : base(allInfos) { }
			public bool isSquare;
			public int columns;
			public bool isFill;
			public bool descending;
			public int padding;
			public int horizontalFlip;
			public int verticalFlip;
		}
		private GradientTracksInfo gradientTracks;
		private GridInfo grid;
		public GradientTracksInfo GradientTracks { get { return gradientTracks; } }
		public GridInfo Grid { get { return grid; } }

		public static AutoLayoutTracksInfos CopyFrom(AutoLayoutTracksInfos existing, MidiChannels channels) {
			AutoLayoutTracksInfos infos = new AutoLayoutTracksInfos(channels);
			infos.gradientTracks = existing.gradientTracks.Clone(infos) as GradientTracksInfo;
			infos.grid = existing.grid.Clone(infos) as GridInfo;
			return infos;
		}
	}

	partial class IncreaseSpacingDialog {
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer components = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose(bool disposing) {
			if (disposing && (components != null)) {
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent() {
			this.dock = new System.Windows.Forms.TableLayoutPanel();
			this.OkBtn = new System.Windows.Forms.Button();
			this.CancelBtn = new System.Windows.Forms.Button();
			this.tableLayoutPanel1 = new System.Windows.Forms.TableLayoutPanel();
			this.IncreaseSpacingLbl = new System.Windows.Forms.Label();
			this.IncreaseSpacingText = new System.Windows.Forms.TextBox();
			this.dock.SuspendLayout();
			this.tableLayoutPanel1.SuspendLayout();
			this.SuspendLayout();
			//
			// dock
			//
			this.dock.BackColor = System.Drawing.SystemColors.Control;
			this.dock.ColumnCount = 3;
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.dock.Controls.Add(this.OkBtn, 1, 0);
			this.dock.Controls.Add(this.CancelBtn, 2, 0);
			this.dock.Dock = System.Windows.Forms.DockStyle.Bottom;
			this.dock.Location = new System.Drawing.Point(0, 101);
			this.dock.Margin = new System.Windows.Forms.Padding(5);
			this.dock.Name = "dock";
			this.dock.Padding = new System.Windows.Forms.Padding(8, 6, 8, 6);
			this.dock.RowCount = 1;
			this.dock.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.dock.Size = new System.Drawing.Size(432, 52);
			this.dock.TabIndex = 8;
			//
			// OkBtn
			//
			this.OkBtn.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.OkBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.OkBtn.Location = new System.Drawing.Point(224, 10);
			this.OkBtn.Margin = new System.Windows.Forms.Padding(4);
			this.OkBtn.Name = "OkBtn";
			this.OkBtn.Size = new System.Drawing.Size(94, 32);
			this.OkBtn.TabIndex = 1;
			this.OkBtn.Text = "确定(&O)";
			this.OkBtn.UseVisualStyleBackColor = true;
			//
			// CancelBtn
			//
			this.CancelBtn.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.CancelBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.CancelBtn.Location = new System.Drawing.Point(326, 10);
			this.CancelBtn.Margin = new System.Windows.Forms.Padding(4);
			this.CancelBtn.Name = "CancelBtn";
			this.CancelBtn.Size = new System.Drawing.Size(94, 32);
			this.CancelBtn.TabIndex = 2;
			this.CancelBtn.Text = "取消(&C)";
			this.CancelBtn.UseVisualStyleBackColor = true;
			//
			// tableLayoutPanel1
			//
			this.tableLayoutPanel1.AutoSize = true;
			this.tableLayoutPanel1.ColumnCount = 1;
			this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel1.Controls.Add(this.IncreaseSpacingLbl, 0, 0);
			this.tableLayoutPanel1.Controls.Add(this.IncreaseSpacingText, 0, 1);
			this.tableLayoutPanel1.Dock = System.Windows.Forms.DockStyle.Top;
			this.tableLayoutPanel1.Location = new System.Drawing.Point(0, 0);
			this.tableLayoutPanel1.Name = "tableLayoutPanel1";
			this.tableLayoutPanel1.Padding = new System.Windows.Forms.Padding(10, 10, 10, 0);
			this.tableLayoutPanel1.RowCount = 2;
			this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel1.Size = new System.Drawing.Size(432, 83);
			this.tableLayoutPanel1.TabIndex = 9;
			//
			// IncreaseSpacingLbl
			//
			this.IncreaseSpacingLbl.AutoSize = true;
			this.IncreaseSpacingLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.IncreaseSpacingLbl.Font = new System.Drawing.Font("Microsoft YaHei UI", 12F);
			this.IncreaseSpacingLbl.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(51)))), ((int)(((byte)(153)))));
			this.IncreaseSpacingLbl.Location = new System.Drawing.Point(10, 10);
			this.IncreaseSpacingLbl.Margin = new System.Windows.Forms.Padding(0, 0, 0, 12);
			this.IncreaseSpacingLbl.Name = "IncreaseSpacingLbl";
			this.IncreaseSpacingLbl.Size = new System.Drawing.Size(412, 28);
			this.IncreaseSpacingLbl.TabIndex = 0;
			this.IncreaseSpacingLbl.Text = "在指定的剪辑之间增加的间隙时间：";
			this.IncreaseSpacingLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// IncreaseSpacingText
			//
			this.IncreaseSpacingText.Dock = System.Windows.Forms.DockStyle.Fill;
			this.IncreaseSpacingText.Location = new System.Drawing.Point(13, 53);
			this.IncreaseSpacingText.Name = "IncreaseSpacingText";
			this.IncreaseSpacingText.Size = new System.Drawing.Size(406, 27);
			this.IncreaseSpacingText.TabIndex = 1;
			this.IncreaseSpacingText.Leave += new System.EventHandler(this.IncreaseSpacingText_Leave);
			//
			// IncreaseSpacingDialog
			//
			this.AcceptButton = this.OkBtn;
			this.AutoScaleDimensions = new System.Drawing.SizeF(120F, 120F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Dpi;
			this.BackColor = System.Drawing.SystemColors.Window;
			this.CancelButton = this.CancelBtn;
			this.ClientSize = new System.Drawing.Size(432, 153);
			this.Controls.Add(this.tableLayoutPanel1);
			this.Controls.Add(this.dock);
			this.Font = new System.Drawing.Font("Microsoft YaHei UI", 9F);
			this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
			this.MaximizeBox = false;
			this.MinimizeBox = false;
			this.Name = "IncreaseSpacingDialog";
			this.ShowIcon = false;
			this.ShowInTaskbar = false;
			this.StartPosition = System.Windows.Forms.FormStartPosition.CenterParent;
			this.Text = "增加间隙";
			this.dock.ResumeLayout(false);
			this.tableLayoutPanel1.ResumeLayout(false);
			this.tableLayoutPanel1.PerformLayout();
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion

		public System.Windows.Forms.TableLayoutPanel dock;
		public System.Windows.Forms.Button OkBtn;
		public System.Windows.Forms.Button CancelBtn;
		private System.Windows.Forms.TableLayoutPanel tableLayoutPanel1;
		private System.Windows.Forms.Label IncreaseSpacingLbl;
		private System.Windows.Forms.TextBox IncreaseSpacingText;
	}

	public partial class IncreaseSpacingDialog : Form, IInterpret, IConfigIniUser {
		private ConfigForm configForm;
		private ConfigIni configIni { get { return configForm.configIni; } }
		public IncreaseSpacingDialog(ConfigForm configForm) {
			InitializeComponent();
			this.configForm = configForm;
			Icon = configForm.Icon;
			this.ReserveSystemMenuItems(SystemMenuItemType.MOVE | SystemMenuItemType.CLOSE);
			Translate();
			ReadIni();
			Height = IncreaseSpacingLbl.Parent.Height + dock.Height + SelectIntervalForm.MARGIN;
			FormClosing += (sender, e) => SaveIni();
		}

		private Timecode spacing;
		public Timecode Spacing { get { return spacing; } }

		private void IncreaseSpacingText_Leave(object sender, EventArgs e) {
			spacing = Timecode.FromString(IncreaseSpacingText.Text);
			IncreaseSpacingText.Text = spacing.ToString();
		}

		public void Translate() {
			Lang str = Lang.str;
			Font = new Font(str.ui_font, 9F);
			OkBtn.Text = str.ok;
			CancelBtn.Text = str.cancel;
			IncreaseSpacingLbl.Text = str.increase_spacing_info + str.colon;
		}

		public void SaveIni() {
			configIni.Write("IncreaseSpacing", spacing.ToString(), "TracksLegato");
		}

		private const string INIT_INCREASE_SPACING = "1.0"; // 初始化为 1.0 秒。直接写成“1”会识别为 1 毫秒。
		public void ReadIni() {
			IncreaseSpacingText.Text = configIni.Read("IncreaseSpacing", INIT_INCREASE_SPACING, "TracksLegato");
			IncreaseSpacingText_Leave(null, null);
		}
	}

	partial class ApplyVisualEffectForm {
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer components = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose(bool disposing) {
			if (disposing && (components != null)) {
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent() {
			this.dock = new System.Windows.Forms.TableLayoutPanel();
			this.OkBtn = new System.Windows.Forms.Button();
			this.CancelBtn = new System.Windows.Forms.Button();
			this.panel1 = new System.Windows.Forms.Panel();
			this.VideoEffectsGroup = new System.Windows.Forms.GroupBox();
			this.tableLayoutPanel8 = new System.Windows.Forms.TableLayoutPanel();
			this.VideoEffectLbl = new System.Windows.Forms.Label();
			this.VideoEffectInitialValueLbl = new System.Windows.Forms.Label();
			this.VideoEffectCombo = new System.Windows.Forms.ComboBox();
			this.VideoEffectInitialValueCombo = new System.Windows.Forms.ComboBox();
			this.dock.SuspendLayout();
			this.panel1.SuspendLayout();
			this.VideoEffectsGroup.SuspendLayout();
			this.tableLayoutPanel8.SuspendLayout();
			this.SuspendLayout();
			//
			// dock
			//
			this.dock.BackColor = System.Drawing.SystemColors.Control;
			this.dock.ColumnCount = 3;
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.dock.Controls.Add(this.OkBtn, 1, 0);
			this.dock.Controls.Add(this.CancelBtn, 2, 0);
			this.dock.Dock = System.Windows.Forms.DockStyle.Bottom;
			this.dock.Location = new System.Drawing.Point(0, 122);
			this.dock.Margin = new System.Windows.Forms.Padding(5);
			this.dock.Name = "dock";
			this.dock.Padding = new System.Windows.Forms.Padding(8, 6, 8, 6);
			this.dock.RowCount = 1;
			this.dock.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.dock.Size = new System.Drawing.Size(519, 52);
			this.dock.TabIndex = 8;
			//
			// OkBtn
			//
			this.OkBtn.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.OkBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.OkBtn.Location = new System.Drawing.Point(311, 10);
			this.OkBtn.Margin = new System.Windows.Forms.Padding(4);
			this.OkBtn.Name = "OkBtn";
			this.OkBtn.Size = new System.Drawing.Size(94, 32);
			this.OkBtn.TabIndex = 1;
			this.OkBtn.Text = "完成(&O)";
			this.OkBtn.UseVisualStyleBackColor = true;
			this.OkBtn.Click += new System.EventHandler(this.OkBtn_Click);
			//
			// CancelBtn
			//
			this.CancelBtn.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.CancelBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.CancelBtn.Location = new System.Drawing.Point(413, 10);
			this.CancelBtn.Margin = new System.Windows.Forms.Padding(4);
			this.CancelBtn.Name = "CancelBtn";
			this.CancelBtn.Size = new System.Drawing.Size(94, 32);
			this.CancelBtn.TabIndex = 2;
			this.CancelBtn.Text = "取消(&C)";
			this.CancelBtn.UseVisualStyleBackColor = true;
			//
			// panel1
			//
			this.panel1.Controls.Add(this.VideoEffectsGroup);
			this.panel1.Dock = System.Windows.Forms.DockStyle.Fill;
			this.panel1.Location = new System.Drawing.Point(0, 0);
			this.panel1.Name = "panel1";
			this.panel1.Padding = new System.Windows.Forms.Padding(10);
			this.panel1.Size = new System.Drawing.Size(519, 122);
			this.panel1.TabIndex = 9;
			//
			// VideoEffectsGroup
			//
			this.VideoEffectsGroup.AutoSize = true;
			this.VideoEffectsGroup.Controls.Add(this.tableLayoutPanel8);
			this.VideoEffectsGroup.Dock = System.Windows.Forms.DockStyle.Top;
			this.VideoEffectsGroup.Location = new System.Drawing.Point(10, 10);
			this.VideoEffectsGroup.Name = "VideoEffectsGroup";
			this.VideoEffectsGroup.Padding = new System.Windows.Forms.Padding(5);
			this.VideoEffectsGroup.Size = new System.Drawing.Size(499, 98);
			this.VideoEffectsGroup.TabIndex = 10;
			this.VideoEffectsGroup.TabStop = false;
			this.VideoEffectsGroup.Text = "效果";
			//
			// tableLayoutPanel8
			//
			this.tableLayoutPanel8.AutoSize = true;
			this.tableLayoutPanel8.ColumnCount = 2;
			this.tableLayoutPanel8.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel8.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel8.Controls.Add(this.VideoEffectLbl, 0, 0);
			this.tableLayoutPanel8.Controls.Add(this.VideoEffectInitialValueLbl, 0, 1);
			this.tableLayoutPanel8.Controls.Add(this.VideoEffectCombo, 1, 0);
			this.tableLayoutPanel8.Controls.Add(this.VideoEffectInitialValueCombo, 1, 1);
			this.tableLayoutPanel8.Dock = System.Windows.Forms.DockStyle.Fill;
			this.tableLayoutPanel8.Location = new System.Drawing.Point(5, 25);
			this.tableLayoutPanel8.Margin = new System.Windows.Forms.Padding(4);
			this.tableLayoutPanel8.Name = "tableLayoutPanel8";
			this.tableLayoutPanel8.RowCount = 2;
			this.tableLayoutPanel8.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel8.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel8.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 20F));
			this.tableLayoutPanel8.Size = new System.Drawing.Size(489, 68);
			this.tableLayoutPanel8.TabIndex = 1;
			//
			// VideoEffectLbl
			//
			this.VideoEffectLbl.AutoSize = true;
			this.VideoEffectLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoEffectLbl.Location = new System.Drawing.Point(2, 0);
			this.VideoEffectLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.VideoEffectLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.VideoEffectLbl.Name = "VideoEffectLbl";
			this.VideoEffectLbl.Size = new System.Drawing.Size(69, 34);
			this.VideoEffectLbl.TabIndex = 0;
			this.VideoEffectLbl.Text = "视觉效果";
			this.VideoEffectLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// VideoEffectInitialValueLbl
			//
			this.VideoEffectInitialValueLbl.AutoSize = true;
			this.VideoEffectInitialValueLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoEffectInitialValueLbl.Location = new System.Drawing.Point(2, 34);
			this.VideoEffectInitialValueLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.VideoEffectInitialValueLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.VideoEffectInitialValueLbl.Name = "VideoEffectInitialValueLbl";
			this.VideoEffectInitialValueLbl.Size = new System.Drawing.Size(69, 34);
			this.VideoEffectInitialValueLbl.TabIndex = 1;
			this.VideoEffectInitialValueLbl.Text = "初始值";
			this.VideoEffectInitialValueLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// VideoEffectCombo
			//
			this.VideoEffectCombo.Dock = System.Windows.Forms.DockStyle.Top;
			this.VideoEffectCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.VideoEffectCombo.FormattingEnabled = true;
			this.VideoEffectCombo.Location = new System.Drawing.Point(75, 2);
			this.VideoEffectCombo.Margin = new System.Windows.Forms.Padding(2);
			this.VideoEffectCombo.Name = "VideoEffectCombo";
			this.VideoEffectCombo.Size = new System.Drawing.Size(412, 28);
			this.VideoEffectCombo.TabIndex = 2;
			this.VideoEffectCombo.SelectedIndexChanged += new System.EventHandler(this.VideoEffectCombo_SelectedIndexChanged);
			//
			// VideoEffectInitialValueCombo
			//
			this.VideoEffectInitialValueCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.VideoEffectInitialValueCombo.FormattingEnabled = true;
			this.VideoEffectInitialValueCombo.Location = new System.Drawing.Point(75, 36);
			this.VideoEffectInitialValueCombo.Margin = new System.Windows.Forms.Padding(2);
			this.VideoEffectInitialValueCombo.Name = "VideoEffectInitialValueCombo";
			this.VideoEffectInitialValueCombo.Size = new System.Drawing.Size(90, 28);
			this.VideoEffectInitialValueCombo.TabIndex = 3;
			//
			// ApplyVisualEffectForm
			//
			this.AcceptButton = this.OkBtn;
			this.AutoScaleDimensions = new System.Drawing.SizeF(120F, 120F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Dpi;
			this.BackColor = System.Drawing.SystemColors.Window;
			this.CancelButton = this.CancelBtn;
			this.ClientSize = new System.Drawing.Size(519, 174);
			this.Controls.Add(this.panel1);
			this.Controls.Add(this.dock);
			this.Font = new System.Drawing.Font("Microsoft YaHei UI", 9F);
			this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
			this.Location = new System.Drawing.Point(60, 60);
			this.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);
			this.MaximizeBox = false;
			this.MinimizeBox = false;
			this.Name = "ApplyVisualEffectForm";
			this.StartPosition = System.Windows.Forms.FormStartPosition.Manual;
			this.Text = "应用视觉效果";
			this.dock.ResumeLayout(false);
			this.panel1.ResumeLayout(false);
			this.panel1.PerformLayout();
			this.VideoEffectsGroup.ResumeLayout(false);
			this.VideoEffectsGroup.PerformLayout();
			this.tableLayoutPanel8.ResumeLayout(false);
			this.tableLayoutPanel8.PerformLayout();
			this.ResumeLayout(false);

		}

		#endregion

		public System.Windows.Forms.TableLayoutPanel dock;
		public System.Windows.Forms.Button OkBtn;
		public System.Windows.Forms.Button CancelBtn;
		private System.Windows.Forms.Panel panel1;
		public System.Windows.Forms.GroupBox VideoEffectsGroup;
		public System.Windows.Forms.TableLayoutPanel tableLayoutPanel8;
		public System.Windows.Forms.Label VideoEffectLbl;
		public System.Windows.Forms.Label VideoEffectInitialValueLbl;
		public System.Windows.Forms.ComboBox VideoEffectCombo;
		public System.Windows.Forms.ComboBox VideoEffectInitialValueCombo;
	}

	public partial class ApplyVisualEffectForm : Form, IInterpret {
		private readonly EntryPoint parent;
		private ConfigForm configForm { get { return parent.configForm; } }
		public ApplyVisualEffectForm(EntryPoint parent) {
			InitializeComponent();
			this.parent = parent;
			Icon = configForm.Icon;
			this.ReserveSystemMenuItems(SystemMenuItemType.MOVE | SystemMenuItemType.CLOSE);
			Translate();
			for (int i = 0; i < PrveLength; i++)
				VideoEffectCombo.Items.Add(configForm.VideoEffectCombo.Items[i]);
			int selectedIndex = configForm.VideoEffectCombo.SelectedIndex;
			VideoEffectCombo.SetIndex((selectedIndex < 1 || selectedIndex >= PrveLength) ? 1 : selectedIndex, 1);
		}

		public static int PrveLength { get { return PvVisualEffect.InitialValues.Length; } }

		private void VideoEffectCombo_SelectedIndexChanged(object sender, EventArgs e) {
			SetVisualEffectsInitials(VideoEffectCombo, VideoEffectInitialValueCombo);
		}

		internal static void SetVisualEffectsInitials(ComboBox prve, ComboBox initial) {
			int VideoEffectIndex = prve.SelectedIndex;
			string[] VideoEffectInitialValues = PvVisualEffect.InitialValues[VideoEffectIndex];
			initial.Items.Clear();
			initial.Items.AddRange(VideoEffectInitialValues);
			initial.SelectedIndex = 0;
		}

		public void Translate() {
			Lang str = Lang.str;
			Font = new Font(str.ui_font, 9F);
			VideoEffectsGroup.Text = str.effect;
			VideoEffectLbl.Text = str.visual_effect;
			VideoEffectInitialValueLbl.Text = str.initial_visual_effect;
			OkBtn.Text = str.complete;
			CancelBtn.Text = str.cancel;
			Text = str.apply_visual_effect;
		}

		public PrveValue Value { get { return new PrveValue(VideoEffectCombo.SelectedIndex,
			VideoEffectInitialValueCombo.SelectedIndex); } }

		private void OkBtn_Click(object sender, EventArgs e) {
			Plugin.Init(parent.vegas);
			foreach (Track track in parent.vegas.Project.Tracks) {
				PvVisualEffect anim = Value.NewPrve();
				foreach (TrackEvent trackEvent in track.Events)
					if (trackEvent is VideoEvent && trackEvent.Selected) {
						VideoEvent videoEvent = trackEvent as VideoEvent;
						if (!parent.ApplyPvRhythmVisualEffect(videoEvent, anim)) return; // 选中的是视频，怎么能检测保持音调？
						anim.Next();
					}
			}
		}
	}

	public struct PrveValue {
		private readonly PvVisualEffectType effect;
		private readonly int initial;
		public PvVisualEffectType Effect { get { return effect; } }
		public int Initial { get { return initial; } }
		internal PrveValue(int effect, int initial) : this((PvVisualEffectType)effect, initial) { }
		internal PrveValue(PvVisualEffectType effect, int initial) {
			this.effect = effect;
			this.initial = initial;
		}
		public PvVisualEffect NewPrve() {
			return new PvVisualEffect(effect, initial);
		}
	}

	public class PrveValues : List<PrveValue> {
		public string displayValue;
		public override string ToString() { return displayValue; }
		public string DisplayValue { get { return displayValue; } }
		public bool HasEffect(PvVisualEffectType effect) {
			return this.Select(value => value.Effect).Contains(effect);
		}
	}

	partial class PvRhythmVisualEffectAdvancedForm {
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer components = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose(bool disposing) {
			if (disposing && (components != null)) {
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent() {
			this.dock = new System.Windows.Forms.TableLayoutPanel();
			this.OkBtn = new System.Windows.Forms.Button();
			this.CancelBtn = new System.Windows.Forms.Button();
			this.EffectsPanel = new System.Windows.Forms.Panel();
			this.EffectsTable = new System.Windows.Forms.TableLayoutPanel();
			this.dock.SuspendLayout();
			this.EffectsPanel.SuspendLayout();
			this.SuspendLayout();
			//
			// dock
			//
			this.dock.AutoSize = true;
			this.dock.BackColor = System.Drawing.SystemColors.Control;
			this.dock.ColumnCount = 1;
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute, 20F));
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute, 20F));
			this.dock.Controls.Add(this.OkBtn, 0, 0);
			this.dock.Controls.Add(this.CancelBtn, 0, 1);
			this.dock.Dock = System.Windows.Forms.DockStyle.Right;
			this.dock.Location = new System.Drawing.Point(594, 0);
			this.dock.Margin = new System.Windows.Forms.Padding(5);
			this.dock.Name = "dock";
			this.dock.Padding = new System.Windows.Forms.Padding(8, 6, 8, 6);
			this.dock.RowCount = 3;
			this.dock.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.dock.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.dock.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.dock.Size = new System.Drawing.Size(118, 503);
			this.dock.TabIndex = 9;
			//
			// OkBtn
			//
			this.OkBtn.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.OkBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.OkBtn.Location = new System.Drawing.Point(12, 10);
			this.OkBtn.Margin = new System.Windows.Forms.Padding(4);
			this.OkBtn.Name = "OkBtn";
			this.OkBtn.Size = new System.Drawing.Size(94, 32);
			this.OkBtn.TabIndex = 1;
			this.OkBtn.Text = "确定(&O)";
			this.OkBtn.UseVisualStyleBackColor = true;
			//
			// CancelBtn
			//
			this.CancelBtn.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.CancelBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.CancelBtn.Location = new System.Drawing.Point(12, 50);
			this.CancelBtn.Margin = new System.Windows.Forms.Padding(4);
			this.CancelBtn.Name = "CancelBtn";
			this.CancelBtn.Size = new System.Drawing.Size(94, 32);
			this.CancelBtn.TabIndex = 2;
			this.CancelBtn.Text = "取消(&C)";
			this.CancelBtn.UseVisualStyleBackColor = true;
			//
			// EffectsPanel
			//
			this.EffectsPanel.AutoScroll = true;
			this.EffectsPanel.Controls.Add(this.EffectsTable);
			this.EffectsPanel.Dock = System.Windows.Forms.DockStyle.Fill;
			this.EffectsPanel.Location = new System.Drawing.Point(0, 0);
			this.EffectsPanel.Name = "EffectsPanel";
			this.EffectsPanel.Size = new System.Drawing.Size(594, 503);
			this.EffectsPanel.TabIndex = 10;
			//
			// EffectsTable
			//
			this.EffectsTable.AutoSize = true;
			this.EffectsTable.ColumnCount = 1;
			this.EffectsTable.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.EffectsTable.Dock = System.Windows.Forms.DockStyle.Top;
			this.EffectsTable.Location = new System.Drawing.Point(0, 0);
			this.EffectsTable.Name = "EffectsTable";
			this.EffectsTable.Padding = new System.Windows.Forms.Padding(5);
			this.EffectsTable.RowCount = 1;
			this.EffectsTable.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.EffectsTable.Size = new System.Drawing.Size(594, 10);
			this.EffectsTable.TabIndex = 0;
			//
			// PvRhythmVisualEffectAdvancedForm
			//
			this.AcceptButton = this.OkBtn;
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 20F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.CancelButton = this.CancelBtn;
			this.ClientSize = new System.Drawing.Size(712, 503);
			this.Controls.Add(this.EffectsPanel);
			this.Controls.Add(this.dock);
			this.Font = new System.Drawing.Font("Microsoft YaHei UI", 9F);
			this.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);
			this.MaximizeBox = false;
			this.MinimizeBox = false;
			this.MinimumSize = new System.Drawing.Size(460, 460);
			this.Name = "PvRhythmVisualEffectAdvancedForm";
			this.ShowInTaskbar = false;
			this.StartPosition = System.Windows.Forms.FormStartPosition.CenterParent;
			this.Text = "映像节奏视觉效果";
			this.ResizeEnd += new System.EventHandler(this.PvRhythmVisualEffectAdvancedForm_Resize);
			this.dock.ResumeLayout(false);
			this.EffectsPanel.ResumeLayout(false);
			this.EffectsPanel.PerformLayout();
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion

		public System.Windows.Forms.TableLayoutPanel dock;
		public System.Windows.Forms.Button OkBtn;
		public System.Windows.Forms.Button CancelBtn;
		private System.Windows.Forms.Panel EffectsPanel;
		private System.Windows.Forms.TableLayoutPanel EffectsTable;
	}

	public partial class PvRhythmVisualEffectAdvancedForm : Form, IInterpret {
		private readonly ConfigForm configForm;
		private readonly Dictionary<PvVisualEffectType, RadioButton> type2radio = new Dictionary<PvVisualEffectType, RadioButton>();
		public PvRhythmVisualEffectAdvancedForm(ConfigForm configForm) {
			this.EnableDoubleBuffer();
			InitializeComponent();
			this.configForm = configForm;
			Icon = configForm.Icon;
			this.ReserveSystemMenuItems(SystemMenuItemType.MOVE | SystemMenuItemType.SIZE | SystemMenuItemType.CLOSE);
			int groupIndex = 0;
			PrveValues existPrves = null;
			if (configForm.VideoEffectCombo.SelectedItem is PrveValues)
				existPrves = configForm.VideoEffectCombo.SelectedItem as PrveValues;
			foreach (KeyValuePair<string, PvVisualEffectType[]> klass in PvVisualEffect.Classes) { // 避开关键字 class
				string className = klass.Key;
				GroupBox group = new GroupBox {
					Text = className.Replace("&", "&&"), // 处理和符号被转义为下划线的问题。
					Dock = DockStyle.Fill,
				};
				EffectsTable.Controls.Add(group);
				EffectsTable.SetCellPosition(group,
					new TableLayoutPanelCellPosition(0, groupIndex++));
				TableLayoutPanel effectTable = new TableLayoutPanel {
					Dock = DockStyle.Fill,
					AutoSize = true,
					GrowStyle = TableLayoutPanelGrowStyle.AddColumns,
					ColumnCount = 2,
					RowCount = 2,
				};
				group.Controls.Add(effectTable);
				effectTable.ColumnStyles.Add(new ColumnStyle());
				effectTable.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 100f));
				effectTable.Controls.Add(new Label {
					Text = Lang.str.initial_visual_effect,
					Dock = DockStyle.Top,
					TextAlign = System.Drawing.ContentAlignment.MiddleLeft,
					MinimumSize = new Size(0, LABEL_MIN_HEIGHT),
					AutoSize = true,
				}, 0, 1);
				ComboBox initialCombo = new ComboBox {
					DropDownStyle = ComboBoxStyle.DropDownList,
					Dock = DockStyle.Left,
					Width = 90,
					TabIndex = 2,
				};
				effectTable.Controls.Add(initialCombo, 1, 1);
				effectTable.RowStyles.Add(new RowStyle());
				FlowLayoutPanel effectRadioFlow = new FlowLayoutPanel {
					Dock = DockStyle.Fill,
					AutoSize = true,
					WrapContents = true,
					FlowDirection = FlowDirection.LeftToRight,
					TabIndex = 0,
				};
				effectTable.Controls.Add(effectRadioFlow, 0, 0);
				effectTable.SetColumnSpan(effectRadioFlow, 2);
				RadioButton noneRadio = new RadioButton {
					Text = Lang.str.no_effects,
					TextAlign = System.Drawing.ContentAlignment.MiddleLeft,
					AutoSize = true,
					Checked = true,
					Tag = new EffectRadioTag(PvVisualEffectType.NONE, initialCombo),
				};
				noneRadio.CheckedChanged += EffectRadio_CheckedChanged;
				EffectRadio_CheckedChanged(noneRadio, null);
				effectRadioFlow.Controls.Add(noneRadio);
				foreach (PvVisualEffectType prveType in klass.Value) {
					if (prveType == PvVisualEffectType.NONE)
						continue;
					string effectName = GetPrveName(prveType);
					RadioButton effectRadio = new RadioButton {
						Text = effectName,
						TextAlign = System.Drawing.ContentAlignment.MiddleLeft,
						AutoSize = true,
						Tag = new EffectRadioTag(prveType, initialCombo),
					};
					if ((PvVisualEffectType)configForm.VideoEffectCombo.SelectedIndex == prveType ||
						existPrves != null && existPrves.HasEffect(prveType)) {
						effectRadio.Checked = true;
						noneRadio.Checked = false;
						EffectRadio_CheckedChanged(effectRadio, null);
						if (prveType == PvVisualEffectType.WHIRL)
							effectRadio.Checked = false;
					}
					effectRadioFlow.Controls.Add(effectRadio);
					type2radio.Add(prveType, effectRadio);
					effectRadio.CheckedChanged += EffectRadio_CheckedChanged;
				}
			}
			Load += (sender, e) => PvRhythmVisualEffectAdvancedForm_Resize(null, null);
		}

		protected override CreateParams CreateParams { get { return base.CreateParams.DoubleBuffer(); } }

		private void EffectRadio_CheckedChanged(object sender, EventArgs e) {
			RadioButton effectRadio = sender as RadioButton;
			EffectRadioTag info = GetInfo(effectRadio);
			if (info.Effect == PvVisualEffectType.WHIRL) {
				type2radio[PvVisualEffectType.H_FLIP].Checked = true;
				type2radio[PvVisualEffectType.PINGPONG].Checked = true;
				return;
			}
			info.InitialCombo.Items.Clear();
			info.InitialCombo.Items.AddRange(PvVisualEffect.InitialValues[(int)info.Effect]);
			info.InitialCombo.SelectedIndex = 0;
		}

		private struct EffectRadioTag {
			private readonly PvVisualEffectType effect;
			private readonly ComboBox initialCombo;
			public PvVisualEffectType Effect { get { return effect; } }
			public ComboBox InitialCombo { get { return initialCombo; } }
			public bool IsNoneEffect { get { return effect == PvVisualEffectType.NONE; } }
			internal EffectRadioTag(PvVisualEffectType effect, ComboBox initialCombo) {
				this.effect = effect;
				this.initialCombo = initialCombo;
			}
		}
		private static EffectRadioTag GetInfo(RadioButton radio) { return (EffectRadioTag)radio.Tag; }

		private const int LABEL_MIN_HEIGHT = 34;

		private void PvRhythmVisualEffectAdvancedForm_Resize(object sender, EventArgs e) {
			Translate();
			foreach (Control control_i in EffectsTable.Controls)
				if (control_i is GroupBox) {
					GroupBox group = control_i as GroupBox;
					foreach (Control control_j in control_i.Controls)
						if (control_j is TableLayoutPanel) {
							TableLayoutPanel effectTable = control_j as TableLayoutPanel;
							Label initialLbl = null;
							foreach (Control control_k in control_j.Controls)
								if (control_k is Label)
									initialLbl = control_k as Label;
							int height = group.PointToClient(initialLbl.PointToScreen(new Point(0, 0))).Y + LABEL_MIN_HEIGHT + effectTable.Margin.Top + effectTable.Margin.Bottom;
							group.Height = height;
						}
				}
		}

		public PrveValues GetPrves() {
			PrveValues result = new PrveValues();
			List<string> names = new List<string>();
			foreach (KeyValuePair<PvVisualEffectType, RadioButton> item in type2radio) {
				if (item.Key == PvVisualEffectType.NONE) continue;
				if (item.Value.Checked) {
					result.Add(new PrveValue(item.Key, GetInfo(item.Value).InitialCombo.SelectedIndex));
					names.Add(GetPrveName(item.Key));
				}
			}
			// 此处理论上应该将仅包含水平翻转和乒乓效应两个效果的集合转换为单个效果爱的魔力转圈圈。
			// 但是不应该转换，因为有可能修改了初始值，这样效果就不一样了。
			result.displayValue = string.Join("; ", names);
			return result;
		}

		private string GetPrveName(PvVisualEffectType prve) {
			return configForm.VideoEffectCombo.Items[(int)prve].ToString();
		}

		public void Translate() {
			Lang str = Lang.str;
			Font = new Font(str.ui_font, 9F);
			OkBtn.Text = str.ok;
			CancelBtn.Text = str.cancel;
			Text = str.pv_rhythm_visual_effect;
		}
	}

	public class Windows10StyledContextMenuStripRenderer : ToolStripProfessionalRenderer {
		public Windows10StyledContextMenuStripRenderer() : base(new Windows10StyledContextMenuStripColorTable()) { }
		protected override void OnRenderArrow(ToolStripArrowRenderEventArgs e) {
			e.Graphics.SmoothingMode = SmoothingMode.AntiAlias;
			Rectangle r = new Rectangle(e.ArrowRectangle.Location, e.ArrowRectangle.Size);
			r.Inflate(-2, -6);
			e.Graphics.DrawLines(Pens.Black, new Point[] {
				new Point(r.Right - r.Height / 2, r.Top),
				new Point(r.Right, r.Top + r.Height / 2),
				new Point(r.Right - r.Height / 2, r.Top + r.Height)
			});
		}

		protected override void OnRenderItemCheck(ToolStripItemImageRenderEventArgs e) {
			e.Graphics.SmoothingMode = SmoothingMode.AntiAlias;
			Rectangle r = new Rectangle(e.ImageRectangle.Location, e.ImageRectangle.Size);
			r.Inflate(-4, -6);
			e.Graphics.DrawLines(Pens.Black, new Point[] {
				new Point(r.Left, r.Bottom - r.Height / 2),
				new Point(r.Left + r.Width / 3, r.Bottom),
				new Point(r.Right, r.Top)
			});
		}
	}

	partial class CustomFadeGainForm {
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer components = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose(bool disposing) {
			if (disposing && (components != null)) {
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent() {
			this.dock = new System.Windows.Forms.TableLayoutPanel();
			this.OkBtn = new System.Windows.Forms.Button();
			this.CancelBtn = new System.Windows.Forms.Button();
			this.tableLayoutPanel1 = new System.Windows.Forms.TableLayoutPanel();
			this.ToBox = new Otomad.VegasScript.OtomadHelper.V4.IntegerTrackWithBox();
			this.FromBox = new Otomad.VegasScript.OtomadHelper.V4.IntegerTrackWithBox();
			this.ToLbl = new System.Windows.Forms.Label();
			this.FromLbl = new System.Windows.Forms.Label();
			this.PreviewBtn = new System.Windows.Forms.Button();
			this.dock.SuspendLayout();
			this.tableLayoutPanel1.SuspendLayout();
			this.SuspendLayout();
			//
			// dock
			//
			this.dock.BackColor = System.Drawing.SystemColors.Control;
			this.dock.ColumnCount = 3;
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.dock.Controls.Add(this.OkBtn, 1, 0);
			this.dock.Controls.Add(this.CancelBtn, 2, 0);
			this.dock.Dock = System.Windows.Forms.DockStyle.Bottom;
			this.dock.Location = new System.Drawing.Point(0, 179);
			this.dock.Margin = new System.Windows.Forms.Padding(4);
			this.dock.Name = "dock";
			this.dock.Padding = new System.Windows.Forms.Padding(8, 6, 8, 6);
			this.dock.RowCount = 1;
			this.dock.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.dock.Size = new System.Drawing.Size(462, 52);
			this.dock.TabIndex = 16;
			//
			// OkBtn
			//
			this.OkBtn.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.OkBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.OkBtn.Location = new System.Drawing.Point(254, 10);
			this.OkBtn.Margin = new System.Windows.Forms.Padding(4);
			this.OkBtn.Name = "OkBtn";
			this.OkBtn.Size = new System.Drawing.Size(94, 32);
			this.OkBtn.TabIndex = 1;
			this.OkBtn.Text = "确定(&O)";
			this.OkBtn.UseVisualStyleBackColor = true;
			this.OkBtn.Click += new System.EventHandler(this.OkBtn_Click);
			//
			// CancelBtn
			//
			this.CancelBtn.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.CancelBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.CancelBtn.Location = new System.Drawing.Point(356, 10);
			this.CancelBtn.Margin = new System.Windows.Forms.Padding(4);
			this.CancelBtn.Name = "CancelBtn";
			this.CancelBtn.Size = new System.Drawing.Size(94, 32);
			this.CancelBtn.TabIndex = 2;
			this.CancelBtn.Text = "取消(&C)";
			this.CancelBtn.UseVisualStyleBackColor = true;
			//
			// tableLayoutPanel1
			//
			this.tableLayoutPanel1.ColumnCount = 2;
			this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel1.Controls.Add(this.ToBox, 1, 2);
			this.tableLayoutPanel1.Controls.Add(this.FromBox, 1, 1);
			this.tableLayoutPanel1.Controls.Add(this.ToLbl, 0, 2);
			this.tableLayoutPanel1.Controls.Add(this.FromLbl, 0, 1);
			this.tableLayoutPanel1.Controls.Add(this.PreviewBtn, 0, 0);
			this.tableLayoutPanel1.Dock = System.Windows.Forms.DockStyle.Fill;
			this.tableLayoutPanel1.Location = new System.Drawing.Point(0, 0);
			this.tableLayoutPanel1.Name = "tableLayoutPanel1";
			this.tableLayoutPanel1.Padding = new System.Windows.Forms.Padding(6);
			this.tableLayoutPanel1.RowCount = 3;
			this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel1.Size = new System.Drawing.Size(462, 179);
			this.tableLayoutPanel1.TabIndex = 17;
			//
			// ToBox
			//
			this.ToBox.BackColor = System.Drawing.Color.Transparent;
			this.ToBox.DefaultValue = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.ToBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.ToBox.Font = new System.Drawing.Font("Microsoft YaHei UI", 9F);
			this.ToBox.Location = new System.Drawing.Point(39, 137);
			this.ToBox.Margin = new System.Windows.Forms.Padding(5);
			this.ToBox.Maximum = new decimal(new int[] {
			100,
			0,
			0,
			0});
			this.ToBox.Minimum = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.ToBox.MinimumSize = new System.Drawing.Size(0, 31);
			this.ToBox.Name = "ToBox";
			this.ToBox.NumericUpDownWidth = 65;
			this.ToBox.Size = new System.Drawing.Size(412, 31);
			this.ToBox.TabIndex = 4;
			this.ToBox.TickStyle = System.Windows.Forms.TickStyle.TopLeft;
			this.ToBox.Value = new decimal(new int[] {
			100,
			0,
			0,
			0});
			this.ToBox.ValueChanged += new System.EventHandler(this.FadeBox_ValueChanged);
			//
			// FromBox
			//
			this.FromBox.BackColor = System.Drawing.Color.Transparent;
			this.FromBox.DefaultValue = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.FromBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.FromBox.Font = new System.Drawing.Font("Microsoft YaHei UI", 9F);
			this.FromBox.Location = new System.Drawing.Point(39, 96);
			this.FromBox.Margin = new System.Windows.Forms.Padding(5);
			this.FromBox.Maximum = new decimal(new int[] {
			100,
			0,
			0,
			0});
			this.FromBox.Minimum = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.FromBox.MinimumSize = new System.Drawing.Size(0, 31);
			this.FromBox.Name = "FromBox";
			this.FromBox.NumericUpDownWidth = 65;
			this.FromBox.Size = new System.Drawing.Size(412, 31);
			this.FromBox.TabIndex = 3;
			this.FromBox.Value = new decimal(new int[] {
			100,
			0,
			0,
			0});
			this.FromBox.ValueChanged += new System.EventHandler(this.FadeBox_ValueChanged);
			//
			// ToLbl
			//
			this.ToLbl.AutoSize = true;
			this.ToLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.ToLbl.Location = new System.Drawing.Point(8, 132);
			this.ToLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.ToLbl.MinimumSize = new System.Drawing.Size(0, 41);
			this.ToLbl.Name = "ToLbl";
			this.ToLbl.Size = new System.Drawing.Size(24, 41);
			this.ToLbl.TabIndex = 2;
			this.ToLbl.Text = "至";
			this.ToLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// FromLbl
			//
			this.FromLbl.AutoSize = true;
			this.FromLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.FromLbl.Location = new System.Drawing.Point(8, 91);
			this.FromLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.FromLbl.MinimumSize = new System.Drawing.Size(0, 41);
			this.FromLbl.Name = "FromLbl";
			this.FromLbl.Size = new System.Drawing.Size(24, 41);
			this.FromLbl.TabIndex = 1;
			this.FromLbl.Text = "从";
			this.FromLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// PreviewBtn
			//
			this.tableLayoutPanel1.SetColumnSpan(this.PreviewBtn, 2);
			this.PreviewBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.PreviewBtn.Enabled = false;
			this.PreviewBtn.FlatAppearance.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(208)))), ((int)(((byte)(208)))), ((int)(((byte)(208)))));
			this.PreviewBtn.FlatAppearance.MouseDownBackColor = System.Drawing.Color.FromArgb(((int)(((byte)(253)))), ((int)(((byte)(253)))), ((int)(((byte)(253)))));
			this.PreviewBtn.FlatAppearance.MouseOverBackColor = System.Drawing.Color.FromArgb(((int)(((byte)(253)))), ((int)(((byte)(253)))), ((int)(((byte)(253)))));
			this.PreviewBtn.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.PreviewBtn.Location = new System.Drawing.Point(20, 20);
			this.PreviewBtn.Margin = new System.Windows.Forms.Padding(14);
			this.PreviewBtn.Name = "PreviewBtn";
			this.PreviewBtn.Size = new System.Drawing.Size(422, 57);
			this.PreviewBtn.TabIndex = 5;
			this.PreviewBtn.UseVisualStyleBackColor = true;
			this.PreviewBtn.Paint += new System.Windows.Forms.PaintEventHandler(this.PreviewBtn_Paint);
			//
			// CustomFadeGainForm
			//
			this.AcceptButton = this.OkBtn;
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 20F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.BackColor = System.Drawing.SystemColors.Window;
			this.CancelButton = this.CancelBtn;
			this.ClientSize = new System.Drawing.Size(462, 231);
			this.Controls.Add(this.tableLayoutPanel1);
			this.Controls.Add(this.dock);
			this.Font = new System.Drawing.Font("Microsoft YaHei UI", 9F);
			this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
			this.Location = new System.Drawing.Point(60, 60);
			this.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);
			this.MaximizeBox = false;
			this.MinimizeBox = false;
			this.Name = "CustomFadeGainForm";
			this.ShowInTaskbar = false;
			this.StartPosition = System.Windows.Forms.FormStartPosition.Manual;
			this.Text = "自定渐入增益";
			this.dock.ResumeLayout(false);
			this.tableLayoutPanel1.ResumeLayout(false);
			this.tableLayoutPanel1.PerformLayout();
			this.ResumeLayout(false);

		}

		#endregion

		public System.Windows.Forms.TableLayoutPanel dock;
		public System.Windows.Forms.Button OkBtn;
		public System.Windows.Forms.Button CancelBtn;
		private System.Windows.Forms.TableLayoutPanel tableLayoutPanel1;
		public System.Windows.Forms.Label ToLbl;
		public System.Windows.Forms.Label FromLbl;
		public IntegerTrackWithBox ToBox;
		public IntegerTrackWithBox FromBox;
		private System.Windows.Forms.Button PreviewBtn;
	}

	public partial class CustomFadeGainForm : Form, IInterpret {
		private readonly EntryPoint parent;
		private Vegas vegas { get { return parent.vegas; } }

		public CustomFadeGainForm(EntryPoint parent) {
			InitializeComponent();
			this.parent = parent;
			Icon = parent.configForm.Icon;
			this.ReserveSystemMenuItems(SystemMenuItemType.MOVE | SystemMenuItemType.CLOSE);
			Translate();
		}

		private void OkBtn_Click(object sender, EventArgs e) {
			Apply();
		}

		private void PreviewBtn_Paint(object sender, PaintEventArgs e) {
			Button button = PreviewBtn;
			decimal min = FromBox.Value, max = ToBox.Value;
			e.Graphics.SmoothingMode = SmoothingMode.AntiAlias;
			const int MARGIN = 0;
			decimal width = button.Width - MARGIN * 2, height = button.Height - MARGIN * 2;
			Rectangle r = new Rectangle(MARGIN, MARGIN, (int)width, (int)height);
			e.Graphics.DrawLines(new Pen(Color.FromArgb(0, 120, 212), 2), new Point[] {
				new Point(r.Left, (int)(r.Bottom - min / 100 * height)),
				new Point(r.Right, (int)(r.Bottom - max / 100 * height)),
			});
		}

		private void FadeBox_ValueChanged(object sender, EventArgs e) {
			PreviewBtn.Invalidate();
		}

		private void Apply() {
			foreach (Track track in vegas.Project.Tracks) {
				List<TrackEvent> selection = new List<TrackEvent>(track.Events.Where(trackEvent => trackEvent.Selected));
				decimal gain = FromBox.Value;
				if (selection.Count == 1) {
					selection[0].FadeIn.Gain = ToBox.FloatValue / 100;
					return;
				}
				foreach (TrackEvent trackEvent in selection) {
					trackEvent.FadeIn.Gain = (float)(gain / 100);
					gain += (ToBox.Value - FromBox.Value) / (selection.Count - 1);
				}
			}
			vegas.UpdateUI();
		}

		public void Translate() {
			Lang str = Lang.str;
			Font = new Font(str.ui_font, 9F);
			OkBtn.Text = str.ok;
			CancelBtn.Text = str.cancel;
			FromLbl.Text = str.from;
			ToLbl.Text = str.to;
			Text = str.custom_fade_gain;
		}
	}

	public class Windows10StyledContextMenuStripColorTable : ProfessionalColorTable {
		private static readonly Color MenuBarSelectedColor = Color.FromArgb(224, 224, 224);
		public override Color MenuItemBorder { get { return Color.WhiteSmoke; } }
		public override Color MenuItemSelected { get { return Color.WhiteSmoke; } }
		public override Color ToolStripDropDownBackground { get { return Color.White; } }
		public override Color ImageMarginGradientBegin { get { return Color.White; } }
		public override Color ImageMarginGradientMiddle { get { return Color.White; } }
		public override Color ImageMarginGradientEnd { get { return Color.White; } }
		public override Color MenuItemSelectedGradientBegin { get { return MenuBarSelectedColor; } }
		public override Color MenuItemSelectedGradientEnd { get { return MenuBarSelectedColor; } }
		public override Color MenuItemPressedGradientBegin { get { return Color.White; } }
		public override Color MenuItemPressedGradientEnd { get { return Color.White; } }
		public override Color MenuItemPressedGradientMiddle { get { return Color.White; } }
	}

	public class CommandLinkButton : Button {
		private bool _commandLink = false;
		private string _commandLinkNote = "";

		public CommandLinkButton() : base() {
			// 在基类上设置默认属性值以避免过时的警告
			base.FlatStyle = FlatStyle.System;
		}

		[Category("Appearance"), DefaultValue(false), Description("指定此按钮应使用命令链接样式。（仅适用于 Windows Vista 及更高版本。）")]
		public bool CommandLink {
			get {
				return _commandLink;
			}
			set {
				if (_commandLink != value) {
					_commandLink = value;
					UpdateCommandLink();
				}
			}
		}

		[Category("Appearance"), DefaultValue(""), Description("设置命令链接按钮的说明文字。（仅适用于 Windows Vista 及更高版本。）"),
			Editor("System.ComponentModel.Design.MultilineStringEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))]
		public string CommandLinkNote {
			get {
				return _commandLinkNote;
			}
			set {
				if (_commandLinkNote != value) {
					_commandLinkNote = value;
					UpdateCommandLink();
				}
			}
		}

		[Browsable(false), EditorBrowsable(EditorBrowsableState.Never), DebuggerBrowsable(DebuggerBrowsableState.Never), Obsolete("CommandLinkButton 控件不支持此属性。"), DefaultValue(typeof(FlatStyle), "System")]
		public new FlatStyle FlatStyle {
			// 将默认展开样式设置为“系统”，并隐藏此属性，
			// 因为如果不将其设置为“系统”，任何自定义属性都无法工作
			get {
				return base.FlatStyle;
			}
			set {
				base.FlatStyle = value;
			}
		}

		#region P/Invoke Stuff
		private const int BS_COMMANDLINK = 0xE;
		private const int BCM_SETNOTE = 0x1609;

		[DllImport("user32.dll", CharSet = CharSet.Unicode, SetLastError = false)]
		private extern static IntPtr SendMessage(IntPtr hWnd, int msg, IntPtr wParam, [MarshalAs(UnmanagedType.LPWStr)] string lParam);

		internal void UpdateCommandLink() {
			RecreateHandle();
			SendMessage(Handle, BCM_SETNOTE, IntPtr.Zero, _commandLinkNote);
		}

		protected override CreateParams CreateParams {
			get {
				CreateParams cp = base.CreateParams;
				if (CommandLink) cp.Style |= BS_COMMANDLINK;
				return cp;
			}
		}
		#endregion
	}

	public class NumericUpDownWithUnit : NumericUpDown {

		#region| Fields |
		private string suffix = "";
		private string prefix = "";
		private bool enableDecimalPlaces = false;
		#endregion

		#region| Properties |
		[Description("后缀单位。"), Category("Appearance"), DefaultValue("")]
		public string Suffix {
			get {
				return suffix;
			}
			set {
				suffix = value;
				UpdateEditText();
			}
		}

		[Description("前缀单位。"), Category("Appearance"), DefaultValue("")]
		public string Prefix {
			get {
				return prefix;
			}
			set {
				prefix = value;
				UpdateEditText();
			}
		}

		/// </summary>
		/// 返回限制在最小值和最大值内的提供值。这与基类中的值完全相同（基类是私有的，因此我们不能直接使用它）。
		/// </summary>
		[Description("返回限制在最小值和最大值内的提供值。这与基类中的值完全相同（基类是私有的，因此我们不能直接使用它）。"), Category("Appearance")]
		public decimal Constrain {
			get {
				return Value;
			}
			set {
				if (value < Minimum) Value = Minimum;
				else if (value > Maximum) Value = Maximum;
				else Value = value;
			}
		}

		[Description("是否启用数字显示框中要显示的十进制位数。"), Category("Data"), DefaultValue(false)]
		public bool EnableDecimalPlaces {
			get {
				return enableDecimalPlaces;
			}
			set {
				enableDecimalPlaces = value;
				decimal _value = Value;
				Value = Minimum;
				Value = _value;
			}
		}
		#endregion

		#region| Methods |

		/// <summary>
		/// 更新 NumericUpDown 文本时调用的方法。
		/// </summary>
		protected override void UpdateEditText() {
			List<string> list = new List<string> { enableDecimalPlaces ? Value.ToString("F" + DecimalPlaces) : Regex.Replace(Value.ToString(), @"(?<=\..*)0+$", "") };
			if (!string.IsNullOrWhiteSpace(suffix)) list.Add(suffix);
			if (!string.IsNullOrWhiteSpace(prefix)) list.Insert(0, prefix);
			Text = string.Join(" ", list);
		}

		/// <summary>
		/// 在实际更新文本之前验证调用的方法。这与基类完全相同，但它将使用该类中的新 ParseEditText。
		/// </summary>
		protected override void ValidateEditText() {
			// 考虑到标签单位，查看编辑文本是否解析为有效的小数
			ParseEditText();
			ToFixed();
			UpdateEditText();
		}

		/// <summary>
		/// 将 NumericUpDown 控件中显示的文本转换为数值并对其求值。
		/// </summary>
		protected new void ParseEditText() {
			try {
				// 此方法与基本方法的唯一区别在于，文本直接替换为属性文本，而不是使用正则表达式。
				// 现在，我们知道文本框上可能只有我们提供的单位中的字符。因为 NumericUpDown 为我们处理来自用户的无效输入。
				// 这就是魔法发生的地方。此正则表达式将匹配单位中的所有字符（因此单位不能有数字）。
				// 您可以更改此正则表达式以满足您的需要。
				Regex regex = new Regex(string.Format(@"[^(?!{0}{1} )]+", suffix, prefix));
				Match match = regex.Match(Text);
				if (match.Success) {
					string text = match.Value;
					// VSWhidbey 173332: 在尝试设置Value属性之前，请验证用户没有以“-”开头字符串，
					// 因为“-”是用于表示负数的字符串的有效字符。
					if (!string.IsNullOrEmpty(text) && !(text.Length == 1 && text == "-")) {
						if (Hexadecimal) Constrain = Convert.ToDecimal(Convert.ToInt32(Text, 16));
						else Constrain = decimal.Parse(text, CultureInfo.CurrentCulture);
					}
				}
			} catch {
				// 保持原样
			} finally {
				UserEdit = false;
				ToFixed();
			}
		}

		private void ToFixed() {
			if (enableDecimalPlaces)
				Constrain = decimal.Round(Constrain, DecimalPlaces);
		}
		#endregion
	}

	public class GroupedRadioButton : RadioButton {
		public GroupedRadioButton() : base() {
			CheckedChanged += OnCheckedChanged;
		}

		private string _group = "";
		/// <summary>
		/// 指定单选按钮的分组名称。
		/// </summary>
		[Description("指定单选按钮的分组名称。"), Category("Behavior"), DefaultValue("")]
		public string Group {
			get { return _group; }
			set {
				_group = value;
				if (string.IsNullOrWhiteSpace(value)) _group = "";
			}
		}

		private Form Form { get { return FindForm(); } }

		private void OnCheckedChanged(object sender, EventArgs e) {
			if (isOnCheckedChanged) return;
			isOnCheckedChanged = true;
			if (string.IsNullOrWhiteSpace(Group)) goto end;
			if (Form == null) goto end;
			ForEachInGroup(Form, radio => {
				if (radio.Group == Group) radio.Checked = false;
				if (radio == this) Checked = true;
			});
		end:
			isOnCheckedChanged = false;
		}

		private static void ForEachInGroup(Control container, Action<GroupedRadioButton> action) {
			foreach (Control control in container.Controls) {
				if (control is GroupedRadioButton) {
					GroupedRadioButton radio = control as GroupedRadioButton;
					action(radio);
				}
				if (control.Controls.Count != 0) ForEachInGroup(control, action);
			}
		}

		private static bool isOnCheckedChanged = false;

		/// <summary>
		/// 单选按钮组。
		/// </summary>
		public class RadioButtonGroup {
			internal RadioButtonGroup(GroupedRadioButton currentRadio) {
				if (string.IsNullOrWhiteSpace(currentRadio.Group)) {
					_array = new GroupedRadioButton[0];
					return;
				}
				List<GroupedRadioButton> group = new List<GroupedRadioButton>();
				ForEachInGroup(currentRadio.Form, radio => {
					if (!string.IsNullOrWhiteSpace(radio.Group) && radio.Group == currentRadio.Group)
						group.Add(radio);
				});
				_array = group.ToArray();
			}
			/// <summary>
			/// 设定或读取该单选按钮组中所选中的单选按钮。如果没有勾选任何单选按钮，返回 null。
			/// </summary>
			public GroupedRadioButton Selected {
				get {
					foreach (GroupedRadioButton radio in this)
						if (radio.Checked)
							return radio;
					return null;
				}
				set {
					foreach (GroupedRadioButton radio in this)
						if (radio == value)
							radio.Checked = true;
				}
			}

			private readonly GroupedRadioButton[] _array;

			public int Count { get { return ((ICollection<GroupedRadioButton>)_array).Count; } }
			public bool IsReadOnly { get { return ((ICollection<GroupedRadioButton>)_array).IsReadOnly; } }
			public GroupedRadioButton this[int index] { get { return ((IList<GroupedRadioButton>)_array)[index]; } set { ((IList<GroupedRadioButton>)_array)[index] = value; } }
			public int IndexOf(GroupedRadioButton item) { return ((IList<GroupedRadioButton>)_array).IndexOf(item); }
			protected void Insert(int index, GroupedRadioButton item) { ((IList<GroupedRadioButton>)_array).Insert(index, item); }
			protected void RemoveAt(int index) { ((IList<GroupedRadioButton>)_array).RemoveAt(index); }
			protected void Add(GroupedRadioButton item) { ((ICollection<GroupedRadioButton>)_array).Add(item); }
			protected void Clear() { ((ICollection<GroupedRadioButton>)_array).Clear(); }
			public bool Contains(GroupedRadioButton item) { return ((ICollection<GroupedRadioButton>)_array).Contains(item); }
			protected void CopyTo(GroupedRadioButton[] array, int arrayIndex) { ((ICollection<GroupedRadioButton>)_array).CopyTo(array, arrayIndex); }
			protected bool Remove(GroupedRadioButton item) { return ((ICollection<GroupedRadioButton>)_array).Remove(item); }
			public IEnumerator<GroupedRadioButton> GetEnumerator() { return ((IEnumerable<GroupedRadioButton>)_array).GetEnumerator(); }
		}

		/// <summary>
		/// 获取单选按钮所在的单选按钮组。
		/// </summary>
		public RadioButtonGroup GetGroup() {
			return new RadioButtonGroup(this);
		}

		/// <summary>
		/// 获取单选按钮所在的单选按钮组。
		/// </summary>
		public RadioButtonGroup Related { get { return GetGroup(); } }
	}

	public class MessageBoxEx {
		//测试样例
		protected static void Test() {
			Show("提示消息", "提示标题", MessageBoxButtons.YesNoCancel, new string[] { "按钮一(&O)", "按钮二(&T)", "按钮三(&H)" });
		}
		/// <summary>
		/// 测试样例<br />
		/// <code>Show("提示消息", "提示标题", MessageBoxButtons.YesNoCancel, new string[] { "按钮一(＆O)", "按钮二(＆T)", "按钮三(＆H)" });</code>
		/// </summary>
		/// <param name="text"></param>
		/// <param name="caption"></param>
		/// <param name="buttons"></param>
		/// <param name="buttonTitles"></param>
		/// <returns></returns>
		public static DialogResult Show(string text, string caption = "", MessageBoxButtons buttons = MessageBoxButtons.OK, string[] buttonTitles = null, MessageBoxIcon icon = MessageBoxIcon.None, MessageBoxDefaultButton defaultButton = MessageBoxDefaultButton.Button1) {
			if (buttonTitles == null) return MessageBox.Show(text, caption, buttons, icon, defaultButton);
			DummyForm frm = new DummyForm(buttons, buttonTitles);
			frm.Show();
			frm.WatchForActivate = true;
			DialogResult result = MessageBox.Show(frm, text, caption, buttons, icon, defaultButton);
			frm.Close();
			return result;
		}

		class DummyForm : Form {
			IntPtr _handle;
			MessageBoxButtons _buttons;
			string[] _buttonTitles = null;

			bool _watchForActivate = false;

			public bool WatchForActivate {
				get { return _watchForActivate; }
				set { _watchForActivate = value; }
			}

			public DummyForm(MessageBoxButtons buttons, string[] buttonTitles) {
				_buttons = buttons;
				_buttonTitles = buttonTitles;

				//让自己在界面上看不到
				Text = "";
				StartPosition = FormStartPosition.Manual;
				Location = new Point(-32000, -32000);
				ShowInTaskbar = false;
				TopMost = true;
			}

			protected override void OnShown(EventArgs e) {
				base.OnShown(e);
				//把自己藏起来，在任务列表里也看不到
				NativeWin32API.SetWindowPos(this.Handle, IntPtr.Zero, 0, 0, 0, 0, 659);
			}

			protected override void WndProc(ref System.Windows.Forms.Message m) {
				if (_watchForActivate && m.Msg == 0x0006) {
					_watchForActivate = false;
					_handle = m.LParam;
					CheckMsgbox();
				}
				base.WndProc(ref m);
			}

			private void CheckMsgbox() {
				if (_buttonTitles == null || _buttonTitles.Length == 0)
					return;

				//按钮标题的索引
				int buttonTitleIndex = 0;
				//获取子控件的句柄
				IntPtr h = NativeWin32API.GetWindow(_handle, OCCommon.Message.GW_CHILD);
				while (h != IntPtr.Zero) {
					//按顺序把按钮标题赋上
					if (NativeWin32API.GetWindowClassName(h).Equals("Button")) {
						if (_buttonTitles.Length > buttonTitleIndex) {
							NativeWin32API.SetWindowText(h, _buttonTitles[buttonTitleIndex]);
							buttonTitleIndex++;
						}
					}
					h = NativeWin32API.GetWindow(h, OCCommon.Message.GW_HWNDNEXT);
				}
			}

			private static class OCCommon {
				/// <summary>
				/// Messages
				/// </summary>
				public static class Message {
					public const int GW_CHILD = 5;
					public const int GW_HWNDNEXT = 2;
				}
			}
		}
	}
	/// <summary>
	/// Win32 API
	/// </summary>
	public static class NativeWin32API {
		[DllImport("user32.dll", CharSet = CharSet.Auto)]
		public static extern bool SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter, int x, int y, int Width, int Height, int flags);
		[DllImport("user32.dll")]
		public static extern IntPtr GetWindow(IntPtr hWnd, long wCmd);
		[DllImport("user32.dll")]
		public static extern bool SetWindowText(IntPtr hWnd, string lpString);
		[DllImport("user32.dll")]
		public static extern int GetClassNameW(IntPtr hWnd, [MarshalAs(UnmanagedType.LPWStr)] StringBuilder lpString, int nMaxCount);
		[DllImport("user32.dll", EntryPoint = "SetParent")]
		public static extern int SetParent(IntPtr hWndChild, IntPtr hWndNewParent);

		public static string GetWindowClassName(IntPtr handle) {
			StringBuilder sb = new StringBuilder(256);

			GetClassNameW(handle, sb, sb.Capacity); //得到窗口类名并保存在strClass中
			return sb.ToString();
		}
	}

	public class ColorButton : Button {
		private readonly AlphaColorDialog dialog = new AlphaColorDialog {
			AnyColor = true,
			FullOpen = true,
			Color = Color.White,
		};

		public ColorButton() {
			base.UseVisualStyleBackColor = false;
			base.BackColor = Color.White;
			base.ForeColor = Color.Black;
			base.Text = "#FFFFFFFF";
			Click += ColorButton_Click;
		}

		private void ColorButton_Click(object sender, EventArgs e) {
			dialog.Color = Color;
			DialogResult dr = dialog.ShowDialog();
			if (dr == DialogResult.OK) Color = dialog.Color;
		}

		[Browsable(false), EditorBrowsable(EditorBrowsableState.Never), DebuggerBrowsable(DebuggerBrowsableState.Never), Obsolete("该控件不支持此属性。"), DefaultValue(false)]
		public new bool UseVisualStyleBackColor {
			get { return base.UseVisualStyleBackColor; }
			set { base.UseVisualStyleBackColor = value; }
		}

		[Browsable(false), EditorBrowsable(EditorBrowsableState.Never), DebuggerBrowsable(DebuggerBrowsableState.Never), Obsolete("该控件不支持此属性。"), DefaultValue(typeof(Color), "White")]
		public new Color BackColor {
			get { return base.BackColor; }
			set { base.BackColor = value; }
		}

		[Browsable(false), EditorBrowsable(EditorBrowsableState.Never), DebuggerBrowsable(DebuggerBrowsableState.Never), Obsolete("该控件不支持此属性。"), DefaultValue(typeof(Color), "Black")]
		public new Color ForeColor {
			get { return base.ForeColor; }
			set { base.ForeColor = value; }
		}

		private string _text = string.Empty;
		[Category("Appearance"), DefaultValue(""), Description("与控件关联的文本。")]
		public new string Text {
			get { return _text; }
			set {
				_text = value;
				if (string.IsNullOrEmpty(value)) base.Text = Hex;
				else base.Text = _text;
			}
		}

		private Color color = Color.White;
		[Category("Appearance"), DefaultValue(typeof(Color), "White"), Description("用户选定的颜色。")]
		public Color Color {
			get { return color; }
			set {
				base.BackColor = color = value;
				base.ForeColor = GetForeColor(value);
				if (string.IsNullOrEmpty(_text)) Text = string.Empty;
			}
		}

		[Category("Appearance"), DefaultValue("#FFFFFFFF"), Description("颜色的十六进制代码。")]
		public string Hex {
			get {
				return '#' + Color.R.ToString("X2") + Color.G.ToString("X2") + Color.B.ToString("X2") + Color.A.ToString("X2");
			}
			set {
				MatchCollection matches = Regex.Matches(value.ToUpper(), @"#[0-9A-F]{8}");
				string color;
				if (matches.Count != 0) color = matches[0].ToString();
				else {
					matches = Regex.Matches(value.ToUpper(), @"#[0-9A-F]{6}");
					if (matches.Count != 0) color = matches[0].ToString() + "FF";
					else color = "#00000000";
				}
				int r = Convert.ToInt16(color.Substring(1, 2), 16),
					g = Convert.ToInt16(color.Substring(3, 2), 16),
					b = Convert.ToInt16(color.Substring(5, 2), 16),
					a = Convert.ToInt16(color.Substring(7, 2), 16);
				Color = Color.FromArgb(a, r, g, b);
			}
		}

		/// <summary>
		/// 根据背景颜色获取前景（文字）颜色。
		/// </summary>
		/// <param name="backColor">背景颜色。</param>
		/// <returns>黑色或白色。</returns>
		public static Color GetForeColor(Color backColor) {
			int r = backColor.R, g = backColor.G, b = backColor.B, a = backColor.A;
			Func<int, int> MixAlpha = new Func<int, int>(c => (255 - c) * (255 - a) / 255 + c);
			r = MixAlpha(r); g = MixAlpha(g); b = MixAlpha(b);
			double grey = r * 0.3 + g * 0.59 + b * 0.11;
			return grey < 128 ? Color.White : Color.Black;
		}
	}

	public class RememberedCheckBox : CheckBox {
		private bool locked = false;

		public RememberedCheckBox() {
			CheckedChanged += (sender, e) => Checked = base.Checked;
		}

		private bool userChecked = false;
		[Category("Appearance"), DefaultValue(false), Description("设置用户设定的选中状态值。")]
		public bool UserChecked {
			get { return userChecked; }
			set {
				userChecked = value;
				if (!locked) base.Checked = value;
			}
		}

		private StatusType status = StatusType.Unlocked;
		[Category("Appearance"), DefaultValue(typeof(StatusType), "Unlocked"), Description("设置组件的锁定状态。")]
		public StatusType Status {
			get { return status; }
			set {
				if (status == value)
					return;
				else if (status != StatusType.Unlocked && value != StatusType.Unlocked)
					Checked = value == StatusType.True;
				else if (status == StatusType.Unlocked && value != StatusType.Unlocked) {
					locked = true;
					Enabled = false;
					Checked = value == StatusType.True;
				} else if (status != StatusType.Unlocked && value == StatusType.Unlocked) {
					locked = false;
					Enabled = true;
					Checked = userChecked;
				}
				status = value;
			}
		}

		[Category("Appearance"), DefaultValue(false), Description("指定组件是否处于选中状态。")]
		public new bool Checked {
			get { return base.Checked; }
			set {
				base.Checked = value;
				if (!locked) userChecked = value;
			}
		}

		public enum StatusType {
			Unlocked = -1,
			False,
			True,
		}
	}

	public class SonarItem : ListViewItem {
		private readonly ConfigForm configForm;
		private ComboBox ShapeCombo { get { return configForm.SonarShapeCombo; } }
		private ListView SonarList { get { return configForm.SonarList; } }
		public SonarItem(
			ConfigForm configForm,
			string drumSound,
			Timecode duration,
			int shape,
			Color color,
			double border,
			double endBorder,
			double size,
			double endSize,
			double xPos,
			double yPos,
			double xOffset,
			double yOffset,
			double xOffset2,
			double yOffset2,
			double xPreOffset,
			double yPreOffset,
			double xPreOffset2,
			double yPreOffset2,
			double rotation,
			double rotation2,
			int curve,
			double fadeIn,
			double fadeOut,
			int fadeInCurve,
			int fadeOutCurve
		) : this(configForm) {
			DrumSound = drumSound;
			Duration = duration;
			Shape = shape;
			Color = color;
			Border = border;
			EndBorder = endBorder;
			Size = size;
			EndSize = endSize;
			XPos = xPos;
			YPos = yPos;
			XOffset = xOffset;
			YOffset = yOffset;
			XOffset2 = xOffset2;
			YOffset2 = yOffset2;
			XPreOffset = xPreOffset;
			YPreOffset = yPreOffset;
			XPreOffset2 = xPreOffset2;
			YPreOffset2 = yPreOffset2;
			Rotation = rotation;
			Rotation2 = rotation2;
			Curve = curve;
			FadeIn = fadeIn;
			FadeOut = fadeOut;
			FadeInCurve = fadeInCurve;
			FadeOutCurve = fadeOutCurve;
		}
		public SonarItem(ConfigForm configForm) {
			this.configForm = configForm;
			int columnCount = SonarList.Columns.Count;
			while (SubItems.Count < columnCount)
				SubItems.Add("");
		}

		private string drumSound = "Bass Drum";
		private Timecode duration = Timecode.FromString("0.1.000", RulerFormat.MeasuresAndBeats);
		private int shape = 0;
		private Color color = Color.White;
		private double border = 0;
		private double endBorder = 0;
		private double size = 0;
		private double endSize = 0;
		private double xPos = 50;
		private double yPos = 50;
		private double xOffset = 0;
		private double yOffset = 0;
		private double xOffset2 = 0;
		private double yOffset2 = 0;
		private double xPreOffset = 0;
		private double yPreOffset = 0;
		private double xPreOffset2 = 0;
		private double yPreOffset2 = 0;
		private double rotation = 0;
		private double rotation2 = 0;
		private int curve = 1;
		private double fadeIn = 0;
		private double fadeOut = 0;
		private int fadeInCurve = 1;
		private int fadeOutCurve = 2;

		private bool isEven = false;
		public VideoTrack videoTrack = null;

		public string DrumSound {
			get { return drumSound; }
			set {
				value = Regex.Replace(Regex.Replace(value.Trim(), @"\s{2,}", " "), @"[^A-Za-z0-9 ]", "");
				// 去除头尾空白字符，将多个空白字符替换为一个空格，去除非大小写字母 A~Z 和数字 0~9 以及空格外的其它全部字符。
				if (string.IsNullOrWhiteSpace(value)) return;
				drumSound = value;
				SubItems[0].Text  = value;
			}
		}
		public Timecode Duration {
			get { return duration; }
			set {
				duration = value;
				SubItems[2].Text = value.ToString();
			}
		}
		public int Shape {
			get { return shape; }
			set {
				if (value < 0 || value >= ShapeCombo.Items.Count) value = 0;
				shape = value;
				SubItems[1].Text = ShapeCombo.Items[value].ToString();
			}
		}
		public Color Color {
			get { return color; }
			set {
				color = value;
				BackColor = value;
				ForeColor = ColorButton.GetForeColor(value);
			}
		}
		public double Border { get { return border; } set { border = value; } }
		public double EndBorder { get { return endBorder; } set { endBorder = value; } }
		public double Size { get { return size; } set { size = value; } }
		public double EndSize { get { return endSize; } set { endSize = value; } }
		public double XPos { get { return xPos; } set { xPos = value; } }
		public double YPos { get { return yPos; } set { yPos = value; } }
		public double XOffset { get { return xOffset; } set { xOffset = value; } }
		public double YOffset { get { return yOffset; } set { yOffset = value; } }
		public double XOffset2 { get { return xOffset2; } set { xOffset2 = value; } }
		public double YOffset2 { get { return yOffset2; } set { yOffset2 = value; } }
		public double XPreOffset { get { return xPreOffset; } set { xPreOffset = value; } }
		public double YPreOffset { get { return yPreOffset; } set { yPreOffset = value; } }
		public double XPreOffset2 { get { return xPreOffset2; } set { xPreOffset2 = value; } }
		public double YPreOffset2 { get { return yPreOffset2; } set { yPreOffset2 = value; } }
		public double Rotation { get { return rotation; } set { rotation = value; } }
		public double Rotation2 { get { return rotation2; } set { rotation2 = value; } }
		public int Curve { get { return curve; } set { curve = value; } }
		public double FadeIn { get { return fadeIn; } set { fadeIn = value; } }
		public double FadeOut { get { return fadeOut; } set { fadeOut = value; } }
		public int FadeInCurve { get { return fadeInCurve; } set { fadeInCurve = value; } }
		public int FadeOutCurve { get { return fadeOutCurve; } set { fadeOutCurve = value; } }

		public bool IsEven { get { return isEven; } set { isEven = value; } }

		/// <summary>
		/// 从字符串读取数据来生成对象。
		/// </summary>
		/// <param name="configForm"><see cref="ConfigForm"/></param>
		/// <param name="value">字符串数据。</param>
		/// <returns><see cref="SonarItem"/> 对象。</returns>
		public static SonarItem FromString(ConfigForm configForm, string value) {
			if (string.IsNullOrWhiteSpace(value)) return null;
			try {
				string[] arr = value.Split(',');
				int i = 0;
				Func<string> item = new Func<string>(() => arr[i++]);
				SonarItem result = new SonarItem(
					configForm,
					item(),
					Timecode.FromString(item(), RulerFormat.MeasuresAndBeats),
					int.Parse(item()),
					Color.FromArgb(int.Parse(item())),
					double.Parse(item()),
					double.Parse(item()),
					double.Parse(item()),
					double.Parse(item()),
					double.Parse(item()),
					double.Parse(item()),
					double.Parse(item()),
					double.Parse(item()),
					double.Parse(item()),
					double.Parse(item()),
					double.Parse(item()),
					double.Parse(item()),
					double.Parse(item()),
					double.Parse(item()),
					double.Parse(item()),
					double.Parse(item()),
					int.Parse(item()),
					double.Parse(item()),
					double.Parse(item()),
					int.Parse(item()),
					int.Parse(item())
				);
				return result;
			} catch (Exception) {
				return null;
			}
		}

		public override string ToString() {
			return string.Join(",", new string[] {
				DrumSound,
				Duration.ToString(RulerFormat.MeasuresAndBeats),
				Shape.ToString(),
				Color.ToArgb().ToString(),
				Border.ToString(),
				EndBorder.ToString(),
				Size.ToString(),
				EndSize.ToString(),
				XPos.ToString(),
				YPos.ToString(),
				XOffset.ToString(),
				YOffset.ToString(),
				XOffset2.ToString(),
				YOffset2.ToString(),
				XPreOffset.ToString(),
				YPreOffset.ToString(),
				XPreOffset2.ToString(),
				YPreOffset2.ToString(),
				Rotation.ToString(),
				Rotation2.ToString(),
				Curve.ToString(),
				FadeIn.ToString(),
				FadeOut.ToString(),
				FadeInCurve.ToString(),
				FadeOutCurve.ToString(),
			});
		}

		/// <summary>
		/// 检查指定的声呐项目是否需要第二个效果插件画中画。
		/// </summary>
		/// <returns>是否需要第二个效果插件画中画。</returns>
		public bool IsRequirePicInPic() {
			return !(XPos == 50 && YPos == 50 &&
				Rotation == 0 && Rotation2 == 0 &&
				XOffset == 0 && YOffset == 0 && XOffset2 == 0 && YOffset2 == 0);
		}

		/// <summary>
		/// 单双数变换。
		/// </summary>
		public void ChangeOddEven() {
			IsEven = !IsEven;
		}

		public bool IsAnimateBorder { get { return Border != EndBorder; } }
		public bool IsAnimateSize { get { return Size != EndSize; } }
		public bool IsAnimatePreOffset { get { return XPreOffset != 0 ||
			XPreOffset != XPreOffset2 || XPreOffset != YPreOffset || XPreOffset != YPreOffset2; } }
		public bool IsAnimateOffset { get { return XOffset != 0 ||
			XOffset != XOffset2 || XOffset != YOffset || XOffset != YOffset2; } }
		public bool IsAnimateRotation { get { return Rotation != 0 || Rotation != Rotation2; } }
	}

	public class AlphaColorDialog : ColorDialog {

		///<summary>Event is fired after the color or alpha value are changed via any of the possible user-interface controls.</summary>
		public event EventHandler ColorChanged;

		private Color _color = Color.Black; // currently selected color
		private AlphaDialog dialogAlpha = null;
		private AlphaColorPanel panelAlpha = null;
		private Button btnAlpha = new Button { Text = "Alpha", Font = new Font("Segoe UI", 9F) };
		private IntPtr handle = IntPtr.Zero; // handle of this ColorDialog
		private IntPtr hWndRed = IntPtr.Zero; // handles to TextBoxes
		private IntPtr hWndGreen = IntPtr.Zero;
		private IntPtr hWndBlue = IntPtr.Zero;
		private byte? alphaBackup = 255;
		private System.Windows.Forms.Timer windowDragTimer = new System.Windows.Forms.Timer { Interval = 10 };

		public AlphaColorDialog() {
			btnAlpha.Click += btnAlpha_Click;
			windowDragTimer.Tick += WindowDragTimer_Tick;
		}

		///<summary>The handle for the ColorDialog window.</summary>
		public IntPtr Handle {
			get {
				return handle;
			}
		}

		void btnAlpha_Click(object sender, EventArgs e) {
			if (dialogAlpha == null) {
				dialogAlpha = new AlphaDialog(this);
				panelAlpha = new AlphaColorPanel();
				panelAlpha.AlphaChanged += panelAlpha_AlphaChanged;
				dialogAlpha.Controls.Add(panelAlpha);
				dialogAlpha.Text = "Alpha";
				//dialogAlpha.StartPosition = FormStartPosition.CenterParent; // doesn't work
				dialogAlpha.StartPosition = FormStartPosition.Manual;
				dialogAlpha.ClientSize = panelAlpha.PreferredSize;
				Size sz = dialogAlpha.Size;
				RECT r = new RECT();
				GetWindowRect(handle, ref r);
				//dialogAlpha.Location = new Point(r.Left + (r.Right - r.Left - sz.Width) / 2, r.Top + (r.Bottom - r.Top - sz.Height) / 2); // 位于父窗口中央。
				dialogAlpha.Location = new Point(r.Right, r.Top); // 位于父窗口右上角。
				dialogAlpha.FormBorderStyle = FormBorderStyle.FixedDialog;
				dialogAlpha.MinimizeBox = false;
				dialogAlpha.MaximizeBox = false;
				dialogAlpha.ShowInTaskbar = false;
				dialogAlpha.Font = new Font("Segoe UI", 9F);
			}

			panelAlpha.Color = _color;

			if (!dialogAlpha.IsHandleCreated || !dialogAlpha.Visible) {
				dialogAlpha.Visible = false; // sometimes IsHandleCreated is reset, so Visible must be reset
				dialogAlpha.Show(new SimpleWindow { Handle = handle });
				WindowDragTimer_Tick(null, null);
				dialogAlpha.ReserveSystemMenuItems(SystemMenuItemType.CLOSE);
			} else {
				if (dialogAlpha.WindowState == FormWindowState.Minimized)
					dialogAlpha.WindowState = FormWindowState.Normal;

				dialogAlpha.Activate();
				dialogAlpha.BringToFront();
				dialogAlpha.Focus();
			}
		}

		void panelAlpha_AlphaChanged(object sender, EventArgs e) {
			SetColorInternal(panelAlpha.Color);
		}

		private static string GetWindowText(IntPtr hWnd) {
			StringBuilder sb = new StringBuilder(256);
			GetWindowText(hWnd, sb, sb.Capacity);
			return sb.ToString();
		}

		private class SimpleWindow : IWin32Window {
			public IntPtr Handle { get; set; }
		}

		private static Bitmap ConvertToBitmap(IntPtr hWnd) {
			RECT r = new RECT();
			GetWindowRect(hWnd, ref r);
			int w = r.Right - r.Left;
			int h = r.Bottom - r.Top;

			Graphics g = Graphics.FromHwnd(hWnd);
			Bitmap bmp = new Bitmap(w, h);
			Graphics g2 = Graphics.FromImage(bmp);
			IntPtr g2_hdc = g2.GetHdc();
			IntPtr g_hdc = g.GetHdc();
			BitBlt(g2_hdc, 0, 0, w, h, g_hdc, 0, 0, SRC);
			g.ReleaseHdc(g_hdc);
			g2.ReleaseHdc(g2_hdc);
			g.Dispose();
			g2.Dispose();

			return bmp;
		}

		private struct IJL {
			public int i;
			public int j;
			public int len;

			public override string ToString() {
				return i + " " + j + " " + len;
			}
		}

		private static Color? FindSelectedColor(IntPtr hWnd) {
			// This method assumes there is a bounding rectangle around a color swatch.
			// The rectangle can be any color, but must be a single color. Since
			// the rectangle surrounds the swatch, it must have a run of pixels that
			// is longer than the run of pixels inside the swatch. Since it is
			// a rectangle, and we are scanning from top to bottom (left to right would also work),
			// then there must be exactly two runs that tie for longest. If two runs cannot
			// be found, then there is no bounding rectangle.

			Bitmap bmp = ConvertToBitmap(hWnd);
			int w = bmp.Width;
			int h = bmp.Height;
			Color bg = bmp.GetPixel(0, 0);

			IJL ijl = new IJL();
			IJL ijl0 = new IJL();
			IJL ijl1 = new IJL();
			int k = 0;

			for (int i = 0; i < w; i++) {
				Color lastColor = Color.Empty;
				for (int j = 0; j <= h; j++) {
					Color c = j == h ? Color.Empty : bmp.GetPixel(i, j);
					if (c == lastColor) {
						ijl.len++;
					} else {
						if (ijl.len < h) {
							if (ijl.len > 1 && bg != lastColor) {
								if (ijl.len > ijl0.len) {
									ijl0 = ijl;
									k = 0;
								} else if (ijl.len == ijl0.len) {
									ijl1 = ijl;
									k++;
								}
							}
						}

						ijl = new IJL {
							i = i,
							j = j,
							len = 1
						};
						lastColor = c;
					}
				}
			}

			if (k != 1) {
				bmp.Dispose();
				return null;
			}

			// k == 1 means there are exactly two runs of maximum length
			int x = ijl0.i + (ijl1.i - ijl0.i) / 2;
			int y = ijl0.j + ijl0.len / 2;
			Color c1 = bmp.GetPixel(x, y);
			bmp.Dispose();
			return c1;
		}

		private Color GetColorInternal() {
			int a = panelAlpha != null ? panelAlpha.Alpha : 255;
			string _r = GetWindowText(hWndRed);
			if (_r.Length > 0) {
				// Define Custom Colors UI is visible.
				int r = int.Parse(_r);
				int g = int.Parse(GetWindowText(hWndGreen));
				int b = int.Parse(GetWindowText(hWndBlue));
				return Color.FromArgb(a, r, g, b);
			} else {
				// if the RGB text boxes aren't visible, then resort to trying to find
				// the selected color by looking for the solid line rectangle that indicates the
				// currently selected color.
				Color? c = FindSelectedColor(GetDlgItem(handle, 0x02d0)); // Basic colors
				if (!c.HasValue)
					c = FindSelectedColor(GetDlgItem(handle, 0x02d1)); // Custom colors

				return c.HasValue ? Color.FromArgb(a, c.Value) : Color.FromArgb(a, Color.Black);
			}
		}

		private static bool AreEqual(Color c1, Color c2) {
			// Color.Black != (255, 0, 0, 0)
			return c1.A == c2.A && c1.R == c2.R && c1.G == c2.G && c1.B == c2.B;
		}

		private void SetColorInternal(Color c) {
			if (AreEqual(c, _color))
				return;

			_color = c;
			if (ColorChanged != null)
				ColorChanged(this, EventArgs.Empty);
		}

		public new Color Color {
			get {
				return _color;
			}

			set {
				SetColorInternal(value);
				if (panelAlpha != null)
					panelAlpha.Alpha = value.A;

				base.Color = value;
			}
		}

		protected override IntPtr HookProc(IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam) {
			//System.Diagnostics.Debug.WriteLine((Opulos.Core.Win32.WM) msg);
			if (msg == WM_INITDIALOG) {
				//alphaBackup = Color.A;
				IntPtr hWndOK = GetDlgItem(hWnd, 0x1); // 0x1 == OK button
				RECT rOK = new RECT();
				GetWindowRect(hWndOK, ref rOK);

				IntPtr hWndDefineCustomColors = GetDlgItem(hWnd, 0x02cf);
				RECT rDefineCustomColors = new RECT();
				GetWindowRect(hWndDefineCustomColors, ref rDefineCustomColors);

				IntPtr hWndCancel = GetDlgItem(hWnd, 0x2); // 0x2 == Cancel button
				RECT rCancel = new RECT();
				GetWindowRect(hWndCancel, ref rCancel);
				// Convert the cancel button's screen coordinates to client coordinates
				POINT pt = new POINT();
				pt.X = rCancel.Right;
				pt.Y = rCancel.Top;
				ScreenToClient(hWnd, ref pt);
				IntPtr hWndParent = GetParent(hWndCancel);
				int w = rCancel.Right - rCancel.Left;
				int h = rCancel.Bottom - rCancel.Top;
				int gap = rCancel.Left - rOK.Right;

				// the "Define Custom Colors >>" button is slightly less wide than the total width of the
				// OK, Cancel and Alpha buttons. Options:
				// 1) Increase the width of the define button so it right aligns with the alpha button
				// 2) Make the alpha button smaller in width
				// 3) Decrease the widths of all three button and decrease the gap between them.
				// Option 1 looks better than option 2. Didn't try option 3.
				if (rCancel.Right + gap + w > rDefineCustomColors.Right) { // screen coordinates
					int diff = (rCancel.Right + gap + w) - rDefineCustomColors.Right;
					// Option 2: //w = w - diff;
					// Option 1:
					int w2 = rDefineCustomColors.Right - rDefineCustomColors.Left;
					int h2 = rDefineCustomColors.Bottom - rDefineCustomColors.Top;
					SetWindowPos(hWndDefineCustomColors, IntPtr.Zero, 0, 0, w2 + diff, h2, SWP_NOMOVE | SWP_NOZORDER);
				}

				var hWndAlpha = btnAlpha.Handle; // creates the handle
				btnAlpha.Bounds = new Rectangle(pt.X + gap, pt.Y, w, h);
				SetParent(hWndAlpha, hWndParent);
				int hWndFont = SendMessage(hWndCancel, WM_GETFONT, 0, 0);
				SendMessage(hWndAlpha, WM_SETFONT, hWndFont, 0);

				// Alternative way to create the Alpha button, but would have to handle the WM_NOTIFY messages for the button click events.
				//hWndAlpha = CreateWindowEx(0, "Button", "alphabutton", WS_VISIBLE | WS_CHILD | WS_TABSTOP, pt.X + gap, pt.Y, w, h, hWndParent, 0, 0, 0);
				//SetWindowText(hWndAlpha, "Alpha");
				//int hWndFont = SendMessage(hWndCancel, WM_GETFONT, 0, 0);
				//SendMessage(hWndAlpha, WM_SETFONT, hWndFont, 0);

				// calling ColorDialog.Color does not return the currently selected color until after the OK button
				// is clicked. So the values from the textboxes are used. To find the controlIDs, use Spy++.
				hWndRed = GetDlgItem(hWnd, 0x02c2); // red text box
				hWndGreen = GetDlgItem(hWnd, 0x02c3);
				hWndBlue = GetDlgItem(hWnd, 0x02c4);
			} else if (msg == WM_SHOWWINDOW) {
				alphaBackup = Color.A;
				//center the dialog on the parent window:
				RECT cr = new RECT();
				RECT r0 = new RECT();
				IntPtr parent = GetParent(hWnd);
				GetWindowRect(hWnd, ref r0);
				GetWindowRect(parent, ref cr);
				handle = hWnd;

				int x = cr.Left + ((cr.Right - cr.Left) - (r0.Right - r0.Left)) / 2;
				int y = cr.Top + ((cr.Bottom - cr.Top) - (r0.Bottom - r0.Top)) / 2;
				SetWindowPos(hWnd, IntPtr.Zero, x, y, 0, 0, SWP_NOZORDER | SWP_NOSIZE);

				btnAlpha.PerformClick();
				if (alphaBackup != null) {
					Color = Color.FromArgb((byte)alphaBackup, Color.R, Color.G, Color.B);
					alphaBackup = null;
				}
			} else if (msg == ACD_COLORCHANGED) {
				Color c = GetColorInternal();
				SetColorInternal(c);
				if (panelAlpha != null)
					panelAlpha.Color = c;
			} else if (msg == WM_COMMAND || msg == WM_CHAR || msg == WM_LBUTTONDOWN) {
				PostMessage(hWnd, ACD_COLORCHANGED, 0, 0);
			} else if (msg == WM_NCLBUTTONDOWN) {
				windowDragTimer.Start();
			} else if (msg == WM_NCLBUTTONUP) {
				windowDragTimer.Stop();
			}

			return base.HookProc(hWnd, msg, wparam, lparam);
		}

		private void WindowDragTimer_Tick(object sender, EventArgs e) {
			try {
				if (dialogAlpha == null || handle == null)
					throw new NullReferenceException();
				RECT r = new RECT();
				GetWindowRect(handle, ref r);
				dialogAlpha.Location = new Point(r.Right, r.Top);
			} catch (Exception) { // 吞掉句柄丢失的错误。
				windowDragTimer.Stop();
				return;
			}

		}

		protected override void Dispose(bool disposing) {
			base.Dispose(disposing);
			if (disposing) {
				if (btnAlpha != null)
					btnAlpha.Dispose();

				if (dialogAlpha != null)
					dialogAlpha.Dispose();

				btnAlpha = null;
				dialogAlpha = null;
			}
		}

		[DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
		internal static extern IntPtr GetSystemMenu(IntPtr hWnd, bool bRevert);

		[DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
		internal static extern bool DeleteMenu(IntPtr menu, uint uPosition, uint uFlags);

		private class AlphaDialog : Form {

			private readonly AlphaColorDialog AOwner;
			public AlphaDialog(AlphaColorDialog owner) {
				AOwner = owner;
				ShowIcon = false;
			}

			protected override void OnFormClosing(FormClosingEventArgs e) {
				if (e.CloseReason == CloseReason.None || e.CloseReason == CloseReason.UserClosing) {
					e.Cancel = true;
					Hide();
					SetForegroundWindow(AOwner.handle);
				}
				base.OnFormClosing(e);
			}

			protected override void WndProc(ref Message m) {
				if (m.Msg == WM_SYSCOMMAND) {
					if ((int)m.WParam == SC_MOVE)
						return;
				}
				base.WndProc(ref m);
			}
		}

		internal struct RECT {
			public int Left;
			public int Top;
			public int Right;
			public int Bottom;
		}

		internal struct POINT {
			public int X;
			public int Y;
		}

		[DllImport("user32.dll")]
		private static extern bool SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter, int X, int Y, int cx, int cy, uint uFlags);

		[DllImport("user32.dll")]
		internal static extern bool GetWindowRect(IntPtr hWnd, ref RECT lpRect);

		[DllImport("user32.dll")]
		internal static extern bool GetClientRect(IntPtr hWnd, ref RECT lpRect);

		[DllImport("user32.dll")]
		private static extern IntPtr GetParent(IntPtr hWnd);

		[DllImport("user32.dll")]
		private static extern int SendMessage(IntPtr hWnd, int Msg, int wParam, int lParam);

		[DllImport("user32.dll")]
		private static extern int PostMessage(IntPtr hWnd, int Msg, int wParam, int lParam);

		[DllImport("user32.dll")]
		private static extern IntPtr GetDlgItem(IntPtr hDlg, int nIDDlgItem);

		[DllImport("user32.dll")]
		private static extern bool ScreenToClient(IntPtr hWnd, ref POINT lpPoint);

		[DllImport("user32.dll")]
		private static extern IntPtr SetParent(IntPtr hWndChild, IntPtr hWndNewParent);

		[DllImport("user32.dll")]
		private static extern bool SetForegroundWindow(IntPtr hWnd);

		[DllImport("user32.dll", CharSet = CharSet.Auto)]
		private static extern int GetWindowText(IntPtr hWnd, StringBuilder lpString, int nMaxCount);

		[DllImport("gdi32.dll", ExactSpelling = true, CharSet = CharSet.Auto, SetLastError = true)]
		private static extern bool BitBlt(IntPtr pHdc, int iX, int iY, int iWidth, int iHeight, IntPtr pHdcSource, int iXSource, int iYSource, System.Int32 dw);

		//[DllImport("user32.dll", CharSet = CharSet.Auto)]
		//private static extern IntPtr CreateWindowEx(int dwExStyle, string lpClassName, string lpWindowName, uint dwStyle, int x, int y, int nWidth, int nHeight, IntPtr hWndParent, int hMenu, int hInstance, int lpParam);

		//[DllImport("user32.dll", CharSet = CharSet.Auto)]
		//private static extern bool SetWindowText(IntPtr hWnd, String lpString);

		//[DllImport("user32.dll")]
		//private static extern bool DestroyWindow(IntPtr hwnd);

		private const int ACD_COLORCHANGED = 0x0400; // custom message
		private const int SRC = 0xCC0020;

		private const int SWP_NOSIZE = 0x0001;
		private const int SWP_NOMOVE = 0x0002;
		private const int SWP_NOZORDER = 0x0004;

		private const int WM_INITDIALOG = 0x110;
		private const int WM_SETFONT = 0x0030;
		private const int WM_GETFONT = 0x0031;
		private const int WM_SHOWWINDOW = 0x18;
		//private const int WM_NOTIFY;
		// messages that indicate a color change:
		private const int WM_COMMAND = 0x111;
		private const int WM_CHAR = 0x102;
		private const int WM_LBUTTONDOWN = 0x201;
		private const int WM_NCLBUTTONDOWN = 0x00A1;
		private const int WM_NCLBUTTONUP = 0x00A2;

		//private const uint WS_VISIBLE = 0x10000000;
		//private const uint WS_CHILD = 0x40000000;
		//private const uint WS_TABSTOP = 0x00010000;

		private const int WM_SYSCOMMAND = 0x112;
		private const int SC_MOVE = 0xF012;
		private const int SC_MOVE_MENUITEM = 0xF010;
		internal const uint MF_BYCOMMAND = 0x00000000;
	}

	public class AlphaColorPanel : Panel {

		public event EventHandler AlphaChanged;

		NumericUpDown nudAlpha = new NumericUpDown { AutoSize = true, Minimum = 0, Maximum = 255, DecimalPlaces = 0, Increment = 1, Value = 255, Anchor = AnchorStyles.Top };
		TrackBar trackBar = new TrackBar2 { Minimum = 0, Maximum = 255, TickFrequency = 5, TickStyle = TickStyle.None, Orientation = Orientation.Horizontal, Value = 255, Anchor = AnchorStyles.Left | AnchorStyles.Right };
		Color[] colors = new Color[] { Color.White, Color.Black, Color.Green, Color.Blue, Color.Red, Color.Yellow };
		public int Cols { get; set; }
		public int SwatchSize { get; set; }

		private Color color = Color.Empty;

		public AlphaColorPanel() : base() {
			Dock = DockStyle.Fill;
			AutoSize = true;
			AutoSizeMode = AutoSizeMode.GrowAndShrink;
			DoubleBuffered = true;
			//TabStop = true;
			//SetStyle(ControlStyles.Selectable, true);
			ResizeRedraw = true;

			Cols = 3;
			SwatchSize = 100;
			trackBar.ValueChanged += trackBar_ValueChanged;
			nudAlpha.ValueChanged += nudAlpha_ValueChanged;
			Alpha = 255;

			TableLayoutPanel p = new TableLayoutPanel { Dock = DockStyle.Bottom };
			p.AutoSize = true;
			p.AutoSizeMode = AutoSizeMode.GrowAndShrink;
			p.Controls.Add(nudAlpha, 0, 0);
			p.Controls.Add(trackBar, 1, 0);
			p.ColumnStyles.Add(new ColumnStyle(SizeType.AutoSize));
			p.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 1));
			Controls.Add(p);

			nudAlpha.KeyDown += nudAlpha_KeyDown;
			trackBar.KeyDown += trackBar_KeyDown;
		}

		void trackBar_KeyDown(object sender, KeyEventArgs e) {
			HandleKeyEvent((Control)sender, e);
		}

		void nudAlpha_KeyDown(object sender, KeyEventArgs e) {
			HandleKeyEvent((Control)sender, e);
		}

		private void HandleKeyEvent(Control sender, KeyEventArgs e) {
			if (e.KeyCode == Keys.Enter) {
				e.SuppressKeyPress = true; // stop beep
				e.Handled = true;
			} else if (e.KeyCode == Keys.Escape) {
				e.SuppressKeyPress = true;
				e.Handled = true;
				Form f = FindForm();
				if (f != null)
					f.Close();
			} else if (e.KeyCode == Keys.Tab) {
				// seems like because the Form is displays with Show(Window) but
				// it is not modal, that stops tabs from working correctly, so
				// it is handled manually:
				sender.Parent.SelectNextControl(sender, true, true, true, true);
				e.SuppressKeyPress = true;
				e.Handled = true;
			}
		}

		void nudAlpha_ValueChanged(object sender, EventArgs e) {
			trackBar.Value = Convert.ToInt32(nudAlpha.Value);
		}

		public override Size GetPreferredSize(Size proposedSize) {
			int w = SwatchSize * Cols;
			int h = SwatchSize * (((Colors.Length - 1) / Cols) + 1);
			h += Math.Max(trackBar.Height, nudAlpha.Height);
			return new Size(w, h);
		}

		public Color Color {
			get {
				return color;
			}
			set {
				var c = value;
				color = Color.FromArgb(Alpha, c.R, c.G, c.B);
				Invalidate(); //Refresh();
			}
		}

		public int Alpha {
			get {
				return trackBar.Value;
			}
			set {
				trackBar.Value = value;
			}
		}

		public Color[] Colors {
			get {
				return colors;
			}
			set {
				colors = value;
			}
		}

		void trackBar_ValueChanged(object sender, EventArgs e) {
			nudAlpha.Value = trackBar.Value;
			Color c = Color;
			Color = Color.FromArgb(trackBar.Value, c.R, c.G, c.B);
			Refresh();
			if (AlphaChanged != null)
				AlphaChanged(this, EventArgs.Empty);
		}

		protected override void OnPaint(PaintEventArgs e) {
			base.OnPaint(e);

			int rows = ((Colors.Length - 1) / Cols) + 1;
			int r1 = Width / Cols;
			int r2 = Height / Cols;
			int r = Math.Min(r1, r2);
			if (r < SwatchSize)
				r = SwatchSize;

			int offsetX = (Width - r * Cols) / 2;
			int offsetY = ((Height - Math.Max(nudAlpha.Height, trackBar.Height)) - r * rows) / 2;

			var g = e.Graphics;
			int x = 0;
			int y = 0;
			for (int i = 0, j = 1; i < colors.Length; i++, j++) {
				Color c = colors[i];

				using (var b = new SolidBrush(c))
					g.FillRectangle(b, x + offsetX, y + offsetY, r, r);

				if (j == Cols) {
					j = 0;
					x = 0;
					y += r;
				} else {
					x += r;
				}
			}

			using (var b = new SolidBrush(Color))
				g.FillRectangle(b, r / 2 + offsetX, r / 2 + offsetY, 2 * r, r);
		}

		private class TrackBar2 : TrackBar {

			public TrackBar2() : base() {
				AutoSize = false;
				RECT r = GetThumbRect(this);
				Height = r.Bottom - r.Top;
			}

			public override Size GetPreferredSize(Size proposedSize) {
				Size sz = base.GetPreferredSize(proposedSize);
				RECT r = GetThumbRect(this);
				sz.Height = r.Bottom - r.Top;
				return sz;
			}

			[StructLayout(LayoutKind.Sequential)]
			private struct RECT {
				public int Left;
				public int Top;
				public int Right;
				public int Bottom;
			}

			[DllImport("user32.dll")]
			private static extern void SendMessage(IntPtr hwnd, uint msg, IntPtr wp, ref RECT lp);

			private const uint TBM_GETTHUMBRECT = 0x419;
			private static RECT GetThumbRect(TrackBar trackBar) {
				RECT rc = new RECT();
				SendMessage(trackBar.Handle, TBM_GETTHUMBRECT, IntPtr.Zero, ref rc);
				return rc;
			}
		}
	}

	partial class AutomatorForm {
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer components = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose(bool disposing) {
			if (disposing && (components != null)) {
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent() {
			this.dock = new System.Windows.Forms.TableLayoutPanel();
			this.OkBtn = new System.Windows.Forms.Button();
			this.CancelBtn = new System.Windows.Forms.Button();
			this.AutomatorInfo = new System.Windows.Forms.Label();
			this.tableLayoutPanel1 = new System.Windows.Forms.TableLayoutPanel();
			this.ParamsList = new System.Windows.Forms.CheckedListBox();
			this.dock.SuspendLayout();
			this.tableLayoutPanel1.SuspendLayout();
			this.SuspendLayout();
			//
			// dock
			//
			this.dock.BackColor = System.Drawing.SystemColors.Control;
			this.dock.ColumnCount = 3;
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.dock.Controls.Add(this.OkBtn, 1, 0);
			this.dock.Controls.Add(this.CancelBtn, 2, 0);
			this.dock.Dock = System.Windows.Forms.DockStyle.Bottom;
			this.dock.Location = new System.Drawing.Point(0, 501);
			this.dock.Margin = new System.Windows.Forms.Padding(5);
			this.dock.Name = "dock";
			this.dock.Padding = new System.Windows.Forms.Padding(8, 6, 8, 6);
			this.dock.RowCount = 1;
			this.dock.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.dock.Size = new System.Drawing.Size(532, 52);
			this.dock.TabIndex = 8;
			//
			// OkBtn
			//
			this.OkBtn.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.OkBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.OkBtn.Location = new System.Drawing.Point(324, 10);
			this.OkBtn.Margin = new System.Windows.Forms.Padding(4);
			this.OkBtn.Name = "OkBtn";
			this.OkBtn.Size = new System.Drawing.Size(94, 32);
			this.OkBtn.TabIndex = 1;
			this.OkBtn.Text = "确定(&O)";
			this.OkBtn.UseVisualStyleBackColor = true;
			//
			// CancelBtn
			//
			this.CancelBtn.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.CancelBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.CancelBtn.Location = new System.Drawing.Point(426, 10);
			this.CancelBtn.Margin = new System.Windows.Forms.Padding(4);
			this.CancelBtn.Name = "CancelBtn";
			this.CancelBtn.Size = new System.Drawing.Size(94, 32);
			this.CancelBtn.TabIndex = 2;
			this.CancelBtn.Text = "取消(&C)";
			this.CancelBtn.UseVisualStyleBackColor = true;
			//
			// AutomatorInfo
			//
			this.AutomatorInfo.AutoSize = true;
			this.AutomatorInfo.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AutomatorInfo.Location = new System.Drawing.Point(12, 18);
			this.AutomatorInfo.Margin = new System.Windows.Forms.Padding(0, 6, 0, 6);
			this.AutomatorInfo.Name = "AutomatorInfo";
			this.AutomatorInfo.Size = new System.Drawing.Size(508, 20);
			this.AutomatorInfo.TabIndex = 9;
			this.AutomatorInfo.Text = "勾选需要自动随机设置值的效果参数。";
			this.AutomatorInfo.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// tableLayoutPanel1
			//
			this.tableLayoutPanel1.ColumnCount = 1;
			this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel1.Controls.Add(this.AutomatorInfo, 0, 0);
			this.tableLayoutPanel1.Controls.Add(this.ParamsList, 0, 1);
			this.tableLayoutPanel1.Dock = System.Windows.Forms.DockStyle.Fill;
			this.tableLayoutPanel1.Location = new System.Drawing.Point(0, 0);
			this.tableLayoutPanel1.Name = "tableLayoutPanel1";
			this.tableLayoutPanel1.Padding = new System.Windows.Forms.Padding(12);
			this.tableLayoutPanel1.RowCount = 2;
			this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel1.Size = new System.Drawing.Size(532, 501);
			this.tableLayoutPanel1.TabIndex = 10;
			//
			// ParamsList
			//
			this.ParamsList.BorderStyle = System.Windows.Forms.BorderStyle.None;
			this.ParamsList.CheckOnClick = true;
			this.ParamsList.Dock = System.Windows.Forms.DockStyle.Fill;
			this.ParamsList.FormattingEnabled = true;
			this.ParamsList.Location = new System.Drawing.Point(15, 47);
			this.ParamsList.Name = "ParamsList";
			this.ParamsList.Size = new System.Drawing.Size(502, 439);
			this.ParamsList.TabIndex = 10;
			//
			// AutomatorForm
			//
			this.AcceptButton = this.OkBtn;
			this.AutoScaleDimensions = new System.Drawing.SizeF(120F, 120F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Dpi;
			this.BackColor = System.Drawing.SystemColors.Window;
			this.CancelButton = this.CancelBtn;
			this.ClientSize = new System.Drawing.Size(532, 553);
			this.Controls.Add(this.tableLayoutPanel1);
			this.Controls.Add(this.dock);
			this.Font = new System.Drawing.Font("Microsoft YaHei UI", 9F);
			this.Location = new System.Drawing.Point(60, 60);
			this.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);
			this.MaximizeBox = false;
			this.MinimizeBox = false;
			this.MinimumSize = new System.Drawing.Size(550, 600);
			this.Name = "AutomatorForm";
			this.ShowInTaskbar = false;
			this.StartPosition = System.Windows.Forms.FormStartPosition.Manual;
			this.Text = "自动生效 - 参数";
			this.dock.ResumeLayout(false);
			this.tableLayoutPanel1.ResumeLayout(false);
			this.tableLayoutPanel1.PerformLayout();
			this.ResumeLayout(false);

		}

		#endregion

		public System.Windows.Forms.TableLayoutPanel dock;
		public System.Windows.Forms.Button OkBtn;
		public System.Windows.Forms.Button CancelBtn;
		private System.Windows.Forms.Label AutomatorInfo;
		private System.Windows.Forms.TableLayoutPanel tableLayoutPanel1;
		private System.Windows.Forms.CheckedListBox ParamsList;
	}

	public partial class AutomatorForm : Form, IInterpret {
		private Datamosh.Automator.ParameterDataList parameters;
		public Datamosh.Automator.ParameterDataList CheckedParams { get { return parameters; } }

		public AutomatorForm(Datamosh.Automator.ParameterDataList parameters) {
			InitializeComponent();
			Icon = ImageBase64.GetIcon(ImageBase64.AutomatorIcon);
			this.ReserveSystemMenuItems(SystemMenuItemType.MOVE | SystemMenuItemType.SIZE | SystemMenuItemType.CLOSE);
			Translate();
			this.parameters = parameters;
			InitItems();
		}

		private void InitItems() {
			ParamsList.Items.AddRange(parameters.ToArray());
			for (int i = 0; i < parameters.Count; i++)
				ParamsList.SetItemChecked(i, parameters[i].defaultCheck);
		}

		public void Translate() {
			Lang str = Lang.str;
			Font = new Font(str.ui_font, 9F);
			OkBtn.Text = str.ok;
			CancelBtn.Text = str.cancel;
			AutomatorInfo.Text = str.automator_info;
			Text = str.automator_parameters;
		}

		public new Datamosh.Automator.ParameterDataList ShowDialog() {
			if (base.ShowDialog() != DialogResult.OK) return null;
			return new Datamosh.Automator.ParameterDataList(ParamsList.CheckedItems.Cast<Datamosh.Automator.ParameterData>());
		}
	}

	partial class CameraShakeForm {
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer components = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose(bool disposing) {
			if (disposing && (components != null)) {
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent() {
			this.components = new System.ComponentModel.Container();
			this.dock = new System.Windows.Forms.TableLayoutPanel();
			this.OkBtn = new System.Windows.Forms.Button();
			this.CancelBtn = new System.Windows.Forms.Button();
			this.tableLayoutPanel1 = new System.Windows.Forms.TableLayoutPanel();
			this.XToYBox = new System.Windows.Forms.NumericUpDown();
			this.SkewOutBox = new System.Windows.Forms.NumericUpDown();
			this.SkewXYBox = new System.Windows.Forms.NumericUpDown();
			this.ShouldClearFramesCheck = new System.Windows.Forms.CheckBox();
			this.XToYLbl = new System.Windows.Forms.Label();
			this.SkewOutLbl = new System.Windows.Forms.Label();
			this.SkewXYLbl = new System.Windows.Forms.Label();
			this.SkewInLbl = new System.Windows.Forms.Label();
			this.ShouldResetPanCheck = new System.Windows.Forms.CheckBox();
			this.SkewInBox = new System.Windows.Forms.NumericUpDown();
			this.Balloon = new System.Windows.Forms.ToolTip(this.components);
			this.dock.SuspendLayout();
			this.tableLayoutPanel1.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.XToYBox)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.SkewOutBox)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.SkewXYBox)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.SkewInBox)).BeginInit();
			this.SuspendLayout();
			//
			// dock
			//
			this.dock.BackColor = System.Drawing.SystemColors.Control;
			this.dock.ColumnCount = 3;
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.dock.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.dock.Controls.Add(this.OkBtn, 1, 0);
			this.dock.Controls.Add(this.CancelBtn, 2, 0);
			this.dock.Dock = System.Windows.Forms.DockStyle.Bottom;
			this.dock.Location = new System.Drawing.Point(0, 215);
			this.dock.Margin = new System.Windows.Forms.Padding(5);
			this.dock.Name = "dock";
			this.dock.Padding = new System.Windows.Forms.Padding(8, 6, 8, 6);
			this.dock.RowCount = 1;
			this.dock.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.dock.Size = new System.Drawing.Size(366, 52);
			this.dock.TabIndex = 9;
			//
			// OkBtn
			//
			this.OkBtn.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.OkBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.OkBtn.Location = new System.Drawing.Point(158, 10);
			this.OkBtn.Margin = new System.Windows.Forms.Padding(4);
			this.OkBtn.Name = "OkBtn";
			this.OkBtn.Size = new System.Drawing.Size(94, 32);
			this.OkBtn.TabIndex = 1;
			this.OkBtn.Text = "确定(&O)";
			this.OkBtn.UseVisualStyleBackColor = true;
			//
			// CancelBtn
			//
			this.CancelBtn.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.CancelBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.CancelBtn.Location = new System.Drawing.Point(260, 10);
			this.CancelBtn.Margin = new System.Windows.Forms.Padding(4);
			this.CancelBtn.Name = "CancelBtn";
			this.CancelBtn.Size = new System.Drawing.Size(94, 32);
			this.CancelBtn.TabIndex = 2;
			this.CancelBtn.Text = "取消(&C)";
			this.CancelBtn.UseVisualStyleBackColor = true;
			//
			// tableLayoutPanel1
			//
			this.tableLayoutPanel1.AutoSize = true;
			this.tableLayoutPanel1.ColumnCount = 2;
			this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel1.Controls.Add(this.XToYBox, 1, 3);
			this.tableLayoutPanel1.Controls.Add(this.SkewOutBox, 1, 2);
			this.tableLayoutPanel1.Controls.Add(this.SkewXYBox, 1, 1);
			this.tableLayoutPanel1.Controls.Add(this.ShouldClearFramesCheck, 0, 5);
			this.tableLayoutPanel1.Controls.Add(this.XToYLbl, 0, 3);
			this.tableLayoutPanel1.Controls.Add(this.SkewOutLbl, 0, 2);
			this.tableLayoutPanel1.Controls.Add(this.SkewXYLbl, 0, 1);
			this.tableLayoutPanel1.Controls.Add(this.SkewInLbl, 0, 0);
			this.tableLayoutPanel1.Controls.Add(this.ShouldResetPanCheck, 0, 4);
			this.tableLayoutPanel1.Controls.Add(this.SkewInBox, 1, 0);
			this.tableLayoutPanel1.Dock = System.Windows.Forms.DockStyle.Top;
			this.tableLayoutPanel1.Location = new System.Drawing.Point(0, 0);
			this.tableLayoutPanel1.Name = "tableLayoutPanel1";
			this.tableLayoutPanel1.Padding = new System.Windows.Forms.Padding(9);
			this.tableLayoutPanel1.RowCount = 6;
			this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel1.Size = new System.Drawing.Size(366, 214);
			this.tableLayoutPanel1.TabIndex = 10;
			//
			// XToYBox
			//
			this.XToYBox.DecimalPlaces = 3;
			this.XToYBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.XToYBox.Increment = new decimal(new int[] {
			1,
			0,
			0,
			65536});
			this.XToYBox.Location = new System.Drawing.Point(147, 114);
			this.XToYBox.Maximum = new decimal(new int[] {
			1000,
			0,
			0,
			0});
			this.XToYBox.Minimum = new decimal(new int[] {
			1000,
			0,
			0,
			-2147483648});
			this.XToYBox.Name = "XToYBox";
			this.XToYBox.Size = new System.Drawing.Size(207, 27);
			this.XToYBox.TabIndex = 9;
			this.XToYBox.Value = new decimal(new int[] {
			25,
			0,
			0,
			65536});
			//
			// SkewOutBox
			//
			this.SkewOutBox.DecimalPlaces = 3;
			this.SkewOutBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SkewOutBox.Location = new System.Drawing.Point(147, 80);
			this.SkewOutBox.Maximum = new decimal(new int[] {
			1000,
			0,
			0,
			0});
			this.SkewOutBox.Minimum = new decimal(new int[] {
			1000,
			0,
			0,
			-2147483648});
			this.SkewOutBox.Name = "SkewOutBox";
			this.SkewOutBox.Size = new System.Drawing.Size(207, 27);
			this.SkewOutBox.TabIndex = 8;
			this.SkewOutBox.Value = new decimal(new int[] {
			4,
			0,
			0,
			0});
			//
			// SkewXYBox
			//
			this.SkewXYBox.DecimalPlaces = 3;
			this.SkewXYBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SkewXYBox.Increment = new decimal(new int[] {
			1,
			0,
			0,
			65536});
			this.SkewXYBox.Location = new System.Drawing.Point(147, 46);
			this.SkewXYBox.Maximum = new decimal(new int[] {
			1000,
			0,
			0,
			0});
			this.SkewXYBox.Minimum = new decimal(new int[] {
			1000,
			0,
			0,
			-2147483648});
			this.SkewXYBox.Name = "SkewXYBox";
			this.SkewXYBox.Size = new System.Drawing.Size(207, 27);
			this.SkewXYBox.TabIndex = 7;
			this.SkewXYBox.Value = new decimal(new int[] {
			15,
			0,
			0,
			65536});
			//
			// ShouldClearFramesCheck
			//
			this.ShouldClearFramesCheck.AutoSize = true;
			this.ShouldClearFramesCheck.Checked = true;
			this.ShouldClearFramesCheck.CheckState = System.Windows.Forms.CheckState.Checked;
			this.tableLayoutPanel1.SetColumnSpan(this.ShouldClearFramesCheck, 2);
			this.ShouldClearFramesCheck.Dock = System.Windows.Forms.DockStyle.Fill;
			this.ShouldClearFramesCheck.Location = new System.Drawing.Point(12, 178);
			this.ShouldClearFramesCheck.Name = "ShouldClearFramesCheck";
			this.ShouldClearFramesCheck.Size = new System.Drawing.Size(342, 24);
			this.ShouldClearFramesCheck.TabIndex = 5;
			this.ShouldClearFramesCheck.Text = "在摇晃前重置所有帧";
			this.ShouldClearFramesCheck.UseVisualStyleBackColor = true;
			//
			// XToYLbl
			//
			this.XToYLbl.AutoSize = true;
			this.XToYLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.XToYLbl.Location = new System.Drawing.Point(9, 111);
			this.XToYLbl.Margin = new System.Windows.Forms.Padding(0);
			this.XToYLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.XToYLbl.Name = "XToYLbl";
			this.XToYLbl.Size = new System.Drawing.Size(135, 34);
			this.XToYLbl.TabIndex = 3;
			this.XToYLbl.Text = "水平/垂直位移比";
			this.XToYLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// SkewOutLbl
			//
			this.SkewOutLbl.AutoSize = true;
			this.SkewOutLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SkewOutLbl.Location = new System.Drawing.Point(9, 77);
			this.SkewOutLbl.Margin = new System.Windows.Forms.Padding(0);
			this.SkewOutLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.SkewOutLbl.Name = "SkewOutLbl";
			this.SkewOutLbl.Size = new System.Drawing.Size(135, 34);
			this.SkewOutLbl.TabIndex = 2;
			this.SkewOutLbl.Text = "数量";
			this.SkewOutLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// SkewXYLbl
			//
			this.SkewXYLbl.AutoSize = true;
			this.SkewXYLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SkewXYLbl.Location = new System.Drawing.Point(9, 43);
			this.SkewXYLbl.Margin = new System.Windows.Forms.Padding(0);
			this.SkewXYLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.SkewXYLbl.Name = "SkewXYLbl";
			this.SkewXYLbl.Size = new System.Drawing.Size(135, 34);
			this.SkewXYLbl.TabIndex = 1;
			this.SkewXYLbl.Text = "水平/垂直同步系数";
			this.SkewXYLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// SkewInLbl
			//
			this.SkewInLbl.AutoSize = true;
			this.SkewInLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SkewInLbl.Location = new System.Drawing.Point(9, 9);
			this.SkewInLbl.Margin = new System.Windows.Forms.Padding(0);
			this.SkewInLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.SkewInLbl.Name = "SkewInLbl";
			this.SkewInLbl.Size = new System.Drawing.Size(135, 34);
			this.SkewInLbl.TabIndex = 0;
			this.SkewInLbl.Text = "速度";
			this.SkewInLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// ShouldResetPanCheck
			//
			this.ShouldResetPanCheck.AutoSize = true;
			this.tableLayoutPanel1.SetColumnSpan(this.ShouldResetPanCheck, 2);
			this.ShouldResetPanCheck.Dock = System.Windows.Forms.DockStyle.Fill;
			this.ShouldResetPanCheck.Location = new System.Drawing.Point(12, 148);
			this.ShouldResetPanCheck.Name = "ShouldResetPanCheck";
			this.ShouldResetPanCheck.Size = new System.Drawing.Size(342, 24);
			this.ShouldResetPanCheck.TabIndex = 4;
			this.ShouldResetPanCheck.Text = "在第一帧上重置平移/裁切";
			this.ShouldResetPanCheck.UseVisualStyleBackColor = true;
			//
			// SkewInBox
			//
			this.SkewInBox.DecimalPlaces = 3;
			this.SkewInBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SkewInBox.Location = new System.Drawing.Point(147, 12);
			this.SkewInBox.Maximum = new decimal(new int[] {
			1000,
			0,
			0,
			0});
			this.SkewInBox.Minimum = new decimal(new int[] {
			1000,
			0,
			0,
			-2147483648});
			this.SkewInBox.Name = "SkewInBox";
			this.SkewInBox.Size = new System.Drawing.Size(207, 27);
			this.SkewInBox.TabIndex = 6;
			this.SkewInBox.Value = new decimal(new int[] {
			12,
			0,
			0,
			0});
			//
			// Balloon
			//
			this.Balloon.AutomaticDelay = 0;
			this.Balloon.AutoPopDelay = 60000;
			this.Balloon.InitialDelay = 0;
			this.Balloon.IsBalloon = true;
			this.Balloon.ReshowDelay = 0;
			this.Balloon.ShowAlways = true;
			this.Balloon.ToolTipIcon = System.Windows.Forms.ToolTipIcon.Info;
			this.Balloon.ToolTipTitle = "填写说明";
			//
			// CameraShakeForm
			//
			this.AcceptButton = this.OkBtn;
			this.AutoScaleDimensions = new System.Drawing.SizeF(120F, 120F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Dpi;
			this.BackColor = System.Drawing.SystemColors.Window;
			this.CancelButton = this.CancelBtn;
			this.ClientSize = new System.Drawing.Size(366, 267);
			this.Controls.Add(this.tableLayoutPanel1);
			this.Controls.Add(this.dock);
			this.Font = new System.Drawing.Font("Microsoft YaHei UI", 9F);
			this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
			this.Location = new System.Drawing.Point(60, 60);
			this.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);
			this.MaximizeBox = false;
			this.MinimizeBox = false;
			this.Name = "CameraShakeForm";
			this.ShowIcon = false;
			this.ShowInTaskbar = false;
			this.StartPosition = System.Windows.Forms.FormStartPosition.Manual;
			this.Text = "镜头摇晃 - 参数";
			this.dock.ResumeLayout(false);
			this.tableLayoutPanel1.ResumeLayout(false);
			this.tableLayoutPanel1.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.XToYBox)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.SkewOutBox)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.SkewXYBox)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.SkewInBox)).EndInit();
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion

		public System.Windows.Forms.TableLayoutPanel dock;
		public System.Windows.Forms.Button OkBtn;
		public System.Windows.Forms.Button CancelBtn;
		private System.Windows.Forms.TableLayoutPanel tableLayoutPanel1;
		private System.Windows.Forms.Label SkewXYLbl;
		private System.Windows.Forms.Label SkewInLbl;
		private System.Windows.Forms.Label SkewOutLbl;
		private System.Windows.Forms.Label XToYLbl;
		private System.Windows.Forms.CheckBox ShouldResetPanCheck;
		private System.Windows.Forms.CheckBox ShouldClearFramesCheck;
		private System.Windows.Forms.NumericUpDown SkewInBox;
		private System.Windows.Forms.NumericUpDown XToYBox;
		private System.Windows.Forms.NumericUpDown SkewOutBox;
		private System.Windows.Forms.NumericUpDown SkewXYBox;
		public System.Windows.Forms.ToolTip Balloon;
	}

	public partial class CameraShakeForm : Form, IInterpret, IConfigIniUser {
		private readonly EntryPoint parent;
		private ConfigIni configIni { get { return parent.configIni; } }

		public CameraShakeForm(EntryPoint parent) {
			this.parent = parent;
			InitializeComponent();
			this.ReserveSystemMenuItems(SystemMenuItemType.MOVE | SystemMenuItemType.CLOSE);
			Translate();
			ReadIni();
			FormClosing += (sender, e) => SaveIni();
		}

		public Config GetConfig() {
			return new Config {
				SkewIn = (double)SkewInBox.Value,
				SkewXY = (double)SkewXYBox.Value,
				SkewOut = (float)SkewOutBox.Value,
				XToYRatio = (float)XToYBox.Value,
				ShouldResetPan = ShouldResetPanCheck.Checked,
				ShouldClearFrames = ShouldClearFramesCheck.Checked,
			};
		}

		public void Translate() {
			Lang str = Lang.str;
			Font = new Font(str.ui_font, 9F);
			OkBtn.Text = str.ok;
			CancelBtn.Text = str.cancel;
			SkewInLbl.Text = str.shake_skew_in;
			SkewXYLbl.Text = str.shake_skew_xy;
			SkewOutLbl.Text = str.shake_skew_out;
			XToYLbl.Text = str.shake_x_to_y_ratio;
			ShouldResetPanCheck.Text = str.shake_should_reset_pan;
			ShouldClearFramesCheck.Text = str.shake_should_clear_frames;
			Balloon.ToolTipTitle = str.balloon_title;
			Balloon.SetToolTip(SkewInLbl, str.shake_skew_in_tooltip);
			Balloon.SetToolTip(SkewInBox, str.shake_skew_in_tooltip);
			Balloon.SetToolTip(SkewXYLbl, str.shake_skew_xy_tooltip);
			Balloon.SetToolTip(SkewXYBox, str.shake_skew_xy_tooltip);
			Balloon.SetToolTip(SkewOutLbl, str.shake_skew_out_tooltip);
			Balloon.SetToolTip(SkewOutBox, str.shake_skew_out_tooltip);
			Balloon.SetToolTip(XToYLbl, str.shake_x_to_y_tooltip);
			Balloon.SetToolTip(XToYBox, str.shake_x_to_y_tooltip);
			Balloon.SetToolTip(ShouldResetPanCheck, str.shake_should_reset_pan_tooltip);
			Balloon.SetToolTip(ShouldClearFramesCheck, str.shake_should_clear_frames_tooltip);
			Text = str.camera_shake_parameters;
		}

		public void SaveIni() {
			configIni.StartSection("CameraShake");
			configIni.Write("SkewIn", SkewInBox.Value);
			configIni.Write("SkewXY", SkewXYBox.Value);
			configIni.Write("SkewOut", SkewOutBox.Value);
			configIni.Write("XToYRatio", XToYBox.Value);
			configIni.Write("ShouldResetPan", ShouldResetPanCheck.Checked);
			configIni.Write("ShouldClearFrames", ShouldClearFramesCheck.Checked);
			configIni.EndSection();
		}

		public void ReadIni() {
			configIni.StartSection("CameraShake");
			SkewInBox.SetValue(configIni.Read("SkewIn", 12m));
			SkewXYBox.SetValue(configIni.Read("SkewXY", 1.5m));
			SkewOutBox.SetValue(configIni.Read("SkewOut", 4m));
			XToYBox.SetValue(configIni.Read("XToYRatio", 2.5m));
			ShouldResetPanCheck.Checked = configIni.Read("ShouldResetPan", false);
			ShouldClearFramesCheck.Checked = configIni.Read("ShouldClearFrames", true);
			configIni.EndSection();
		}

		public struct Config {
			/// <summary>
			/// Rate of shake multiplier.
			/// </summary>
			public double SkewIn;
			/// <summary>
			/// Synchronicity factor between horizontal and vertical movements.
			/// </summary>
			public double SkewXY;
			/// <summary>
			/// Number of pixels to displace.
			/// </summary>
			public float SkewOut;
			/// <summary>
			/// Affect displacement horizontally as a proportion of vertical displacement.
			/// </summary>
			public float XToYRatio;
			/// <summary>
			/// Reset Pan on first frame.
			/// </summary>
			public bool ShouldResetPan;
			/// <summary>
			/// Start all over?
			/// </summary>
			public bool ShouldClearFrames;
		}
	}

	/// <summary>
	/// 首选轨道包装器。用于下拉框的展示。
	/// </summary>
	/// <typeparam name="T">轨道类型。指定是音频轨道还是视频轨道。</typeparam>
	public class PreferredTrackWrapper<T> where T : Track {
		public T Track { get; protected set; }
		public string DisplayValue { get; protected set; }

		public PreferredTrackWrapper(T track, string displayValue) {
			Track = track;
			DisplayValue = displayValue;
		}

		public PreferredTrackWrapper(string displayValue) : this(null, displayValue) { }

		public override string ToString() {
			return DisplayValue;
		}
	}

	public class PreferredNewTrackWrapper : PreferredTrackWrapper<Track> {
		public PreferredNewTrackWrapper(string displayValue) : base(displayValue) { }
	}
	#endregion

	#region 设计器部分
	partial class ConfigForm {
		/// <summary>
		/// 必需的设计器变量。
		/// </summary>
		private System.ComponentModel.IContainer components = null;

		/// <summary>
		/// 清理所有正在使用的资源。
		/// </summary>
		/// <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
		protected override void Dispose(bool disposing) {
			if (disposing && (components != null)) {
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		#region Windows 窗体设计器生成的代码

		/// <summary>
		/// 设计器支持所需的方法 - 不要修改
		/// 使用代码编辑器修改此方法的内容。
		/// </summary>
		private void InitializeComponent() {
			this.components = new System.ComponentModel.Container();
			this.tableLayoutPanel1 = new System.Windows.Forms.TableLayoutPanel();
			this.UserHelpLink = new System.Windows.Forms.LinkLabel();
			this.AboutBtn = new System.Windows.Forms.Button();
			this.OkBtn = new System.Windows.Forms.Button();
			this.CancelBtn = new System.Windows.Forms.Button();
			this.Balloon = new System.Windows.Forms.ToolTip(this.components);
			this.AudioTuneMethodCombo = new System.Windows.Forms.ComboBox();
			this.AudioLockStretchPitchCheck = new System.Windows.Forms.CheckBox();
			this.PreviewTuneAudioCheck = new System.Windows.Forms.CheckBox();
			this.StaffRelativeValueCheck = new System.Windows.Forms.CheckBox();
			this.StaffLegacyMethodCheck = new System.Windows.Forms.CheckBox();
			this.MidiStartSecondBox = new Otomad.VegasScript.OtomadHelper.V4.TimecodeBox();
			this.MidiEndSecondBox = new Otomad.VegasScript.OtomadHelper.V4.TimecodeBox();
			this.SourceStartTimeText = new Otomad.VegasScript.OtomadHelper.V4.TimecodeBox();
			this.SourceEndTimeText = new Otomad.VegasScript.OtomadHelper.V4.TimecodeBox();
			this.PreviewBeepDurationBox = new Otomad.VegasScript.OtomadHelper.V4.NumericUpDownWithUnit();
			this.StaffLineThicknessBox = new Otomad.VegasScript.OtomadHelper.V4.NumericUpDownWithUnit();
			this.StaffSurfacePaddingRightBox = new Otomad.VegasScript.OtomadHelper.V4.NumericUpDownWithUnit();
			this.StaffLineSpacingBox = new Otomad.VegasScript.OtomadHelper.V4.NumericUpDownWithUnit();
			this.StaffSurfacePositionBox = new Otomad.VegasScript.OtomadHelper.V4.NumericUpDownWithUnit();
			this.StaffSurfacePaddingLeftBox = new Otomad.VegasScript.OtomadHelper.V4.NumericUpDownWithUnit();
			this.YtpMinLenBox = new Otomad.VegasScript.OtomadHelper.V4.NumericUpDownWithUnit();
			this.YtpMaxLenBox = new Otomad.VegasScript.OtomadHelper.V4.NumericUpDownWithUnit();
			this.StaffFreezeAtNoteOffCheck = new System.Windows.Forms.CheckBox();
			this.PreviewBasePitchBtn = new System.Windows.Forms.Button();
			this.AudioStretchAttrCombo = new System.Windows.Forms.ComboBox();
			this.menu = new System.Windows.Forms.MenuStrip();
			this.fileMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.saveConfigToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.resetConfigToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.formSizeToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.rememberFormSizeToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.toolStripSeparator2 = new System.Windows.Forms.ToolStripSeparator();
			this.rememberOnceFormSizeToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.restoreDefaultFormSizeToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.toolStripSeparator6 = new System.Windows.Forms.ToolStripSeparator();
			this.pitchShiftPresetMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.loadPresetsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.unloadPresetsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.toolStripSeparator1 = new System.Windows.Forms.ToolStripSeparator();
			this.enableLegacyProgressDialogToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.toolStripSeparator12 = new System.Windows.Forms.ToolStripSeparator();
			this.exportConfigToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.importConfigToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.toolStripSeparator11 = new System.Windows.Forms.ToolStripSeparator();
			this.exitDiscardingChangesToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.exitToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.helpToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.versionToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.aboutToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.whyOkBtnIsDisabledToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.experimentalThemeToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.toolStripSeparator7 = new System.Windows.Forms.ToolStripSeparator();
			this.checkUpdateToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.checkUpdateOnStartupToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.latestVersionLinkToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.toolStripSeparator8 = new System.Windows.Forms.ToolStripSeparator();
			this.githubToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.roadmapToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.updateLogsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.githubIssuesToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.toolStripSeparator3 = new System.Windows.Forms.ToolStripSeparator();
			this.englishDocumentationsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.documentationEnglishToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.tutorialVideoEnglishToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.chineseDocumentationsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.troubleShootingToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.toolStripSeparator4 = new System.Windows.Forms.ToolStripSeparator();
			this.releaseNotesV4_9_25_0ToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.releaseNotesV4_10_17_0ToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.toolStripSeparator5 = new System.Windows.Forms.ToolStripSeparator();
			this.documentationV0_1ToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.staffVisualizerV0_1ToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.tutorialVideoV0_1ToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.languageToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.chineseToolStripMenuItem = new Otomad.VegasScript.OtomadHelper.V4.ToolStripRadioButtonMenuItem();
			this.tchineseToolStripMenuItem = new Otomad.VegasScript.OtomadHelper.V4.ToolStripRadioButtonMenuItem();
			this.englishToolStripMenuItem = new Otomad.VegasScript.OtomadHelper.V4.ToolStripRadioButtonMenuItem();
			this.japaneseToolStripMenuItem = new Otomad.VegasScript.OtomadHelper.V4.ToolStripRadioButtonMenuItem();
			this.russianToolStripMenuItem = new Otomad.VegasScript.OtomadHelper.V4.ToolStripRadioButtonMenuItem();
			this.vietnameseToolStripMenuItem = new Otomad.VegasScript.OtomadHelper.V4.ToolStripRadioButtonMenuItem();
			this.latestVersionToolStripMenuItemInBar = new System.Windows.Forms.ToolStripMenuItem();
			this.panel1 = new System.Windows.Forms.Panel();
			this.Tabs = new System.Windows.Forms.TabControl();
			this.SourceTab = new System.Windows.Forms.TabPage();
			this.WarningInfoLabel = new System.Windows.Forms.Label();
			this.MidiConfigGroup = new System.Windows.Forms.GroupBox();
			this.MidiConfigTablePanel = new System.Windows.Forms.TableLayoutPanel();
			this.RestrictLengthLbl = new System.Windows.Forms.Label();
			this.tableLayoutPanel5 = new System.Windows.Forms.TableLayoutPanel();
			this.MidiChannelCombo = new System.Windows.Forms.ComboBox();
			this.MidiChannelAdvancedBtn = new System.Windows.Forms.Button();
			this.QuickConfigMidiChannelsMenu = new System.Windows.Forms.ContextMenuStrip(this.components);
			this.quickConfigMidiChannelsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.ChooseMidiLbl = new System.Windows.Forms.Label();
			this.tableLayoutPanel6 = new System.Windows.Forms.TableLayoutPanel();
			this.ChooseMidiText = new System.Windows.Forms.TextBox();
			this.ChooseMidiBtn = new System.Windows.Forms.Button();
			this.MidiChannelLbl = new System.Windows.Forms.Label();
			this.flowLayoutPanel3 = new System.Windows.Forms.FlowLayoutPanel();
			this.MidiStartSecondLbl = new System.Windows.Forms.Label();
			this.MidiEndSecondLbl = new System.Windows.Forms.Label();
			this.MidiBpmLbl = new System.Windows.Forms.Label();
			this.MidiBpmFlowPanel = new System.Windows.Forms.FlowLayoutPanel();
			this.MidiDynamicTempoFlow = new System.Windows.Forms.FlowLayoutPanel();
			this.MidiDynamicMidiBpmCheck = new Otomad.VegasScript.OtomadHelper.V4.GroupedRadioButton();
			this.MidiDynamicMidiBpmFormCombo = new System.Windows.Forms.ComboBox();
			this.MidiMidiBpmCheck = new Otomad.VegasScript.OtomadHelper.V4.GroupedRadioButton();
			this.MidiProjectBpmCheck = new Otomad.VegasScript.OtomadHelper.V4.GroupedRadioButton();
			this.flowLayoutPanel2 = new System.Windows.Forms.FlowLayoutPanel();
			this.MidiCustomBpmCheck = new Otomad.VegasScript.OtomadHelper.V4.GroupedRadioButton();
			this.MidiCustomBpmBox = new Otomad.VegasScript.OtomadHelper.V4.NumericUpDownWithUnit();
			this.tableLayoutPanel12 = new System.Windows.Forms.TableLayoutPanel();
			this.MidiBeatLbl = new System.Windows.Forms.Label();
			this.MidiBeatTxt = new System.Windows.Forms.Label();
			this.RestrictLengthFlow = new System.Windows.Forms.FlowLayoutPanel();
			this.UnrestrictLengthRadio = new Otomad.VegasScript.OtomadHelper.V4.GroupedRadioButton();
			this.RestrictMaxLengthRadio = new Otomad.VegasScript.OtomadHelper.V4.GroupedRadioButton();
			this.RestrictFixedLengthRadio = new Otomad.VegasScript.OtomadHelper.V4.GroupedRadioButton();
			this.RestrictLengthBox = new Otomad.VegasScript.OtomadHelper.V4.TimecodeBox();
			this.SourceConfigGroup = new System.Windows.Forms.GroupBox();
			this.tableLayoutPanel3 = new System.Windows.Forms.TableLayoutPanel();
			this.ChooseSourceLbl = new System.Windows.Forms.Label();
			this.tableLayoutPanel4 = new System.Windows.Forms.TableLayoutPanel();
			this.ChooseSourceCombo = new System.Windows.Forms.ComboBox();
			this.ChooseSourceBtn = new System.Windows.Forms.Button();
			this.flowLayoutPanel1 = new System.Windows.Forms.FlowLayoutPanel();
			this.SourceStartTimeLbl = new System.Windows.Forms.Label();
			this.SourceEndTimeLbl = new System.Windows.Forms.Label();
			this.GenerateAtLbl = new System.Windows.Forms.Label();
			this.flowLayoutPanel9 = new System.Windows.Forms.FlowLayoutPanel();
			this.GenerateAtBeginRadio = new Otomad.VegasScript.OtomadHelper.V4.GroupedRadioButton();
			this.GenerateAtCursorRadio = new Otomad.VegasScript.OtomadHelper.V4.GroupedRadioButton();
			this.flowLayoutPanel11 = new System.Windows.Forms.FlowLayoutPanel();
			this.GenerateAtCustomRadio = new Otomad.VegasScript.OtomadHelper.V4.GroupedRadioButton();
			this.GenerateAtCustomText = new System.Windows.Forms.TextBox();
			this.flowLayoutPanel5 = new System.Windows.Forms.FlowLayoutPanel();
			this.BelowTopAdjustmentTrackCheck = new System.Windows.Forms.CheckBox();
			this.RemoveSourceTrackEventsCheck = new Otomad.VegasScript.OtomadHelper.V4.RememberedCheckBox();
			this.SelectAllGeneratedEventsCheck = new System.Windows.Forms.CheckBox();
			this.AudioTab = new System.Windows.Forms.TabPage();
			this.AudioParamsGroup = new System.Windows.Forms.GroupBox();
			this.AudioParamsTable = new System.Windows.Forms.TableLayoutPanel();
			this.AudioFadeOutTimeTxt = new System.Windows.Forms.TextBox();
			this.AudioFadeInLbl = new System.Windows.Forms.Label();
			this.AudioFadeInBox = new Otomad.VegasScript.OtomadHelper.V4.IntegerTrackWithBox();
			this.AudioFadeInCurveCombo = new System.Windows.Forms.ComboBox();
			this.AudioFadeOutLbl = new System.Windows.Forms.Label();
			this.AudioFadeOutBox = new Otomad.VegasScript.OtomadHelper.V4.IntegerTrackWithBox();
			this.AudioFadeOutCurveCombo = new System.Windows.Forms.ComboBox();
			this.AudioFadeInTimeTxt = new System.Windows.Forms.TextBox();
			this.tableLayoutPanel20 = new System.Windows.Forms.TableLayoutPanel();
			this.AudioFadeSetAsPercentRadio = new System.Windows.Forms.RadioButton();
			this.AudioFadeSetAsTimecodeRadio = new System.Windows.Forms.RadioButton();
			this.AudioTuneGroup = new System.Windows.Forms.GroupBox();
			this.AudioTuneTablePanel = new System.Windows.Forms.TableLayoutPanel();
			this.AudioTuneMethodLbl = new System.Windows.Forms.Label();
			this.AudioStretchAttrLbl = new System.Windows.Forms.Label();
			this.AudioLockAttrLbl = new System.Windows.Forms.Label();
			this.flowLayoutPanel10 = new System.Windows.Forms.FlowLayoutPanel();
			this.AudioReserveFormantCheck = new System.Windows.Forms.CheckBox();
			this.AudioBasePitchLbl = new System.Windows.Forms.Label();
			this.flowLayoutPanel6 = new System.Windows.Forms.FlowLayoutPanel();
			this.AudioMainKeyCombo = new System.Windows.Forms.ComboBox();
			this.AudioMainOctaveCombo = new System.Windows.Forms.ComboBox();
			this.AudioPreviewLbl = new System.Windows.Forms.Label();
			this.tableLayoutPanel17 = new System.Windows.Forms.TableLayoutPanel();
			this.PreviewAudioBtn = new System.Windows.Forms.Button();
			this.AudioPreviewAttrLbl = new System.Windows.Forms.Label();
			this.AudioPreviewAttrLayoutPanel = new System.Windows.Forms.FlowLayoutPanel();
			this.PreviewBeepEngineCombo = new System.Windows.Forms.ComboBox();
			this.PreviewBeepWaveFormCombo = new System.Windows.Forms.ComboBox();
			this.AudioVelocityGroup = new System.Windows.Forms.GroupBox();
			this.tableLayoutPanel13 = new System.Windows.Forms.TableLayoutPanel();
			this.AudioGainTildeLbl = new System.Windows.Forms.Label();
			this.AudioVelocityTildeLbl = new System.Windows.Forms.Label();
			this.AudioGainMoreBox = new Otomad.VegasScript.OtomadHelper.V4.NumericUpDownWithUnit();
			this.AudioGainLessBox = new Otomad.VegasScript.OtomadHelper.V4.NumericUpDownWithUnit();
			this.AudioVelocityMoreBox = new Otomad.VegasScript.OtomadHelper.V4.NumericUpDownWithUnit();
			this.AudioVelocityLessBox = new Otomad.VegasScript.OtomadHelper.V4.NumericUpDownWithUnit();
			this.AudioGainLbl = new System.Windows.Forms.Label();
			this.AudioVelocityLbl = new System.Windows.Forms.Label();
			this.AudioVelocityCheck = new System.Windows.Forms.CheckBox();
			this.AudioPreferredTrackPanel = new System.Windows.Forms.TableLayoutPanel();
			this.AudioPreferredTrackLbl = new System.Windows.Forms.Label();
			this.AudioPreferredTrackCombo = new System.Windows.Forms.ComboBox();
			this.AudioComboPanel = new System.Windows.Forms.FlowLayoutPanel();
			this.AudioScratchLbl = new System.Windows.Forms.Label();
			this.AudioScratchCombo = new System.Windows.Forms.ComboBox();
			this.AudioLegatoLbl = new System.Windows.Forms.Label();
			this.AudioLegatoCombo = new System.Windows.Forms.ComboBox();
			this.AudioTogglePanel = new System.Windows.Forms.FlowLayoutPanel();
			this.AudioConfigCheck = new System.Windows.Forms.CheckBox();
			this.AudioLoopCheck = new System.Windows.Forms.CheckBox();
			this.AudioNormalizeCheck = new System.Windows.Forms.CheckBox();
			this.AudioFreezeLastFrameCheck = new System.Windows.Forms.CheckBox();
			this.AudioMultitrackForChordsCheck = new System.Windows.Forms.CheckBox();
			this.CreateEventGroupInAudioCheck = new System.Windows.Forms.CheckBox();
			this.AudioAutoPanFlow = new System.Windows.Forms.FlowLayoutPanel();
			this.AudioAutoPanCheck = new System.Windows.Forms.CheckBox();
			this.AudioAutoPanCurveCombo = new System.Windows.Forms.ComboBox();
			this.VideoTab = new System.Windows.Forms.TabPage();
			this.VideoParamsGroup = new System.Windows.Forms.GroupBox();
			this.VideoParamsTable = new System.Windows.Forms.TableLayoutPanel();
			this.VideoFadeInTimeTxt = new System.Windows.Forms.TextBox();
			this.VideoFadeOutTimeTxt = new System.Windows.Forms.TextBox();
			this.VideoStartThresholdCurveCombo = new System.Windows.Forms.ComboBox();
			this.VideoStartSaturationCurveCombo = new System.Windows.Forms.ComboBox();
			this.VideoStartContrastCurveCombo = new System.Windows.Forms.ComboBox();
			this.VideoStartHueCurveCombo = new System.Windows.Forms.ComboBox();
			this.VideoEndContrastBox = new Otomad.VegasScript.OtomadHelper.V4.IntegerTrackWithBox();
			this.VideoEndSaturationBox = new Otomad.VegasScript.OtomadHelper.V4.IntegerTrackWithBox();
			this.VideoEndHueBox = new Otomad.VegasScript.OtomadHelper.V4.IntegerTrackWithBox();
			this.VideoEndThresholdBox = new Otomad.VegasScript.OtomadHelper.V4.IntegerTrackWithBox();
			this.VideoStartContrastBox = new Otomad.VegasScript.OtomadHelper.V4.IntegerTrackWithBox();
			this.VideoStartSaturationBox = new Otomad.VegasScript.OtomadHelper.V4.IntegerTrackWithBox();
			this.VideoStartThresholdBox = new Otomad.VegasScript.OtomadHelper.V4.IntegerTrackWithBox();
			this.VideoStartHueBox = new Otomad.VegasScript.OtomadHelper.V4.IntegerTrackWithBox();
			this.VideoStartThresholdLbl = new System.Windows.Forms.Label();
			this.VideoEndThresholdLbl = new System.Windows.Forms.Label();
			this.VideoEndSaturationLbl = new System.Windows.Forms.Label();
			this.VideoEndContrastLbl = new System.Windows.Forms.Label();
			this.VideoStartContrastLbl = new System.Windows.Forms.Label();
			this.VideoStartHueLbl = new System.Windows.Forms.Label();
			this.VideoStartSaturationLbl = new System.Windows.Forms.Label();
			this.VideoEndHueLbl = new System.Windows.Forms.Label();
			this.VideoFadeInLbl = new System.Windows.Forms.Label();
			this.VideoFadeInBox = new Otomad.VegasScript.OtomadHelper.V4.IntegerTrackWithBox();
			this.VideoFadeInCurveCombo = new System.Windows.Forms.ComboBox();
			this.VideoFadeOutLbl = new System.Windows.Forms.Label();
			this.VideoFadeOutBox = new Otomad.VegasScript.OtomadHelper.V4.IntegerTrackWithBox();
			this.VideoFadeOutCurveCombo = new System.Windows.Forms.ComboBox();
			this.VideoGlowLbl = new System.Windows.Forms.Label();
			this.VideoGlowBox = new Otomad.VegasScript.OtomadHelper.V4.IntegerTrackWithBox();
			this.VideoGlowCurveCombo = new System.Windows.Forms.ComboBox();
			this.VideoGlowBrightLbl = new System.Windows.Forms.Label();
			this.VideoGlowBrightBox = new Otomad.VegasScript.OtomadHelper.V4.IntegerTrackWithBox();
			this.VideoStartSizeLbl = new System.Windows.Forms.Label();
			this.VideoStartSizeBox = new Otomad.VegasScript.OtomadHelper.V4.IntegerTrackWithBox();
			this.VideoStartSizeCurveCombo = new System.Windows.Forms.ComboBox();
			this.VideoEndSizeLbl = new System.Windows.Forms.Label();
			this.VideoEndSizeBox = new Otomad.VegasScript.OtomadHelper.V4.IntegerTrackWithBox();
			this.VideoStartRotationLbl = new System.Windows.Forms.Label();
			this.VideoStartRotationBox = new Otomad.VegasScript.OtomadHelper.V4.IntegerTrackWithBox();
			this.VideoEndRotationLbl = new System.Windows.Forms.Label();
			this.VideoEndRotationBox = new Otomad.VegasScript.OtomadHelper.V4.IntegerTrackWithBox();
			this.VideoStartHorizontalTransLbl = new System.Windows.Forms.Label();
			this.VideoStartHorizontalTransBox = new Otomad.VegasScript.OtomadHelper.V4.IntegerTrackWithBox();
			this.VideoEndHorizontalTransLbl = new System.Windows.Forms.Label();
			this.VideoEndHorizontalTransBox = new Otomad.VegasScript.OtomadHelper.V4.IntegerTrackWithBox();
			this.VideoStartVerticalTransLbl = new System.Windows.Forms.Label();
			this.VideoStartVerticalTransBox = new Otomad.VegasScript.OtomadHelper.V4.IntegerTrackWithBox();
			this.VideoEndVerticalTransLbl = new System.Windows.Forms.Label();
			this.VideoEndVerticalTransBox = new Otomad.VegasScript.OtomadHelper.V4.IntegerTrackWithBox();
			this.tableLayoutPanel9 = new System.Windows.Forms.TableLayoutPanel();
			this.VideoFadeSetAsTimecodeRadio = new System.Windows.Forms.RadioButton();
			this.VideoFadeSetAsPercentRadio = new System.Windows.Forms.RadioButton();
			this.VideoParamsPresetsBtn = new System.Windows.Forms.Button();
			this.VideoEffectsGroup = new System.Windows.Forms.GroupBox();
			this.tableLayoutPanel8 = new System.Windows.Forms.TableLayoutPanel();
			this.VideoEffectLbl = new System.Windows.Forms.Label();
			this.VideoEffectInitialValueLbl = new System.Windows.Forms.Label();
			this.VideoEffectCombo = new System.Windows.Forms.ComboBox();
			this.VideoEffectInitialValueCombo = new System.Windows.Forms.ComboBox();
			this.VisualEffectAdvancedBtn = new System.Windows.Forms.Button();
			this.VideoVelocityGroup = new System.Windows.Forms.GroupBox();
			this.tableLayoutPanel18 = new System.Windows.Forms.TableLayoutPanel();
			this.VideoGainTildeLbl = new System.Windows.Forms.Label();
			this.VideoVelocityTildeLbl = new System.Windows.Forms.Label();
			this.VideoGainMoreBox = new Otomad.VegasScript.OtomadHelper.V4.NumericUpDownWithUnit();
			this.VideoGainLessBox = new Otomad.VegasScript.OtomadHelper.V4.NumericUpDownWithUnit();
			this.VideoVelocityMoreBox = new Otomad.VegasScript.OtomadHelper.V4.NumericUpDownWithUnit();
			this.VideoVelocityLessBox = new Otomad.VegasScript.OtomadHelper.V4.NumericUpDownWithUnit();
			this.VideoGainLbl = new System.Windows.Forms.Label();
			this.VideoVelocityLbl = new System.Windows.Forms.Label();
			this.VideoVelocityCheck = new System.Windows.Forms.CheckBox();
			this.VideoPreferredTrackPanel = new System.Windows.Forms.TableLayoutPanel();
			this.VideoPreferredTrackLbl = new System.Windows.Forms.Label();
			this.VideoPreferredTrackCombo = new System.Windows.Forms.ComboBox();
			this.VideoComboPanel = new System.Windows.Forms.FlowLayoutPanel();
			this.VideoScratchLbl = new System.Windows.Forms.Label();
			this.VideoScratchCombo = new System.Windows.Forms.ComboBox();
			this.VideoLegatoLbl = new System.Windows.Forms.Label();
			this.VideoLegatoCombo = new System.Windows.Forms.ComboBox();
			this.VideoTogglePanel = new System.Windows.Forms.FlowLayoutPanel();
			this.VideoConfigCheck = new System.Windows.Forms.CheckBox();
			this.VideoLoopCheck = new System.Windows.Forms.CheckBox();
			this.VideoFreezeFirstFrameCheck = new System.Windows.Forms.CheckBox();
			this.VideoFreezeLastFrameCheck = new System.Windows.Forms.CheckBox();
			this.VideoMultitrackForChordsCheck = new Otomad.VegasScript.OtomadHelper.V4.RememberedCheckBox();
			this.CreateEventGroupInVideoCheck = new System.Windows.Forms.CheckBox();
			this.VideoGlissandoFlow = new System.Windows.Forms.FlowLayoutPanel();
			this.VideoGlissandoCheck = new Otomad.VegasScript.OtomadHelper.V4.RememberedCheckBox();
			this.VideoGlissandoBox = new System.Windows.Forms.NumericUpDown();
			this.SheetTab = new System.Windows.Forms.TabPage();
			this.StaffClefParamsGroup = new System.Windows.Forms.GroupBox();
			this.tableLayoutPanel2 = new System.Windows.Forms.TableLayoutPanel();
			this.StaffGenerateClefCheck = new System.Windows.Forms.CheckBox();
			this.StaffClefColorBtn = new Otomad.VegasScript.OtomadHelper.V4.ColorButton();
			this.StaffClefColorLbl = new System.Windows.Forms.Label();
			this.StaffClefScaleBox = new Otomad.VegasScript.OtomadHelper.V4.NumericUpDownWithUnit();
			this.StaffClefScaleLbl = new System.Windows.Forms.Label();
			this.StaffLinesParamsGroup = new System.Windows.Forms.GroupBox();
			this.tableLayoutPanel7 = new System.Windows.Forms.TableLayoutPanel();
			this.StaffGenerateLinesCheck = new System.Windows.Forms.CheckBox();
			this.StaffLineColorBtn = new Otomad.VegasScript.OtomadHelper.V4.ColorButton();
			this.StaffLineColorLbl = new System.Windows.Forms.Label();
			this.StaffLineThicknessLbl = new System.Windows.Forms.Label();
			this.StaffNotesParamsGroup = new System.Windows.Forms.GroupBox();
			this.tableLayoutPanel10 = new System.Windows.Forms.TableLayoutPanel();
			this.StaffSurfacePaddingRightLbl = new System.Windows.Forms.Label();
			this.StaffClefLbl = new System.Windows.Forms.Label();
			this.StaffClefCombo = new System.Windows.Forms.ComboBox();
			this.StaffLineSpacingLbl = new System.Windows.Forms.Label();
			this.StaffSurfacePaddingLeftLbl = new System.Windows.Forms.Label();
			this.StaffSurfacePositionLbl = new System.Windows.Forms.Label();
			this.StaffNotesShiftLbl = new System.Windows.Forms.Label();
			this.StaffNotesShiftBox = new Otomad.VegasScript.OtomadHelper.V4.NumericUpDownWithUnit();
			this.flowLayoutPanel4 = new System.Windows.Forms.FlowLayoutPanel();
			this.flowLayoutPanel8 = new System.Windows.Forms.FlowLayoutPanel();
			this.StaffVisualizerConfigCheck = new System.Windows.Forms.CheckBox();
			this.SheetConfigInfoLabel = new System.Windows.Forms.Label();
			this.SonarTab = new System.Windows.Forms.TabPage();
			this.tableLayoutPanel11 = new System.Windows.Forms.TableLayoutPanel();
			this.SonarSwitchesFlow = new System.Windows.Forms.FlowLayoutPanel();
			this.SonarConfigCheck = new Otomad.VegasScript.OtomadHelper.V4.RememberedCheckBox();
			this.SeparateDrumsCheck = new System.Windows.Forms.CheckBox();
			this.DifferenceCompositeModeCheck = new System.Windows.Forms.CheckBox();
			this.flowLayoutPanel15 = new System.Windows.Forms.FlowLayoutPanel();
			this.TrackShadowCheck = new System.Windows.Forms.CheckBox();
			this.TrackShadowColorBtn = new Otomad.VegasScript.OtomadHelper.V4.ColorButton();
			this.SonarList = new System.Windows.Forms.ListView();
			this.SonarNameHeader = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
			this.SonarShapeHeader = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
			this.SonarDurationHeader = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
			this.SonarButtonsTable = new System.Windows.Forms.TableLayoutPanel();
			this.SonarAddBtn = new System.Windows.Forms.Button();
			this.SonarMoveDownBtn = new System.Windows.Forms.Button();
			this.SonarMoveUpBtn = new System.Windows.Forms.Button();
			this.SonarDeleteBtn = new System.Windows.Forms.Button();
			this.SonarResetBtn = new System.Windows.Forms.Button();
			this.SonarParamsGroup = new System.Windows.Forms.GroupBox();
			this.SonarParamsPanel = new System.Windows.Forms.Panel();
			this.tableLayoutPanel15 = new System.Windows.Forms.TableLayoutPanel();
			this.SonarFadeOutCurveCombo = new System.Windows.Forms.ComboBox();
			this.SonarFadeOutCurveLbl = new System.Windows.Forms.Label();
			this.SonarFadeInCurveCombo = new System.Windows.Forms.ComboBox();
			this.SonarFadeInCurveLbl = new System.Windows.Forms.Label();
			this.SonarFadeOutBox = new Otomad.VegasScript.OtomadHelper.V4.NumericUpDownWithUnit();
			this.SonarFadeOutLbl = new System.Windows.Forms.Label();
			this.SonarFadeInBox = new Otomad.VegasScript.OtomadHelper.V4.NumericUpDownWithUnit();
			this.SonarFadeInLbl = new System.Windows.Forms.Label();
			this.SonarRotation2Box = new Otomad.VegasScript.OtomadHelper.V4.NumericUpDownWithUnit();
			this.SonarRotation2Lbl = new System.Windows.Forms.Label();
			this.SonarRotationBox = new Otomad.VegasScript.OtomadHelper.V4.NumericUpDownWithUnit();
			this.SonarRotationLbl = new System.Windows.Forms.Label();
			this.SonarYPreOffset2Box = new Otomad.VegasScript.OtomadHelper.V4.NumericUpDownWithUnit();
			this.SonarYPreOffset2Lbl = new System.Windows.Forms.Label();
			this.SonarXPreOffset2Box = new Otomad.VegasScript.OtomadHelper.V4.NumericUpDownWithUnit();
			this.SonarXPreOffset2Lbl = new System.Windows.Forms.Label();
			this.SonarYPreOffsetBox = new Otomad.VegasScript.OtomadHelper.V4.NumericUpDownWithUnit();
			this.SonarYPreOffsetLbl = new System.Windows.Forms.Label();
			this.SonarXPreOffsetBox = new Otomad.VegasScript.OtomadHelper.V4.NumericUpDownWithUnit();
			this.SonarXPreOffsetLbl = new System.Windows.Forms.Label();
			this.SonarYOffset2Box = new Otomad.VegasScript.OtomadHelper.V4.NumericUpDownWithUnit();
			this.SonarYOffset2Lbl = new System.Windows.Forms.Label();
			this.SonarXOffset2Box = new Otomad.VegasScript.OtomadHelper.V4.NumericUpDownWithUnit();
			this.SonarXOffset2Lbl = new System.Windows.Forms.Label();
			this.SonarYOffsetBox = new Otomad.VegasScript.OtomadHelper.V4.NumericUpDownWithUnit();
			this.SonarYOffsetLbl = new System.Windows.Forms.Label();
			this.SonarXOffsetBox = new Otomad.VegasScript.OtomadHelper.V4.NumericUpDownWithUnit();
			this.SonarXOffsetLbl = new System.Windows.Forms.Label();
			this.SonarYPosBox = new Otomad.VegasScript.OtomadHelper.V4.NumericUpDownWithUnit();
			this.SonarYPosLbl = new System.Windows.Forms.Label();
			this.SonarXPosBox = new Otomad.VegasScript.OtomadHelper.V4.NumericUpDownWithUnit();
			this.SonarXPosLbl = new System.Windows.Forms.Label();
			this.SonarEndSizeBox = new Otomad.VegasScript.OtomadHelper.V4.NumericUpDownWithUnit();
			this.SonarEndSizeLbl = new System.Windows.Forms.Label();
			this.SonarEndBorderBox = new Otomad.VegasScript.OtomadHelper.V4.NumericUpDownWithUnit();
			this.SonarEndBorderLbl = new System.Windows.Forms.Label();
			this.SonarSizeBox = new Otomad.VegasScript.OtomadHelper.V4.NumericUpDownWithUnit();
			this.SonarSizeLbl = new System.Windows.Forms.Label();
			this.SonarBorderBox = new Otomad.VegasScript.OtomadHelper.V4.NumericUpDownWithUnit();
			this.SonarBorderLbl = new System.Windows.Forms.Label();
			this.SonarCurveCombo = new System.Windows.Forms.ComboBox();
			this.SonarCurveLbl = new System.Windows.Forms.Label();
			this.SonarDurationTxt = new System.Windows.Forms.TextBox();
			this.SonarDurationLbl = new System.Windows.Forms.Label();
			this.SonarColorBtn = new Otomad.VegasScript.OtomadHelper.V4.ColorButton();
			this.SonarColorLbl = new System.Windows.Forms.Label();
			this.SonarShapeCombo = new System.Windows.Forms.ComboBox();
			this.SonarShapeLbl = new System.Windows.Forms.Label();
			this.SonarDrumSoundCombo = new System.Windows.Forms.ComboBox();
			this.SonarDrumSoundLbl = new System.Windows.Forms.Label();
			this.YtpTab = new System.Windows.Forms.TabPage();
			this.YtpParamsGroup = new System.Windows.Forms.GroupBox();
			this.tableLayoutPanel16 = new System.Windows.Forms.TableLayoutPanel();
			this.YtpMinLenLbl = new System.Windows.Forms.Label();
			this.YtpClipsCountLbl = new System.Windows.Forms.Label();
			this.YtpClipsCountBox = new Otomad.VegasScript.OtomadHelper.V4.NumericUpDownWithUnit();
			this.YtpMaxLenLbl = new System.Windows.Forms.Label();
			this.YtpEffectsGroup = new System.Windows.Forms.GroupBox();
			this.YtpEnableAllEffectsCheck = new System.Windows.Forms.CheckBox();
			this.YtpEffectsCheckList = new System.Windows.Forms.CheckedListBox();
			this.YtpSelectInfo = new System.Windows.Forms.Label();
			this.YtpLbl = new System.Windows.Forms.Label();
			this.MoshTab = new System.Windows.Forms.TabPage();
			this.DatamoshTable = new System.Windows.Forms.TableLayoutPanel();
			this.CloseAfterOpenMoshCheck = new System.Windows.Forms.CheckBox();
			this.DatamoshClipsFolderGroup = new System.Windows.Forms.GroupBox();
			this.tableLayoutPanel21 = new System.Windows.Forms.TableLayoutPanel();
			this.DatamoshClipsFolderInfo = new System.Windows.Forms.Label();
			this.DatamoshClipsFolderTxt = new System.Windows.Forms.TextBox();
			this.DatamoshClipsFolderButton = new System.Windows.Forms.Button();
			this.DatamoshClipsFolderOpenButton = new System.Windows.Forms.Button();
			this.DatamoshBtn = new Otomad.VegasScript.OtomadHelper.V4.CommandLinkButton();
			this.DatamixBtn = new Otomad.VegasScript.OtomadHelper.V4.CommandLinkButton();
			this.LayeringBtn = new Otomad.VegasScript.OtomadHelper.V4.CommandLinkButton();
			this.RenderingBtn = new Otomad.VegasScript.OtomadHelper.V4.CommandLinkButton();
			this.ScrambleBtn = new Otomad.VegasScript.OtomadHelper.V4.CommandLinkButton();
			this.AutomatorBtn = new Otomad.VegasScript.OtomadHelper.V4.CommandLinkButton();
			this.StutterBtn = new Otomad.VegasScript.OtomadHelper.V4.CommandLinkButton();
			this.CameraShakeBtn = new Otomad.VegasScript.OtomadHelper.V4.CommandLinkButton();
			this.DatamoshNotInstalledTable = new System.Windows.Forms.TableLayoutPanel();
			this.DatamoshNotInstalledInfo = new System.Windows.Forms.Label();
			this.DownloadDatamoshLink = new System.Windows.Forms.LinkLabel();
			this.DatamoshInfoLbl = new System.Windows.Forms.Label();
			this.HelperTab = new System.Windows.Forms.TabPage();
			this.toolsTableLayoutPanel = new System.Windows.Forms.TableLayoutPanel();
			this.CloseAfterOpenHelperCheck = new System.Windows.Forms.CheckBox();
			this.AutoLayoutTracksGroup = new System.Windows.Forms.GroupBox();
			this.tableLayoutPanel14 = new System.Windows.Forms.TableLayoutPanel();
			this.AutoLayoutTracksLbl = new System.Windows.Forms.Label();
			this.AutoLayoutTracksSelectInfo = new System.Windows.Forms.Label();
			this.AutoLayoutTracksButtons = new System.Windows.Forms.TableLayoutPanel();
			this.GradientTracksBtn = new System.Windows.Forms.Button();
			this.AutoLayoutTracksBox3dBtn = new System.Windows.Forms.Button();
			this.AutoLayoutTracksGridBtn = new System.Windows.Forms.Button();
			this.AutoLayoutTracksClearButtons = new System.Windows.Forms.TableLayoutPanel();
			this.TrackLegatoBtn = new System.Windows.Forms.Button();
			this.ClearTrackMotionBtn = new System.Windows.Forms.Button();
			this.ClearTrackEffectBtn = new System.Windows.Forms.Button();
			this.QuickSelectIntervalBtn = new Otomad.VegasScript.OtomadHelper.V4.CommandLinkButton();
			this.QuickNormalizeBtn = new Otomad.VegasScript.OtomadHelper.V4.CommandLinkButton();
			this.ReplaceClipsBtn = new Otomad.VegasScript.OtomadHelper.V4.CommandLinkButton();
			this.ChangeTuneMethodBtn = new Otomad.VegasScript.OtomadHelper.V4.CommandLinkButton();
			this.BatchSubtitleGenerationBtn = new Otomad.VegasScript.OtomadHelper.V4.CommandLinkButton();
			this.FindClipsBtn = new Otomad.VegasScript.OtomadHelper.V4.CommandLinkButton();
			this.ApplyVisualEffectBtn = new Otomad.VegasScript.OtomadHelper.V4.CommandLinkButton();
			this.ConvertMusicBeatsBtn = new Otomad.VegasScript.OtomadHelper.V4.CommandLinkButton();
			this.CustomFadeGainBtn = new Otomad.VegasScript.OtomadHelper.V4.CommandLinkButton();
			this.tableLayoutPanel19 = new System.Windows.Forms.TableLayoutPanel();
			this.HelperLbl = new System.Windows.Forms.Label();
			this.TrackLegatoMenu = new System.Windows.Forms.ContextMenuStrip(this.components);
			this.stackingTracksToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.stackingAllAfterTracksToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.stackingAllTracksTracksToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.limitStretchLegatoTracksToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.stretchLegatoTracksToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.lengthenLegatoToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.toolStripSeparator9 = new System.Windows.Forms.ToolStripSeparator();
			this.increaseSpacingToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.increaseSpacingAllTracksToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.toolStripSeparator10 = new System.Windows.Forms.ToolStripSeparator();
			this.effectToSelectedEventsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.includeEventsInGroupToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.reverseDirectionToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.trackLegatoSelectInfoToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.OverflowToolTip = new System.Windows.Forms.ToolTip(this.components);
			this.indonesianToolStripMenuItem = new Otomad.VegasScript.OtomadHelper.V4.ToolStripRadioButtonMenuItem();
			this.panel2 = new System.Windows.Forms.Panel();
			this.tableLayoutPanel1.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.MidiStartSecondBox)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.MidiEndSecondBox)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.SourceStartTimeText)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.SourceEndTimeText)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.PreviewBeepDurationBox)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.StaffLineThicknessBox)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.StaffSurfacePaddingRightBox)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.StaffLineSpacingBox)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.StaffSurfacePositionBox)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.StaffSurfacePaddingLeftBox)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.YtpMinLenBox)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.YtpMaxLenBox)).BeginInit();
			this.menu.SuspendLayout();
			this.panel1.SuspendLayout();
			this.Tabs.SuspendLayout();
			this.SourceTab.SuspendLayout();
			this.MidiConfigGroup.SuspendLayout();
			this.MidiConfigTablePanel.SuspendLayout();
			this.tableLayoutPanel5.SuspendLayout();
			this.QuickConfigMidiChannelsMenu.SuspendLayout();
			this.tableLayoutPanel6.SuspendLayout();
			this.flowLayoutPanel3.SuspendLayout();
			this.MidiBpmFlowPanel.SuspendLayout();
			this.MidiDynamicTempoFlow.SuspendLayout();
			this.flowLayoutPanel2.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.MidiCustomBpmBox)).BeginInit();
			this.tableLayoutPanel12.SuspendLayout();
			this.RestrictLengthFlow.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.RestrictLengthBox)).BeginInit();
			this.SourceConfigGroup.SuspendLayout();
			this.tableLayoutPanel3.SuspendLayout();
			this.tableLayoutPanel4.SuspendLayout();
			this.flowLayoutPanel1.SuspendLayout();
			this.flowLayoutPanel9.SuspendLayout();
			this.flowLayoutPanel11.SuspendLayout();
			this.flowLayoutPanel5.SuspendLayout();
			this.AudioTab.SuspendLayout();
			this.AudioParamsGroup.SuspendLayout();
			this.AudioParamsTable.SuspendLayout();
			this.tableLayoutPanel20.SuspendLayout();
			this.AudioTuneGroup.SuspendLayout();
			this.AudioTuneTablePanel.SuspendLayout();
			this.flowLayoutPanel10.SuspendLayout();
			this.flowLayoutPanel6.SuspendLayout();
			this.tableLayoutPanel17.SuspendLayout();
			this.AudioPreviewAttrLayoutPanel.SuspendLayout();
			this.AudioVelocityGroup.SuspendLayout();
			this.tableLayoutPanel13.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.AudioGainMoreBox)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.AudioGainLessBox)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.AudioVelocityMoreBox)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.AudioVelocityLessBox)).BeginInit();
			this.AudioPreferredTrackPanel.SuspendLayout();
			this.AudioComboPanel.SuspendLayout();
			this.AudioTogglePanel.SuspendLayout();
			this.AudioAutoPanFlow.SuspendLayout();
			this.VideoTab.SuspendLayout();
			this.VideoParamsGroup.SuspendLayout();
			this.VideoParamsTable.SuspendLayout();
			this.tableLayoutPanel9.SuspendLayout();
			this.VideoEffectsGroup.SuspendLayout();
			this.tableLayoutPanel8.SuspendLayout();
			this.VideoVelocityGroup.SuspendLayout();
			this.tableLayoutPanel18.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.VideoGainMoreBox)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.VideoGainLessBox)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.VideoVelocityMoreBox)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.VideoVelocityLessBox)).BeginInit();
			this.VideoPreferredTrackPanel.SuspendLayout();
			this.VideoComboPanel.SuspendLayout();
			this.VideoTogglePanel.SuspendLayout();
			this.VideoGlissandoFlow.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.VideoGlissandoBox)).BeginInit();
			this.SheetTab.SuspendLayout();
			this.StaffClefParamsGroup.SuspendLayout();
			this.tableLayoutPanel2.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.StaffClefScaleBox)).BeginInit();
			this.StaffLinesParamsGroup.SuspendLayout();
			this.tableLayoutPanel7.SuspendLayout();
			this.StaffNotesParamsGroup.SuspendLayout();
			this.tableLayoutPanel10.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.StaffNotesShiftBox)).BeginInit();
			this.flowLayoutPanel4.SuspendLayout();
			this.flowLayoutPanel8.SuspendLayout();
			this.SonarTab.SuspendLayout();
			this.tableLayoutPanel11.SuspendLayout();
			this.SonarSwitchesFlow.SuspendLayout();
			this.flowLayoutPanel15.SuspendLayout();
			this.SonarButtonsTable.SuspendLayout();
			this.SonarParamsGroup.SuspendLayout();
			this.SonarParamsPanel.SuspendLayout();
			this.tableLayoutPanel15.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.SonarFadeOutBox)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.SonarFadeInBox)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.SonarRotation2Box)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.SonarRotationBox)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.SonarYPreOffset2Box)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.SonarXPreOffset2Box)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.SonarYPreOffsetBox)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.SonarXPreOffsetBox)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.SonarYOffset2Box)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.SonarXOffset2Box)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.SonarYOffsetBox)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.SonarXOffsetBox)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.SonarYPosBox)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.SonarXPosBox)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.SonarEndSizeBox)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.SonarEndBorderBox)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.SonarSizeBox)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.SonarBorderBox)).BeginInit();
			this.YtpTab.SuspendLayout();
			this.YtpParamsGroup.SuspendLayout();
			this.tableLayoutPanel16.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.YtpClipsCountBox)).BeginInit();
			this.YtpEffectsGroup.SuspendLayout();
			this.MoshTab.SuspendLayout();
			this.DatamoshTable.SuspendLayout();
			this.DatamoshClipsFolderGroup.SuspendLayout();
			this.tableLayoutPanel21.SuspendLayout();
			this.DatamoshNotInstalledTable.SuspendLayout();
			this.HelperTab.SuspendLayout();
			this.toolsTableLayoutPanel.SuspendLayout();
			this.AutoLayoutTracksGroup.SuspendLayout();
			this.tableLayoutPanel14.SuspendLayout();
			this.AutoLayoutTracksButtons.SuspendLayout();
			this.AutoLayoutTracksClearButtons.SuspendLayout();
			this.tableLayoutPanel19.SuspendLayout();
			this.TrackLegatoMenu.SuspendLayout();
			this.panel2.SuspendLayout();
			this.SuspendLayout();
			//
			// tableLayoutPanel1
			//
			this.tableLayoutPanel1.AutoSize = true;
			this.tableLayoutPanel1.BackColor = System.Drawing.Color.Transparent;
			this.tableLayoutPanel1.ColumnCount = 5;
			this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel1.Controls.Add(this.UserHelpLink, 1, 0);
			this.tableLayoutPanel1.Controls.Add(this.AboutBtn, 2, 0);
			this.tableLayoutPanel1.Controls.Add(this.OkBtn, 3, 0);
			this.tableLayoutPanel1.Controls.Add(this.CancelBtn, 4, 0);
			this.tableLayoutPanel1.Dock = System.Windows.Forms.DockStyle.Bottom;
			this.tableLayoutPanel1.Location = new System.Drawing.Point(0, 689);
			this.tableLayoutPanel1.Margin = new System.Windows.Forms.Padding(4);
			this.tableLayoutPanel1.Name = "tableLayoutPanel1";
			this.tableLayoutPanel1.Padding = new System.Windows.Forms.Padding(5, 5, 5, 2);
			this.tableLayoutPanel1.RowCount = 1;
			this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel1.Size = new System.Drawing.Size(682, 50);
			this.tableLayoutPanel1.TabIndex = 0;
			//
			// UserHelpLink
			//
			this.UserHelpLink.AutoSize = true;
			this.UserHelpLink.Dock = System.Windows.Forms.DockStyle.Fill;
			this.UserHelpLink.LinkColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(95)))), ((int)(((byte)(184)))));
			this.UserHelpLink.Location = new System.Drawing.Point(271, 5);
			this.UserHelpLink.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.UserHelpLink.Name = "UserHelpLink";
			this.UserHelpLink.Size = new System.Drawing.Size(78, 43);
			this.UserHelpLink.TabIndex = 3;
			this.UserHelpLink.TabStop = true;
			this.UserHelpLink.Text = "使用说明...";
			this.UserHelpLink.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			this.UserHelpLink.Visible = false;
			this.UserHelpLink.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.UserHelpLink_LinkClicked);
			//
			// AboutBtn
			//
			this.AboutBtn.AutoSize = true;
			this.AboutBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AboutBtn.Location = new System.Drawing.Point(357, 9);
			this.AboutBtn.Margin = new System.Windows.Forms.Padding(4);
			this.AboutBtn.Name = "AboutBtn";
			this.AboutBtn.Size = new System.Drawing.Size(100, 35);
			this.AboutBtn.TabIndex = 2;
			this.AboutBtn.Text = "关于(&A)";
			this.AboutBtn.UseVisualStyleBackColor = true;
			this.AboutBtn.Click += new System.EventHandler(this.AboutBtn_Click);
			//
			// OkBtn
			//
			this.OkBtn.AutoSize = true;
			this.OkBtn.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.OkBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.OkBtn.Location = new System.Drawing.Point(465, 9);
			this.OkBtn.Margin = new System.Windows.Forms.Padding(4);
			this.OkBtn.Name = "OkBtn";
			this.OkBtn.Size = new System.Drawing.Size(100, 35);
			this.OkBtn.TabIndex = 0;
			this.OkBtn.Text = "完成(&O)";
			this.OkBtn.UseVisualStyleBackColor = true;
			this.OkBtn.Click += new System.EventHandler(this.OkBtn_Click);
			//
			// CancelBtn
			//
			this.CancelBtn.AutoSize = true;
			this.CancelBtn.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.CancelBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.CancelBtn.Location = new System.Drawing.Point(573, 9);
			this.CancelBtn.Margin = new System.Windows.Forms.Padding(4);
			this.CancelBtn.Name = "CancelBtn";
			this.CancelBtn.Size = new System.Drawing.Size(100, 35);
			this.CancelBtn.TabIndex = 1;
			this.CancelBtn.Text = "取消(&C)";
			this.CancelBtn.UseVisualStyleBackColor = true;
			this.CancelBtn.Click += new System.EventHandler(this.CancelBtn_Click);
			//
			// Balloon
			//
			this.Balloon.AutomaticDelay = 0;
			this.Balloon.AutoPopDelay = 60000;
			this.Balloon.InitialDelay = 0;
			this.Balloon.IsBalloon = true;
			this.Balloon.ReshowDelay = 0;
			this.Balloon.ShowAlways = true;
			this.Balloon.ToolTipIcon = System.Windows.Forms.ToolTipIcon.Info;
			this.Balloon.ToolTipTitle = "填写说明";
			//
			// AudioTuneMethodCombo
			//
			this.AudioTuneMethodCombo.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AudioTuneMethodCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.AudioTuneMethodCombo.FormattingEnabled = true;
			this.AudioTuneMethodCombo.Items.AddRange(new object[] {
			"不调音",
			"移调效果插件",
			"弹性音调更改",
			"古典音调更改",
			"无音阶调音"});
			this.AudioTuneMethodCombo.Location = new System.Drawing.Point(75, 2);
			this.AudioTuneMethodCombo.Margin = new System.Windows.Forms.Padding(2);
			this.AudioTuneMethodCombo.Name = "AudioTuneMethodCombo";
			this.AudioTuneMethodCombo.Size = new System.Drawing.Size(540, 28);
			this.AudioTuneMethodCombo.TabIndex = 2;
			this.Balloon.SetToolTip(this.AudioTuneMethodCombo, "“移调效果插件”表示使用“音频 FX”中的“移调”效果插件改变音调，需要配置预设。\r\n“弹性音调更改”表示使用“Élastique”拉伸方式改变音调，也就是键盘上" +
		" +、- 键直接改变音调，\r\n有音高范围限制。");
			this.AudioTuneMethodCombo.SelectedIndexChanged += new System.EventHandler(this.AudioTuneMethodCombo_SelectedIndexChanged);
			//
			// AudioLockStretchPitchCheck
			//
			this.AudioLockStretchPitchCheck.AutoSize = true;
			this.AudioLockStretchPitchCheck.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AudioLockStretchPitchCheck.Location = new System.Drawing.Point(2, 2);
			this.AudioLockStretchPitchCheck.Margin = new System.Windows.Forms.Padding(2);
			this.AudioLockStretchPitchCheck.MinimumSize = new System.Drawing.Size(0, 30);
			this.AudioLockStretchPitchCheck.Name = "AudioLockStretchPitchCheck";
			this.AudioLockStretchPitchCheck.Size = new System.Drawing.Size(136, 30);
			this.AudioLockStretchPitchCheck.TabIndex = 0;
			this.AudioLockStretchPitchCheck.Text = "锁定伸缩与音调";
			this.Balloon.SetToolTip(this.AudioLockStretchPitchCheck, "采用重采样方式，随着速度变化而改变音高。如果使用的是“弹性音调\r\n更改”方法，那么将会禁用拉伸音频功能。");
			this.AudioLockStretchPitchCheck.UseVisualStyleBackColor = true;
			//
			// PreviewTuneAudioCheck
			//
			this.PreviewTuneAudioCheck.AutoSize = true;
			this.PreviewTuneAudioCheck.Dock = System.Windows.Forms.DockStyle.Fill;
			this.PreviewTuneAudioCheck.Location = new System.Drawing.Point(332, 2);
			this.PreviewTuneAudioCheck.Margin = new System.Windows.Forms.Padding(6, 2, 2, 2);
			this.PreviewTuneAudioCheck.MinimumSize = new System.Drawing.Size(0, 30);
			this.PreviewTuneAudioCheck.Name = "PreviewTuneAudioCheck";
			this.PreviewTuneAudioCheck.Size = new System.Drawing.Size(166, 30);
			this.PreviewTuneAudioCheck.TabIndex = 7;
			this.PreviewTuneAudioCheck.Text = "使音频调整到主音高";
			this.Balloon.SetToolTip(this.PreviewTuneAudioCheck, "勾选后，预听音频时会将音频素材调整到主音高中央 C。\r\n否则，预听标准音高将会播放原始音高所设定的音高。");
			this.PreviewTuneAudioCheck.UseVisualStyleBackColor = true;
			//
			// StaffRelativeValueCheck
			//
			this.StaffRelativeValueCheck.AutoSize = true;
			this.StaffRelativeValueCheck.Checked = true;
			this.StaffRelativeValueCheck.CheckState = System.Windows.Forms.CheckState.Checked;
			this.StaffRelativeValueCheck.Dock = System.Windows.Forms.DockStyle.Fill;
			this.StaffRelativeValueCheck.Location = new System.Drawing.Point(2, 2);
			this.StaffRelativeValueCheck.Margin = new System.Windows.Forms.Padding(2);
			this.StaffRelativeValueCheck.Name = "StaffRelativeValueCheck";
			this.StaffRelativeValueCheck.Size = new System.Drawing.Size(106, 24);
			this.StaffRelativeValueCheck.TabIndex = 1;
			this.StaffRelativeValueCheck.Text = "使用相对值";
			this.Balloon.SetToolTip(this.StaffRelativeValueCheck, "勾选后，下方所填参数的像素单位将以相对于 1920 × 1080\r\n的尺寸进行定位；反之则以项目尺寸定位。\r\n");
			this.StaffRelativeValueCheck.UseVisualStyleBackColor = true;
			//
			// StaffLegacyMethodCheck
			//
			this.StaffLegacyMethodCheck.AutoSize = true;
			this.StaffLegacyMethodCheck.Dock = System.Windows.Forms.DockStyle.Fill;
			this.StaffLegacyMethodCheck.Location = new System.Drawing.Point(112, 2);
			this.StaffLegacyMethodCheck.Margin = new System.Windows.Forms.Padding(2);
			this.StaffLegacyMethodCheck.Name = "StaffLegacyMethodCheck";
			this.StaffLegacyMethodCheck.Size = new System.Drawing.Size(121, 24);
			this.StaffLegacyMethodCheck.TabIndex = 6;
			this.StaffLegacyMethodCheck.Text = "旧版定位方式";
			this.Balloon.SetToolTip(this.StaffLegacyMethodCheck, "将使用与旧版脚本五线谱可视化 v0.1 相同的定位方式。\r\n即音符和谱线的位置和形状由轨道运动定位。");
			this.StaffLegacyMethodCheck.UseVisualStyleBackColor = true;
			//
			// MidiStartSecondBox
			//
			this.MidiStartSecondBox.DoubleValue = 0D;
			this.MidiStartSecondBox.Enabled = false;
			this.MidiStartSecondBox.Location = new System.Drawing.Point(73, 2);
			this.MidiStartSecondBox.Margin = new System.Windows.Forms.Padding(2, 2, 12, 2);
			this.MidiStartSecondBox.Name = "MidiStartSecondBox";
			this.MidiStartSecondBox.Size = new System.Drawing.Size(163, 27);
			this.MidiStartSecondBox.TabIndex = 3;
			this.Balloon.SetToolTip(this.MidiStartSecondBox, "用于截取 MIDI 音乐的一部分。\r\n单位：秒。");
			this.MidiStartSecondBox.Leave += new System.EventHandler(this.TrimTime_ValueChanged);
			//
			// MidiEndSecondBox
			//
			this.MidiEndSecondBox.DoubleValue = 0D;
			this.MidiEndSecondBox.Enabled = false;
			this.MidiEndSecondBox.Location = new System.Drawing.Point(323, 2);
			this.MidiEndSecondBox.Margin = new System.Windows.Forms.Padding(2);
			this.MidiEndSecondBox.Name = "MidiEndSecondBox";
			this.MidiEndSecondBox.Size = new System.Drawing.Size(163, 27);
			this.MidiEndSecondBox.TabIndex = 4;
			this.Balloon.SetToolTip(this.MidiEndSecondBox, "此处填写需要读取 MIDI 文件的时间长度。\r\n注意如果填写的值过小，将截去多余时间部分的音符。\r\n如果此处填写的值比起始秒数小或相等，则始终表示持续到整个音乐时" +
		"长末尾。\r\n单位：秒。");
			this.MidiEndSecondBox.Leave += new System.EventHandler(this.TrimTime_ValueChanged);
			//
			// SourceStartTimeText
			//
			this.SourceStartTimeText.DoubleValue = 0D;
			this.SourceStartTimeText.Location = new System.Drawing.Point(73, 2);
			this.SourceStartTimeText.Margin = new System.Windows.Forms.Padding(2, 2, 12, 2);
			this.SourceStartTimeText.Name = "SourceStartTimeText";
			this.SourceStartTimeText.Size = new System.Drawing.Size(163, 27);
			this.SourceStartTimeText.TabIndex = 4;
			this.Balloon.SetToolTip(this.SourceStartTimeText, "此处填写媒体素材裁剪的开始时间。\r\n单位：秒。");
			this.SourceStartTimeText.Leave += new System.EventHandler(this.TrimTime_ValueChanged);
			//
			// SourceEndTimeText
			//
			this.SourceEndTimeText.DoubleValue = 0D;
			this.SourceEndTimeText.Location = new System.Drawing.Point(323, 2);
			this.SourceEndTimeText.Margin = new System.Windows.Forms.Padding(2);
			this.SourceEndTimeText.Name = "SourceEndTimeText";
			this.SourceEndTimeText.Size = new System.Drawing.Size(163, 27);
			this.SourceEndTimeText.TabIndex = 5;
			this.Balloon.SetToolTip(this.SourceEndTimeText, "注意如果此处填写的数值比入点秒数小或相等，则始终表示持续到素材时间末尾。\r\n单位：秒。");
			this.SourceEndTimeText.Leave += new System.EventHandler(this.TrimTime_ValueChanged);
			//
			// PreviewBeepDurationBox
			//
			this.PreviewBeepDurationBox.Constrain = new decimal(new int[] {
			500,
			0,
			0,
			0});
			this.PreviewBeepDurationBox.EnableDecimalPlaces = true;
			this.PreviewBeepDurationBox.Location = new System.Drawing.Point(220, 2);
			this.PreviewBeepDurationBox.Margin = new System.Windows.Forms.Padding(2);
			this.PreviewBeepDurationBox.Maximum = new decimal(new int[] {
			2000,
			0,
			0,
			0});
			this.PreviewBeepDurationBox.Minimum = new decimal(new int[] {
			1,
			0,
			0,
			0});
			this.PreviewBeepDurationBox.Name = "PreviewBeepDurationBox";
			this.PreviewBeepDurationBox.Size = new System.Drawing.Size(104, 27);
			this.PreviewBeepDurationBox.Suffix = "ms";
			this.PreviewBeepDurationBox.TabIndex = 5;
			this.Balloon.SetToolTip(this.PreviewBeepDurationBox, "预听标准音高所持续的时间。\r\n单位：毫秒。");
			this.PreviewBeepDurationBox.Value = new decimal(new int[] {
			500,
			0,
			0,
			0});
			//
			// StaffLineThicknessBox
			//
			this.StaffLineThicknessBox.Constrain = new decimal(new int[] {
			25,
			0,
			0,
			0});
			this.StaffLineThicknessBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.StaffLineThicknessBox.Enabled = false;
			this.StaffLineThicknessBox.EnableDecimalPlaces = true;
			this.StaffLineThicknessBox.Location = new System.Drawing.Point(75, 30);
			this.StaffLineThicknessBox.Margin = new System.Windows.Forms.Padding(2);
			this.StaffLineThicknessBox.Minimum = new decimal(new int[] {
			10,
			0,
			0,
			0});
			this.StaffLineThicknessBox.Name = "StaffLineThicknessBox";
			this.StaffLineThicknessBox.Size = new System.Drawing.Size(242, 27);
			this.StaffLineThicknessBox.Suffix = "%";
			this.StaffLineThicknessBox.TabIndex = 11;
			this.Balloon.SetToolTip(this.StaffLineThicknessBox, "生成五线谱的谱线时，五线谱谱线的粗细。当粗细值达到 100 % 后，谱线将会占满整个谱线间距。\r\n单位：百分比。");
			this.StaffLineThicknessBox.Value = new decimal(new int[] {
			25,
			0,
			0,
			0});
			//
			// StaffSurfacePaddingRightBox
			//
			this.StaffSurfacePaddingRightBox.Constrain = new decimal(new int[] {
			200,
			0,
			0,
			0});
			this.StaffSurfacePaddingRightBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.StaffSurfacePaddingRightBox.Enabled = false;
			this.StaffSurfacePaddingRightBox.EnableDecimalPlaces = true;
			this.StaffSurfacePaddingRightBox.Location = new System.Drawing.Point(394, 64);
			this.StaffSurfacePaddingRightBox.Margin = new System.Windows.Forms.Padding(2);
			this.StaffSurfacePaddingRightBox.Maximum = new decimal(new int[] {
			65536,
			0,
			0,
			0});
			this.StaffSurfacePaddingRightBox.Name = "StaffSurfacePaddingRightBox";
			this.StaffSurfacePaddingRightBox.Size = new System.Drawing.Size(242, 27);
			this.StaffSurfacePaddingRightBox.Suffix = "px";
			this.StaffSurfacePaddingRightBox.TabIndex = 9;
			this.Balloon.SetToolTip(this.StaffSurfacePaddingRightBox, "将在屏幕中间所填的宽度内显示音符，用于左右留白，给左侧的谱号留间距。\r\n单位：像素。");
			this.StaffSurfacePaddingRightBox.Value = new decimal(new int[] {
			200,
			0,
			0,
			0});
			//
			// StaffLineSpacingBox
			//
			this.StaffLineSpacingBox.Constrain = new decimal(new int[] {
			100,
			0,
			0,
			0});
			this.StaffLineSpacingBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.StaffLineSpacingBox.Enabled = false;
			this.StaffLineSpacingBox.EnableDecimalPlaces = true;
			this.StaffLineSpacingBox.Location = new System.Drawing.Point(394, 30);
			this.StaffLineSpacingBox.Margin = new System.Windows.Forms.Padding(2);
			this.StaffLineSpacingBox.Maximum = new decimal(new int[] {
			65536,
			0,
			0,
			0});
			this.StaffLineSpacingBox.Name = "StaffLineSpacingBox";
			this.StaffLineSpacingBox.Size = new System.Drawing.Size(242, 27);
			this.StaffLineSpacingBox.Suffix = "px";
			this.StaffLineSpacingBox.TabIndex = 7;
			this.Balloon.SetToolTip(this.StaffLineSpacingBox, "五线谱线与线之间的间距。\r\n单位：像素。");
			this.StaffLineSpacingBox.Value = new decimal(new int[] {
			100,
			0,
			0,
			0});
			//
			// StaffSurfacePositionBox
			//
			this.StaffSurfacePositionBox.Constrain = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.StaffSurfacePositionBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.StaffSurfacePositionBox.Enabled = false;
			this.StaffSurfacePositionBox.EnableDecimalPlaces = true;
			this.StaffSurfacePositionBox.Location = new System.Drawing.Point(75, 98);
			this.StaffSurfacePositionBox.Margin = new System.Windows.Forms.Padding(2);
			this.StaffSurfacePositionBox.Maximum = new decimal(new int[] {
			65536,
			0,
			0,
			0});
			this.StaffSurfacePositionBox.Minimum = new decimal(new int[] {
			65536,
			0,
			0,
			-2147483648});
			this.StaffSurfacePositionBox.Name = "StaffSurfacePositionBox";
			this.StaffSurfacePositionBox.Size = new System.Drawing.Size(242, 27);
			this.StaffSurfacePositionBox.Suffix = "px";
			this.StaffSurfacePositionBox.TabIndex = 10;
			this.Balloon.SetToolTip(this.StaffSurfacePositionBox, "五线谱中间第三根线到屏幕中心的距离，上正下负。\r\n单位：像素。");
			//
			// StaffSurfacePaddingLeftBox
			//
			this.StaffSurfacePaddingLeftBox.Constrain = new decimal(new int[] {
			500,
			0,
			0,
			0});
			this.StaffSurfacePaddingLeftBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.StaffSurfacePaddingLeftBox.Enabled = false;
			this.StaffSurfacePaddingLeftBox.EnableDecimalPlaces = true;
			this.StaffSurfacePaddingLeftBox.Location = new System.Drawing.Point(75, 64);
			this.StaffSurfacePaddingLeftBox.Margin = new System.Windows.Forms.Padding(2);
			this.StaffSurfacePaddingLeftBox.Maximum = new decimal(new int[] {
			65536,
			0,
			0,
			0});
			this.StaffSurfacePaddingLeftBox.Name = "StaffSurfacePaddingLeftBox";
			this.StaffSurfacePaddingLeftBox.Size = new System.Drawing.Size(242, 27);
			this.StaffSurfacePaddingLeftBox.Suffix = "px";
			this.StaffSurfacePaddingLeftBox.TabIndex = 8;
			this.Balloon.SetToolTip(this.StaffSurfacePaddingLeftBox, "将在屏幕中间所填的宽度内显示音符，用于左右留白，给左侧的谱号留间距。\r\n单位：像素。");
			this.StaffSurfacePaddingLeftBox.Value = new decimal(new int[] {
			500,
			0,
			0,
			0});
			//
			// YtpMinLenBox
			//
			this.YtpMinLenBox.Constrain = new decimal(new int[] {
			10,
			0,
			0,
			0});
			this.YtpMinLenBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.YtpMinLenBox.EnableDecimalPlaces = true;
			this.YtpMinLenBox.Location = new System.Drawing.Point(75, 2);
			this.YtpMinLenBox.Margin = new System.Windows.Forms.Padding(2);
			this.YtpMinLenBox.Maximum = new decimal(new int[] {
			30000,
			0,
			0,
			0});
			this.YtpMinLenBox.Minimum = new decimal(new int[] {
			10,
			0,
			0,
			0});
			this.YtpMinLenBox.Name = "YtpMinLenBox";
			this.YtpMinLenBox.Size = new System.Drawing.Size(242, 27);
			this.YtpMinLenBox.Suffix = "ms";
			this.YtpMinLenBox.TabIndex = 8;
			this.Balloon.SetToolTip(this.YtpMinLenBox, "指定单个轨道剪辑的最小长度。\r\n单位：毫秒。");
			this.YtpMinLenBox.Value = new decimal(new int[] {
			10,
			0,
			0,
			0});
			this.YtpMinLenBox.ValueChanged += new System.EventHandler(this.YtpLenBox_ValueChanged);
			//
			// YtpMaxLenBox
			//
			this.YtpMaxLenBox.Constrain = new decimal(new int[] {
			5000,
			0,
			0,
			0});
			this.YtpMaxLenBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.YtpMaxLenBox.EnableDecimalPlaces = true;
			this.YtpMaxLenBox.Location = new System.Drawing.Point(394, 2);
			this.YtpMaxLenBox.Margin = new System.Windows.Forms.Padding(2);
			this.YtpMaxLenBox.Maximum = new decimal(new int[] {
			30000,
			0,
			0,
			0});
			this.YtpMaxLenBox.Minimum = new decimal(new int[] {
			10,
			0,
			0,
			0});
			this.YtpMaxLenBox.Name = "YtpMaxLenBox";
			this.YtpMaxLenBox.Size = new System.Drawing.Size(242, 27);
			this.YtpMaxLenBox.Suffix = "ms";
			this.YtpMaxLenBox.TabIndex = 9;
			this.Balloon.SetToolTip(this.YtpMaxLenBox, "指定单个轨道剪辑的最大长度。\r\n单位：毫秒。");
			this.YtpMaxLenBox.Value = new decimal(new int[] {
			5000,
			0,
			0,
			0});
			this.YtpMaxLenBox.ValueChanged += new System.EventHandler(this.YtpLenBox_ValueChanged);
			//
			// StaffFreezeAtNoteOffCheck
			//
			this.StaffFreezeAtNoteOffCheck.AutoSize = true;
			this.StaffFreezeAtNoteOffCheck.Checked = true;
			this.StaffFreezeAtNoteOffCheck.CheckState = System.Windows.Forms.CheckState.Checked;
			this.StaffFreezeAtNoteOffCheck.Dock = System.Windows.Forms.DockStyle.Fill;
			this.StaffFreezeAtNoteOffCheck.Location = new System.Drawing.Point(237, 2);
			this.StaffFreezeAtNoteOffCheck.Margin = new System.Windows.Forms.Padding(2);
			this.StaffFreezeAtNoteOffCheck.Name = "StaffFreezeAtNoteOffCheck";
			this.StaffFreezeAtNoteOffCheck.Size = new System.Drawing.Size(151, 24);
			this.StaffFreezeAtNoteOffCheck.TabIndex = 7;
			this.StaffFreezeAtNoteOffCheck.Text = "定格在音符结尾处";
			this.StaffFreezeAtNoteOffCheck.UseVisualStyleBackColor = true;
			//
			// PreviewBasePitchBtn
			//
			this.PreviewBasePitchBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.PreviewBasePitchBtn.Location = new System.Drawing.Point(2, 2);
			this.PreviewBasePitchBtn.Margin = new System.Windows.Forms.Padding(2);
			this.PreviewBasePitchBtn.Name = "PreviewBasePitchBtn";
			this.PreviewBasePitchBtn.Size = new System.Drawing.Size(269, 31);
			this.PreviewBasePitchBtn.TabIndex = 1;
			this.PreviewBasePitchBtn.Text = "预听标准音高(&B)";
			this.PreviewBasePitchBtn.UseVisualStyleBackColor = true;
			this.PreviewBasePitchBtn.Click += new System.EventHandler(this.PreviewBasePitchBtn_MouseDown);
			//
			// AudioStretchAttrCombo
			//
			this.AudioStretchAttrCombo.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AudioStretchAttrCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.AudioStretchAttrCombo.FormattingEnabled = true;
			this.AudioStretchAttrCombo.Location = new System.Drawing.Point(75, 36);
			this.AudioStretchAttrCombo.Margin = new System.Windows.Forms.Padding(2);
			this.AudioStretchAttrCombo.Name = "AudioStretchAttrCombo";
			this.AudioStretchAttrCombo.Size = new System.Drawing.Size(540, 28);
			this.AudioStretchAttrCombo.TabIndex = 3;
			//
			// menu
			//
			this.menu.BackColor = System.Drawing.Color.Transparent;
			this.menu.ImageScalingSize = new System.Drawing.Size(20, 20);
			this.menu.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
			this.fileMenuItem,
			this.helpToolStripMenuItem,
			this.languageToolStripMenuItem,
			this.latestVersionToolStripMenuItemInBar});
			this.menu.Location = new System.Drawing.Point(0, 0);
			this.menu.Name = "menu";
			this.menu.Padding = new System.Windows.Forms.Padding(6, 2, 0, 4);
			this.menu.Size = new System.Drawing.Size(682, 30);
			this.menu.TabIndex = 2;
			this.menu.Text = "menuStrip1";
			//
			// fileMenuItem
			//
			this.fileMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
			this.saveConfigToolStripMenuItem,
			this.resetConfigToolStripMenuItem,
			this.formSizeToolStripMenuItem,
			this.toolStripSeparator6,
			this.pitchShiftPresetMenuItem,
			this.toolStripSeparator1,
			this.enableLegacyProgressDialogToolStripMenuItem,
			this.toolStripSeparator12,
			this.exportConfigToolStripMenuItem,
			this.importConfigToolStripMenuItem,
			this.toolStripSeparator11,
			this.exitDiscardingChangesToolStripMenuItem,
			this.exitToolStripMenuItem});
			this.fileMenuItem.Name = "fileMenuItem";
			this.fileMenuItem.Size = new System.Drawing.Size(70, 24);
			this.fileMenuItem.Text = "文件(&F)";
			//
			// saveConfigToolStripMenuItem
			//
			this.saveConfigToolStripMenuItem.Name = "saveConfigToolStripMenuItem";
			this.saveConfigToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.S)));
			this.saveConfigToolStripMenuItem.Size = new System.Drawing.Size(271, 26);
			this.saveConfigToolStripMenuItem.Text = "保存用户配置(&S)";
			//
			// resetConfigToolStripMenuItem
			//
			this.resetConfigToolStripMenuItem.Name = "resetConfigToolStripMenuItem";
			this.resetConfigToolStripMenuItem.Size = new System.Drawing.Size(271, 26);
			this.resetConfigToolStripMenuItem.Text = "重置用户配置(&R)";
			this.resetConfigToolStripMenuItem.Click += new System.EventHandler(this.resetConfigToolStripMenuItem_Click);
			//
			// formSizeToolStripMenuItem
			//
			this.formSizeToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
			this.rememberFormSizeToolStripMenuItem,
			this.toolStripSeparator2,
			this.rememberOnceFormSizeToolStripMenuItem,
			this.restoreDefaultFormSizeToolStripMenuItem});
			this.formSizeToolStripMenuItem.Name = "formSizeToolStripMenuItem";
			this.formSizeToolStripMenuItem.Size = new System.Drawing.Size(271, 26);
			this.formSizeToolStripMenuItem.Text = "窗体大小(&F)";
			//
			// rememberFormSizeToolStripMenuItem
			//
			this.rememberFormSizeToolStripMenuItem.CheckOnClick = true;
			this.rememberFormSizeToolStripMenuItem.Name = "rememberFormSizeToolStripMenuItem";
			this.rememberFormSizeToolStripMenuItem.Size = new System.Drawing.Size(242, 26);
			this.rememberFormSizeToolStripMenuItem.Text = "记住窗体大小";
			//
			// toolStripSeparator2
			//
			this.toolStripSeparator2.Name = "toolStripSeparator2";
			this.toolStripSeparator2.Size = new System.Drawing.Size(239, 6);
			//
			// rememberOnceFormSizeToolStripMenuItem
			//
			this.rememberOnceFormSizeToolStripMenuItem.Name = "rememberOnceFormSizeToolStripMenuItem";
			this.rememberOnceFormSizeToolStripMenuItem.Size = new System.Drawing.Size(242, 26);
			this.rememberOnceFormSizeToolStripMenuItem.Text = "记住一次窗体大小";
			this.rememberOnceFormSizeToolStripMenuItem.Click += new System.EventHandler(this.RememberOnceFormSizeToolStripMenuItem_Click);
			//
			// restoreDefaultFormSizeToolStripMenuItem
			//
			this.restoreDefaultFormSizeToolStripMenuItem.Name = "restoreDefaultFormSizeToolStripMenuItem";
			this.restoreDefaultFormSizeToolStripMenuItem.Size = new System.Drawing.Size(242, 26);
			this.restoreDefaultFormSizeToolStripMenuItem.Text = "下次恢复默认窗体大小";
			this.restoreDefaultFormSizeToolStripMenuItem.Click += new System.EventHandler(this.RestoreDefaultFormSizeToolStripMenuItem_Click);
			//
			// toolStripSeparator6
			//
			this.toolStripSeparator6.Name = "toolStripSeparator6";
			this.toolStripSeparator6.Size = new System.Drawing.Size(268, 6);
			//
			// pitchShiftPresetMenuItem
			//
			this.pitchShiftPresetMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
			this.loadPresetsToolStripMenuItem,
			this.unloadPresetsToolStripMenuItem});
			this.pitchShiftPresetMenuItem.Name = "pitchShiftPresetMenuItem";
			this.pitchShiftPresetMenuItem.Size = new System.Drawing.Size(271, 26);
			this.pitchShiftPresetMenuItem.Text = "移调插件预设(&P)";
			//
			// loadPresetsToolStripMenuItem
			//
			this.loadPresetsToolStripMenuItem.Name = "loadPresetsToolStripMenuItem";
			this.loadPresetsToolStripMenuItem.Size = new System.Drawing.Size(181, 26);
			this.loadPresetsToolStripMenuItem.Text = "加载预设(&L)...";
			this.loadPresetsToolStripMenuItem.Click += new System.EventHandler(this.LoadPresetsToolStripMenuItem_Click);
			//
			// unloadPresetsToolStripMenuItem
			//
			this.unloadPresetsToolStripMenuItem.Name = "unloadPresetsToolStripMenuItem";
			this.unloadPresetsToolStripMenuItem.Size = new System.Drawing.Size(181, 26);
			this.unloadPresetsToolStripMenuItem.Text = "卸载预设(&U)...";
			this.unloadPresetsToolStripMenuItem.Click += new System.EventHandler(this.LoadPresetsToolStripMenuItem_Click);
			//
			// toolStripSeparator1
			//
			this.toolStripSeparator1.Name = "toolStripSeparator1";
			this.toolStripSeparator1.Size = new System.Drawing.Size(268, 6);
			//
			// enableLegacyProgressDialogToolStripMenuItem
			//
			this.enableLegacyProgressDialogToolStripMenuItem.CheckOnClick = true;
			this.enableLegacyProgressDialogToolStripMenuItem.Name = "enableLegacyProgressDialogToolStripMenuItem";
			this.enableLegacyProgressDialogToolStripMenuItem.Size = new System.Drawing.Size(271, 26);
			this.enableLegacyProgressDialogToolStripMenuItem.Text = "启用旧版进度对话框";
			//
			// toolStripSeparator12
			//
			this.toolStripSeparator12.Name = "toolStripSeparator12";
			this.toolStripSeparator12.Size = new System.Drawing.Size(268, 6);
			//
			// exportConfigToolStripMenuItem
			//
			this.exportConfigToolStripMenuItem.Name = "exportConfigToolStripMenuItem";
			this.exportConfigToolStripMenuItem.Size = new System.Drawing.Size(271, 26);
			this.exportConfigToolStripMenuItem.Text = "导出配置(&E)";
			this.exportConfigToolStripMenuItem.Click += new System.EventHandler(this.ExportConfigToolStripMenuItem_Click);
			//
			// importConfigToolStripMenuItem
			//
			this.importConfigToolStripMenuItem.Name = "importConfigToolStripMenuItem";
			this.importConfigToolStripMenuItem.Size = new System.Drawing.Size(271, 26);
			this.importConfigToolStripMenuItem.Text = "导入配置(&I)";
			this.importConfigToolStripMenuItem.Click += new System.EventHandler(this.ImportConfigToolStripMenuItem_Click);
			//
			// toolStripSeparator11
			//
			this.toolStripSeparator11.Name = "toolStripSeparator11";
			this.toolStripSeparator11.Size = new System.Drawing.Size(268, 6);
			//
			// exitDiscardingChangesToolStripMenuItem
			//
			this.exitDiscardingChangesToolStripMenuItem.Name = "exitDiscardingChangesToolStripMenuItem";
			this.exitDiscardingChangesToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.D)));
			this.exitDiscardingChangesToolStripMenuItem.Size = new System.Drawing.Size(271, 26);
			this.exitDiscardingChangesToolStripMenuItem.Text = "放弃更改并退出(&D)";
			this.exitDiscardingChangesToolStripMenuItem.Click += new System.EventHandler(this.exitDiscardingChangesToolStripMenuItem_Click);
			//
			// exitToolStripMenuItem
			//
			this.exitToolStripMenuItem.Name = "exitToolStripMenuItem";
			this.exitToolStripMenuItem.ShortcutKeyDisplayString = "Esc";
			this.exitToolStripMenuItem.Size = new System.Drawing.Size(271, 26);
			this.exitToolStripMenuItem.Text = "退出(&X)";
			//
			// helpToolStripMenuItem
			//
			this.helpToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
			this.versionToolStripMenuItem,
			this.aboutToolStripMenuItem,
			this.whyOkBtnIsDisabledToolStripMenuItem,
			this.experimentalThemeToolStripMenuItem,
			this.toolStripSeparator7,
			this.checkUpdateToolStripMenuItem,
			this.checkUpdateOnStartupToolStripMenuItem,
			this.latestVersionLinkToolStripMenuItem,
			this.toolStripSeparator8,
			this.githubToolStripMenuItem,
			this.roadmapToolStripMenuItem,
			this.updateLogsToolStripMenuItem,
			this.githubIssuesToolStripMenuItem,
			this.toolStripSeparator3,
			this.englishDocumentationsToolStripMenuItem,
			this.chineseDocumentationsToolStripMenuItem});
			this.helpToolStripMenuItem.Name = "helpToolStripMenuItem";
			this.helpToolStripMenuItem.Size = new System.Drawing.Size(74, 24);
			this.helpToolStripMenuItem.Text = "帮助(&H)";
			//
			// versionToolStripMenuItem
			//
			this.versionToolStripMenuItem.Enabled = false;
			this.versionToolStripMenuItem.Name = "versionToolStripMenuItem";
			this.versionToolStripMenuItem.Size = new System.Drawing.Size(272, 26);
			this.versionToolStripMenuItem.Text = "版本号";
			//
			// aboutToolStripMenuItem
			//
			this.aboutToolStripMenuItem.Name = "aboutToolStripMenuItem";
			this.aboutToolStripMenuItem.ShortcutKeyDisplayString = "Alt+A";
			this.aboutToolStripMenuItem.Size = new System.Drawing.Size(272, 26);
			this.aboutToolStripMenuItem.Text = "关于(&A)";
			//
			// whyOkBtnIsDisabledToolStripMenuItem
			//
			this.whyOkBtnIsDisabledToolStripMenuItem.Name = "whyOkBtnIsDisabledToolStripMenuItem";
			this.whyOkBtnIsDisabledToolStripMenuItem.Size = new System.Drawing.Size(272, 26);
			this.whyOkBtnIsDisabledToolStripMenuItem.Text = "为什么无法点击完成按钮？";
			this.whyOkBtnIsDisabledToolStripMenuItem.Visible = false;
			this.whyOkBtnIsDisabledToolStripMenuItem.Click += new System.EventHandler(this.WhyOkBtnIsDisabledToolStripMenuItem_Click);
			//
			// experimentalThemeToolStripMenuItem
			//
			this.experimentalThemeToolStripMenuItem.Name = "experimentalThemeToolStripMenuItem";
			this.experimentalThemeToolStripMenuItem.Size = new System.Drawing.Size(272, 26);
			this.experimentalThemeToolStripMenuItem.Text = "实验性主题";
			this.experimentalThemeToolStripMenuItem.Visible = false;
			this.experimentalThemeToolStripMenuItem.Click += new System.EventHandler(this.ExperimentalThemeToolStripMenuItem_Click);
			//
			// toolStripSeparator7
			//
			this.toolStripSeparator7.Name = "toolStripSeparator7";
			this.toolStripSeparator7.Size = new System.Drawing.Size(269, 6);
			//
			// checkUpdateToolStripMenuItem
			//
			this.checkUpdateToolStripMenuItem.Name = "checkUpdateToolStripMenuItem";
			this.checkUpdateToolStripMenuItem.Size = new System.Drawing.Size(272, 26);
			this.checkUpdateToolStripMenuItem.Text = "检查更新(&U)...";
			this.checkUpdateToolStripMenuItem.Click += new System.EventHandler(this.CheckUpdateToolStripMenuItem_Click);
			//
			// checkUpdateOnStartupToolStripMenuItem
			//
			this.checkUpdateOnStartupToolStripMenuItem.Checked = true;
			this.checkUpdateOnStartupToolStripMenuItem.CheckOnClick = true;
			this.checkUpdateOnStartupToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
			this.checkUpdateOnStartupToolStripMenuItem.Name = "checkUpdateOnStartupToolStripMenuItem";
			this.checkUpdateOnStartupToolStripMenuItem.Size = new System.Drawing.Size(272, 26);
			this.checkUpdateOnStartupToolStripMenuItem.Text = "启动时自动检查更新";
			//
			// latestVersionLinkToolStripMenuItem
			//
			this.latestVersionLinkToolStripMenuItem.Name = "latestVersionLinkToolStripMenuItem";
			this.latestVersionLinkToolStripMenuItem.Size = new System.Drawing.Size(272, 26);
			this.latestVersionLinkToolStripMenuItem.Text = "最新版本链接";
			//
			// toolStripSeparator8
			//
			this.toolStripSeparator8.Name = "toolStripSeparator8";
			this.toolStripSeparator8.Size = new System.Drawing.Size(269, 6);
			//
			// githubToolStripMenuItem
			//
			this.githubToolStripMenuItem.Name = "githubToolStripMenuItem";
			this.githubToolStripMenuItem.Size = new System.Drawing.Size(272, 26);
			this.githubToolStripMenuItem.Text = "仓库地址";
			//
			// roadmapToolStripMenuItem
			//
			this.roadmapToolStripMenuItem.Name = "roadmapToolStripMenuItem";
			this.roadmapToolStripMenuItem.Size = new System.Drawing.Size(272, 26);
			this.roadmapToolStripMenuItem.Text = "路线图";
			//
			// updateLogsToolStripMenuItem
			//
			this.updateLogsToolStripMenuItem.Name = "updateLogsToolStripMenuItem";
			this.updateLogsToolStripMenuItem.Size = new System.Drawing.Size(272, 26);
			this.updateLogsToolStripMenuItem.Text = "更新日志";
			this.updateLogsToolStripMenuItem.Visible = false;
			//
			// githubIssuesToolStripMenuItem
			//
			this.githubIssuesToolStripMenuItem.Name = "githubIssuesToolStripMenuItem";
			this.githubIssuesToolStripMenuItem.Size = new System.Drawing.Size(272, 26);
			this.githubIssuesToolStripMenuItem.Text = "反馈问题或建议";
			//
			// toolStripSeparator3
			//
			this.toolStripSeparator3.Name = "toolStripSeparator3";
			this.toolStripSeparator3.Size = new System.Drawing.Size(269, 6);
			//
			// englishDocumentationsToolStripMenuItem
			//
			this.englishDocumentationsToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
			this.documentationEnglishToolStripMenuItem,
			this.tutorialVideoEnglishToolStripMenuItem});
			this.englishDocumentationsToolStripMenuItem.Name = "englishDocumentationsToolStripMenuItem";
			this.englishDocumentationsToolStripMenuItem.Size = new System.Drawing.Size(272, 26);
			this.englishDocumentationsToolStripMenuItem.Text = "英语说明文档";
			//
			// documentationEnglishToolStripMenuItem
			//
			this.documentationEnglishToolStripMenuItem.Name = "documentationEnglishToolStripMenuItem";
			this.documentationEnglishToolStripMenuItem.Size = new System.Drawing.Size(152, 26);
			this.documentationEnglishToolStripMenuItem.Text = "说明文档";
			//
			// tutorialVideoEnglishToolStripMenuItem
			//
			this.tutorialVideoEnglishToolStripMenuItem.Name = "tutorialVideoEnglishToolStripMenuItem";
			this.tutorialVideoEnglishToolStripMenuItem.Size = new System.Drawing.Size(152, 26);
			this.tutorialVideoEnglishToolStripMenuItem.Text = "教程视频";
			//
			// chineseDocumentationsToolStripMenuItem
			//
			this.chineseDocumentationsToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
			this.troubleShootingToolStripMenuItem,
			this.toolStripSeparator4,
			this.releaseNotesV4_9_25_0ToolStripMenuItem,
			this.releaseNotesV4_10_17_0ToolStripMenuItem,
			this.toolStripSeparator5,
			this.documentationV0_1ToolStripMenuItem,
			this.staffVisualizerV0_1ToolStripMenuItem,
			this.tutorialVideoV0_1ToolStripMenuItem});
			this.chineseDocumentationsToolStripMenuItem.Name = "chineseDocumentationsToolStripMenuItem";
			this.chineseDocumentationsToolStripMenuItem.Size = new System.Drawing.Size(272, 26);
			this.chineseDocumentationsToolStripMenuItem.Text = "中文说明文档";
			//
			// troubleShootingToolStripMenuItem
			//
			this.troubleShootingToolStripMenuItem.Name = "troubleShootingToolStripMenuItem";
			this.troubleShootingToolStripMenuItem.Size = new System.Drawing.Size(252, 26);
			this.troubleShootingToolStripMenuItem.Text = "疑难解答";
			//
			// toolStripSeparator4
			//
			this.toolStripSeparator4.Name = "toolStripSeparator4";
			this.toolStripSeparator4.Size = new System.Drawing.Size(249, 6);
			//
			// releaseNotesV4_9_25_0ToolStripMenuItem
			//
			this.releaseNotesV4_9_25_0ToolStripMenuItem.Name = "releaseNotesV4_9_25_0ToolStripMenuItem";
			this.releaseNotesV4_9_25_0ToolStripMenuItem.Size = new System.Drawing.Size(252, 26);
			this.releaseNotesV4_9_25_0ToolStripMenuItem.Text = "发行说明 (v4.9.25.0)";
			//
			// releaseNotesV4_10_17_0ToolStripMenuItem
			//
			this.releaseNotesV4_10_17_0ToolStripMenuItem.Name = "releaseNotesV4_10_17_0ToolStripMenuItem";
			this.releaseNotesV4_10_17_0ToolStripMenuItem.Size = new System.Drawing.Size(252, 26);
			this.releaseNotesV4_10_17_0ToolStripMenuItem.Text = "发行说明 (v4.10.17.0)";
			//
			// toolStripSeparator5
			//
			this.toolStripSeparator5.Name = "toolStripSeparator5";
			this.toolStripSeparator5.Size = new System.Drawing.Size(249, 6);
			//
			// documentationV0_1ToolStripMenuItem
			//
			this.documentationV0_1ToolStripMenuItem.Name = "documentationV0_1ToolStripMenuItem";
			this.documentationV0_1ToolStripMenuItem.Size = new System.Drawing.Size(252, 26);
			this.documentationV0_1ToolStripMenuItem.Text = "说明文档 (v0.1)";
			//
			// staffVisualizerV0_1ToolStripMenuItem
			//
			this.staffVisualizerV0_1ToolStripMenuItem.Name = "staffVisualizerV0_1ToolStripMenuItem";
			this.staffVisualizerV0_1ToolStripMenuItem.Size = new System.Drawing.Size(252, 26);
			this.staffVisualizerV0_1ToolStripMenuItem.Text = "五线谱可视化文档 (v0.1)";
			//
			// tutorialVideoV0_1ToolStripMenuItem
			//
			this.tutorialVideoV0_1ToolStripMenuItem.Name = "tutorialVideoV0_1ToolStripMenuItem";
			this.tutorialVideoV0_1ToolStripMenuItem.Size = new System.Drawing.Size(252, 26);
			this.tutorialVideoV0_1ToolStripMenuItem.Text = "教程视频 (v0.1)";
			//
			// languageToolStripMenuItem
			//
			this.languageToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
			this.chineseToolStripMenuItem,
			this.tchineseToolStripMenuItem,
			this.englishToolStripMenuItem,
			this.japaneseToolStripMenuItem,
			this.russianToolStripMenuItem,
			this.vietnameseToolStripMenuItem,
			this.indonesianToolStripMenuItem});
			this.languageToolStripMenuItem.Name = "languageToolStripMenuItem";
			this.languageToolStripMenuItem.Size = new System.Drawing.Size(88, 24);
			this.languageToolStripMenuItem.Text = "&Language";
			//
			// chineseToolStripMenuItem
			//
			this.chineseToolStripMenuItem.Checked = true;
			this.chineseToolStripMenuItem.CheckOnClick = true;
			this.chineseToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
			this.chineseToolStripMenuItem.Font = new System.Drawing.Font("Microsoft YaHei UI", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(134)));
			this.chineseToolStripMenuItem.Name = "chineseToolStripMenuItem";
			this.chineseToolStripMenuItem.Size = new System.Drawing.Size(224, 26);
			this.chineseToolStripMenuItem.Text = "简体中文";
			//
			// tchineseToolStripMenuItem
			//
			this.tchineseToolStripMenuItem.CheckOnClick = true;
			this.tchineseToolStripMenuItem.Font = new System.Drawing.Font("Microsoft JhengHei UI", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
			this.tchineseToolStripMenuItem.Name = "tchineseToolStripMenuItem";
			this.tchineseToolStripMenuItem.Size = new System.Drawing.Size(224, 26);
			this.tchineseToolStripMenuItem.Text = "繁體中文";
			//
			// englishToolStripMenuItem
			//
			this.englishToolStripMenuItem.CheckOnClick = true;
			this.englishToolStripMenuItem.Font = new System.Drawing.Font("Segoe UI", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
			this.englishToolStripMenuItem.Name = "englishToolStripMenuItem";
			this.englishToolStripMenuItem.Size = new System.Drawing.Size(224, 26);
			this.englishToolStripMenuItem.Text = "English";
			//
			// japaneseToolStripMenuItem
			//
			this.japaneseToolStripMenuItem.CheckOnClick = true;
			this.japaneseToolStripMenuItem.Font = new System.Drawing.Font("Yu Gothic UI", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
			this.japaneseToolStripMenuItem.Name = "japaneseToolStripMenuItem";
			this.japaneseToolStripMenuItem.Size = new System.Drawing.Size(224, 26);
			this.japaneseToolStripMenuItem.Text = "日本語";
			//
			// russianToolStripMenuItem
			//
			this.russianToolStripMenuItem.CheckOnClick = true;
			this.russianToolStripMenuItem.Font = new System.Drawing.Font("Segoe UI", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
			this.russianToolStripMenuItem.Name = "russianToolStripMenuItem";
			this.russianToolStripMenuItem.Size = new System.Drawing.Size(224, 26);
			this.russianToolStripMenuItem.Text = "Русский";
			//
			// vietnameseToolStripMenuItem
			//
			this.vietnameseToolStripMenuItem.CheckOnClick = true;
			this.vietnameseToolStripMenuItem.Font = new System.Drawing.Font("Segoe UI", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
			this.vietnameseToolStripMenuItem.Name = "vietnameseToolStripMenuItem";
			this.vietnameseToolStripMenuItem.Size = new System.Drawing.Size(224, 26);
			this.vietnameseToolStripMenuItem.Text = "Tiếng Việt";
			//
			// latestVersionToolStripMenuItemInBar
			//
			this.latestVersionToolStripMenuItemInBar.ForeColor = System.Drawing.Color.Red;
			this.latestVersionToolStripMenuItemInBar.Name = "latestVersionToolStripMenuItemInBar";
			this.latestVersionToolStripMenuItemInBar.Size = new System.Drawing.Size(113, 24);
			this.latestVersionToolStripMenuItemInBar.Text = "下载最新版本";
			this.latestVersionToolStripMenuItemInBar.Visible = false;
			//
			// panel1
			//
			this.panel1.BackColor = System.Drawing.Color.Transparent;
			this.panel1.Controls.Add(this.Tabs);
			this.panel1.Dock = System.Windows.Forms.DockStyle.Fill;
			this.panel1.Location = new System.Drawing.Point(0, 30);
			this.panel1.Margin = new System.Windows.Forms.Padding(2);
			this.panel1.Name = "panel1";
			this.panel1.Padding = new System.Windows.Forms.Padding(8, 0, 8, 0);
			this.panel1.Size = new System.Drawing.Size(682, 659);
			this.panel1.TabIndex = 3;
			//
			// Tabs
			//
			this.Tabs.Controls.Add(this.SourceTab);
			this.Tabs.Controls.Add(this.AudioTab);
			this.Tabs.Controls.Add(this.VideoTab);
			this.Tabs.Controls.Add(this.SheetTab);
			this.Tabs.Controls.Add(this.SonarTab);
			this.Tabs.Controls.Add(this.YtpTab);
			this.Tabs.Controls.Add(this.MoshTab);
			this.Tabs.Controls.Add(this.HelperTab);
			this.Tabs.Dock = System.Windows.Forms.DockStyle.Fill;
			this.Tabs.Location = new System.Drawing.Point(8, 0);
			this.Tabs.Margin = new System.Windows.Forms.Padding(2, 4, 2, 4);
			this.Tabs.Multiline = true;
			this.Tabs.Name = "Tabs";
			this.Tabs.SelectedIndex = 0;
			this.Tabs.Size = new System.Drawing.Size(666, 659);
			this.Tabs.TabIndex = 2;
			//
			// SourceTab
			//
			this.SourceTab.AutoScroll = true;
			this.SourceTab.BackColor = System.Drawing.Color.Transparent;
			this.SourceTab.Controls.Add(this.panel2);
			this.SourceTab.Controls.Add(this.WarningInfoLabel);
			this.SourceTab.Location = new System.Drawing.Point(4, 29);
			this.SourceTab.Margin = new System.Windows.Forms.Padding(0);
			this.SourceTab.Name = "SourceTab";
			this.SourceTab.Size = new System.Drawing.Size(658, 626);
			this.SourceTab.TabIndex = 0;
			this.SourceTab.Text = "媒体";
			this.SourceTab.UseVisualStyleBackColor = true;
			//
			// WarningInfoLabel
			//
			this.WarningInfoLabel.AutoSize = true;
			this.WarningInfoLabel.Dock = System.Windows.Forms.DockStyle.Bottom;
			this.WarningInfoLabel.Font = new System.Drawing.Font("微软雅黑", 11F, System.Drawing.FontStyle.Bold);
			this.WarningInfoLabel.ForeColor = System.Drawing.Color.Red;
			this.WarningInfoLabel.Location = new System.Drawing.Point(0, 595);
			this.WarningInfoLabel.Margin = new System.Windows.Forms.Padding(0);
			this.WarningInfoLabel.MaximumSize = new System.Drawing.Size(540, 0);
			this.WarningInfoLabel.Name = "WarningInfoLabel";
			this.WarningInfoLabel.Padding = new System.Windows.Forms.Padding(5, 5, 5, 0);
			this.WarningInfoLabel.Size = new System.Drawing.Size(10, 31);
			this.WarningInfoLabel.TabIndex = 3;
			//
			// MidiConfigGroup
			//
			this.MidiConfigGroup.AutoSize = true;
			this.MidiConfigGroup.Controls.Add(this.MidiConfigTablePanel);
			this.MidiConfigGroup.Dock = System.Windows.Forms.DockStyle.Top;
			this.MidiConfigGroup.Location = new System.Drawing.Point(5, 256);
			this.MidiConfigGroup.Margin = new System.Windows.Forms.Padding(2);
			this.MidiConfigGroup.Name = "MidiConfigGroup";
			this.MidiConfigGroup.Padding = new System.Windows.Forms.Padding(5);
			this.MidiConfigGroup.Size = new System.Drawing.Size(648, 336);
			this.MidiConfigGroup.TabIndex = 2;
			this.MidiConfigGroup.TabStop = false;
			this.MidiConfigGroup.Text = "MIDI 属性";
			this.MidiConfigGroup.DragDrop += new System.Windows.Forms.DragEventHandler(this.OnDragDrop);
			this.MidiConfigGroup.DragEnter += new System.Windows.Forms.DragEventHandler(this.OnDragEnter);
			this.MidiConfigGroup.DragLeave += new System.EventHandler(this.OnDragLeave);
			//
			// MidiConfigTablePanel
			//
			this.MidiConfigTablePanel.AutoSize = true;
			this.MidiConfigTablePanel.ColumnCount = 1;
			this.MidiConfigTablePanel.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.MidiConfigTablePanel.Controls.Add(this.RestrictLengthLbl, 0, 8);
			this.MidiConfigTablePanel.Controls.Add(this.tableLayoutPanel5, 0, 3);
			this.MidiConfigTablePanel.Controls.Add(this.ChooseMidiLbl, 0, 0);
			this.MidiConfigTablePanel.Controls.Add(this.tableLayoutPanel6, 0, 1);
			this.MidiConfigTablePanel.Controls.Add(this.MidiChannelLbl, 0, 2);
			this.MidiConfigTablePanel.Controls.Add(this.flowLayoutPanel3, 0, 5);
			this.MidiConfigTablePanel.Controls.Add(this.MidiBpmLbl, 0, 6);
			this.MidiConfigTablePanel.Controls.Add(this.MidiBpmFlowPanel, 0, 7);
			this.MidiConfigTablePanel.Controls.Add(this.tableLayoutPanel12, 0, 4);
			this.MidiConfigTablePanel.Controls.Add(this.RestrictLengthFlow, 0, 9);
			this.MidiConfigTablePanel.Dock = System.Windows.Forms.DockStyle.Fill;
			this.MidiConfigTablePanel.Location = new System.Drawing.Point(5, 25);
			this.MidiConfigTablePanel.Margin = new System.Windows.Forms.Padding(2);
			this.MidiConfigTablePanel.Name = "MidiConfigTablePanel";
			this.MidiConfigTablePanel.RowCount = 10;
			this.MidiConfigTablePanel.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.MidiConfigTablePanel.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.MidiConfigTablePanel.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.MidiConfigTablePanel.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.MidiConfigTablePanel.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.MidiConfigTablePanel.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.MidiConfigTablePanel.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.MidiConfigTablePanel.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.MidiConfigTablePanel.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.MidiConfigTablePanel.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.MidiConfigTablePanel.Size = new System.Drawing.Size(638, 306);
			this.MidiConfigTablePanel.TabIndex = 1;
			//
			// RestrictLengthLbl
			//
			this.RestrictLengthLbl.AutoSize = true;
			this.RestrictLengthLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.RestrictLengthLbl.Location = new System.Drawing.Point(2, 250);
			this.RestrictLengthLbl.Margin = new System.Windows.Forms.Padding(2, 5, 2, 0);
			this.RestrictLengthLbl.Name = "RestrictLengthLbl";
			this.RestrictLengthLbl.Size = new System.Drawing.Size(634, 20);
			this.RestrictLengthLbl.TabIndex = 14;
			this.RestrictLengthLbl.Text = "限制音符长度";
			this.RestrictLengthLbl.TextAlign = System.Drawing.ContentAlignment.BottomLeft;
			//
			// tableLayoutPanel5
			//
			this.tableLayoutPanel5.AutoSize = true;
			this.tableLayoutPanel5.ColumnCount = 2;
			this.tableLayoutPanel5.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel5.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel5.Controls.Add(this.MidiChannelCombo, 0, 0);
			this.tableLayoutPanel5.Controls.Add(this.MidiChannelAdvancedBtn, 1, 0);
			this.tableLayoutPanel5.Dock = System.Windows.Forms.DockStyle.Top;
			this.tableLayoutPanel5.Location = new System.Drawing.Point(0, 78);
			this.tableLayoutPanel5.Margin = new System.Windows.Forms.Padding(0);
			this.tableLayoutPanel5.Name = "tableLayoutPanel5";
			this.tableLayoutPanel5.RowCount = 1;
			this.tableLayoutPanel5.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel5.Size = new System.Drawing.Size(638, 32);
			this.tableLayoutPanel5.TabIndex = 4;
			//
			// MidiChannelCombo
			//
			this.MidiChannelCombo.Dock = System.Windows.Forms.DockStyle.Fill;
			this.MidiChannelCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.MidiChannelCombo.Enabled = false;
			this.MidiChannelCombo.FormattingEnabled = true;
			this.MidiChannelCombo.Location = new System.Drawing.Point(2, 2);
			this.MidiChannelCombo.Margin = new System.Windows.Forms.Padding(2);
			this.MidiChannelCombo.Name = "MidiChannelCombo";
			this.MidiChannelCombo.Size = new System.Drawing.Size(555, 28);
			this.MidiChannelCombo.TabIndex = 7;
			this.MidiChannelCombo.SelectedIndexChanged += new System.EventHandler(this.MidiChannelCombo_SelectedIndexChanged);
			this.MidiChannelCombo.SelectedValueChanged += new System.EventHandler(this.SetComboBoxToolTipWhenOverflowText);
			//
			// MidiChannelAdvancedBtn
			//
			this.MidiChannelAdvancedBtn.AutoSize = true;
			this.MidiChannelAdvancedBtn.ContextMenuStrip = this.QuickConfigMidiChannelsMenu;
			this.MidiChannelAdvancedBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.MidiChannelAdvancedBtn.Enabled = false;
			this.MidiChannelAdvancedBtn.Location = new System.Drawing.Point(561, 2);
			this.MidiChannelAdvancedBtn.Margin = new System.Windows.Forms.Padding(2);
			this.MidiChannelAdvancedBtn.MaximumSize = new System.Drawing.Size(300, 28);
			this.MidiChannelAdvancedBtn.Name = "MidiChannelAdvancedBtn";
			this.MidiChannelAdvancedBtn.Size = new System.Drawing.Size(75, 28);
			this.MidiChannelAdvancedBtn.TabIndex = 8;
			this.MidiChannelAdvancedBtn.Text = "高级...";
			this.MidiChannelAdvancedBtn.UseVisualStyleBackColor = true;
			this.MidiChannelAdvancedBtn.Click += new System.EventHandler(this.MidiChannelAdvancedBtn_Click);
			//
			// QuickConfigMidiChannelsMenu
			//
			this.QuickConfigMidiChannelsMenu.ImageScalingSize = new System.Drawing.Size(20, 20);
			this.QuickConfigMidiChannelsMenu.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
			this.quickConfigMidiChannelsToolStripMenuItem});
			this.QuickConfigMidiChannelsMenu.Name = "QuickConfigMidiChannelsMenu";
			this.QuickConfigMidiChannelsMenu.Size = new System.Drawing.Size(139, 28);
			//
			// quickConfigMidiChannelsToolStripMenuItem
			//
			this.quickConfigMidiChannelsToolStripMenuItem.Name = "quickConfigMidiChannelsToolStripMenuItem";
			this.quickConfigMidiChannelsToolStripMenuItem.Size = new System.Drawing.Size(138, 24);
			this.quickConfigMidiChannelsToolStripMenuItem.Text = "快速配置";
			this.quickConfigMidiChannelsToolStripMenuItem.Click += new System.EventHandler(this.QuickConfigMidiChannelsToolStripMenuItem_Click);
			//
			// ChooseMidiLbl
			//
			this.ChooseMidiLbl.AutoSize = true;
			this.ChooseMidiLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.ChooseMidiLbl.Location = new System.Drawing.Point(2, 0);
			this.ChooseMidiLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.ChooseMidiLbl.Name = "ChooseMidiLbl";
			this.ChooseMidiLbl.Size = new System.Drawing.Size(634, 20);
			this.ChooseMidiLbl.TabIndex = 0;
			this.ChooseMidiLbl.Text = "选择 MIDI 文件";
			this.ChooseMidiLbl.TextAlign = System.Drawing.ContentAlignment.BottomLeft;
			//
			// tableLayoutPanel6
			//
			this.tableLayoutPanel6.AutoSize = true;
			this.tableLayoutPanel6.ColumnCount = 2;
			this.tableLayoutPanel6.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel6.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel6.Controls.Add(this.ChooseMidiText, 0, 0);
			this.tableLayoutPanel6.Controls.Add(this.ChooseMidiBtn, 1, 0);
			this.tableLayoutPanel6.Dock = System.Windows.Forms.DockStyle.Top;
			this.tableLayoutPanel6.Location = new System.Drawing.Point(0, 20);
			this.tableLayoutPanel6.Margin = new System.Windows.Forms.Padding(0);
			this.tableLayoutPanel6.Name = "tableLayoutPanel6";
			this.tableLayoutPanel6.RowCount = 1;
			this.tableLayoutPanel6.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel6.Size = new System.Drawing.Size(638, 32);
			this.tableLayoutPanel6.TabIndex = 2;
			//
			// ChooseMidiText
			//
			this.ChooseMidiText.Dock = System.Windows.Forms.DockStyle.Top;
			this.ChooseMidiText.Location = new System.Drawing.Point(2, 2);
			this.ChooseMidiText.Margin = new System.Windows.Forms.Padding(2);
			this.ChooseMidiText.Name = "ChooseMidiText";
			this.ChooseMidiText.ReadOnly = true;
			this.ChooseMidiText.Size = new System.Drawing.Size(555, 27);
			this.ChooseMidiText.TabIndex = 2;
			this.ChooseMidiText.Text = "<未选择 MIDI 文件>";
			//
			// ChooseMidiBtn
			//
			this.ChooseMidiBtn.AutoSize = true;
			this.ChooseMidiBtn.Dock = System.Windows.Forms.DockStyle.Top;
			this.ChooseMidiBtn.Location = new System.Drawing.Point(561, 2);
			this.ChooseMidiBtn.Margin = new System.Windows.Forms.Padding(2);
			this.ChooseMidiBtn.MaximumSize = new System.Drawing.Size(300, 28);
			this.ChooseMidiBtn.Name = "ChooseMidiBtn";
			this.ChooseMidiBtn.Size = new System.Drawing.Size(75, 28);
			this.ChooseMidiBtn.TabIndex = 3;
			this.ChooseMidiBtn.Text = "浏览...";
			this.ChooseMidiBtn.UseVisualStyleBackColor = true;
			this.ChooseMidiBtn.Click += new System.EventHandler(this.ChooseMidiBtn_Click);
			//
			// MidiChannelLbl
			//
			this.MidiChannelLbl.AutoSize = true;
			this.MidiChannelLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.MidiChannelLbl.Location = new System.Drawing.Point(2, 58);
			this.MidiChannelLbl.Margin = new System.Windows.Forms.Padding(2, 6, 2, 0);
			this.MidiChannelLbl.Name = "MidiChannelLbl";
			this.MidiChannelLbl.Size = new System.Drawing.Size(634, 20);
			this.MidiChannelLbl.TabIndex = 3;
			this.MidiChannelLbl.Text = "使用 MIDI 轨道";
			this.MidiChannelLbl.TextAlign = System.Drawing.ContentAlignment.BottomLeft;
			//
			// flowLayoutPanel3
			//
			this.flowLayoutPanel3.AutoSize = true;
			this.flowLayoutPanel3.Controls.Add(this.MidiStartSecondLbl);
			this.flowLayoutPanel3.Controls.Add(this.MidiStartSecondBox);
			this.flowLayoutPanel3.Controls.Add(this.MidiEndSecondLbl);
			this.flowLayoutPanel3.Controls.Add(this.MidiEndSecondBox);
			this.flowLayoutPanel3.Dock = System.Windows.Forms.DockStyle.Top;
			this.flowLayoutPanel3.Location = new System.Drawing.Point(2, 148);
			this.flowLayoutPanel3.Margin = new System.Windows.Forms.Padding(2);
			this.flowLayoutPanel3.Name = "flowLayoutPanel3";
			this.flowLayoutPanel3.Size = new System.Drawing.Size(634, 31);
			this.flowLayoutPanel3.TabIndex = 9;
			//
			// MidiStartSecondLbl
			//
			this.MidiStartSecondLbl.AutoSize = true;
			this.MidiStartSecondLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.MidiStartSecondLbl.Location = new System.Drawing.Point(0, 0);
			this.MidiStartSecondLbl.Margin = new System.Windows.Forms.Padding(0, 0, 2, 0);
			this.MidiStartSecondLbl.Name = "MidiStartSecondLbl";
			this.MidiStartSecondLbl.Size = new System.Drawing.Size(69, 31);
			this.MidiStartSecondLbl.TabIndex = 0;
			this.MidiStartSecondLbl.Text = "起始秒数";
			this.MidiStartSecondLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// MidiEndSecondLbl
			//
			this.MidiEndSecondLbl.AutoSize = true;
			this.MidiEndSecondLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.MidiEndSecondLbl.Location = new System.Drawing.Point(250, 0);
			this.MidiEndSecondLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.MidiEndSecondLbl.Name = "MidiEndSecondLbl";
			this.MidiEndSecondLbl.Size = new System.Drawing.Size(69, 31);
			this.MidiEndSecondLbl.TabIndex = 2;
			this.MidiEndSecondLbl.Text = "终止秒数";
			this.MidiEndSecondLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// MidiBpmLbl
			//
			this.MidiBpmLbl.AutoSize = true;
			this.MidiBpmLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.MidiBpmLbl.Location = new System.Drawing.Point(2, 186);
			this.MidiBpmLbl.Margin = new System.Windows.Forms.Padding(2, 5, 2, 0);
			this.MidiBpmLbl.Name = "MidiBpmLbl";
			this.MidiBpmLbl.Size = new System.Drawing.Size(634, 20);
			this.MidiBpmLbl.TabIndex = 10;
			this.MidiBpmLbl.Text = "设定 BPM 速度为";
			this.MidiBpmLbl.TextAlign = System.Drawing.ContentAlignment.BottomLeft;
			//
			// MidiBpmFlowPanel
			//
			this.MidiBpmFlowPanel.AutoSize = true;
			this.MidiBpmFlowPanel.Controls.Add(this.MidiDynamicTempoFlow);
			this.MidiBpmFlowPanel.Controls.Add(this.MidiMidiBpmCheck);
			this.MidiBpmFlowPanel.Controls.Add(this.MidiProjectBpmCheck);
			this.MidiBpmFlowPanel.Controls.Add(this.flowLayoutPanel2);
			this.MidiBpmFlowPanel.Dock = System.Windows.Forms.DockStyle.Top;
			this.MidiBpmFlowPanel.Location = new System.Drawing.Point(2, 208);
			this.MidiBpmFlowPanel.Margin = new System.Windows.Forms.Padding(2);
			this.MidiBpmFlowPanel.Name = "MidiBpmFlowPanel";
			this.MidiBpmFlowPanel.Padding = new System.Windows.Forms.Padding(0, 2, 0, 2);
			this.MidiBpmFlowPanel.Size = new System.Drawing.Size(634, 35);
			this.MidiBpmFlowPanel.TabIndex = 12;
			//
			// MidiDynamicTempoFlow
			//
			this.MidiDynamicTempoFlow.AutoSize = true;
			this.MidiDynamicTempoFlow.Controls.Add(this.MidiDynamicMidiBpmCheck);
			this.MidiDynamicTempoFlow.Controls.Add(this.MidiDynamicMidiBpmFormCombo);
			this.MidiDynamicTempoFlow.Dock = System.Windows.Forms.DockStyle.Fill;
			this.MidiDynamicTempoFlow.Location = new System.Drawing.Point(0, 2);
			this.MidiDynamicTempoFlow.Margin = new System.Windows.Forms.Padding(0);
			this.MidiDynamicTempoFlow.Name = "MidiDynamicTempoFlow";
			this.MidiDynamicTempoFlow.Size = new System.Drawing.Size(203, 31);
			this.MidiDynamicTempoFlow.TabIndex = 0;
			this.MidiDynamicTempoFlow.Visible = false;
			this.MidiDynamicTempoFlow.WrapContents = false;
			//
			// MidiDynamicMidiBpmCheck
			//
			this.MidiDynamicMidiBpmCheck.AutoSize = true;
			this.MidiDynamicMidiBpmCheck.Dock = System.Windows.Forms.DockStyle.Fill;
			this.MidiDynamicMidiBpmCheck.Group = "BpmTempo";
			this.MidiDynamicMidiBpmCheck.Location = new System.Drawing.Point(2, 2);
			this.MidiDynamicMidiBpmCheck.Margin = new System.Windows.Forms.Padding(2);
			this.MidiDynamicMidiBpmCheck.Name = "MidiDynamicMidiBpmCheck";
			this.MidiDynamicMidiBpmCheck.Size = new System.Drawing.Size(130, 24);
			this.MidiDynamicMidiBpmCheck.TabIndex = 1;
			this.MidiDynamicMidiBpmCheck.TabStop = true;
			this.MidiDynamicMidiBpmCheck.Text = "动态 MIDI 速度";
			this.MidiDynamicMidiBpmCheck.UseVisualStyleBackColor = true;
			//
			// MidiDynamicMidiBpmFormCombo
			//
			this.MidiDynamicMidiBpmFormCombo.Dock = System.Windows.Forms.DockStyle.Fill;
			this.MidiDynamicMidiBpmFormCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.MidiDynamicMidiBpmFormCombo.FormattingEnabled = true;
			this.MidiDynamicMidiBpmFormCombo.Items.AddRange(new object[] {
			"保留",
			"线性"});
			this.MidiDynamicMidiBpmFormCombo.Location = new System.Drawing.Point(134, 0);
			this.MidiDynamicMidiBpmFormCombo.Margin = new System.Windows.Forms.Padding(0, 0, 4, 0);
			this.MidiDynamicMidiBpmFormCombo.Name = "MidiDynamicMidiBpmFormCombo";
			this.MidiDynamicMidiBpmFormCombo.Size = new System.Drawing.Size(65, 28);
			this.MidiDynamicMidiBpmFormCombo.TabIndex = 4;
			//
			// MidiMidiBpmCheck
			//
			this.MidiMidiBpmCheck.AutoSize = true;
			this.MidiMidiBpmCheck.Checked = true;
			this.MidiMidiBpmCheck.Dock = System.Windows.Forms.DockStyle.Fill;
			this.MidiMidiBpmCheck.Enabled = false;
			this.MidiMidiBpmCheck.Group = "BpmTempo";
			this.MidiMidiBpmCheck.Location = new System.Drawing.Point(205, 4);
			this.MidiMidiBpmCheck.Margin = new System.Windows.Forms.Padding(2);
			this.MidiMidiBpmCheck.Name = "MidiMidiBpmCheck";
			this.MidiMidiBpmCheck.Size = new System.Drawing.Size(96, 27);
			this.MidiMidiBpmCheck.TabIndex = 1;
			this.MidiMidiBpmCheck.TabStop = true;
			this.MidiMidiBpmCheck.Text = "MIDI 速度";
			this.MidiMidiBpmCheck.UseVisualStyleBackColor = true;
			//
			// MidiProjectBpmCheck
			//
			this.MidiProjectBpmCheck.AutoSize = true;
			this.MidiProjectBpmCheck.Dock = System.Windows.Forms.DockStyle.Fill;
			this.MidiProjectBpmCheck.Enabled = false;
			this.MidiProjectBpmCheck.Group = "BpmTempo";
			this.MidiProjectBpmCheck.Location = new System.Drawing.Point(305, 4);
			this.MidiProjectBpmCheck.Margin = new System.Windows.Forms.Padding(2);
			this.MidiProjectBpmCheck.Name = "MidiProjectBpmCheck";
			this.MidiProjectBpmCheck.Size = new System.Drawing.Size(90, 27);
			this.MidiProjectBpmCheck.TabIndex = 2;
			this.MidiProjectBpmCheck.Text = "项目速度";
			this.MidiProjectBpmCheck.UseVisualStyleBackColor = true;
			//
			// flowLayoutPanel2
			//
			this.flowLayoutPanel2.AutoSize = true;
			this.flowLayoutPanel2.Controls.Add(this.MidiCustomBpmCheck);
			this.flowLayoutPanel2.Controls.Add(this.MidiCustomBpmBox);
			this.flowLayoutPanel2.Dock = System.Windows.Forms.DockStyle.Fill;
			this.flowLayoutPanel2.Location = new System.Drawing.Point(397, 2);
			this.flowLayoutPanel2.Margin = new System.Windows.Forms.Padding(0);
			this.flowLayoutPanel2.Name = "flowLayoutPanel2";
			this.flowLayoutPanel2.Size = new System.Drawing.Size(209, 31);
			this.flowLayoutPanel2.TabIndex = 9;
			this.flowLayoutPanel2.WrapContents = false;
			//
			// MidiCustomBpmCheck
			//
			this.MidiCustomBpmCheck.AutoSize = true;
			this.MidiCustomBpmCheck.Dock = System.Windows.Forms.DockStyle.Fill;
			this.MidiCustomBpmCheck.Enabled = false;
			this.MidiCustomBpmCheck.Group = "BpmTempo";
			this.MidiCustomBpmCheck.Location = new System.Drawing.Point(2, 2);
			this.MidiCustomBpmCheck.Margin = new System.Windows.Forms.Padding(2, 2, 0, 2);
			this.MidiCustomBpmCheck.Name = "MidiCustomBpmCheck";
			this.MidiCustomBpmCheck.Size = new System.Drawing.Size(75, 27);
			this.MidiCustomBpmCheck.TabIndex = 9;
			this.MidiCustomBpmCheck.Text = "自定义";
			this.MidiCustomBpmCheck.UseVisualStyleBackColor = true;
			//
			// MidiCustomBpmBox
			//
			this.MidiCustomBpmBox.Constrain = new decimal(new int[] {
			120,
			0,
			0,
			0});
			this.MidiCustomBpmBox.DecimalPlaces = 3;
			this.MidiCustomBpmBox.Enabled = false;
			this.MidiCustomBpmBox.Location = new System.Drawing.Point(77, 2);
			this.MidiCustomBpmBox.Margin = new System.Windows.Forms.Padding(0, 2, 2, 2);
			this.MidiCustomBpmBox.Maximum = new decimal(new int[] {
			1000,
			0,
			0,
			0});
			this.MidiCustomBpmBox.Minimum = new decimal(new int[] {
			30,
			0,
			0,
			0});
			this.MidiCustomBpmBox.Name = "MidiCustomBpmBox";
			this.MidiCustomBpmBox.Size = new System.Drawing.Size(130, 27);
			this.MidiCustomBpmBox.Suffix = "BPM";
			this.MidiCustomBpmBox.TabIndex = 10;
			this.MidiCustomBpmBox.Value = new decimal(new int[] {
			120,
			0,
			0,
			0});
			//
			// tableLayoutPanel12
			//
			this.tableLayoutPanel12.AutoSize = true;
			this.tableLayoutPanel12.ColumnCount = 2;
			this.tableLayoutPanel12.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel12.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel12.Controls.Add(this.MidiBeatLbl, 0, 0);
			this.tableLayoutPanel12.Controls.Add(this.MidiBeatTxt, 1, 0);
			this.tableLayoutPanel12.Dock = System.Windows.Forms.DockStyle.Fill;
			this.tableLayoutPanel12.Location = new System.Drawing.Point(2, 118);
			this.tableLayoutPanel12.Margin = new System.Windows.Forms.Padding(2, 8, 2, 8);
			this.tableLayoutPanel12.Name = "tableLayoutPanel12";
			this.tableLayoutPanel12.RowCount = 1;
			this.tableLayoutPanel12.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel12.Size = new System.Drawing.Size(634, 20);
			this.tableLayoutPanel12.TabIndex = 13;
			//
			// MidiBeatLbl
			//
			this.MidiBeatLbl.AutoSize = true;
			this.MidiBeatLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.MidiBeatLbl.Location = new System.Drawing.Point(0, 0);
			this.MidiBeatLbl.Margin = new System.Windows.Forms.Padding(0, 0, 2, 0);
			this.MidiBeatLbl.Name = "MidiBeatLbl";
			this.MidiBeatLbl.Size = new System.Drawing.Size(69, 20);
			this.MidiBeatLbl.TabIndex = 3;
			this.MidiBeatLbl.Text = "节拍　　";
			this.MidiBeatLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// MidiBeatTxt
			//
			this.MidiBeatTxt.AutoSize = true;
			this.MidiBeatTxt.Dock = System.Windows.Forms.DockStyle.Fill;
			this.MidiBeatTxt.Location = new System.Drawing.Point(73, 0);
			this.MidiBeatTxt.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.MidiBeatTxt.Name = "MidiBeatTxt";
			this.MidiBeatTxt.Size = new System.Drawing.Size(559, 20);
			this.MidiBeatTxt.TabIndex = 5;
			this.MidiBeatTxt.Text = "无";
			this.MidiBeatTxt.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// RestrictLengthFlow
			//
			this.RestrictLengthFlow.AutoSize = true;
			this.RestrictLengthFlow.Controls.Add(this.UnrestrictLengthRadio);
			this.RestrictLengthFlow.Controls.Add(this.RestrictMaxLengthRadio);
			this.RestrictLengthFlow.Controls.Add(this.RestrictFixedLengthRadio);
			this.RestrictLengthFlow.Controls.Add(this.RestrictLengthBox);
			this.RestrictLengthFlow.Dock = System.Windows.Forms.DockStyle.Fill;
			this.RestrictLengthFlow.Enabled = false;
			this.RestrictLengthFlow.Location = new System.Drawing.Point(3, 273);
			this.RestrictLengthFlow.Name = "RestrictLengthFlow";
			this.RestrictLengthFlow.Size = new System.Drawing.Size(632, 30);
			this.RestrictLengthFlow.TabIndex = 15;
			//
			// UnrestrictLengthRadio
			//
			this.UnrestrictLengthRadio.AutoSize = true;
			this.UnrestrictLengthRadio.Checked = true;
			this.UnrestrictLengthRadio.Dock = System.Windows.Forms.DockStyle.Fill;
			this.UnrestrictLengthRadio.Group = "LimitLength";
			this.UnrestrictLengthRadio.Location = new System.Drawing.Point(3, 3);
			this.UnrestrictLengthRadio.Name = "UnrestrictLengthRadio";
			this.UnrestrictLengthRadio.Size = new System.Drawing.Size(75, 24);
			this.UnrestrictLengthRadio.TabIndex = 0;
			this.UnrestrictLengthRadio.TabStop = true;
			this.UnrestrictLengthRadio.Text = "不限制";
			this.UnrestrictLengthRadio.UseVisualStyleBackColor = true;
			//
			// RestrictMaxLengthRadio
			//
			this.RestrictMaxLengthRadio.AutoSize = true;
			this.RestrictMaxLengthRadio.Dock = System.Windows.Forms.DockStyle.Fill;
			this.RestrictMaxLengthRadio.Group = "LimitLength";
			this.RestrictMaxLengthRadio.Location = new System.Drawing.Point(84, 3);
			this.RestrictMaxLengthRadio.Name = "RestrictMaxLengthRadio";
			this.RestrictMaxLengthRadio.Size = new System.Drawing.Size(90, 24);
			this.RestrictMaxLengthRadio.TabIndex = 1;
			this.RestrictMaxLengthRadio.Text = "最大长度";
			this.RestrictMaxLengthRadio.UseVisualStyleBackColor = true;
			//
			// RestrictFixedLengthRadio
			//
			this.RestrictFixedLengthRadio.AutoSize = true;
			this.RestrictFixedLengthRadio.Dock = System.Windows.Forms.DockStyle.Fill;
			this.RestrictFixedLengthRadio.Group = "LimitLength";
			this.RestrictFixedLengthRadio.Location = new System.Drawing.Point(180, 3);
			this.RestrictFixedLengthRadio.Name = "RestrictFixedLengthRadio";
			this.RestrictFixedLengthRadio.Size = new System.Drawing.Size(90, 24);
			this.RestrictFixedLengthRadio.TabIndex = 2;
			this.RestrictFixedLengthRadio.Text = "固定长度";
			this.RestrictFixedLengthRadio.UseVisualStyleBackColor = true;
			//
			// RestrictLengthBox
			//
			this.RestrictLengthBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.RestrictLengthBox.DoubleValue = 1000D;
			this.RestrictLengthBox.Enabled = false;
			this.RestrictLengthBox.Location = new System.Drawing.Point(275, 2);
			this.RestrictLengthBox.Margin = new System.Windows.Forms.Padding(2);
			this.RestrictLengthBox.Milliseconds = 1000;
			this.RestrictLengthBox.Name = "RestrictLengthBox";
			this.RestrictLengthBox.Size = new System.Drawing.Size(163, 27);
			this.RestrictLengthBox.TabIndex = 6;
			this.RestrictLengthBox.Value = 1000;
			//
			// SourceConfigGroup
			//
			this.SourceConfigGroup.AutoSize = true;
			this.SourceConfigGroup.Controls.Add(this.tableLayoutPanel3);
			this.SourceConfigGroup.Dock = System.Windows.Forms.DockStyle.Top;
			this.SourceConfigGroup.Location = new System.Drawing.Point(5, 5);
			this.SourceConfigGroup.Margin = new System.Windows.Forms.Padding(2);
			this.SourceConfigGroup.Name = "SourceConfigGroup";
			this.SourceConfigGroup.Padding = new System.Windows.Forms.Padding(5);
			this.SourceConfigGroup.Size = new System.Drawing.Size(648, 251);
			this.SourceConfigGroup.TabIndex = 1;
			this.SourceConfigGroup.TabStop = false;
			this.SourceConfigGroup.Text = "素材属性";
			this.SourceConfigGroup.DragDrop += new System.Windows.Forms.DragEventHandler(this.OnDragDrop);
			this.SourceConfigGroup.DragEnter += new System.Windows.Forms.DragEventHandler(this.OnDragEnter);
			this.SourceConfigGroup.DragLeave += new System.EventHandler(this.OnDragLeave);
			//
			// tableLayoutPanel3
			//
			this.tableLayoutPanel3.AutoSize = true;
			this.tableLayoutPanel3.ColumnCount = 1;
			this.tableLayoutPanel3.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel3.Controls.Add(this.ChooseSourceLbl, 0, 0);
			this.tableLayoutPanel3.Controls.Add(this.tableLayoutPanel4, 0, 1);
			this.tableLayoutPanel3.Controls.Add(this.flowLayoutPanel1, 0, 2);
			this.tableLayoutPanel3.Controls.Add(this.GenerateAtLbl, 0, 3);
			this.tableLayoutPanel3.Controls.Add(this.flowLayoutPanel9, 0, 4);
			this.tableLayoutPanel3.Controls.Add(this.flowLayoutPanel5, 0, 5);
			this.tableLayoutPanel3.Dock = System.Windows.Forms.DockStyle.Fill;
			this.tableLayoutPanel3.Location = new System.Drawing.Point(5, 25);
			this.tableLayoutPanel3.Margin = new System.Windows.Forms.Padding(2);
			this.tableLayoutPanel3.Name = "tableLayoutPanel3";
			this.tableLayoutPanel3.RowCount = 6;
			this.tableLayoutPanel3.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel3.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel3.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel3.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel3.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel3.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel3.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 20F));
			this.tableLayoutPanel3.Size = new System.Drawing.Size(638, 221);
			this.tableLayoutPanel3.TabIndex = 1;
			//
			// ChooseSourceLbl
			//
			this.ChooseSourceLbl.AutoSize = true;
			this.ChooseSourceLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.ChooseSourceLbl.Location = new System.Drawing.Point(2, 0);
			this.ChooseSourceLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.ChooseSourceLbl.Name = "ChooseSourceLbl";
			this.ChooseSourceLbl.Size = new System.Drawing.Size(634, 20);
			this.ChooseSourceLbl.TabIndex = 0;
			this.ChooseSourceLbl.Text = "选择媒体素材";
			this.ChooseSourceLbl.TextAlign = System.Drawing.ContentAlignment.BottomLeft;
			//
			// tableLayoutPanel4
			//
			this.tableLayoutPanel4.AutoSize = true;
			this.tableLayoutPanel4.ColumnCount = 2;
			this.tableLayoutPanel4.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel4.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel4.Controls.Add(this.ChooseSourceCombo, 0, 0);
			this.tableLayoutPanel4.Controls.Add(this.ChooseSourceBtn, 1, 0);
			this.tableLayoutPanel4.Dock = System.Windows.Forms.DockStyle.Top;
			this.tableLayoutPanel4.Location = new System.Drawing.Point(0, 20);
			this.tableLayoutPanel4.Margin = new System.Windows.Forms.Padding(0);
			this.tableLayoutPanel4.Name = "tableLayoutPanel4";
			this.tableLayoutPanel4.RowCount = 1;
			this.tableLayoutPanel4.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel4.Size = new System.Drawing.Size(638, 32);
			this.tableLayoutPanel4.TabIndex = 1;
			//
			// ChooseSourceCombo
			//
			this.ChooseSourceCombo.Dock = System.Windows.Forms.DockStyle.Top;
			this.ChooseSourceCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.ChooseSourceCombo.FormattingEnabled = true;
			this.ChooseSourceCombo.Items.AddRange(new object[] {
			"选中的媒体文件",
			"选中的轨道素材"});
			this.ChooseSourceCombo.Location = new System.Drawing.Point(2, 2);
			this.ChooseSourceCombo.Margin = new System.Windows.Forms.Padding(2);
			this.ChooseSourceCombo.Name = "ChooseSourceCombo";
			this.ChooseSourceCombo.Size = new System.Drawing.Size(555, 28);
			this.ChooseSourceCombo.TabIndex = 0;
			this.ChooseSourceCombo.SelectedIndexChanged += new System.EventHandler(this.ChooseSourceCombo_SelectedIndexChanged);
			this.ChooseSourceCombo.SelectedValueChanged += new System.EventHandler(this.SetComboBoxToolTipWhenOverflowText);
			//
			// ChooseSourceBtn
			//
			this.ChooseSourceBtn.AutoSize = true;
			this.ChooseSourceBtn.Dock = System.Windows.Forms.DockStyle.Top;
			this.ChooseSourceBtn.Location = new System.Drawing.Point(561, 2);
			this.ChooseSourceBtn.Margin = new System.Windows.Forms.Padding(2);
			this.ChooseSourceBtn.MaximumSize = new System.Drawing.Size(300, 28);
			this.ChooseSourceBtn.Name = "ChooseSourceBtn";
			this.ChooseSourceBtn.Size = new System.Drawing.Size(75, 28);
			this.ChooseSourceBtn.TabIndex = 1;
			this.ChooseSourceBtn.Text = "浏览...";
			this.ChooseSourceBtn.UseVisualStyleBackColor = true;
			this.ChooseSourceBtn.Click += new System.EventHandler(this.ChooseSourceBtn_Click);
			//
			// flowLayoutPanel1
			//
			this.flowLayoutPanel1.AutoSize = true;
			this.flowLayoutPanel1.Controls.Add(this.SourceStartTimeLbl);
			this.flowLayoutPanel1.Controls.Add(this.SourceStartTimeText);
			this.flowLayoutPanel1.Controls.Add(this.SourceEndTimeLbl);
			this.flowLayoutPanel1.Controls.Add(this.SourceEndTimeText);
			this.flowLayoutPanel1.Dock = System.Windows.Forms.DockStyle.Top;
			this.flowLayoutPanel1.Location = new System.Drawing.Point(2, 54);
			this.flowLayoutPanel1.Margin = new System.Windows.Forms.Padding(2);
			this.flowLayoutPanel1.Name = "flowLayoutPanel1";
			this.flowLayoutPanel1.Size = new System.Drawing.Size(634, 31);
			this.flowLayoutPanel1.TabIndex = 2;
			//
			// SourceStartTimeLbl
			//
			this.SourceStartTimeLbl.AutoSize = true;
			this.SourceStartTimeLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SourceStartTimeLbl.Location = new System.Drawing.Point(0, 0);
			this.SourceStartTimeLbl.Margin = new System.Windows.Forms.Padding(0, 0, 2, 0);
			this.SourceStartTimeLbl.Name = "SourceStartTimeLbl";
			this.SourceStartTimeLbl.Size = new System.Drawing.Size(69, 31);
			this.SourceStartTimeLbl.TabIndex = 0;
			this.SourceStartTimeLbl.Text = "入点秒数";
			this.SourceStartTimeLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// SourceEndTimeLbl
			//
			this.SourceEndTimeLbl.AutoSize = true;
			this.SourceEndTimeLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SourceEndTimeLbl.Location = new System.Drawing.Point(250, 0);
			this.SourceEndTimeLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.SourceEndTimeLbl.Name = "SourceEndTimeLbl";
			this.SourceEndTimeLbl.Size = new System.Drawing.Size(69, 31);
			this.SourceEndTimeLbl.TabIndex = 2;
			this.SourceEndTimeLbl.Text = "出点秒数";
			this.SourceEndTimeLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// GenerateAtLbl
			//
			this.GenerateAtLbl.AutoSize = true;
			this.GenerateAtLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.GenerateAtLbl.Location = new System.Drawing.Point(2, 92);
			this.GenerateAtLbl.Margin = new System.Windows.Forms.Padding(2, 5, 2, 0);
			this.GenerateAtLbl.Name = "GenerateAtLbl";
			this.GenerateAtLbl.Size = new System.Drawing.Size(634, 20);
			this.GenerateAtLbl.TabIndex = 8;
			this.GenerateAtLbl.Text = "设定生成开始位置";
			this.GenerateAtLbl.TextAlign = System.Drawing.ContentAlignment.BottomLeft;
			//
			// flowLayoutPanel9
			//
			this.flowLayoutPanel9.AutoSize = true;
			this.flowLayoutPanel9.Controls.Add(this.GenerateAtBeginRadio);
			this.flowLayoutPanel9.Controls.Add(this.GenerateAtCursorRadio);
			this.flowLayoutPanel9.Controls.Add(this.flowLayoutPanel11);
			this.flowLayoutPanel9.Dock = System.Windows.Forms.DockStyle.Top;
			this.flowLayoutPanel9.Location = new System.Drawing.Point(2, 114);
			this.flowLayoutPanel9.Margin = new System.Windows.Forms.Padding(2, 2, 2, 0);
			this.flowLayoutPanel9.Name = "flowLayoutPanel9";
			this.flowLayoutPanel9.Padding = new System.Windows.Forms.Padding(0, 2, 0, 2);
			this.flowLayoutPanel9.Size = new System.Drawing.Size(634, 35);
			this.flowLayoutPanel9.TabIndex = 9;
			//
			// GenerateAtBeginRadio
			//
			this.GenerateAtBeginRadio.AutoSize = true;
			this.GenerateAtBeginRadio.Checked = true;
			this.GenerateAtBeginRadio.Dock = System.Windows.Forms.DockStyle.Fill;
			this.GenerateAtBeginRadio.Group = "GenerateAt";
			this.GenerateAtBeginRadio.Location = new System.Drawing.Point(2, 4);
			this.GenerateAtBeginRadio.Margin = new System.Windows.Forms.Padding(2);
			this.GenerateAtBeginRadio.Name = "GenerateAtBeginRadio";
			this.GenerateAtBeginRadio.Size = new System.Drawing.Size(105, 27);
			this.GenerateAtBeginRadio.TabIndex = 0;
			this.GenerateAtBeginRadio.TabStop = true;
			this.GenerateAtBeginRadio.Text = "项目开始处";
			this.GenerateAtBeginRadio.UseVisualStyleBackColor = true;
			//
			// GenerateAtCursorRadio
			//
			this.GenerateAtCursorRadio.AutoSize = true;
			this.GenerateAtCursorRadio.Dock = System.Windows.Forms.DockStyle.Fill;
			this.GenerateAtCursorRadio.Group = "GenerateAt";
			this.GenerateAtCursorRadio.Location = new System.Drawing.Point(111, 4);
			this.GenerateAtCursorRadio.Margin = new System.Windows.Forms.Padding(2);
			this.GenerateAtCursorRadio.Name = "GenerateAtCursorRadio";
			this.GenerateAtCursorRadio.Size = new System.Drawing.Size(75, 27);
			this.GenerateAtCursorRadio.TabIndex = 1;
			this.GenerateAtCursorRadio.Text = "光标处";
			this.GenerateAtCursorRadio.UseVisualStyleBackColor = true;
			//
			// flowLayoutPanel11
			//
			this.flowLayoutPanel11.AutoSize = true;
			this.flowLayoutPanel11.Controls.Add(this.GenerateAtCustomRadio);
			this.flowLayoutPanel11.Controls.Add(this.GenerateAtCustomText);
			this.flowLayoutPanel11.Dock = System.Windows.Forms.DockStyle.Fill;
			this.flowLayoutPanel11.Location = new System.Drawing.Point(188, 2);
			this.flowLayoutPanel11.Margin = new System.Windows.Forms.Padding(0);
			this.flowLayoutPanel11.Name = "flowLayoutPanel11";
			this.flowLayoutPanel11.Size = new System.Drawing.Size(215, 31);
			this.flowLayoutPanel11.TabIndex = 5;
			this.flowLayoutPanel11.WrapContents = false;
			//
			// GenerateAtCustomRadio
			//
			this.GenerateAtCustomRadio.AutoSize = true;
			this.GenerateAtCustomRadio.Dock = System.Windows.Forms.DockStyle.Fill;
			this.GenerateAtCustomRadio.Group = "GenerateAt";
			this.GenerateAtCustomRadio.Location = new System.Drawing.Point(2, 2);
			this.GenerateAtCustomRadio.Margin = new System.Windows.Forms.Padding(2, 2, 0, 2);
			this.GenerateAtCustomRadio.Name = "GenerateAtCustomRadio";
			this.GenerateAtCustomRadio.Size = new System.Drawing.Size(75, 27);
			this.GenerateAtCustomRadio.TabIndex = 5;
			this.GenerateAtCustomRadio.Text = "自定义";
			this.GenerateAtCustomRadio.UseVisualStyleBackColor = true;
			//
			// GenerateAtCustomText
			//
			this.GenerateAtCustomText.Enabled = false;
			this.GenerateAtCustomText.Location = new System.Drawing.Point(77, 2);
			this.GenerateAtCustomText.Margin = new System.Windows.Forms.Padding(0, 2, 2, 2);
			this.GenerateAtCustomText.Name = "GenerateAtCustomText";
			this.GenerateAtCustomText.Size = new System.Drawing.Size(136, 27);
			this.GenerateAtCustomText.TabIndex = 6;
			this.GenerateAtCustomText.Leave += new System.EventHandler(this.GenerateAtCustomText_Leave);
			//
			// flowLayoutPanel5
			//
			this.flowLayoutPanel5.AutoSize = true;
			this.flowLayoutPanel5.Controls.Add(this.BelowTopAdjustmentTrackCheck);
			this.flowLayoutPanel5.Controls.Add(this.RemoveSourceTrackEventsCheck);
			this.flowLayoutPanel5.Controls.Add(this.SelectAllGeneratedEventsCheck);
			this.flowLayoutPanel5.Dock = System.Windows.Forms.DockStyle.Fill;
			this.flowLayoutPanel5.FlowDirection = System.Windows.Forms.FlowDirection.TopDown;
			this.flowLayoutPanel5.Location = new System.Drawing.Point(4, 149);
			this.flowLayoutPanel5.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.flowLayoutPanel5.Name = "flowLayoutPanel5";
			this.flowLayoutPanel5.Size = new System.Drawing.Size(630, 72);
			this.flowLayoutPanel5.TabIndex = 11;
			//
			// BelowTopAdjustmentTrackCheck
			//
			this.BelowTopAdjustmentTrackCheck.AutoSize = true;
			this.BelowTopAdjustmentTrackCheck.Checked = true;
			this.BelowTopAdjustmentTrackCheck.CheckState = System.Windows.Forms.CheckState.Checked;
			this.BelowTopAdjustmentTrackCheck.Dock = System.Windows.Forms.DockStyle.Fill;
			this.BelowTopAdjustmentTrackCheck.Location = new System.Drawing.Point(0, 0);
			this.BelowTopAdjustmentTrackCheck.Margin = new System.Windows.Forms.Padding(0);
			this.BelowTopAdjustmentTrackCheck.Name = "BelowTopAdjustmentTrackCheck";
			this.BelowTopAdjustmentTrackCheck.Size = new System.Drawing.Size(286, 24);
			this.BelowTopAdjustmentTrackCheck.TabIndex = 0;
			this.BelowTopAdjustmentTrackCheck.Text = "生成在顶层调整轨道的下方";
			this.BelowTopAdjustmentTrackCheck.UseVisualStyleBackColor = true;
			//
			// RemoveSourceTrackEventsCheck
			//
			this.RemoveSourceTrackEventsCheck.AutoSize = true;
			this.RemoveSourceTrackEventsCheck.Dock = System.Windows.Forms.DockStyle.Fill;
			this.RemoveSourceTrackEventsCheck.Location = new System.Drawing.Point(0, 24);
			this.RemoveSourceTrackEventsCheck.Margin = new System.Windows.Forms.Padding(0);
			this.RemoveSourceTrackEventsCheck.Name = "RemoveSourceTrackEventsCheck";
			this.RemoveSourceTrackEventsCheck.Size = new System.Drawing.Size(286, 24);
			this.RemoveSourceTrackEventsCheck.TabIndex = 1;
			this.RemoveSourceTrackEventsCheck.Text = "生成完成后移除作为源素材的轨道事件";
			this.RemoveSourceTrackEventsCheck.UseVisualStyleBackColor = true;
			this.RemoveSourceTrackEventsCheck.CheckedChanged += new System.EventHandler(this.RemoveSourceTrackEventsCheck_CheckedChanged);
			//
			// SelectAllGeneratedEventsCheck
			//
			this.SelectAllGeneratedEventsCheck.AutoSize = true;
			this.SelectAllGeneratedEventsCheck.Checked = true;
			this.SelectAllGeneratedEventsCheck.CheckState = System.Windows.Forms.CheckState.Checked;
			this.SelectAllGeneratedEventsCheck.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SelectAllGeneratedEventsCheck.Location = new System.Drawing.Point(0, 48);
			this.SelectAllGeneratedEventsCheck.Margin = new System.Windows.Forms.Padding(0);
			this.SelectAllGeneratedEventsCheck.Name = "SelectAllGeneratedEventsCheck";
			this.SelectAllGeneratedEventsCheck.Size = new System.Drawing.Size(286, 24);
			this.SelectAllGeneratedEventsCheck.TabIndex = 2;
			this.SelectAllGeneratedEventsCheck.Text = "生成完成后选中生成的所有事件";
			this.SelectAllGeneratedEventsCheck.UseVisualStyleBackColor = true;
			//
			// AudioTab
			//
			this.AudioTab.AutoScroll = true;
			this.AudioTab.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(249)))), ((int)(((byte)(249)))), ((int)(((byte)(249)))));
			this.AudioTab.Controls.Add(this.AudioParamsGroup);
			this.AudioTab.Controls.Add(this.AudioTuneGroup);
			this.AudioTab.Controls.Add(this.AudioVelocityGroup);
			this.AudioTab.Controls.Add(this.AudioPreferredTrackPanel);
			this.AudioTab.Controls.Add(this.AudioComboPanel);
			this.AudioTab.Controls.Add(this.AudioTogglePanel);
			this.AudioTab.Location = new System.Drawing.Point(4, 29);
			this.AudioTab.Margin = new System.Windows.Forms.Padding(2);
			this.AudioTab.Name = "AudioTab";
			this.AudioTab.Padding = new System.Windows.Forms.Padding(5);
			this.AudioTab.Size = new System.Drawing.Size(658, 626);
			this.AudioTab.TabIndex = 1;
			this.AudioTab.Text = "音频";
			this.AudioTab.UseVisualStyleBackColor = true;
			//
			// AudioParamsGroup
			//
			this.AudioParamsGroup.AutoSize = true;
			this.AudioParamsGroup.Controls.Add(this.AudioParamsTable);
			this.AudioParamsGroup.Dock = System.Windows.Forms.DockStyle.Top;
			this.AudioParamsGroup.Location = new System.Drawing.Point(5, 498);
			this.AudioParamsGroup.Margin = new System.Windows.Forms.Padding(2);
			this.AudioParamsGroup.Name = "AudioParamsGroup";
			this.AudioParamsGroup.Padding = new System.Windows.Forms.Padding(5);
			this.AudioParamsGroup.Size = new System.Drawing.Size(627, 142);
			this.AudioParamsGroup.TabIndex = 5;
			this.AudioParamsGroup.TabStop = false;
			this.AudioParamsGroup.Text = "参数";
			//
			// AudioParamsTable
			//
			this.AudioParamsTable.AutoSize = true;
			this.AudioParamsTable.ColumnCount = 3;
			this.AudioParamsTable.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.AudioParamsTable.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.AudioParamsTable.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.AudioParamsTable.Controls.Add(this.AudioFadeOutTimeTxt, 1, 4);
			this.AudioParamsTable.Controls.Add(this.AudioFadeInLbl, 0, 1);
			this.AudioParamsTable.Controls.Add(this.AudioFadeInBox, 1, 1);
			this.AudioParamsTable.Controls.Add(this.AudioFadeInCurveCombo, 2, 1);
			this.AudioParamsTable.Controls.Add(this.AudioFadeOutLbl, 0, 2);
			this.AudioParamsTable.Controls.Add(this.AudioFadeOutBox, 1, 2);
			this.AudioParamsTable.Controls.Add(this.AudioFadeOutCurveCombo, 2, 2);
			this.AudioParamsTable.Controls.Add(this.AudioFadeInTimeTxt, 1, 3);
			this.AudioParamsTable.Controls.Add(this.tableLayoutPanel20, 0, 0);
			this.AudioParamsTable.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AudioParamsTable.Location = new System.Drawing.Point(5, 25);
			this.AudioParamsTable.Margin = new System.Windows.Forms.Padding(2);
			this.AudioParamsTable.Name = "AudioParamsTable";
			this.AudioParamsTable.RowCount = 5;
			this.AudioParamsTable.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.AudioParamsTable.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.AudioParamsTable.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.AudioParamsTable.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 0F));
			this.AudioParamsTable.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 0F));
			this.AudioParamsTable.Size = new System.Drawing.Size(617, 112);
			this.AudioParamsTable.TabIndex = 0;
			//
			// AudioFadeOutTimeTxt
			//
			this.AudioFadeOutTimeTxt.Dock = System.Windows.Forms.DockStyle.Left;
			this.AudioFadeOutTimeTxt.Location = new System.Drawing.Point(88, 115);
			this.AudioFadeOutTimeTxt.Margin = new System.Windows.Forms.Padding(15, 3, 3, 3);
			this.AudioFadeOutTimeTxt.Name = "AudioFadeOutTimeTxt";
			this.AudioFadeOutTimeTxt.Size = new System.Drawing.Size(200, 27);
			this.AudioFadeOutTimeTxt.TabIndex = 6;
			this.AudioFadeOutTimeTxt.Visible = false;
			this.AudioFadeOutTimeTxt.Leave += new System.EventHandler(this.TimecodeText_Leave);
			//
			// AudioFadeInLbl
			//
			this.AudioFadeInLbl.AutoSize = true;
			this.AudioFadeInLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AudioFadeInLbl.Location = new System.Drawing.Point(2, 30);
			this.AudioFadeInLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.AudioFadeInLbl.MinimumSize = new System.Drawing.Size(0, 41);
			this.AudioFadeInLbl.Name = "AudioFadeInLbl";
			this.AudioFadeInLbl.Size = new System.Drawing.Size(69, 41);
			this.AudioFadeInLbl.TabIndex = 0;
			this.AudioFadeInLbl.Text = "渐入　　";
			this.AudioFadeInLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// AudioFadeInBox
			//
			this.AudioFadeInBox.BackColor = System.Drawing.Color.Transparent;
			this.AudioFadeInBox.DefaultValue = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.AudioFadeInBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AudioFadeInBox.Font = new System.Drawing.Font("Microsoft YaHei UI", 9F);
			this.AudioFadeInBox.Location = new System.Drawing.Point(78, 35);
			this.AudioFadeInBox.Margin = new System.Windows.Forms.Padding(5);
			this.AudioFadeInBox.Maximum = new decimal(new int[] {
			100,
			0,
			0,
			0});
			this.AudioFadeInBox.Minimum = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.AudioFadeInBox.Name = "AudioFadeInBox";
			this.AudioFadeInBox.NumericUpDownWidth = 65;
			this.AudioFadeInBox.Size = new System.Drawing.Size(465, 31);
			this.AudioFadeInBox.TabIndex = 2;
			this.AudioFadeInBox.Value = new decimal(new int[] {
			0,
			0,
			0,
			0});
			//
			// AudioFadeInCurveCombo
			//
			this.AudioFadeInCurveCombo.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AudioFadeInCurveCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.AudioFadeInCurveCombo.FormattingEnabled = true;
			this.AudioFadeInCurveCombo.Items.AddRange(new object[] {
			"线性",
			"快速",
			"慢速",
			"平滑",
			"急剧"});
			this.AudioFadeInCurveCombo.Location = new System.Drawing.Point(550, 34);
			this.AudioFadeInCurveCombo.Margin = new System.Windows.Forms.Padding(2, 4, 2, 4);
			this.AudioFadeInCurveCombo.Name = "AudioFadeInCurveCombo";
			this.AudioFadeInCurveCombo.Size = new System.Drawing.Size(65, 28);
			this.AudioFadeInCurveCombo.TabIndex = 4;
			//
			// AudioFadeOutLbl
			//
			this.AudioFadeOutLbl.AutoSize = true;
			this.AudioFadeOutLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AudioFadeOutLbl.Location = new System.Drawing.Point(2, 71);
			this.AudioFadeOutLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.AudioFadeOutLbl.MinimumSize = new System.Drawing.Size(0, 41);
			this.AudioFadeOutLbl.Name = "AudioFadeOutLbl";
			this.AudioFadeOutLbl.Size = new System.Drawing.Size(69, 41);
			this.AudioFadeOutLbl.TabIndex = 1;
			this.AudioFadeOutLbl.Text = "渐出　　";
			this.AudioFadeOutLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// AudioFadeOutBox
			//
			this.AudioFadeOutBox.BackColor = System.Drawing.Color.Transparent;
			this.AudioFadeOutBox.DefaultValue = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.AudioFadeOutBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AudioFadeOutBox.Font = new System.Drawing.Font("Microsoft YaHei UI", 9F);
			this.AudioFadeOutBox.Location = new System.Drawing.Point(78, 76);
			this.AudioFadeOutBox.Margin = new System.Windows.Forms.Padding(5);
			this.AudioFadeOutBox.Maximum = new decimal(new int[] {
			100,
			0,
			0,
			0});
			this.AudioFadeOutBox.Minimum = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.AudioFadeOutBox.Name = "AudioFadeOutBox";
			this.AudioFadeOutBox.NumericUpDownWidth = 65;
			this.AudioFadeOutBox.Size = new System.Drawing.Size(465, 31);
			this.AudioFadeOutBox.TabIndex = 5;
			this.AudioFadeOutBox.TickStyle = System.Windows.Forms.TickStyle.TopLeft;
			this.AudioFadeOutBox.Value = new decimal(new int[] {
			0,
			0,
			0,
			0});
			//
			// AudioFadeOutCurveCombo
			//
			this.AudioFadeOutCurveCombo.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AudioFadeOutCurveCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.AudioFadeOutCurveCombo.FormattingEnabled = true;
			this.AudioFadeOutCurveCombo.Items.AddRange(new object[] {
			"线性",
			"快速",
			"慢速",
			"平滑",
			"急剧"});
			this.AudioFadeOutCurveCombo.Location = new System.Drawing.Point(550, 75);
			this.AudioFadeOutCurveCombo.Margin = new System.Windows.Forms.Padding(2, 4, 2, 4);
			this.AudioFadeOutCurveCombo.Name = "AudioFadeOutCurveCombo";
			this.AudioFadeOutCurveCombo.Size = new System.Drawing.Size(65, 28);
			this.AudioFadeOutCurveCombo.TabIndex = 7;
			//
			// AudioFadeInTimeTxt
			//
			this.AudioFadeInTimeTxt.Dock = System.Windows.Forms.DockStyle.Left;
			this.AudioFadeInTimeTxt.Location = new System.Drawing.Point(88, 115);
			this.AudioFadeInTimeTxt.Margin = new System.Windows.Forms.Padding(15, 3, 3, 3);
			this.AudioFadeInTimeTxt.Name = "AudioFadeInTimeTxt";
			this.AudioFadeInTimeTxt.Size = new System.Drawing.Size(200, 27);
			this.AudioFadeInTimeTxt.TabIndex = 3;
			this.AudioFadeInTimeTxt.Visible = false;
			this.AudioFadeInTimeTxt.Leave += new System.EventHandler(this.TimecodeText_Leave);
			//
			// tableLayoutPanel20
			//
			this.tableLayoutPanel20.AutoSize = true;
			this.tableLayoutPanel20.ColumnCount = 2;
			this.AudioParamsTable.SetColumnSpan(this.tableLayoutPanel20, 3);
			this.tableLayoutPanel20.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel20.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel20.Controls.Add(this.AudioFadeSetAsPercentRadio);
			this.tableLayoutPanel20.Controls.Add(this.AudioFadeSetAsTimecodeRadio);
			this.tableLayoutPanel20.Dock = System.Windows.Forms.DockStyle.Right;
			this.tableLayoutPanel20.Location = new System.Drawing.Point(365, 0);
			this.tableLayoutPanel20.Margin = new System.Windows.Forms.Padding(0);
			this.tableLayoutPanel20.Name = "tableLayoutPanel20";
			this.tableLayoutPanel20.RowCount = 1;
			this.tableLayoutPanel20.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel20.Size = new System.Drawing.Size(252, 30);
			this.tableLayoutPanel20.TabIndex = 1;
			//
			// AudioFadeSetAsPercentRadio
			//
			this.AudioFadeSetAsPercentRadio.AutoSize = true;
			this.AudioFadeSetAsPercentRadio.Checked = true;
			this.AudioFadeSetAsPercentRadio.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AudioFadeSetAsPercentRadio.Location = new System.Drawing.Point(3, 3);
			this.AudioFadeSetAsPercentRadio.Name = "AudioFadeSetAsPercentRadio";
			this.AudioFadeSetAsPercentRadio.Size = new System.Drawing.Size(120, 24);
			this.AudioFadeSetAsPercentRadio.TabIndex = 1;
			this.AudioFadeSetAsPercentRadio.TabStop = true;
			this.AudioFadeSetAsPercentRadio.Text = "设定为百分比";
			this.AudioFadeSetAsPercentRadio.UseVisualStyleBackColor = true;
			this.AudioFadeSetAsPercentRadio.CheckedChanged += new System.EventHandler(this.FadeSetAsRadio_CheckedChanged);
			//
			// AudioFadeSetAsTimecodeRadio
			//
			this.AudioFadeSetAsTimecodeRadio.AutoSize = true;
			this.AudioFadeSetAsTimecodeRadio.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AudioFadeSetAsTimecodeRadio.Location = new System.Drawing.Point(129, 3);
			this.AudioFadeSetAsTimecodeRadio.Name = "AudioFadeSetAsTimecodeRadio";
			this.AudioFadeSetAsTimecodeRadio.Size = new System.Drawing.Size(120, 24);
			this.AudioFadeSetAsTimecodeRadio.TabIndex = 2;
			this.AudioFadeSetAsTimecodeRadio.Text = "设定为时间码";
			this.AudioFadeSetAsTimecodeRadio.UseVisualStyleBackColor = true;
			this.AudioFadeSetAsTimecodeRadio.CheckedChanged += new System.EventHandler(this.FadeSetAsRadio_CheckedChanged);
			//
			// AudioTuneGroup
			//
			this.AudioTuneGroup.AutoSize = true;
			this.AudioTuneGroup.Controls.Add(this.AudioTuneTablePanel);
			this.AudioTuneGroup.Dock = System.Windows.Forms.DockStyle.Top;
			this.AudioTuneGroup.Location = new System.Drawing.Point(5, 263);
			this.AudioTuneGroup.Margin = new System.Windows.Forms.Padding(2);
			this.AudioTuneGroup.Name = "AudioTuneGroup";
			this.AudioTuneGroup.Padding = new System.Windows.Forms.Padding(5);
			this.AudioTuneGroup.Size = new System.Drawing.Size(627, 235);
			this.AudioTuneGroup.TabIndex = 4;
			this.AudioTuneGroup.TabStop = false;
			this.AudioTuneGroup.Text = "调音";
			//
			// AudioTuneTablePanel
			//
			this.AudioTuneTablePanel.AutoSize = true;
			this.AudioTuneTablePanel.ColumnCount = 2;
			this.AudioTuneTablePanel.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.AudioTuneTablePanel.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.AudioTuneTablePanel.Controls.Add(this.AudioTuneMethodLbl, 0, 0);
			this.AudioTuneTablePanel.Controls.Add(this.AudioTuneMethodCombo, 1, 0);
			this.AudioTuneTablePanel.Controls.Add(this.AudioStretchAttrLbl, 0, 1);
			this.AudioTuneTablePanel.Controls.Add(this.AudioStretchAttrCombo, 1, 1);
			this.AudioTuneTablePanel.Controls.Add(this.AudioLockAttrLbl, 0, 2);
			this.AudioTuneTablePanel.Controls.Add(this.flowLayoutPanel10, 1, 2);
			this.AudioTuneTablePanel.Controls.Add(this.AudioBasePitchLbl, 0, 3);
			this.AudioTuneTablePanel.Controls.Add(this.flowLayoutPanel6, 1, 3);
			this.AudioTuneTablePanel.Controls.Add(this.AudioPreviewLbl, 0, 4);
			this.AudioTuneTablePanel.Controls.Add(this.tableLayoutPanel17, 1, 4);
			this.AudioTuneTablePanel.Controls.Add(this.AudioPreviewAttrLbl, 0, 5);
			this.AudioTuneTablePanel.Controls.Add(this.AudioPreviewAttrLayoutPanel, 1, 5);
			this.AudioTuneTablePanel.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AudioTuneTablePanel.Location = new System.Drawing.Point(5, 25);
			this.AudioTuneTablePanel.Margin = new System.Windows.Forms.Padding(4);
			this.AudioTuneTablePanel.Name = "AudioTuneTablePanel";
			this.AudioTuneTablePanel.RowCount = 6;
			this.AudioTuneTablePanel.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.AudioTuneTablePanel.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.AudioTuneTablePanel.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.AudioTuneTablePanel.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.AudioTuneTablePanel.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.AudioTuneTablePanel.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.AudioTuneTablePanel.Size = new System.Drawing.Size(617, 205);
			this.AudioTuneTablePanel.TabIndex = 2;
			//
			// AudioTuneMethodLbl
			//
			this.AudioTuneMethodLbl.AutoSize = true;
			this.AudioTuneMethodLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AudioTuneMethodLbl.Location = new System.Drawing.Point(2, 0);
			this.AudioTuneMethodLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.AudioTuneMethodLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.AudioTuneMethodLbl.Name = "AudioTuneMethodLbl";
			this.AudioTuneMethodLbl.Size = new System.Drawing.Size(69, 34);
			this.AudioTuneMethodLbl.TabIndex = 0;
			this.AudioTuneMethodLbl.Text = "调音方法";
			this.AudioTuneMethodLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// AudioStretchAttrLbl
			//
			this.AudioStretchAttrLbl.AutoSize = true;
			this.AudioStretchAttrLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AudioStretchAttrLbl.Location = new System.Drawing.Point(2, 34);
			this.AudioStretchAttrLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.AudioStretchAttrLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.AudioStretchAttrLbl.Name = "AudioStretchAttrLbl";
			this.AudioStretchAttrLbl.Size = new System.Drawing.Size(69, 34);
			this.AudioStretchAttrLbl.TabIndex = 6;
			this.AudioStretchAttrLbl.Text = "拉伸属性";
			this.AudioStretchAttrLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// AudioLockAttrLbl
			//
			this.AudioLockAttrLbl.AutoSize = true;
			this.AudioLockAttrLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AudioLockAttrLbl.Location = new System.Drawing.Point(2, 68);
			this.AudioLockAttrLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.AudioLockAttrLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.AudioLockAttrLbl.Name = "AudioLockAttrLbl";
			this.AudioLockAttrLbl.Size = new System.Drawing.Size(69, 34);
			this.AudioLockAttrLbl.TabIndex = 8;
			this.AudioLockAttrLbl.Text = "锁定属性";
			this.AudioLockAttrLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// flowLayoutPanel10
			//
			this.flowLayoutPanel10.AutoSize = true;
			this.flowLayoutPanel10.Controls.Add(this.AudioLockStretchPitchCheck);
			this.flowLayoutPanel10.Controls.Add(this.AudioReserveFormantCheck);
			this.flowLayoutPanel10.Dock = System.Windows.Forms.DockStyle.Fill;
			this.flowLayoutPanel10.Location = new System.Drawing.Point(73, 68);
			this.flowLayoutPanel10.Margin = new System.Windows.Forms.Padding(0);
			this.flowLayoutPanel10.Name = "flowLayoutPanel10";
			this.flowLayoutPanel10.Size = new System.Drawing.Size(544, 34);
			this.flowLayoutPanel10.TabIndex = 4;
			//
			// AudioReserveFormantCheck
			//
			this.AudioReserveFormantCheck.AutoSize = true;
			this.AudioReserveFormantCheck.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AudioReserveFormantCheck.Location = new System.Drawing.Point(142, 2);
			this.AudioReserveFormantCheck.Margin = new System.Windows.Forms.Padding(2);
			this.AudioReserveFormantCheck.MinimumSize = new System.Drawing.Size(0, 30);
			this.AudioReserveFormantCheck.Name = "AudioReserveFormantCheck";
			this.AudioReserveFormantCheck.Size = new System.Drawing.Size(106, 30);
			this.AudioReserveFormantCheck.TabIndex = 1;
			this.AudioReserveFormantCheck.Text = "保持共振峰";
			this.AudioReserveFormantCheck.UseVisualStyleBackColor = true;
			//
			// AudioBasePitchLbl
			//
			this.AudioBasePitchLbl.AutoSize = true;
			this.AudioBasePitchLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AudioBasePitchLbl.Location = new System.Drawing.Point(2, 102);
			this.AudioBasePitchLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.AudioBasePitchLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.AudioBasePitchLbl.Name = "AudioBasePitchLbl";
			this.AudioBasePitchLbl.Size = new System.Drawing.Size(69, 34);
			this.AudioBasePitchLbl.TabIndex = 1;
			this.AudioBasePitchLbl.Text = "原始音高";
			this.AudioBasePitchLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// flowLayoutPanel6
			//
			this.flowLayoutPanel6.AutoSize = true;
			this.flowLayoutPanel6.Controls.Add(this.AudioMainKeyCombo);
			this.flowLayoutPanel6.Controls.Add(this.AudioMainOctaveCombo);
			this.flowLayoutPanel6.Dock = System.Windows.Forms.DockStyle.Fill;
			this.flowLayoutPanel6.Location = new System.Drawing.Point(73, 102);
			this.flowLayoutPanel6.Margin = new System.Windows.Forms.Padding(0);
			this.flowLayoutPanel6.Name = "flowLayoutPanel6";
			this.flowLayoutPanel6.Size = new System.Drawing.Size(544, 34);
			this.flowLayoutPanel6.TabIndex = 5;
			//
			// AudioMainKeyCombo
			//
			this.AudioMainKeyCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.AudioMainKeyCombo.FormattingEnabled = true;
			this.AudioMainKeyCombo.Items.AddRange(new object[] {
			"C",
			"C#",
			"D",
			"D#",
			"E",
			"F",
			"F#",
			"G",
			"G#",
			"A",
			"A#",
			"B"});
			this.AudioMainKeyCombo.Location = new System.Drawing.Point(2, 2);
			this.AudioMainKeyCombo.Margin = new System.Windows.Forms.Padding(2);
			this.AudioMainKeyCombo.Name = "AudioMainKeyCombo";
			this.AudioMainKeyCombo.Size = new System.Drawing.Size(60, 28);
			this.AudioMainKeyCombo.TabIndex = 3;
			//
			// AudioMainOctaveCombo
			//
			this.AudioMainOctaveCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.AudioMainOctaveCombo.FormattingEnabled = true;
			this.AudioMainOctaveCombo.Items.AddRange(new object[] {
			"0",
			"1",
			"2",
			"3",
			"4",
			"5",
			"6",
			"7",
			"8",
			"9",
			"10"});
			this.AudioMainOctaveCombo.Location = new System.Drawing.Point(66, 2);
			this.AudioMainOctaveCombo.Margin = new System.Windows.Forms.Padding(2);
			this.AudioMainOctaveCombo.Name = "AudioMainOctaveCombo";
			this.AudioMainOctaveCombo.Size = new System.Drawing.Size(60, 28);
			this.AudioMainOctaveCombo.TabIndex = 4;
			//
			// AudioPreviewLbl
			//
			this.AudioPreviewLbl.AutoSize = true;
			this.AudioPreviewLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AudioPreviewLbl.Location = new System.Drawing.Point(2, 136);
			this.AudioPreviewLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.AudioPreviewLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.AudioPreviewLbl.Name = "AudioPreviewLbl";
			this.AudioPreviewLbl.Size = new System.Drawing.Size(69, 35);
			this.AudioPreviewLbl.TabIndex = 9;
			this.AudioPreviewLbl.Text = "预听";
			this.AudioPreviewLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// tableLayoutPanel17
			//
			this.tableLayoutPanel17.AutoSizeMode = System.Windows.Forms.AutoSizeMode.GrowAndShrink;
			this.tableLayoutPanel17.ColumnCount = 2;
			this.tableLayoutPanel17.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 50.19084F));
			this.tableLayoutPanel17.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 49.80916F));
			this.tableLayoutPanel17.Controls.Add(this.PreviewBasePitchBtn, 0, 0);
			this.tableLayoutPanel17.Controls.Add(this.PreviewAudioBtn, 1, 0);
			this.tableLayoutPanel17.Dock = System.Windows.Forms.DockStyle.Fill;
			this.tableLayoutPanel17.Location = new System.Drawing.Point(73, 136);
			this.tableLayoutPanel17.Margin = new System.Windows.Forms.Padding(0);
			this.tableLayoutPanel17.Name = "tableLayoutPanel17";
			this.tableLayoutPanel17.RowCount = 1;
			this.tableLayoutPanel17.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 50F));
			this.tableLayoutPanel17.Size = new System.Drawing.Size(544, 35);
			this.tableLayoutPanel17.TabIndex = 6;
			//
			// PreviewAudioBtn
			//
			this.PreviewAudioBtn.AutoSize = true;
			this.PreviewAudioBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.PreviewAudioBtn.Location = new System.Drawing.Point(275, 2);
			this.PreviewAudioBtn.Margin = new System.Windows.Forms.Padding(2);
			this.PreviewAudioBtn.Name = "PreviewAudioBtn";
			this.PreviewAudioBtn.Size = new System.Drawing.Size(267, 31);
			this.PreviewAudioBtn.TabIndex = 2;
			this.PreviewAudioBtn.Text = "预听音频(&P)";
			this.PreviewAudioBtn.UseVisualStyleBackColor = true;
			this.PreviewAudioBtn.Click += new System.EventHandler(this.PreviewAudioBtn_Click);
			//
			// AudioPreviewAttrLbl
			//
			this.AudioPreviewAttrLbl.AutoSize = true;
			this.AudioPreviewAttrLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AudioPreviewAttrLbl.Location = new System.Drawing.Point(2, 171);
			this.AudioPreviewAttrLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.AudioPreviewAttrLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.AudioPreviewAttrLbl.Name = "AudioPreviewAttrLbl";
			this.AudioPreviewAttrLbl.Size = new System.Drawing.Size(69, 34);
			this.AudioPreviewAttrLbl.TabIndex = 10;
			this.AudioPreviewAttrLbl.Text = "预听属性";
			this.AudioPreviewAttrLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// AudioPreviewAttrLayoutPanel
			//
			this.AudioPreviewAttrLayoutPanel.AutoSize = true;
			this.AudioPreviewAttrLayoutPanel.Controls.Add(this.PreviewBeepEngineCombo);
			this.AudioPreviewAttrLayoutPanel.Controls.Add(this.PreviewBeepWaveFormCombo);
			this.AudioPreviewAttrLayoutPanel.Controls.Add(this.PreviewBeepDurationBox);
			this.AudioPreviewAttrLayoutPanel.Controls.Add(this.PreviewTuneAudioCheck);
			this.AudioPreviewAttrLayoutPanel.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AudioPreviewAttrLayoutPanel.Location = new System.Drawing.Point(73, 171);
			this.AudioPreviewAttrLayoutPanel.Margin = new System.Windows.Forms.Padding(0);
			this.AudioPreviewAttrLayoutPanel.Name = "AudioPreviewAttrLayoutPanel";
			this.AudioPreviewAttrLayoutPanel.Size = new System.Drawing.Size(544, 34);
			this.AudioPreviewAttrLayoutPanel.TabIndex = 7;
			//
			// PreviewBeepEngineCombo
			//
			this.PreviewBeepEngineCombo.Dock = System.Windows.Forms.DockStyle.Fill;
			this.PreviewBeepEngineCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.PreviewBeepEngineCombo.FormattingEnabled = true;
			this.PreviewBeepEngineCombo.Items.AddRange(new object[] {
			"ConsoleBeep",
			"PowerShell",
			"NAudio"});
			this.PreviewBeepEngineCombo.Location = new System.Drawing.Point(2, 2);
			this.PreviewBeepEngineCombo.Margin = new System.Windows.Forms.Padding(2);
			this.PreviewBeepEngineCombo.Name = "PreviewBeepEngineCombo";
			this.PreviewBeepEngineCombo.Size = new System.Drawing.Size(110, 28);
			this.PreviewBeepEngineCombo.TabIndex = 0;
			//
			// PreviewBeepWaveFormCombo
			//
			this.PreviewBeepWaveFormCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.PreviewBeepWaveFormCombo.FormattingEnabled = true;
			this.PreviewBeepWaveFormCombo.Items.AddRange(new object[] {
			"正弦波",
			"三角波",
			"方波",
			"锯齿波"});
			this.PreviewBeepWaveFormCombo.Location = new System.Drawing.Point(116, 2);
			this.PreviewBeepWaveFormCombo.Margin = new System.Windows.Forms.Padding(2);
			this.PreviewBeepWaveFormCombo.Name = "PreviewBeepWaveFormCombo";
			this.PreviewBeepWaveFormCombo.Size = new System.Drawing.Size(100, 28);
			this.PreviewBeepWaveFormCombo.TabIndex = 3;
			//
			// AudioVelocityGroup
			//
			this.AudioVelocityGroup.AutoSize = true;
			this.AudioVelocityGroup.Controls.Add(this.tableLayoutPanel13);
			this.AudioVelocityGroup.Dock = System.Windows.Forms.DockStyle.Top;
			this.AudioVelocityGroup.Location = new System.Drawing.Point(5, 141);
			this.AudioVelocityGroup.Margin = new System.Windows.Forms.Padding(2);
			this.AudioVelocityGroup.Name = "AudioVelocityGroup";
			this.AudioVelocityGroup.Padding = new System.Windows.Forms.Padding(5);
			this.AudioVelocityGroup.Size = new System.Drawing.Size(627, 122);
			this.AudioVelocityGroup.TabIndex = 3;
			this.AudioVelocityGroup.TabStop = false;
			this.AudioVelocityGroup.Text = "力度";
			//
			// tableLayoutPanel13
			//
			this.tableLayoutPanel13.AutoSize = true;
			this.tableLayoutPanel13.ColumnCount = 5;
			this.tableLayoutPanel13.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel13.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute, 90F));
			this.tableLayoutPanel13.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel13.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute, 90F));
			this.tableLayoutPanel13.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel13.Controls.Add(this.AudioGainTildeLbl, 2, 2);
			this.tableLayoutPanel13.Controls.Add(this.AudioVelocityTildeLbl, 2, 1);
			this.tableLayoutPanel13.Controls.Add(this.AudioGainMoreBox, 3, 2);
			this.tableLayoutPanel13.Controls.Add(this.AudioGainLessBox, 1, 2);
			this.tableLayoutPanel13.Controls.Add(this.AudioVelocityMoreBox, 3, 1);
			this.tableLayoutPanel13.Controls.Add(this.AudioVelocityLessBox, 1, 1);
			this.tableLayoutPanel13.Controls.Add(this.AudioGainLbl, 0, 2);
			this.tableLayoutPanel13.Controls.Add(this.AudioVelocityLbl, 0, 1);
			this.tableLayoutPanel13.Controls.Add(this.AudioVelocityCheck, 0, 0);
			this.tableLayoutPanel13.Dock = System.Windows.Forms.DockStyle.Fill;
			this.tableLayoutPanel13.Location = new System.Drawing.Point(5, 25);
			this.tableLayoutPanel13.Name = "tableLayoutPanel13";
			this.tableLayoutPanel13.RowCount = 3;
			this.tableLayoutPanel13.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel13.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel13.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel13.Size = new System.Drawing.Size(617, 92);
			this.tableLayoutPanel13.TabIndex = 0;
			//
			// AudioGainTildeLbl
			//
			this.AudioGainTildeLbl.AutoSize = true;
			this.AudioGainTildeLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AudioGainTildeLbl.Location = new System.Drawing.Point(168, 58);
			this.AudioGainTildeLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.AudioGainTildeLbl.Name = "AudioGainTildeLbl";
			this.AudioGainTildeLbl.Size = new System.Drawing.Size(19, 34);
			this.AudioGainTildeLbl.TabIndex = 8;
			this.AudioGainTildeLbl.Text = "~";
			this.AudioGainTildeLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// AudioVelocityTildeLbl
			//
			this.AudioVelocityTildeLbl.AutoSize = true;
			this.AudioVelocityTildeLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AudioVelocityTildeLbl.Location = new System.Drawing.Point(168, 24);
			this.AudioVelocityTildeLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.AudioVelocityTildeLbl.Name = "AudioVelocityTildeLbl";
			this.AudioVelocityTildeLbl.Size = new System.Drawing.Size(19, 34);
			this.AudioVelocityTildeLbl.TabIndex = 7;
			this.AudioVelocityTildeLbl.Text = "~";
			this.AudioVelocityTildeLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// AudioGainMoreBox
			//
			this.AudioGainMoreBox.Constrain = new decimal(new int[] {
			100,
			0,
			0,
			0});
			this.AudioGainMoreBox.DecimalPlaces = 2;
			this.AudioGainMoreBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AudioGainMoreBox.EnableDecimalPlaces = true;
			this.AudioGainMoreBox.Location = new System.Drawing.Point(193, 61);
			this.AudioGainMoreBox.Name = "AudioGainMoreBox";
			this.AudioGainMoreBox.Size = new System.Drawing.Size(84, 27);
			this.AudioGainMoreBox.TabIndex = 6;
			this.AudioGainMoreBox.Value = new decimal(new int[] {
			100,
			0,
			0,
			0});
			//
			// AudioGainLessBox
			//
			this.AudioGainLessBox.Constrain = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.AudioGainLessBox.DecimalPlaces = 2;
			this.AudioGainLessBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AudioGainLessBox.EnableDecimalPlaces = true;
			this.AudioGainLessBox.Location = new System.Drawing.Point(78, 61);
			this.AudioGainLessBox.Name = "AudioGainLessBox";
			this.AudioGainLessBox.Size = new System.Drawing.Size(84, 27);
			this.AudioGainLessBox.TabIndex = 5;
			//
			// AudioVelocityMoreBox
			//
			this.AudioVelocityMoreBox.Constrain = new decimal(new int[] {
			127,
			0,
			0,
			0});
			this.AudioVelocityMoreBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AudioVelocityMoreBox.EnableDecimalPlaces = true;
			this.AudioVelocityMoreBox.Location = new System.Drawing.Point(193, 27);
			this.AudioVelocityMoreBox.Maximum = new decimal(new int[] {
			127,
			0,
			0,
			0});
			this.AudioVelocityMoreBox.Name = "AudioVelocityMoreBox";
			this.AudioVelocityMoreBox.Size = new System.Drawing.Size(84, 27);
			this.AudioVelocityMoreBox.TabIndex = 4;
			this.AudioVelocityMoreBox.Value = new decimal(new int[] {
			127,
			0,
			0,
			0});
			//
			// AudioVelocityLessBox
			//
			this.AudioVelocityLessBox.Constrain = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.AudioVelocityLessBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AudioVelocityLessBox.EnableDecimalPlaces = true;
			this.AudioVelocityLessBox.Location = new System.Drawing.Point(78, 27);
			this.AudioVelocityLessBox.Maximum = new decimal(new int[] {
			127,
			0,
			0,
			0});
			this.AudioVelocityLessBox.Name = "AudioVelocityLessBox";
			this.AudioVelocityLessBox.Size = new System.Drawing.Size(84, 27);
			this.AudioVelocityLessBox.TabIndex = 3;
			//
			// AudioGainLbl
			//
			this.AudioGainLbl.AutoSize = true;
			this.AudioGainLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AudioGainLbl.Location = new System.Drawing.Point(3, 58);
			this.AudioGainLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.AudioGainLbl.Name = "AudioGainLbl";
			this.AudioGainLbl.Size = new System.Drawing.Size(69, 34);
			this.AudioGainLbl.TabIndex = 2;
			this.AudioGainLbl.Text = "音量增益";
			this.AudioGainLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// AudioVelocityLbl
			//
			this.AudioVelocityLbl.AutoSize = true;
			this.AudioVelocityLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AudioVelocityLbl.Location = new System.Drawing.Point(3, 24);
			this.AudioVelocityLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.AudioVelocityLbl.Name = "AudioVelocityLbl";
			this.AudioVelocityLbl.Size = new System.Drawing.Size(69, 34);
			this.AudioVelocityLbl.TabIndex = 1;
			this.AudioVelocityLbl.Text = "音符力度";
			this.AudioVelocityLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// AudioVelocityCheck
			//
			this.AudioVelocityCheck.AutoSize = true;
			this.tableLayoutPanel13.SetColumnSpan(this.AudioVelocityCheck, 5);
			this.AudioVelocityCheck.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AudioVelocityCheck.Location = new System.Drawing.Point(6, 0);
			this.AudioVelocityCheck.Margin = new System.Windows.Forms.Padding(6, 0, 6, 0);
			this.AudioVelocityCheck.Name = "AudioVelocityCheck";
			this.AudioVelocityCheck.Size = new System.Drawing.Size(605, 24);
			this.AudioVelocityCheck.TabIndex = 0;
			this.AudioVelocityCheck.Text = "映射力度";
			this.AudioVelocityCheck.UseVisualStyleBackColor = true;
			//
			// AudioPreferredTrackPanel
			//
			this.AudioPreferredTrackPanel.AutoSize = true;
			this.AudioPreferredTrackPanel.ColumnCount = 2;
			this.AudioPreferredTrackPanel.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.AudioPreferredTrackPanel.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.AudioPreferredTrackPanel.Controls.Add(this.AudioPreferredTrackLbl, 0, 0);
			this.AudioPreferredTrackPanel.Controls.Add(this.AudioPreferredTrackCombo, 1, 0);
			this.AudioPreferredTrackPanel.Dock = System.Windows.Forms.DockStyle.Top;
			this.AudioPreferredTrackPanel.Location = new System.Drawing.Point(5, 103);
			this.AudioPreferredTrackPanel.Name = "AudioPreferredTrackPanel";
			this.AudioPreferredTrackPanel.Padding = new System.Windows.Forms.Padding(4, 2, 5, 2);
			this.AudioPreferredTrackPanel.RowCount = 1;
			this.AudioPreferredTrackPanel.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.AudioPreferredTrackPanel.Size = new System.Drawing.Size(627, 38);
			this.AudioPreferredTrackPanel.TabIndex = 2;
			//
			// AudioPreferredTrackLbl
			//
			this.AudioPreferredTrackLbl.AutoSize = true;
			this.AudioPreferredTrackLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AudioPreferredTrackLbl.Location = new System.Drawing.Point(7, 2);
			this.AudioPreferredTrackLbl.Margin = new System.Windows.Forms.Padding(3, 0, 2, 0);
			this.AudioPreferredTrackLbl.MaximumSize = new System.Drawing.Size(0, 34);
			this.AudioPreferredTrackLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.AudioPreferredTrackLbl.Name = "AudioPreferredTrackLbl";
			this.AudioPreferredTrackLbl.Size = new System.Drawing.Size(69, 34);
			this.AudioPreferredTrackLbl.TabIndex = 3;
			this.AudioPreferredTrackLbl.Text = "首选轨道";
			this.AudioPreferredTrackLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// AudioPreferredTrackCombo
			//
			this.AudioPreferredTrackCombo.DisplayMember = "DisplayValue";
			this.AudioPreferredTrackCombo.Dock = System.Windows.Forms.DockStyle.Top;
			this.AudioPreferredTrackCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.AudioPreferredTrackCombo.FormattingEnabled = true;
			this.AudioPreferredTrackCombo.Location = new System.Drawing.Point(80, 4);
			this.AudioPreferredTrackCombo.Margin = new System.Windows.Forms.Padding(2);
			this.AudioPreferredTrackCombo.Name = "AudioPreferredTrackCombo";
			this.AudioPreferredTrackCombo.Size = new System.Drawing.Size(540, 28);
			this.AudioPreferredTrackCombo.TabIndex = 4;
			//
			// AudioComboPanel
			//
			this.AudioComboPanel.AutoSize = true;
			this.AudioComboPanel.Controls.Add(this.AudioScratchLbl);
			this.AudioComboPanel.Controls.Add(this.AudioScratchCombo);
			this.AudioComboPanel.Controls.Add(this.AudioLegatoLbl);
			this.AudioComboPanel.Controls.Add(this.AudioLegatoCombo);
			this.AudioComboPanel.Dock = System.Windows.Forms.DockStyle.Top;
			this.AudioComboPanel.Location = new System.Drawing.Point(5, 65);
			this.AudioComboPanel.Margin = new System.Windows.Forms.Padding(2);
			this.AudioComboPanel.Name = "AudioComboPanel";
			this.AudioComboPanel.Padding = new System.Windows.Forms.Padding(4, 2, 4, 2);
			this.AudioComboPanel.Size = new System.Drawing.Size(627, 38);
			this.AudioComboPanel.TabIndex = 1;
			//
			// AudioScratchLbl
			//
			this.AudioScratchLbl.AutoSize = true;
			this.AudioScratchLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AudioScratchLbl.Location = new System.Drawing.Point(7, 2);
			this.AudioScratchLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.AudioScratchLbl.Name = "AudioScratchLbl";
			this.AudioScratchLbl.Size = new System.Drawing.Size(69, 34);
			this.AudioScratchLbl.TabIndex = 2;
			this.AudioScratchLbl.Text = "拉伸音频";
			this.AudioScratchLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// AudioScratchCombo
			//
			this.AudioScratchCombo.Dock = System.Windows.Forms.DockStyle.Top;
			this.AudioScratchCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.AudioScratchCombo.FormattingEnabled = true;
			this.AudioScratchCombo.Items.AddRange(new object[] {
			"不拉伸",
			"可屈伸",
			"仅伸展",
			"仅屈折"});
			this.AudioScratchCombo.Location = new System.Drawing.Point(80, 5);
			this.AudioScratchCombo.Margin = new System.Windows.Forms.Padding(1, 3, 3, 3);
			this.AudioScratchCombo.Name = "AudioScratchCombo";
			this.AudioScratchCombo.Size = new System.Drawing.Size(140, 28);
			this.AudioScratchCombo.TabIndex = 0;
			//
			// AudioLegatoLbl
			//
			this.AudioLegatoLbl.AutoSize = true;
			this.AudioLegatoLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AudioLegatoLbl.Location = new System.Drawing.Point(226, 2);
			this.AudioLegatoLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.AudioLegatoLbl.Name = "AudioLegatoLbl";
			this.AudioLegatoLbl.Size = new System.Drawing.Size(69, 34);
			this.AudioLegatoLbl.TabIndex = 0;
			this.AudioLegatoLbl.Text = "填补间隙";
			this.AudioLegatoLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// AudioLegatoCombo
			//
			this.AudioLegatoCombo.Dock = System.Windows.Forms.DockStyle.Top;
			this.AudioLegatoCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.AudioLegatoCombo.FormattingEnabled = true;
			this.AudioLegatoCombo.Items.AddRange(new object[] {
			"不填补",
			"最长一拍",
			"最长一小节",
			"无限填补"});
			this.AudioLegatoCombo.Location = new System.Drawing.Point(299, 5);
			this.AudioLegatoCombo.Margin = new System.Windows.Forms.Padding(1, 3, 3, 3);
			this.AudioLegatoCombo.Name = "AudioLegatoCombo";
			this.AudioLegatoCombo.Size = new System.Drawing.Size(140, 28);
			this.AudioLegatoCombo.TabIndex = 1;
			this.AudioLegatoCombo.SelectedIndexChanged += new System.EventHandler(this.AudioLegatoCheck_Or_AudioFreezeLastFrameCheck_CheckedChanged);
			//
			// AudioTogglePanel
			//
			this.AudioTogglePanel.AutoSize = true;
			this.AudioTogglePanel.Controls.Add(this.AudioConfigCheck);
			this.AudioTogglePanel.Controls.Add(this.AudioLoopCheck);
			this.AudioTogglePanel.Controls.Add(this.AudioNormalizeCheck);
			this.AudioTogglePanel.Controls.Add(this.AudioFreezeLastFrameCheck);
			this.AudioTogglePanel.Controls.Add(this.AudioMultitrackForChordsCheck);
			this.AudioTogglePanel.Controls.Add(this.CreateEventGroupInAudioCheck);
			this.AudioTogglePanel.Controls.Add(this.AudioAutoPanFlow);
			this.AudioTogglePanel.Dock = System.Windows.Forms.DockStyle.Top;
			this.AudioTogglePanel.Location = new System.Drawing.Point(5, 5);
			this.AudioTogglePanel.Margin = new System.Windows.Forms.Padding(2);
			this.AudioTogglePanel.Name = "AudioTogglePanel";
			this.AudioTogglePanel.Padding = new System.Windows.Forms.Padding(0, 2, 0, 2);
			this.AudioTogglePanel.Size = new System.Drawing.Size(627, 60);
			this.AudioTogglePanel.TabIndex = 0;
			//
			// AudioConfigCheck
			//
			this.AudioConfigCheck.AutoSize = true;
			this.AudioConfigCheck.Checked = true;
			this.AudioConfigCheck.CheckState = System.Windows.Forms.CheckState.Checked;
			this.AudioConfigCheck.Location = new System.Drawing.Point(2, 4);
			this.AudioConfigCheck.Margin = new System.Windows.Forms.Padding(2);
			this.AudioConfigCheck.Name = "AudioConfigCheck";
			this.AudioConfigCheck.Size = new System.Drawing.Size(91, 24);
			this.AudioConfigCheck.TabIndex = 0;
			this.AudioConfigCheck.Text = "生成音频";
			this.AudioConfigCheck.UseVisualStyleBackColor = true;
			//
			// AudioLoopCheck
			//
			this.AudioLoopCheck.AutoSize = true;
			this.AudioLoopCheck.Location = new System.Drawing.Point(97, 4);
			this.AudioLoopCheck.Margin = new System.Windows.Forms.Padding(2);
			this.AudioLoopCheck.Name = "AudioLoopCheck";
			this.AudioLoopCheck.Size = new System.Drawing.Size(91, 24);
			this.AudioLoopCheck.TabIndex = 2;
			this.AudioLoopCheck.Text = "循环音频";
			this.AudioLoopCheck.UseVisualStyleBackColor = true;
			//
			// AudioNormalizeCheck
			//
			this.AudioNormalizeCheck.AutoSize = true;
			this.AudioNormalizeCheck.Checked = true;
			this.AudioNormalizeCheck.CheckState = System.Windows.Forms.CheckState.Checked;
			this.AudioNormalizeCheck.Location = new System.Drawing.Point(192, 4);
			this.AudioNormalizeCheck.Margin = new System.Windows.Forms.Padding(2);
			this.AudioNormalizeCheck.Name = "AudioNormalizeCheck";
			this.AudioNormalizeCheck.Size = new System.Drawing.Size(106, 24);
			this.AudioNormalizeCheck.TabIndex = 3;
			this.AudioNormalizeCheck.Text = "规范化音量";
			this.AudioNormalizeCheck.UseVisualStyleBackColor = true;
			//
			// AudioFreezeLastFrameCheck
			//
			this.AudioFreezeLastFrameCheck.AutoSize = true;
			this.AudioFreezeLastFrameCheck.Checked = true;
			this.AudioFreezeLastFrameCheck.CheckState = System.Windows.Forms.CheckState.Checked;
			this.AudioFreezeLastFrameCheck.Location = new System.Drawing.Point(302, 4);
			this.AudioFreezeLastFrameCheck.Margin = new System.Windows.Forms.Padding(2);
			this.AudioFreezeLastFrameCheck.Name = "AudioFreezeLastFrameCheck";
			this.AudioFreezeLastFrameCheck.Size = new System.Drawing.Size(91, 24);
			this.AudioFreezeLastFrameCheck.TabIndex = 6;
			this.AudioFreezeLastFrameCheck.Text = "禁止延长";
			this.AudioFreezeLastFrameCheck.UseVisualStyleBackColor = true;
			this.AudioFreezeLastFrameCheck.CheckedChanged += new System.EventHandler(this.AudioLegatoCheck_Or_AudioFreezeLastFrameCheck_CheckedChanged);
			//
			// AudioMultitrackForChordsCheck
			//
			this.AudioMultitrackForChordsCheck.AutoSize = true;
			this.AudioMultitrackForChordsCheck.Checked = true;
			this.AudioMultitrackForChordsCheck.CheckState = System.Windows.Forms.CheckState.Checked;
			this.AudioMultitrackForChordsCheck.Location = new System.Drawing.Point(397, 4);
			this.AudioMultitrackForChordsCheck.Margin = new System.Windows.Forms.Padding(2);
			this.AudioMultitrackForChordsCheck.Name = "AudioMultitrackForChordsCheck";
			this.AudioMultitrackForChordsCheck.Size = new System.Drawing.Size(91, 24);
			this.AudioMultitrackForChordsCheck.TabIndex = 7;
			this.AudioMultitrackForChordsCheck.Text = "复音多轨";
			this.AudioMultitrackForChordsCheck.UseVisualStyleBackColor = true;
			//
			// CreateEventGroupInAudioCheck
			//
			this.CreateEventGroupInAudioCheck.AutoSize = true;
			this.CreateEventGroupInAudioCheck.Checked = true;
			this.CreateEventGroupInAudioCheck.CheckState = System.Windows.Forms.CheckState.Checked;
			this.CreateEventGroupInAudioCheck.Location = new System.Drawing.Point(492, 4);
			this.CreateEventGroupInAudioCheck.Margin = new System.Windows.Forms.Padding(2);
			this.CreateEventGroupInAudioCheck.Name = "CreateEventGroupInAudioCheck";
			this.CreateEventGroupInAudioCheck.Size = new System.Drawing.Size(91, 24);
			this.CreateEventGroupInAudioCheck.TabIndex = 8;
			this.CreateEventGroupInAudioCheck.Text = "创建分组";
			this.CreateEventGroupInAudioCheck.UseVisualStyleBackColor = true;
			this.CreateEventGroupInAudioCheck.CheckedChanged += new System.EventHandler(this.CreateEventGroupCheck_CheckedChanged);
			//
			// AudioAutoPanFlow
			//
			this.AudioAutoPanFlow.AutoSize = true;
			this.AudioAutoPanFlow.Controls.Add(this.AudioAutoPanCheck);
			this.AudioAutoPanFlow.Controls.Add(this.AudioAutoPanCurveCombo);
			this.AudioAutoPanFlow.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AudioAutoPanFlow.Location = new System.Drawing.Point(0, 30);
			this.AudioAutoPanFlow.Margin = new System.Windows.Forms.Padding(0);
			this.AudioAutoPanFlow.Name = "AudioAutoPanFlow";
			this.AudioAutoPanFlow.Size = new System.Drawing.Size(164, 28);
			this.AudioAutoPanFlow.TabIndex = 10;
			//
			// AudioAutoPanCheck
			//
			this.AudioAutoPanCheck.AutoSize = true;
			this.AudioAutoPanCheck.Checked = true;
			this.AudioAutoPanCheck.CheckState = System.Windows.Forms.CheckState.Checked;
			this.AudioAutoPanCheck.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AudioAutoPanCheck.Location = new System.Drawing.Point(2, 2);
			this.AudioAutoPanCheck.Margin = new System.Windows.Forms.Padding(2);
			this.AudioAutoPanCheck.Name = "AudioAutoPanCheck";
			this.AudioAutoPanCheck.Size = new System.Drawing.Size(91, 24);
			this.AudioAutoPanCheck.TabIndex = 9;
			this.AudioAutoPanCheck.Text = "自动声相";
			this.AudioAutoPanCheck.UseVisualStyleBackColor = true;
			//
			// AudioAutoPanCurveCombo
			//
			this.AudioAutoPanCurveCombo.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AudioAutoPanCurveCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.AudioAutoPanCurveCombo.FormattingEnabled = true;
			this.AudioAutoPanCurveCombo.Items.AddRange(new object[] {
			"线性",
			"快速",
			"慢速",
			"平滑",
			"急剧",
			"保留"});
			this.AudioAutoPanCurveCombo.Location = new System.Drawing.Point(97, 0);
			this.AudioAutoPanCurveCombo.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.AudioAutoPanCurveCombo.Name = "AudioAutoPanCurveCombo";
			this.AudioAutoPanCurveCombo.Size = new System.Drawing.Size(65, 28);
			this.AudioAutoPanCurveCombo.TabIndex = 10;
			//
			// VideoTab
			//
			this.VideoTab.AutoScroll = true;
			this.VideoTab.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(249)))), ((int)(((byte)(249)))), ((int)(((byte)(249)))));
			this.VideoTab.Controls.Add(this.VideoParamsGroup);
			this.VideoTab.Controls.Add(this.VideoEffectsGroup);
			this.VideoTab.Controls.Add(this.VideoVelocityGroup);
			this.VideoTab.Controls.Add(this.VideoPreferredTrackPanel);
			this.VideoTab.Controls.Add(this.VideoComboPanel);
			this.VideoTab.Controls.Add(this.VideoTogglePanel);
			this.VideoTab.Location = new System.Drawing.Point(4, 29);
			this.VideoTab.Margin = new System.Windows.Forms.Padding(2);
			this.VideoTab.Name = "VideoTab";
			this.VideoTab.Padding = new System.Windows.Forms.Padding(5);
			this.VideoTab.Size = new System.Drawing.Size(658, 626);
			this.VideoTab.TabIndex = 2;
			this.VideoTab.Text = "视频";
			this.VideoTab.UseVisualStyleBackColor = true;
			//
			// VideoParamsGroup
			//
			this.VideoParamsGroup.AutoSize = true;
			this.VideoParamsGroup.Controls.Add(this.VideoParamsTable);
			this.VideoParamsGroup.Dock = System.Windows.Forms.DockStyle.Top;
			this.VideoParamsGroup.Location = new System.Drawing.Point(5, 361);
			this.VideoParamsGroup.Margin = new System.Windows.Forms.Padding(2);
			this.VideoParamsGroup.Name = "VideoParamsGroup";
			this.VideoParamsGroup.Padding = new System.Windows.Forms.Padding(5);
			this.VideoParamsGroup.Size = new System.Drawing.Size(627, 886);
			this.VideoParamsGroup.TabIndex = 5;
			this.VideoParamsGroup.TabStop = false;
			this.VideoParamsGroup.Text = "参数";
			//
			// VideoParamsTable
			//
			this.VideoParamsTable.AutoSize = true;
			this.VideoParamsTable.ColumnCount = 3;
			this.VideoParamsTable.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.VideoParamsTable.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.VideoParamsTable.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.VideoParamsTable.Controls.Add(this.VideoFadeInTimeTxt, 1, 21);
			this.VideoParamsTable.Controls.Add(this.VideoFadeOutTimeTxt, 1, 22);
			this.VideoParamsTable.Controls.Add(this.VideoStartThresholdCurveCombo, 2, 19);
			this.VideoParamsTable.Controls.Add(this.VideoStartSaturationCurveCombo, 2, 15);
			this.VideoParamsTable.Controls.Add(this.VideoStartContrastCurveCombo, 2, 17);
			this.VideoParamsTable.Controls.Add(this.VideoStartHueCurveCombo, 2, 13);
			this.VideoParamsTable.Controls.Add(this.VideoEndContrastBox, 1, 18);
			this.VideoParamsTable.Controls.Add(this.VideoEndSaturationBox, 1, 16);
			this.VideoParamsTable.Controls.Add(this.VideoEndHueBox, 1, 14);
			this.VideoParamsTable.Controls.Add(this.VideoEndThresholdBox, 1, 20);
			this.VideoParamsTable.Controls.Add(this.VideoStartContrastBox, 1, 17);
			this.VideoParamsTable.Controls.Add(this.VideoStartSaturationBox, 1, 15);
			this.VideoParamsTable.Controls.Add(this.VideoStartThresholdBox, 1, 19);
			this.VideoParamsTable.Controls.Add(this.VideoStartHueBox, 1, 13);
			this.VideoParamsTable.Controls.Add(this.VideoStartThresholdLbl, 0, 19);
			this.VideoParamsTable.Controls.Add(this.VideoEndThresholdLbl, 0, 20);
			this.VideoParamsTable.Controls.Add(this.VideoEndSaturationLbl, 0, 16);
			this.VideoParamsTable.Controls.Add(this.VideoEndContrastLbl, 0, 18);
			this.VideoParamsTable.Controls.Add(this.VideoStartContrastLbl, 0, 17);
			this.VideoParamsTable.Controls.Add(this.VideoStartHueLbl, 0, 13);
			this.VideoParamsTable.Controls.Add(this.VideoStartSaturationLbl, 0, 15);
			this.VideoParamsTable.Controls.Add(this.VideoEndHueLbl, 0, 14);
			this.VideoParamsTable.Controls.Add(this.VideoFadeInLbl, 0, 1);
			this.VideoParamsTable.Controls.Add(this.VideoFadeInBox, 1, 1);
			this.VideoParamsTable.Controls.Add(this.VideoFadeInCurveCombo, 2, 1);
			this.VideoParamsTable.Controls.Add(this.VideoFadeOutLbl, 0, 2);
			this.VideoParamsTable.Controls.Add(this.VideoFadeOutBox, 1, 2);
			this.VideoParamsTable.Controls.Add(this.VideoFadeOutCurveCombo, 2, 2);
			this.VideoParamsTable.Controls.Add(this.VideoGlowLbl, 0, 3);
			this.VideoParamsTable.Controls.Add(this.VideoGlowBox, 1, 3);
			this.VideoParamsTable.Controls.Add(this.VideoGlowCurveCombo, 2, 3);
			this.VideoParamsTable.Controls.Add(this.VideoGlowBrightLbl, 0, 4);
			this.VideoParamsTable.Controls.Add(this.VideoGlowBrightBox, 1, 4);
			this.VideoParamsTable.Controls.Add(this.VideoStartSizeLbl, 0, 5);
			this.VideoParamsTable.Controls.Add(this.VideoStartSizeBox, 1, 5);
			this.VideoParamsTable.Controls.Add(this.VideoStartSizeCurveCombo, 2, 5);
			this.VideoParamsTable.Controls.Add(this.VideoEndSizeLbl, 0, 6);
			this.VideoParamsTable.Controls.Add(this.VideoEndSizeBox, 1, 6);
			this.VideoParamsTable.Controls.Add(this.VideoStartRotationLbl, 0, 7);
			this.VideoParamsTable.Controls.Add(this.VideoStartRotationBox, 1, 7);
			this.VideoParamsTable.Controls.Add(this.VideoEndRotationLbl, 0, 8);
			this.VideoParamsTable.Controls.Add(this.VideoEndRotationBox, 1, 8);
			this.VideoParamsTable.Controls.Add(this.VideoStartHorizontalTransLbl, 0, 9);
			this.VideoParamsTable.Controls.Add(this.VideoStartHorizontalTransBox, 1, 9);
			this.VideoParamsTable.Controls.Add(this.VideoEndHorizontalTransLbl, 0, 10);
			this.VideoParamsTable.Controls.Add(this.VideoEndHorizontalTransBox, 1, 10);
			this.VideoParamsTable.Controls.Add(this.VideoStartVerticalTransLbl, 0, 11);
			this.VideoParamsTable.Controls.Add(this.VideoStartVerticalTransBox, 1, 11);
			this.VideoParamsTable.Controls.Add(this.VideoEndVerticalTransLbl, 0, 12);
			this.VideoParamsTable.Controls.Add(this.VideoEndVerticalTransBox, 1, 12);
			this.VideoParamsTable.Controls.Add(this.tableLayoutPanel9, 0, 0);
			this.VideoParamsTable.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoParamsTable.Location = new System.Drawing.Point(5, 25);
			this.VideoParamsTable.Margin = new System.Windows.Forms.Padding(2);
			this.VideoParamsTable.Name = "VideoParamsTable";
			this.VideoParamsTable.RowCount = 23;
			this.VideoParamsTable.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.VideoParamsTable.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.VideoParamsTable.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.VideoParamsTable.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.VideoParamsTable.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.VideoParamsTable.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.VideoParamsTable.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.VideoParamsTable.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.VideoParamsTable.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.VideoParamsTable.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.VideoParamsTable.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.VideoParamsTable.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.VideoParamsTable.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.VideoParamsTable.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.VideoParamsTable.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.VideoParamsTable.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.VideoParamsTable.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.VideoParamsTable.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.VideoParamsTable.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.VideoParamsTable.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.VideoParamsTable.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.VideoParamsTable.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 0F));
			this.VideoParamsTable.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 0F));
			this.VideoParamsTable.Size = new System.Drawing.Size(617, 856);
			this.VideoParamsTable.TabIndex = 0;
			//
			// VideoFadeInTimeTxt
			//
			this.VideoFadeInTimeTxt.Dock = System.Windows.Forms.DockStyle.Left;
			this.VideoFadeInTimeTxt.Location = new System.Drawing.Point(88, 859);
			this.VideoFadeInTimeTxt.Margin = new System.Windows.Forms.Padding(15, 3, 3, 3);
			this.VideoFadeInTimeTxt.Name = "VideoFadeInTimeTxt";
			this.VideoFadeInTimeTxt.Size = new System.Drawing.Size(200, 27);
			this.VideoFadeInTimeTxt.TabIndex = 3;
			this.VideoFadeInTimeTxt.Visible = false;
			this.VideoFadeInTimeTxt.TextChanged += new System.EventHandler(this.TimecodeText_Leave);
			//
			// VideoFadeOutTimeTxt
			//
			this.VideoFadeOutTimeTxt.Dock = System.Windows.Forms.DockStyle.Left;
			this.VideoFadeOutTimeTxt.Location = new System.Drawing.Point(88, 859);
			this.VideoFadeOutTimeTxt.Margin = new System.Windows.Forms.Padding(15, 3, 3, 3);
			this.VideoFadeOutTimeTxt.Name = "VideoFadeOutTimeTxt";
			this.VideoFadeOutTimeTxt.Size = new System.Drawing.Size(200, 27);
			this.VideoFadeOutTimeTxt.TabIndex = 6;
			this.VideoFadeOutTimeTxt.Visible = false;
			this.VideoFadeOutTimeTxt.TextChanged += new System.EventHandler(this.TimecodeText_Leave);
			//
			// VideoStartThresholdCurveCombo
			//
			this.VideoStartThresholdCurveCombo.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoStartThresholdCurveCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.VideoStartThresholdCurveCombo.FormattingEnabled = true;
			this.VideoStartThresholdCurveCombo.Items.AddRange(new object[] {
			"线性",
			"快速",
			"慢速",
			"平滑",
			"急剧"});
			this.VideoStartThresholdCurveCombo.Location = new System.Drawing.Point(550, 778);
			this.VideoStartThresholdCurveCombo.Margin = new System.Windows.Forms.Padding(2, 4, 2, 4);
			this.VideoStartThresholdCurveCombo.Name = "VideoStartThresholdCurveCombo";
			this.VideoStartThresholdCurveCombo.Size = new System.Drawing.Size(65, 28);
			this.VideoStartThresholdCurveCombo.TabIndex = 43;
			//
			// VideoStartSaturationCurveCombo
			//
			this.VideoStartSaturationCurveCombo.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoStartSaturationCurveCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.VideoStartSaturationCurveCombo.FormattingEnabled = true;
			this.VideoStartSaturationCurveCombo.Items.AddRange(new object[] {
			"线性",
			"快速",
			"慢速",
			"平滑",
			"急剧"});
			this.VideoStartSaturationCurveCombo.Location = new System.Drawing.Point(550, 614);
			this.VideoStartSaturationCurveCombo.Margin = new System.Windows.Forms.Padding(2, 4, 2, 4);
			this.VideoStartSaturationCurveCombo.Name = "VideoStartSaturationCurveCombo";
			this.VideoStartSaturationCurveCombo.Size = new System.Drawing.Size(65, 28);
			this.VideoStartSaturationCurveCombo.TabIndex = 37;
			//
			// VideoStartContrastCurveCombo
			//
			this.VideoStartContrastCurveCombo.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoStartContrastCurveCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.VideoStartContrastCurveCombo.FormattingEnabled = true;
			this.VideoStartContrastCurveCombo.Items.AddRange(new object[] {
			"线性",
			"快速",
			"慢速",
			"平滑",
			"急剧"});
			this.VideoStartContrastCurveCombo.Location = new System.Drawing.Point(550, 696);
			this.VideoStartContrastCurveCombo.Margin = new System.Windows.Forms.Padding(2, 4, 2, 4);
			this.VideoStartContrastCurveCombo.Name = "VideoStartContrastCurveCombo";
			this.VideoStartContrastCurveCombo.Size = new System.Drawing.Size(65, 28);
			this.VideoStartContrastCurveCombo.TabIndex = 40;
			//
			// VideoStartHueCurveCombo
			//
			this.VideoStartHueCurveCombo.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoStartHueCurveCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.VideoStartHueCurveCombo.FormattingEnabled = true;
			this.VideoStartHueCurveCombo.Items.AddRange(new object[] {
			"线性",
			"快速",
			"慢速",
			"平滑",
			"急剧"});
			this.VideoStartHueCurveCombo.Location = new System.Drawing.Point(550, 532);
			this.VideoStartHueCurveCombo.Margin = new System.Windows.Forms.Padding(2, 4, 2, 4);
			this.VideoStartHueCurveCombo.Name = "VideoStartHueCurveCombo";
			this.VideoStartHueCurveCombo.Size = new System.Drawing.Size(65, 28);
			this.VideoStartHueCurveCombo.TabIndex = 34;
			//
			// VideoEndContrastBox
			//
			this.VideoEndContrastBox.BackColor = System.Drawing.Color.Transparent;
			this.VideoEndContrastBox.DefaultValue = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.VideoEndContrastBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoEndContrastBox.Font = new System.Drawing.Font("Microsoft YaHei UI", 9F);
			this.VideoEndContrastBox.Location = new System.Drawing.Point(78, 738);
			this.VideoEndContrastBox.Margin = new System.Windows.Forms.Padding(5);
			this.VideoEndContrastBox.Maximum = new decimal(new int[] {
			100,
			0,
			0,
			0});
			this.VideoEndContrastBox.Minimum = new decimal(new int[] {
			100,
			0,
			0,
			-2147483648});
			this.VideoEndContrastBox.MinimumSize = new System.Drawing.Size(0, 31);
			this.VideoEndContrastBox.Name = "VideoEndContrastBox";
			this.VideoEndContrastBox.NumericUpDownWidth = 65;
			this.VideoEndContrastBox.Size = new System.Drawing.Size(465, 31);
			this.VideoEndContrastBox.TabIndex = 41;
			this.VideoEndContrastBox.TickStyle = System.Windows.Forms.TickStyle.TopLeft;
			this.VideoEndContrastBox.Value = new decimal(new int[] {
			0,
			0,
			0,
			0});
			//
			// VideoEndSaturationBox
			//
			this.VideoEndSaturationBox.BackColor = System.Drawing.Color.Transparent;
			this.VideoEndSaturationBox.DefaultValue = new decimal(new int[] {
			100,
			0,
			0,
			0});
			this.VideoEndSaturationBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoEndSaturationBox.Font = new System.Drawing.Font("Microsoft YaHei UI", 9F);
			this.VideoEndSaturationBox.Location = new System.Drawing.Point(78, 656);
			this.VideoEndSaturationBox.Margin = new System.Windows.Forms.Padding(5);
			this.VideoEndSaturationBox.Maximum = new decimal(new int[] {
			200,
			0,
			0,
			0});
			this.VideoEndSaturationBox.Minimum = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.VideoEndSaturationBox.MinimumSize = new System.Drawing.Size(0, 31);
			this.VideoEndSaturationBox.Name = "VideoEndSaturationBox";
			this.VideoEndSaturationBox.NumericUpDownWidth = 65;
			this.VideoEndSaturationBox.Size = new System.Drawing.Size(465, 31);
			this.VideoEndSaturationBox.TabIndex = 38;
			this.VideoEndSaturationBox.TickStyle = System.Windows.Forms.TickStyle.TopLeft;
			this.VideoEndSaturationBox.Value = new decimal(new int[] {
			100,
			0,
			0,
			0});
			//
			// VideoEndHueBox
			//
			this.VideoEndHueBox.BackColor = System.Drawing.Color.Transparent;
			this.VideoEndHueBox.DefaultValue = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.VideoEndHueBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoEndHueBox.Font = new System.Drawing.Font("Microsoft YaHei UI", 9F);
			this.VideoEndHueBox.Location = new System.Drawing.Point(78, 574);
			this.VideoEndHueBox.Margin = new System.Windows.Forms.Padding(5);
			this.VideoEndHueBox.Maximum = new decimal(new int[] {
			360,
			0,
			0,
			0});
			this.VideoEndHueBox.Minimum = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.VideoEndHueBox.MinimumSize = new System.Drawing.Size(0, 31);
			this.VideoEndHueBox.Name = "VideoEndHueBox";
			this.VideoEndHueBox.NumericUpDownWidth = 65;
			this.VideoEndHueBox.Size = new System.Drawing.Size(465, 31);
			this.VideoEndHueBox.TabIndex = 35;
			this.VideoEndHueBox.TickStyle = System.Windows.Forms.TickStyle.TopLeft;
			this.VideoEndHueBox.Value = new decimal(new int[] {
			0,
			0,
			0,
			0});
			//
			// VideoEndThresholdBox
			//
			this.VideoEndThresholdBox.BackColor = System.Drawing.Color.Transparent;
			this.VideoEndThresholdBox.DefaultValue = new decimal(new int[] {
			50,
			0,
			0,
			0});
			this.VideoEndThresholdBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoEndThresholdBox.Font = new System.Drawing.Font("Microsoft YaHei UI", 9F);
			this.VideoEndThresholdBox.Location = new System.Drawing.Point(78, 820);
			this.VideoEndThresholdBox.Margin = new System.Windows.Forms.Padding(5);
			this.VideoEndThresholdBox.Maximum = new decimal(new int[] {
			100,
			0,
			0,
			0});
			this.VideoEndThresholdBox.Minimum = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.VideoEndThresholdBox.MinimumSize = new System.Drawing.Size(0, 31);
			this.VideoEndThresholdBox.Name = "VideoEndThresholdBox";
			this.VideoEndThresholdBox.NumericUpDownWidth = 65;
			this.VideoEndThresholdBox.Size = new System.Drawing.Size(465, 31);
			this.VideoEndThresholdBox.TabIndex = 44;
			this.VideoEndThresholdBox.TickStyle = System.Windows.Forms.TickStyle.TopLeft;
			this.VideoEndThresholdBox.Value = new decimal(new int[] {
			50,
			0,
			0,
			0});
			//
			// VideoStartContrastBox
			//
			this.VideoStartContrastBox.BackColor = System.Drawing.Color.Transparent;
			this.VideoStartContrastBox.DefaultValue = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.VideoStartContrastBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoStartContrastBox.Font = new System.Drawing.Font("Microsoft YaHei UI", 9F);
			this.VideoStartContrastBox.Location = new System.Drawing.Point(78, 697);
			this.VideoStartContrastBox.Margin = new System.Windows.Forms.Padding(5);
			this.VideoStartContrastBox.Maximum = new decimal(new int[] {
			100,
			0,
			0,
			0});
			this.VideoStartContrastBox.Minimum = new decimal(new int[] {
			100,
			0,
			0,
			-2147483648});
			this.VideoStartContrastBox.MinimumSize = new System.Drawing.Size(0, 31);
			this.VideoStartContrastBox.Name = "VideoStartContrastBox";
			this.VideoStartContrastBox.NumericUpDownWidth = 65;
			this.VideoStartContrastBox.Size = new System.Drawing.Size(465, 31);
			this.VideoStartContrastBox.TabIndex = 39;
			this.VideoStartContrastBox.Value = new decimal(new int[] {
			0,
			0,
			0,
			0});
			//
			// VideoStartSaturationBox
			//
			this.VideoStartSaturationBox.BackColor = System.Drawing.Color.Transparent;
			this.VideoStartSaturationBox.DefaultValue = new decimal(new int[] {
			100,
			0,
			0,
			0});
			this.VideoStartSaturationBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoStartSaturationBox.Font = new System.Drawing.Font("Microsoft YaHei UI", 9F);
			this.VideoStartSaturationBox.Location = new System.Drawing.Point(78, 615);
			this.VideoStartSaturationBox.Margin = new System.Windows.Forms.Padding(5);
			this.VideoStartSaturationBox.Maximum = new decimal(new int[] {
			200,
			0,
			0,
			0});
			this.VideoStartSaturationBox.Minimum = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.VideoStartSaturationBox.MinimumSize = new System.Drawing.Size(0, 31);
			this.VideoStartSaturationBox.Name = "VideoStartSaturationBox";
			this.VideoStartSaturationBox.NumericUpDownWidth = 65;
			this.VideoStartSaturationBox.Size = new System.Drawing.Size(465, 31);
			this.VideoStartSaturationBox.TabIndex = 36;
			this.VideoStartSaturationBox.Value = new decimal(new int[] {
			100,
			0,
			0,
			0});
			//
			// VideoStartThresholdBox
			//
			this.VideoStartThresholdBox.BackColor = System.Drawing.Color.Transparent;
			this.VideoStartThresholdBox.DefaultValue = new decimal(new int[] {
			50,
			0,
			0,
			0});
			this.VideoStartThresholdBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoStartThresholdBox.Font = new System.Drawing.Font("Microsoft YaHei UI", 9F);
			this.VideoStartThresholdBox.Location = new System.Drawing.Point(78, 779);
			this.VideoStartThresholdBox.Margin = new System.Windows.Forms.Padding(5);
			this.VideoStartThresholdBox.Maximum = new decimal(new int[] {
			100,
			0,
			0,
			0});
			this.VideoStartThresholdBox.Minimum = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.VideoStartThresholdBox.MinimumSize = new System.Drawing.Size(0, 31);
			this.VideoStartThresholdBox.Name = "VideoStartThresholdBox";
			this.VideoStartThresholdBox.NumericUpDownWidth = 65;
			this.VideoStartThresholdBox.Size = new System.Drawing.Size(465, 31);
			this.VideoStartThresholdBox.TabIndex = 42;
			this.VideoStartThresholdBox.Value = new decimal(new int[] {
			50,
			0,
			0,
			0});
			//
			// VideoStartHueBox
			//
			this.VideoStartHueBox.BackColor = System.Drawing.Color.Transparent;
			this.VideoStartHueBox.DefaultValue = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.VideoStartHueBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoStartHueBox.Font = new System.Drawing.Font("Microsoft YaHei UI", 9F);
			this.VideoStartHueBox.Location = new System.Drawing.Point(78, 533);
			this.VideoStartHueBox.Margin = new System.Windows.Forms.Padding(5);
			this.VideoStartHueBox.Maximum = new decimal(new int[] {
			360,
			0,
			0,
			0});
			this.VideoStartHueBox.Minimum = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.VideoStartHueBox.MinimumSize = new System.Drawing.Size(0, 31);
			this.VideoStartHueBox.Name = "VideoStartHueBox";
			this.VideoStartHueBox.NumericUpDownWidth = 65;
			this.VideoStartHueBox.Size = new System.Drawing.Size(465, 31);
			this.VideoStartHueBox.TabIndex = 33;
			this.VideoStartHueBox.Value = new decimal(new int[] {
			0,
			0,
			0,
			0});
			//
			// VideoStartThresholdLbl
			//
			this.VideoStartThresholdLbl.AutoSize = true;
			this.VideoStartThresholdLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoStartThresholdLbl.Location = new System.Drawing.Point(2, 774);
			this.VideoStartThresholdLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.VideoStartThresholdLbl.Name = "VideoStartThresholdLbl";
			this.VideoStartThresholdLbl.Size = new System.Drawing.Size(69, 41);
			this.VideoStartThresholdLbl.TabIndex = 32;
			this.VideoStartThresholdLbl.Text = "起始阈值";
			this.VideoStartThresholdLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// VideoEndThresholdLbl
			//
			this.VideoEndThresholdLbl.AutoSize = true;
			this.VideoEndThresholdLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoEndThresholdLbl.Location = new System.Drawing.Point(2, 815);
			this.VideoEndThresholdLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.VideoEndThresholdLbl.Name = "VideoEndThresholdLbl";
			this.VideoEndThresholdLbl.Size = new System.Drawing.Size(69, 41);
			this.VideoEndThresholdLbl.TabIndex = 31;
			this.VideoEndThresholdLbl.Text = "终止阈值";
			this.VideoEndThresholdLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// VideoEndSaturationLbl
			//
			this.VideoEndSaturationLbl.AutoSize = true;
			this.VideoEndSaturationLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoEndSaturationLbl.Location = new System.Drawing.Point(2, 651);
			this.VideoEndSaturationLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.VideoEndSaturationLbl.Name = "VideoEndSaturationLbl";
			this.VideoEndSaturationLbl.Size = new System.Drawing.Size(69, 41);
			this.VideoEndSaturationLbl.TabIndex = 30;
			this.VideoEndSaturationLbl.Text = "终止饱和";
			this.VideoEndSaturationLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// VideoEndContrastLbl
			//
			this.VideoEndContrastLbl.AutoSize = true;
			this.VideoEndContrastLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoEndContrastLbl.Location = new System.Drawing.Point(2, 733);
			this.VideoEndContrastLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.VideoEndContrastLbl.Name = "VideoEndContrastLbl";
			this.VideoEndContrastLbl.Size = new System.Drawing.Size(69, 41);
			this.VideoEndContrastLbl.TabIndex = 29;
			this.VideoEndContrastLbl.Text = "终止对比";
			this.VideoEndContrastLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// VideoStartContrastLbl
			//
			this.VideoStartContrastLbl.AutoSize = true;
			this.VideoStartContrastLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoStartContrastLbl.Location = new System.Drawing.Point(2, 692);
			this.VideoStartContrastLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.VideoStartContrastLbl.Name = "VideoStartContrastLbl";
			this.VideoStartContrastLbl.Size = new System.Drawing.Size(69, 41);
			this.VideoStartContrastLbl.TabIndex = 28;
			this.VideoStartContrastLbl.Text = "起始对比";
			this.VideoStartContrastLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// VideoStartHueLbl
			//
			this.VideoStartHueLbl.AutoSize = true;
			this.VideoStartHueLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoStartHueLbl.Location = new System.Drawing.Point(2, 528);
			this.VideoStartHueLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.VideoStartHueLbl.Name = "VideoStartHueLbl";
			this.VideoStartHueLbl.Size = new System.Drawing.Size(69, 41);
			this.VideoStartHueLbl.TabIndex = 27;
			this.VideoStartHueLbl.Text = "起始色相";
			this.VideoStartHueLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// VideoStartSaturationLbl
			//
			this.VideoStartSaturationLbl.AutoSize = true;
			this.VideoStartSaturationLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoStartSaturationLbl.Location = new System.Drawing.Point(2, 610);
			this.VideoStartSaturationLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.VideoStartSaturationLbl.Name = "VideoStartSaturationLbl";
			this.VideoStartSaturationLbl.Size = new System.Drawing.Size(69, 41);
			this.VideoStartSaturationLbl.TabIndex = 26;
			this.VideoStartSaturationLbl.Text = "起始饱和";
			this.VideoStartSaturationLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// VideoEndHueLbl
			//
			this.VideoEndHueLbl.AutoSize = true;
			this.VideoEndHueLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoEndHueLbl.Location = new System.Drawing.Point(2, 569);
			this.VideoEndHueLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.VideoEndHueLbl.Name = "VideoEndHueLbl";
			this.VideoEndHueLbl.Size = new System.Drawing.Size(69, 41);
			this.VideoEndHueLbl.TabIndex = 25;
			this.VideoEndHueLbl.Text = "终止色相";
			this.VideoEndHueLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// VideoFadeInLbl
			//
			this.VideoFadeInLbl.AutoSize = true;
			this.VideoFadeInLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoFadeInLbl.Location = new System.Drawing.Point(2, 36);
			this.VideoFadeInLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.VideoFadeInLbl.MinimumSize = new System.Drawing.Size(0, 41);
			this.VideoFadeInLbl.Name = "VideoFadeInLbl";
			this.VideoFadeInLbl.Size = new System.Drawing.Size(69, 41);
			this.VideoFadeInLbl.TabIndex = 0;
			this.VideoFadeInLbl.Text = "渐入　　";
			this.VideoFadeInLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// VideoFadeInBox
			//
			this.VideoFadeInBox.BackColor = System.Drawing.Color.Transparent;
			this.VideoFadeInBox.DefaultValue = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.VideoFadeInBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoFadeInBox.Font = new System.Drawing.Font("Microsoft YaHei UI", 9F);
			this.VideoFadeInBox.Location = new System.Drawing.Point(78, 41);
			this.VideoFadeInBox.Margin = new System.Windows.Forms.Padding(5);
			this.VideoFadeInBox.Maximum = new decimal(new int[] {
			100,
			0,
			0,
			0});
			this.VideoFadeInBox.Minimum = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.VideoFadeInBox.MinimumSize = new System.Drawing.Size(0, 31);
			this.VideoFadeInBox.Name = "VideoFadeInBox";
			this.VideoFadeInBox.NumericUpDownWidth = 65;
			this.VideoFadeInBox.Size = new System.Drawing.Size(465, 31);
			this.VideoFadeInBox.TabIndex = 2;
			this.VideoFadeInBox.Value = new decimal(new int[] {
			0,
			0,
			0,
			0});
			//
			// VideoFadeInCurveCombo
			//
			this.VideoFadeInCurveCombo.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoFadeInCurveCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.VideoFadeInCurveCombo.FormattingEnabled = true;
			this.VideoFadeInCurveCombo.Items.AddRange(new object[] {
			"线性",
			"快速",
			"慢速",
			"平滑",
			"急剧"});
			this.VideoFadeInCurveCombo.Location = new System.Drawing.Point(550, 40);
			this.VideoFadeInCurveCombo.Margin = new System.Windows.Forms.Padding(2, 4, 2, 4);
			this.VideoFadeInCurveCombo.Name = "VideoFadeInCurveCombo";
			this.VideoFadeInCurveCombo.Size = new System.Drawing.Size(65, 28);
			this.VideoFadeInCurveCombo.TabIndex = 4;
			//
			// VideoFadeOutLbl
			//
			this.VideoFadeOutLbl.AutoSize = true;
			this.VideoFadeOutLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoFadeOutLbl.Location = new System.Drawing.Point(2, 77);
			this.VideoFadeOutLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.VideoFadeOutLbl.MinimumSize = new System.Drawing.Size(0, 41);
			this.VideoFadeOutLbl.Name = "VideoFadeOutLbl";
			this.VideoFadeOutLbl.Size = new System.Drawing.Size(69, 41);
			this.VideoFadeOutLbl.TabIndex = 1;
			this.VideoFadeOutLbl.Text = "渐出　　";
			this.VideoFadeOutLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// VideoFadeOutBox
			//
			this.VideoFadeOutBox.BackColor = System.Drawing.Color.Transparent;
			this.VideoFadeOutBox.DefaultValue = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.VideoFadeOutBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoFadeOutBox.Font = new System.Drawing.Font("Microsoft YaHei UI", 9F);
			this.VideoFadeOutBox.Location = new System.Drawing.Point(78, 82);
			this.VideoFadeOutBox.Margin = new System.Windows.Forms.Padding(5);
			this.VideoFadeOutBox.Maximum = new decimal(new int[] {
			100,
			0,
			0,
			0});
			this.VideoFadeOutBox.Minimum = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.VideoFadeOutBox.MinimumSize = new System.Drawing.Size(0, 31);
			this.VideoFadeOutBox.Name = "VideoFadeOutBox";
			this.VideoFadeOutBox.NumericUpDownWidth = 65;
			this.VideoFadeOutBox.Size = new System.Drawing.Size(465, 31);
			this.VideoFadeOutBox.TabIndex = 5;
			this.VideoFadeOutBox.TickStyle = System.Windows.Forms.TickStyle.TopLeft;
			this.VideoFadeOutBox.Value = new decimal(new int[] {
			0,
			0,
			0,
			0});
			//
			// VideoFadeOutCurveCombo
			//
			this.VideoFadeOutCurveCombo.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoFadeOutCurveCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.VideoFadeOutCurveCombo.FormattingEnabled = true;
			this.VideoFadeOutCurveCombo.Items.AddRange(new object[] {
			"线性",
			"快速",
			"慢速",
			"平滑",
			"急剧"});
			this.VideoFadeOutCurveCombo.Location = new System.Drawing.Point(550, 81);
			this.VideoFadeOutCurveCombo.Margin = new System.Windows.Forms.Padding(2, 4, 2, 4);
			this.VideoFadeOutCurveCombo.Name = "VideoFadeOutCurveCombo";
			this.VideoFadeOutCurveCombo.Size = new System.Drawing.Size(65, 28);
			this.VideoFadeOutCurveCombo.TabIndex = 7;
			//
			// VideoGlowLbl
			//
			this.VideoGlowLbl.AutoSize = true;
			this.VideoGlowLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoGlowLbl.Location = new System.Drawing.Point(2, 118);
			this.VideoGlowLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.VideoGlowLbl.Name = "VideoGlowLbl";
			this.VideoGlowLbl.Size = new System.Drawing.Size(69, 41);
			this.VideoGlowLbl.TabIndex = 23;
			this.VideoGlowLbl.Text = "发光";
			this.VideoGlowLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// VideoGlowBox
			//
			this.VideoGlowBox.BackColor = System.Drawing.Color.Transparent;
			this.VideoGlowBox.DefaultValue = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.VideoGlowBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoGlowBox.Font = new System.Drawing.Font("Microsoft YaHei UI", 9F);
			this.VideoGlowBox.Location = new System.Drawing.Point(78, 123);
			this.VideoGlowBox.Margin = new System.Windows.Forms.Padding(5);
			this.VideoGlowBox.Maximum = new decimal(new int[] {
			100,
			0,
			0,
			0});
			this.VideoGlowBox.Minimum = new decimal(new int[] {
			100,
			0,
			0,
			-2147483648});
			this.VideoGlowBox.MinimumSize = new System.Drawing.Size(0, 31);
			this.VideoGlowBox.Name = "VideoGlowBox";
			this.VideoGlowBox.NumericUpDownWidth = 65;
			this.VideoGlowBox.Size = new System.Drawing.Size(465, 31);
			this.VideoGlowBox.TabIndex = 10;
			this.VideoGlowBox.Value = new decimal(new int[] {
			0,
			0,
			0,
			0});
			//
			// VideoGlowCurveCombo
			//
			this.VideoGlowCurveCombo.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoGlowCurveCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.VideoGlowCurveCombo.FormattingEnabled = true;
			this.VideoGlowCurveCombo.Items.AddRange(new object[] {
			"线性",
			"快速",
			"慢速",
			"平滑",
			"急剧"});
			this.VideoGlowCurveCombo.Location = new System.Drawing.Point(550, 122);
			this.VideoGlowCurveCombo.Margin = new System.Windows.Forms.Padding(2, 4, 2, 4);
			this.VideoGlowCurveCombo.Name = "VideoGlowCurveCombo";
			this.VideoGlowCurveCombo.Size = new System.Drawing.Size(65, 28);
			this.VideoGlowCurveCombo.TabIndex = 11;
			//
			// VideoGlowBrightLbl
			//
			this.VideoGlowBrightLbl.AutoSize = true;
			this.VideoGlowBrightLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoGlowBrightLbl.Location = new System.Drawing.Point(2, 159);
			this.VideoGlowBrightLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.VideoGlowBrightLbl.Name = "VideoGlowBrightLbl";
			this.VideoGlowBrightLbl.Size = new System.Drawing.Size(69, 41);
			this.VideoGlowBrightLbl.TabIndex = 24;
			this.VideoGlowBrightLbl.Text = "发光亮度";
			this.VideoGlowBrightLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// VideoGlowBrightBox
			//
			this.VideoGlowBrightBox.BackColor = System.Drawing.Color.Transparent;
			this.VideoGlowBrightBox.DefaultValue = new decimal(new int[] {
			100,
			0,
			0,
			0});
			this.VideoGlowBrightBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoGlowBrightBox.Font = new System.Drawing.Font("Microsoft YaHei UI", 9F);
			this.VideoGlowBrightBox.Location = new System.Drawing.Point(78, 164);
			this.VideoGlowBrightBox.Margin = new System.Windows.Forms.Padding(5);
			this.VideoGlowBrightBox.Maximum = new decimal(new int[] {
			100,
			0,
			0,
			0});
			this.VideoGlowBrightBox.Minimum = new decimal(new int[] {
			100,
			0,
			0,
			-2147483648});
			this.VideoGlowBrightBox.MinimumSize = new System.Drawing.Size(0, 31);
			this.VideoGlowBrightBox.Name = "VideoGlowBrightBox";
			this.VideoGlowBrightBox.NumericUpDownWidth = 65;
			this.VideoGlowBrightBox.Size = new System.Drawing.Size(465, 31);
			this.VideoGlowBrightBox.TabIndex = 12;
			this.VideoGlowBrightBox.TickStyle = System.Windows.Forms.TickStyle.TopLeft;
			this.VideoGlowBrightBox.Value = new decimal(new int[] {
			100,
			0,
			0,
			0});
			//
			// VideoStartSizeLbl
			//
			this.VideoStartSizeLbl.AutoSize = true;
			this.VideoStartSizeLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoStartSizeLbl.Location = new System.Drawing.Point(2, 200);
			this.VideoStartSizeLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.VideoStartSizeLbl.Name = "VideoStartSizeLbl";
			this.VideoStartSizeLbl.Size = new System.Drawing.Size(69, 41);
			this.VideoStartSizeLbl.TabIndex = 6;
			this.VideoStartSizeLbl.Text = "起始尺寸";
			this.VideoStartSizeLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// VideoStartSizeBox
			//
			this.VideoStartSizeBox.BackColor = System.Drawing.Color.Transparent;
			this.VideoStartSizeBox.DefaultValue = new decimal(new int[] {
			90,
			0,
			0,
			0});
			this.VideoStartSizeBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoStartSizeBox.Font = new System.Drawing.Font("Microsoft YaHei UI", 9F);
			this.VideoStartSizeBox.Location = new System.Drawing.Point(78, 205);
			this.VideoStartSizeBox.Margin = new System.Windows.Forms.Padding(5);
			this.VideoStartSizeBox.Maximum = new decimal(new int[] {
			200,
			0,
			0,
			0});
			this.VideoStartSizeBox.Minimum = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.VideoStartSizeBox.MinimumSize = new System.Drawing.Size(0, 31);
			this.VideoStartSizeBox.Name = "VideoStartSizeBox";
			this.VideoStartSizeBox.NumericUpDownWidth = 65;
			this.VideoStartSizeBox.Size = new System.Drawing.Size(465, 31);
			this.VideoStartSizeBox.TabIndex = 14;
			this.VideoStartSizeBox.Value = new decimal(new int[] {
			90,
			0,
			0,
			0});
			//
			// VideoStartSizeCurveCombo
			//
			this.VideoStartSizeCurveCombo.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoStartSizeCurveCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.VideoStartSizeCurveCombo.FormattingEnabled = true;
			this.VideoStartSizeCurveCombo.Items.AddRange(new object[] {
			"线性",
			"快速",
			"慢速",
			"平滑",
			"急剧"});
			this.VideoStartSizeCurveCombo.Location = new System.Drawing.Point(550, 204);
			this.VideoStartSizeCurveCombo.Margin = new System.Windows.Forms.Padding(2, 4, 2, 4);
			this.VideoStartSizeCurveCombo.Name = "VideoStartSizeCurveCombo";
			this.VideoStartSizeCurveCombo.Size = new System.Drawing.Size(65, 28);
			this.VideoStartSizeCurveCombo.TabIndex = 15;
			//
			// VideoEndSizeLbl
			//
			this.VideoEndSizeLbl.AutoSize = true;
			this.VideoEndSizeLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoEndSizeLbl.Location = new System.Drawing.Point(2, 241);
			this.VideoEndSizeLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.VideoEndSizeLbl.Name = "VideoEndSizeLbl";
			this.VideoEndSizeLbl.Size = new System.Drawing.Size(69, 41);
			this.VideoEndSizeLbl.TabIndex = 7;
			this.VideoEndSizeLbl.Text = "终止尺寸";
			this.VideoEndSizeLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// VideoEndSizeBox
			//
			this.VideoEndSizeBox.BackColor = System.Drawing.Color.Transparent;
			this.VideoEndSizeBox.DefaultValue = new decimal(new int[] {
			100,
			0,
			0,
			0});
			this.VideoEndSizeBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoEndSizeBox.Font = new System.Drawing.Font("Microsoft YaHei UI", 9F);
			this.VideoEndSizeBox.Location = new System.Drawing.Point(78, 246);
			this.VideoEndSizeBox.Margin = new System.Windows.Forms.Padding(5);
			this.VideoEndSizeBox.Maximum = new decimal(new int[] {
			200,
			0,
			0,
			0});
			this.VideoEndSizeBox.Minimum = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.VideoEndSizeBox.MinimumSize = new System.Drawing.Size(0, 31);
			this.VideoEndSizeBox.Name = "VideoEndSizeBox";
			this.VideoEndSizeBox.NumericUpDownWidth = 65;
			this.VideoEndSizeBox.Size = new System.Drawing.Size(465, 31);
			this.VideoEndSizeBox.TabIndex = 16;
			this.VideoEndSizeBox.TickStyle = System.Windows.Forms.TickStyle.TopLeft;
			this.VideoEndSizeBox.Value = new decimal(new int[] {
			100,
			0,
			0,
			0});
			//
			// VideoStartRotationLbl
			//
			this.VideoStartRotationLbl.AutoSize = true;
			this.VideoStartRotationLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoStartRotationLbl.Location = new System.Drawing.Point(2, 282);
			this.VideoStartRotationLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.VideoStartRotationLbl.Name = "VideoStartRotationLbl";
			this.VideoStartRotationLbl.Size = new System.Drawing.Size(69, 41);
			this.VideoStartRotationLbl.TabIndex = 8;
			this.VideoStartRotationLbl.Text = "起始旋转";
			this.VideoStartRotationLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// VideoStartRotationBox
			//
			this.VideoStartRotationBox.BackColor = System.Drawing.Color.Transparent;
			this.VideoStartRotationBox.DefaultValue = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.VideoStartRotationBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoStartRotationBox.Font = new System.Drawing.Font("Microsoft YaHei UI", 9F);
			this.VideoStartRotationBox.Location = new System.Drawing.Point(78, 287);
			this.VideoStartRotationBox.Margin = new System.Windows.Forms.Padding(5);
			this.VideoStartRotationBox.Maximum = new decimal(new int[] {
			360,
			0,
			0,
			0});
			this.VideoStartRotationBox.Minimum = new decimal(new int[] {
			360,
			0,
			0,
			-2147483648});
			this.VideoStartRotationBox.MinimumSize = new System.Drawing.Size(0, 31);
			this.VideoStartRotationBox.Name = "VideoStartRotationBox";
			this.VideoStartRotationBox.NumericUpDownWidth = 65;
			this.VideoStartRotationBox.Size = new System.Drawing.Size(465, 31);
			this.VideoStartRotationBox.TabIndex = 17;
			this.VideoStartRotationBox.Value = new decimal(new int[] {
			0,
			0,
			0,
			0});
			//
			// VideoEndRotationLbl
			//
			this.VideoEndRotationLbl.AutoSize = true;
			this.VideoEndRotationLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoEndRotationLbl.Location = new System.Drawing.Point(2, 323);
			this.VideoEndRotationLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.VideoEndRotationLbl.Name = "VideoEndRotationLbl";
			this.VideoEndRotationLbl.Size = new System.Drawing.Size(69, 41);
			this.VideoEndRotationLbl.TabIndex = 9;
			this.VideoEndRotationLbl.Text = "终止旋转";
			this.VideoEndRotationLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// VideoEndRotationBox
			//
			this.VideoEndRotationBox.BackColor = System.Drawing.Color.Transparent;
			this.VideoEndRotationBox.DefaultValue = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.VideoEndRotationBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoEndRotationBox.Font = new System.Drawing.Font("Microsoft YaHei UI", 9F);
			this.VideoEndRotationBox.Location = new System.Drawing.Point(78, 328);
			this.VideoEndRotationBox.Margin = new System.Windows.Forms.Padding(5);
			this.VideoEndRotationBox.Maximum = new decimal(new int[] {
			360,
			0,
			0,
			0});
			this.VideoEndRotationBox.Minimum = new decimal(new int[] {
			360,
			0,
			0,
			-2147483648});
			this.VideoEndRotationBox.MinimumSize = new System.Drawing.Size(0, 31);
			this.VideoEndRotationBox.Name = "VideoEndRotationBox";
			this.VideoEndRotationBox.NumericUpDownWidth = 65;
			this.VideoEndRotationBox.Size = new System.Drawing.Size(465, 31);
			this.VideoEndRotationBox.TabIndex = 18;
			this.VideoEndRotationBox.TickStyle = System.Windows.Forms.TickStyle.TopLeft;
			this.VideoEndRotationBox.Value = new decimal(new int[] {
			0,
			0,
			0,
			0});
			//
			// VideoStartHorizontalTransLbl
			//
			this.VideoStartHorizontalTransLbl.AutoSize = true;
			this.VideoStartHorizontalTransLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoStartHorizontalTransLbl.Location = new System.Drawing.Point(2, 364);
			this.VideoStartHorizontalTransLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.VideoStartHorizontalTransLbl.Name = "VideoStartHorizontalTransLbl";
			this.VideoStartHorizontalTransLbl.Size = new System.Drawing.Size(69, 41);
			this.VideoStartHorizontalTransLbl.TabIndex = 12;
			this.VideoStartHorizontalTransLbl.Text = "起始平移";
			this.VideoStartHorizontalTransLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// VideoStartHorizontalTransBox
			//
			this.VideoStartHorizontalTransBox.BackColor = System.Drawing.Color.Transparent;
			this.VideoStartHorizontalTransBox.DefaultValue = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.VideoStartHorizontalTransBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoStartHorizontalTransBox.Font = new System.Drawing.Font("Microsoft YaHei UI", 9F);
			this.VideoStartHorizontalTransBox.Location = new System.Drawing.Point(78, 369);
			this.VideoStartHorizontalTransBox.Margin = new System.Windows.Forms.Padding(5);
			this.VideoStartHorizontalTransBox.Maximum = new decimal(new int[] {
			100,
			0,
			0,
			0});
			this.VideoStartHorizontalTransBox.Minimum = new decimal(new int[] {
			100,
			0,
			0,
			-2147483648});
			this.VideoStartHorizontalTransBox.MinimumSize = new System.Drawing.Size(0, 31);
			this.VideoStartHorizontalTransBox.Name = "VideoStartHorizontalTransBox";
			this.VideoStartHorizontalTransBox.NumericUpDownWidth = 65;
			this.VideoStartHorizontalTransBox.Size = new System.Drawing.Size(465, 31);
			this.VideoStartHorizontalTransBox.TabIndex = 19;
			this.VideoStartHorizontalTransBox.Value = new decimal(new int[] {
			0,
			0,
			0,
			0});
			//
			// VideoEndHorizontalTransLbl
			//
			this.VideoEndHorizontalTransLbl.AutoSize = true;
			this.VideoEndHorizontalTransLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoEndHorizontalTransLbl.Location = new System.Drawing.Point(2, 405);
			this.VideoEndHorizontalTransLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.VideoEndHorizontalTransLbl.Name = "VideoEndHorizontalTransLbl";
			this.VideoEndHorizontalTransLbl.Size = new System.Drawing.Size(69, 41);
			this.VideoEndHorizontalTransLbl.TabIndex = 10;
			this.VideoEndHorizontalTransLbl.Text = "终止平移";
			this.VideoEndHorizontalTransLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// VideoEndHorizontalTransBox
			//
			this.VideoEndHorizontalTransBox.BackColor = System.Drawing.Color.Transparent;
			this.VideoEndHorizontalTransBox.DefaultValue = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.VideoEndHorizontalTransBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoEndHorizontalTransBox.Font = new System.Drawing.Font("Microsoft YaHei UI", 9F);
			this.VideoEndHorizontalTransBox.Location = new System.Drawing.Point(78, 410);
			this.VideoEndHorizontalTransBox.Margin = new System.Windows.Forms.Padding(5);
			this.VideoEndHorizontalTransBox.Maximum = new decimal(new int[] {
			100,
			0,
			0,
			0});
			this.VideoEndHorizontalTransBox.Minimum = new decimal(new int[] {
			100,
			0,
			0,
			-2147483648});
			this.VideoEndHorizontalTransBox.MinimumSize = new System.Drawing.Size(0, 31);
			this.VideoEndHorizontalTransBox.Name = "VideoEndHorizontalTransBox";
			this.VideoEndHorizontalTransBox.NumericUpDownWidth = 65;
			this.VideoEndHorizontalTransBox.Size = new System.Drawing.Size(465, 31);
			this.VideoEndHorizontalTransBox.TabIndex = 20;
			this.VideoEndHorizontalTransBox.TickStyle = System.Windows.Forms.TickStyle.TopLeft;
			this.VideoEndHorizontalTransBox.Value = new decimal(new int[] {
			0,
			0,
			0,
			0});
			//
			// VideoStartVerticalTransLbl
			//
			this.VideoStartVerticalTransLbl.AutoSize = true;
			this.VideoStartVerticalTransLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoStartVerticalTransLbl.Location = new System.Drawing.Point(2, 446);
			this.VideoStartVerticalTransLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.VideoStartVerticalTransLbl.Name = "VideoStartVerticalTransLbl";
			this.VideoStartVerticalTransLbl.Size = new System.Drawing.Size(69, 41);
			this.VideoStartVerticalTransLbl.TabIndex = 11;
			this.VideoStartVerticalTransLbl.Text = "起始直移";
			this.VideoStartVerticalTransLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// VideoStartVerticalTransBox
			//
			this.VideoStartVerticalTransBox.BackColor = System.Drawing.Color.Transparent;
			this.VideoStartVerticalTransBox.DefaultValue = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.VideoStartVerticalTransBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoStartVerticalTransBox.Font = new System.Drawing.Font("Microsoft YaHei UI", 9F);
			this.VideoStartVerticalTransBox.Location = new System.Drawing.Point(78, 451);
			this.VideoStartVerticalTransBox.Margin = new System.Windows.Forms.Padding(5);
			this.VideoStartVerticalTransBox.Maximum = new decimal(new int[] {
			100,
			0,
			0,
			0});
			this.VideoStartVerticalTransBox.Minimum = new decimal(new int[] {
			100,
			0,
			0,
			-2147483648});
			this.VideoStartVerticalTransBox.MinimumSize = new System.Drawing.Size(0, 31);
			this.VideoStartVerticalTransBox.Name = "VideoStartVerticalTransBox";
			this.VideoStartVerticalTransBox.NumericUpDownWidth = 65;
			this.VideoStartVerticalTransBox.Size = new System.Drawing.Size(465, 31);
			this.VideoStartVerticalTransBox.TabIndex = 21;
			this.VideoStartVerticalTransBox.Value = new decimal(new int[] {
			0,
			0,
			0,
			0});
			//
			// VideoEndVerticalTransLbl
			//
			this.VideoEndVerticalTransLbl.AutoSize = true;
			this.VideoEndVerticalTransLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoEndVerticalTransLbl.Location = new System.Drawing.Point(2, 487);
			this.VideoEndVerticalTransLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.VideoEndVerticalTransLbl.Name = "VideoEndVerticalTransLbl";
			this.VideoEndVerticalTransLbl.Size = new System.Drawing.Size(69, 41);
			this.VideoEndVerticalTransLbl.TabIndex = 13;
			this.VideoEndVerticalTransLbl.Text = "终止直移";
			this.VideoEndVerticalTransLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// VideoEndVerticalTransBox
			//
			this.VideoEndVerticalTransBox.BackColor = System.Drawing.Color.Transparent;
			this.VideoEndVerticalTransBox.DefaultValue = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.VideoEndVerticalTransBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoEndVerticalTransBox.Font = new System.Drawing.Font("Microsoft YaHei UI", 9F);
			this.VideoEndVerticalTransBox.Location = new System.Drawing.Point(78, 492);
			this.VideoEndVerticalTransBox.Margin = new System.Windows.Forms.Padding(5);
			this.VideoEndVerticalTransBox.Maximum = new decimal(new int[] {
			100,
			0,
			0,
			0});
			this.VideoEndVerticalTransBox.Minimum = new decimal(new int[] {
			100,
			0,
			0,
			-2147483648});
			this.VideoEndVerticalTransBox.MinimumSize = new System.Drawing.Size(0, 31);
			this.VideoEndVerticalTransBox.Name = "VideoEndVerticalTransBox";
			this.VideoEndVerticalTransBox.NumericUpDownWidth = 65;
			this.VideoEndVerticalTransBox.Size = new System.Drawing.Size(465, 31);
			this.VideoEndVerticalTransBox.TabIndex = 22;
			this.VideoEndVerticalTransBox.TickStyle = System.Windows.Forms.TickStyle.TopLeft;
			this.VideoEndVerticalTransBox.Value = new decimal(new int[] {
			0,
			0,
			0,
			0});
			//
			// tableLayoutPanel9
			//
			this.tableLayoutPanel9.AutoSize = true;
			this.tableLayoutPanel9.ColumnCount = 4;
			this.VideoParamsTable.SetColumnSpan(this.tableLayoutPanel9, 3);
			this.tableLayoutPanel9.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel9.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel9.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel9.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel9.Controls.Add(this.VideoFadeSetAsTimecodeRadio, 3, 0);
			this.tableLayoutPanel9.Controls.Add(this.VideoFadeSetAsPercentRadio, 2, 0);
			this.tableLayoutPanel9.Controls.Add(this.VideoParamsPresetsBtn, 0, 0);
			this.tableLayoutPanel9.Dock = System.Windows.Forms.DockStyle.Fill;
			this.tableLayoutPanel9.Location = new System.Drawing.Point(0, 0);
			this.tableLayoutPanel9.Margin = new System.Windows.Forms.Padding(0);
			this.tableLayoutPanel9.MaximumSize = new System.Drawing.Size(0, 36);
			this.tableLayoutPanel9.Name = "tableLayoutPanel9";
			this.tableLayoutPanel9.RowCount = 1;
			this.tableLayoutPanel9.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel9.Size = new System.Drawing.Size(617, 36);
			this.tableLayoutPanel9.TabIndex = 0;
			//
			// VideoFadeSetAsTimecodeRadio
			//
			this.VideoFadeSetAsTimecodeRadio.AutoSize = true;
			this.VideoFadeSetAsTimecodeRadio.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoFadeSetAsTimecodeRadio.Location = new System.Drawing.Point(494, 3);
			this.VideoFadeSetAsTimecodeRadio.Name = "VideoFadeSetAsTimecodeRadio";
			this.VideoFadeSetAsTimecodeRadio.Size = new System.Drawing.Size(120, 30);
			this.VideoFadeSetAsTimecodeRadio.TabIndex = 4;
			this.VideoFadeSetAsTimecodeRadio.Text = "设定为时间码";
			this.VideoFadeSetAsTimecodeRadio.UseVisualStyleBackColor = true;
			this.VideoFadeSetAsTimecodeRadio.CheckedChanged += new System.EventHandler(this.FadeSetAsRadio_CheckedChanged);
			//
			// VideoFadeSetAsPercentRadio
			//
			this.VideoFadeSetAsPercentRadio.AutoSize = true;
			this.VideoFadeSetAsPercentRadio.Checked = true;
			this.VideoFadeSetAsPercentRadio.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoFadeSetAsPercentRadio.Location = new System.Drawing.Point(368, 3);
			this.VideoFadeSetAsPercentRadio.Name = "VideoFadeSetAsPercentRadio";
			this.VideoFadeSetAsPercentRadio.Size = new System.Drawing.Size(120, 30);
			this.VideoFadeSetAsPercentRadio.TabIndex = 3;
			this.VideoFadeSetAsPercentRadio.TabStop = true;
			this.VideoFadeSetAsPercentRadio.Text = "设定为百分比";
			this.VideoFadeSetAsPercentRadio.UseVisualStyleBackColor = true;
			this.VideoFadeSetAsPercentRadio.CheckedChanged += new System.EventHandler(this.FadeSetAsRadio_CheckedChanged);
			//
			// VideoParamsPresetsBtn
			//
			this.VideoParamsPresetsBtn.AutoSize = true;
			this.VideoParamsPresetsBtn.Dock = System.Windows.Forms.DockStyle.Left;
			this.VideoParamsPresetsBtn.Location = new System.Drawing.Point(2, 2);
			this.VideoParamsPresetsBtn.Margin = new System.Windows.Forms.Padding(2);
			this.VideoParamsPresetsBtn.Name = "VideoParamsPresetsBtn";
			this.VideoParamsPresetsBtn.Padding = new System.Windows.Forms.Padding(0, 0, 14, 0);
			this.VideoParamsPresetsBtn.Size = new System.Drawing.Size(94, 32);
			this.VideoParamsPresetsBtn.TabIndex = 1;
			this.VideoParamsPresetsBtn.Text = "预设";
			this.VideoParamsPresetsBtn.UseVisualStyleBackColor = true;
			this.VideoParamsPresetsBtn.Click += new System.EventHandler(this.VideoParamsPresetsBtn_Click);
			this.VideoParamsPresetsBtn.Paint += new System.Windows.Forms.PaintEventHandler(this.TrackLegatoBtn_Paint);
			this.VideoParamsPresetsBtn.MouseDown += new System.Windows.Forms.MouseEventHandler(this.MouseDownMapToClick);
			this.VideoParamsPresetsBtn.MouseUp += new System.Windows.Forms.MouseEventHandler(this.MouseUpMapToClick);
			//
			// VideoEffectsGroup
			//
			this.VideoEffectsGroup.AutoSize = true;
			this.VideoEffectsGroup.Controls.Add(this.tableLayoutPanel8);
			this.VideoEffectsGroup.Dock = System.Windows.Forms.DockStyle.Top;
			this.VideoEffectsGroup.Location = new System.Drawing.Point(5, 263);
			this.VideoEffectsGroup.Margin = new System.Windows.Forms.Padding(2);
			this.VideoEffectsGroup.Name = "VideoEffectsGroup";
			this.VideoEffectsGroup.Padding = new System.Windows.Forms.Padding(5);
			this.VideoEffectsGroup.Size = new System.Drawing.Size(627, 98);
			this.VideoEffectsGroup.TabIndex = 4;
			this.VideoEffectsGroup.TabStop = false;
			this.VideoEffectsGroup.Text = "效果";
			//
			// tableLayoutPanel8
			//
			this.tableLayoutPanel8.AutoSize = true;
			this.tableLayoutPanel8.ColumnCount = 3;
			this.tableLayoutPanel8.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel8.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel8.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel8.Controls.Add(this.VideoEffectLbl, 0, 0);
			this.tableLayoutPanel8.Controls.Add(this.VideoEffectInitialValueLbl, 0, 1);
			this.tableLayoutPanel8.Controls.Add(this.VideoEffectCombo, 1, 0);
			this.tableLayoutPanel8.Controls.Add(this.VideoEffectInitialValueCombo, 1, 1);
			this.tableLayoutPanel8.Controls.Add(this.VisualEffectAdvancedBtn, 2, 1);
			this.tableLayoutPanel8.Dock = System.Windows.Forms.DockStyle.Fill;
			this.tableLayoutPanel8.Location = new System.Drawing.Point(5, 25);
			this.tableLayoutPanel8.Margin = new System.Windows.Forms.Padding(4);
			this.tableLayoutPanel8.Name = "tableLayoutPanel8";
			this.tableLayoutPanel8.RowCount = 2;
			this.tableLayoutPanel8.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel8.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel8.Size = new System.Drawing.Size(617, 68);
			this.tableLayoutPanel8.TabIndex = 1;
			//
			// VideoEffectLbl
			//
			this.VideoEffectLbl.AutoSize = true;
			this.VideoEffectLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoEffectLbl.Location = new System.Drawing.Point(2, 0);
			this.VideoEffectLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.VideoEffectLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.VideoEffectLbl.Name = "VideoEffectLbl";
			this.VideoEffectLbl.Size = new System.Drawing.Size(69, 34);
			this.VideoEffectLbl.TabIndex = 0;
			this.VideoEffectLbl.Text = "视觉效果";
			this.VideoEffectLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// VideoEffectInitialValueLbl
			//
			this.VideoEffectInitialValueLbl.AutoSize = true;
			this.VideoEffectInitialValueLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoEffectInitialValueLbl.Location = new System.Drawing.Point(2, 34);
			this.VideoEffectInitialValueLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.VideoEffectInitialValueLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.VideoEffectInitialValueLbl.Name = "VideoEffectInitialValueLbl";
			this.VideoEffectInitialValueLbl.Size = new System.Drawing.Size(69, 34);
			this.VideoEffectInitialValueLbl.TabIndex = 1;
			this.VideoEffectInitialValueLbl.Text = "初始值";
			this.VideoEffectInitialValueLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// VideoEffectCombo
			//
			this.tableLayoutPanel8.SetColumnSpan(this.VideoEffectCombo, 2);
			this.VideoEffectCombo.DisplayMember = "DisplayValue";
			this.VideoEffectCombo.Dock = System.Windows.Forms.DockStyle.Top;
			this.VideoEffectCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.VideoEffectCombo.FormattingEnabled = true;
			this.VideoEffectCombo.Items.AddRange(new object[] {
			"无效果",
			"水平翻转",
			"垂直翻转",
			"逆时针翻转",
			"顺时针翻转",
			"水平翻转保持",
			"水平翻转中继",
			"逆时针旋转",
			"顺时针旋转",
			"颠倒",
			"缩小后放大",
			"水平镜像",
			"垂直镜像",
			"逆时针镜像",
			"顺时针镜像",
			"颜色反转",
			"亮度反转",
			"色相反转",
			"3 步色差",
			"4 步色差",
			"5 步色差",
			"6 步色差",
			"7 步色差",
			"8 步色差",
			"彩灰",
			"乒乓效应",
			"爱的魔力转圈圈",
			"急剧倒带",
			"摆动周期",
			"垂直扩张",
			"垂直扩张并回弹",
			"垂直压缩",
			"垂直压缩并回弹",
			"斜向扩缩",
			"魔法气泡",
			"左右摇摆",
			"高斯模糊",
			"径向模糊"});
			this.VideoEffectCombo.Location = new System.Drawing.Point(75, 2);
			this.VideoEffectCombo.Margin = new System.Windows.Forms.Padding(2);
			this.VideoEffectCombo.Name = "VideoEffectCombo";
			this.VideoEffectCombo.Size = new System.Drawing.Size(540, 28);
			this.VideoEffectCombo.TabIndex = 2;
			this.VideoEffectCombo.SelectedIndexChanged += new System.EventHandler(this.VideoEffectCombo_SelectedIndexChanged);
			//
			// VideoEffectInitialValueCombo
			//
			this.VideoEffectInitialValueCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.VideoEffectInitialValueCombo.FormattingEnabled = true;
			this.VideoEffectInitialValueCombo.Location = new System.Drawing.Point(75, 36);
			this.VideoEffectInitialValueCombo.Margin = new System.Windows.Forms.Padding(2);
			this.VideoEffectInitialValueCombo.Name = "VideoEffectInitialValueCombo";
			this.VideoEffectInitialValueCombo.Size = new System.Drawing.Size(90, 28);
			this.VideoEffectInitialValueCombo.TabIndex = 3;
			//
			// VisualEffectAdvancedBtn
			//
			this.VisualEffectAdvancedBtn.AutoSize = true;
			this.VisualEffectAdvancedBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VisualEffectAdvancedBtn.Location = new System.Drawing.Point(542, 37);
			this.VisualEffectAdvancedBtn.Margin = new System.Windows.Forms.Padding(0, 3, 0, 3);
			this.VisualEffectAdvancedBtn.MaximumSize = new System.Drawing.Size(300, 28);
			this.VisualEffectAdvancedBtn.Name = "VisualEffectAdvancedBtn";
			this.VisualEffectAdvancedBtn.Size = new System.Drawing.Size(75, 28);
			this.VisualEffectAdvancedBtn.TabIndex = 4;
			this.VisualEffectAdvancedBtn.Text = "高级...";
			this.VisualEffectAdvancedBtn.UseVisualStyleBackColor = true;
			this.VisualEffectAdvancedBtn.Click += new System.EventHandler(this.VisualEffectAdvancedBtn_Click);
			//
			// VideoVelocityGroup
			//
			this.VideoVelocityGroup.AutoSize = true;
			this.VideoVelocityGroup.Controls.Add(this.tableLayoutPanel18);
			this.VideoVelocityGroup.Dock = System.Windows.Forms.DockStyle.Top;
			this.VideoVelocityGroup.Location = new System.Drawing.Point(5, 141);
			this.VideoVelocityGroup.Margin = new System.Windows.Forms.Padding(2);
			this.VideoVelocityGroup.Name = "VideoVelocityGroup";
			this.VideoVelocityGroup.Padding = new System.Windows.Forms.Padding(5);
			this.VideoVelocityGroup.Size = new System.Drawing.Size(627, 122);
			this.VideoVelocityGroup.TabIndex = 3;
			this.VideoVelocityGroup.TabStop = false;
			this.VideoVelocityGroup.Text = "力度";
			//
			// tableLayoutPanel18
			//
			this.tableLayoutPanel18.AutoSize = true;
			this.tableLayoutPanel18.ColumnCount = 5;
			this.tableLayoutPanel18.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel18.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute, 90F));
			this.tableLayoutPanel18.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel18.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute, 90F));
			this.tableLayoutPanel18.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel18.Controls.Add(this.VideoGainTildeLbl, 2, 2);
			this.tableLayoutPanel18.Controls.Add(this.VideoVelocityTildeLbl, 2, 1);
			this.tableLayoutPanel18.Controls.Add(this.VideoGainMoreBox, 3, 2);
			this.tableLayoutPanel18.Controls.Add(this.VideoGainLessBox, 1, 2);
			this.tableLayoutPanel18.Controls.Add(this.VideoVelocityMoreBox, 3, 1);
			this.tableLayoutPanel18.Controls.Add(this.VideoVelocityLessBox, 1, 1);
			this.tableLayoutPanel18.Controls.Add(this.VideoGainLbl, 0, 2);
			this.tableLayoutPanel18.Controls.Add(this.VideoVelocityLbl, 0, 1);
			this.tableLayoutPanel18.Controls.Add(this.VideoVelocityCheck, 0, 0);
			this.tableLayoutPanel18.Dock = System.Windows.Forms.DockStyle.Fill;
			this.tableLayoutPanel18.Location = new System.Drawing.Point(5, 25);
			this.tableLayoutPanel18.Name = "tableLayoutPanel18";
			this.tableLayoutPanel18.RowCount = 3;
			this.tableLayoutPanel18.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel18.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel18.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel18.Size = new System.Drawing.Size(617, 92);
			this.tableLayoutPanel18.TabIndex = 0;
			//
			// VideoGainTildeLbl
			//
			this.VideoGainTildeLbl.AutoSize = true;
			this.VideoGainTildeLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoGainTildeLbl.Location = new System.Drawing.Point(168, 58);
			this.VideoGainTildeLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.VideoGainTildeLbl.Name = "VideoGainTildeLbl";
			this.VideoGainTildeLbl.Size = new System.Drawing.Size(19, 34);
			this.VideoGainTildeLbl.TabIndex = 8;
			this.VideoGainTildeLbl.Text = "~";
			this.VideoGainTildeLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// VideoVelocityTildeLbl
			//
			this.VideoVelocityTildeLbl.AutoSize = true;
			this.VideoVelocityTildeLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoVelocityTildeLbl.Location = new System.Drawing.Point(168, 24);
			this.VideoVelocityTildeLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.VideoVelocityTildeLbl.Name = "VideoVelocityTildeLbl";
			this.VideoVelocityTildeLbl.Size = new System.Drawing.Size(19, 34);
			this.VideoVelocityTildeLbl.TabIndex = 7;
			this.VideoVelocityTildeLbl.Text = "~";
			this.VideoVelocityTildeLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// VideoGainMoreBox
			//
			this.VideoGainMoreBox.Constrain = new decimal(new int[] {
			100,
			0,
			0,
			0});
			this.VideoGainMoreBox.DecimalPlaces = 2;
			this.VideoGainMoreBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoGainMoreBox.EnableDecimalPlaces = true;
			this.VideoGainMoreBox.Location = new System.Drawing.Point(193, 61);
			this.VideoGainMoreBox.Name = "VideoGainMoreBox";
			this.VideoGainMoreBox.Size = new System.Drawing.Size(84, 27);
			this.VideoGainMoreBox.TabIndex = 6;
			this.VideoGainMoreBox.Value = new decimal(new int[] {
			100,
			0,
			0,
			0});
			//
			// VideoGainLessBox
			//
			this.VideoGainLessBox.Constrain = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.VideoGainLessBox.DecimalPlaces = 2;
			this.VideoGainLessBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoGainLessBox.EnableDecimalPlaces = true;
			this.VideoGainLessBox.Location = new System.Drawing.Point(78, 61);
			this.VideoGainLessBox.Name = "VideoGainLessBox";
			this.VideoGainLessBox.Size = new System.Drawing.Size(84, 27);
			this.VideoGainLessBox.TabIndex = 5;
			//
			// VideoVelocityMoreBox
			//
			this.VideoVelocityMoreBox.Constrain = new decimal(new int[] {
			127,
			0,
			0,
			0});
			this.VideoVelocityMoreBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoVelocityMoreBox.EnableDecimalPlaces = true;
			this.VideoVelocityMoreBox.Location = new System.Drawing.Point(193, 27);
			this.VideoVelocityMoreBox.Maximum = new decimal(new int[] {
			127,
			0,
			0,
			0});
			this.VideoVelocityMoreBox.Name = "VideoVelocityMoreBox";
			this.VideoVelocityMoreBox.Size = new System.Drawing.Size(84, 27);
			this.VideoVelocityMoreBox.TabIndex = 4;
			this.VideoVelocityMoreBox.Value = new decimal(new int[] {
			127,
			0,
			0,
			0});
			//
			// VideoVelocityLessBox
			//
			this.VideoVelocityLessBox.Constrain = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.VideoVelocityLessBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoVelocityLessBox.EnableDecimalPlaces = true;
			this.VideoVelocityLessBox.Location = new System.Drawing.Point(78, 27);
			this.VideoVelocityLessBox.Maximum = new decimal(new int[] {
			127,
			0,
			0,
			0});
			this.VideoVelocityLessBox.Name = "VideoVelocityLessBox";
			this.VideoVelocityLessBox.Size = new System.Drawing.Size(84, 27);
			this.VideoVelocityLessBox.TabIndex = 3;
			//
			// VideoGainLbl
			//
			this.VideoGainLbl.AutoSize = true;
			this.VideoGainLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoGainLbl.Location = new System.Drawing.Point(3, 58);
			this.VideoGainLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.VideoGainLbl.Name = "VideoGainLbl";
			this.VideoGainLbl.Size = new System.Drawing.Size(69, 34);
			this.VideoGainLbl.TabIndex = 2;
			this.VideoGainLbl.Text = "不透明度";
			this.VideoGainLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// VideoVelocityLbl
			//
			this.VideoVelocityLbl.AutoSize = true;
			this.VideoVelocityLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoVelocityLbl.Location = new System.Drawing.Point(3, 24);
			this.VideoVelocityLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.VideoVelocityLbl.Name = "VideoVelocityLbl";
			this.VideoVelocityLbl.Size = new System.Drawing.Size(69, 34);
			this.VideoVelocityLbl.TabIndex = 1;
			this.VideoVelocityLbl.Text = "音符力度";
			this.VideoVelocityLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// VideoVelocityCheck
			//
			this.VideoVelocityCheck.AutoSize = true;
			this.tableLayoutPanel18.SetColumnSpan(this.VideoVelocityCheck, 5);
			this.VideoVelocityCheck.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoVelocityCheck.Location = new System.Drawing.Point(6, 0);
			this.VideoVelocityCheck.Margin = new System.Windows.Forms.Padding(6, 0, 6, 0);
			this.VideoVelocityCheck.Name = "VideoVelocityCheck";
			this.VideoVelocityCheck.Size = new System.Drawing.Size(605, 24);
			this.VideoVelocityCheck.TabIndex = 0;
			this.VideoVelocityCheck.Text = "映射力度";
			this.VideoVelocityCheck.UseVisualStyleBackColor = true;
			//
			// VideoPreferredTrackPanel
			//
			this.VideoPreferredTrackPanel.AutoSize = true;
			this.VideoPreferredTrackPanel.ColumnCount = 2;
			this.VideoPreferredTrackPanel.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.VideoPreferredTrackPanel.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.VideoPreferredTrackPanel.Controls.Add(this.VideoPreferredTrackLbl, 0, 0);
			this.VideoPreferredTrackPanel.Controls.Add(this.VideoPreferredTrackCombo, 1, 0);
			this.VideoPreferredTrackPanel.Dock = System.Windows.Forms.DockStyle.Top;
			this.VideoPreferredTrackPanel.Location = new System.Drawing.Point(5, 103);
			this.VideoPreferredTrackPanel.Name = "VideoPreferredTrackPanel";
			this.VideoPreferredTrackPanel.Padding = new System.Windows.Forms.Padding(4, 2, 5, 2);
			this.VideoPreferredTrackPanel.RowCount = 1;
			this.VideoPreferredTrackPanel.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.VideoPreferredTrackPanel.Size = new System.Drawing.Size(627, 38);
			this.VideoPreferredTrackPanel.TabIndex = 2;
			//
			// VideoPreferredTrackLbl
			//
			this.VideoPreferredTrackLbl.AutoSize = true;
			this.VideoPreferredTrackLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoPreferredTrackLbl.Location = new System.Drawing.Point(7, 2);
			this.VideoPreferredTrackLbl.Margin = new System.Windows.Forms.Padding(3, 0, 2, 0);
			this.VideoPreferredTrackLbl.MaximumSize = new System.Drawing.Size(0, 34);
			this.VideoPreferredTrackLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.VideoPreferredTrackLbl.Name = "VideoPreferredTrackLbl";
			this.VideoPreferredTrackLbl.Size = new System.Drawing.Size(69, 34);
			this.VideoPreferredTrackLbl.TabIndex = 3;
			this.VideoPreferredTrackLbl.Text = "首选轨道";
			this.VideoPreferredTrackLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// VideoPreferredTrackCombo
			//
			this.VideoPreferredTrackCombo.DisplayMember = "DisplayValue";
			this.VideoPreferredTrackCombo.Dock = System.Windows.Forms.DockStyle.Top;
			this.VideoPreferredTrackCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.VideoPreferredTrackCombo.FormattingEnabled = true;
			this.VideoPreferredTrackCombo.Location = new System.Drawing.Point(80, 4);
			this.VideoPreferredTrackCombo.Margin = new System.Windows.Forms.Padding(2);
			this.VideoPreferredTrackCombo.Name = "VideoPreferredTrackCombo";
			this.VideoPreferredTrackCombo.Size = new System.Drawing.Size(540, 28);
			this.VideoPreferredTrackCombo.TabIndex = 4;
			//
			// VideoComboPanel
			//
			this.VideoComboPanel.AutoSize = true;
			this.VideoComboPanel.Controls.Add(this.VideoScratchLbl);
			this.VideoComboPanel.Controls.Add(this.VideoScratchCombo);
			this.VideoComboPanel.Controls.Add(this.VideoLegatoLbl);
			this.VideoComboPanel.Controls.Add(this.VideoLegatoCombo);
			this.VideoComboPanel.Dock = System.Windows.Forms.DockStyle.Top;
			this.VideoComboPanel.Location = new System.Drawing.Point(5, 65);
			this.VideoComboPanel.Margin = new System.Windows.Forms.Padding(2);
			this.VideoComboPanel.Name = "VideoComboPanel";
			this.VideoComboPanel.Padding = new System.Windows.Forms.Padding(4, 2, 4, 2);
			this.VideoComboPanel.Size = new System.Drawing.Size(627, 38);
			this.VideoComboPanel.TabIndex = 1;
			//
			// VideoScratchLbl
			//
			this.VideoScratchLbl.AutoSize = true;
			this.VideoScratchLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoScratchLbl.Location = new System.Drawing.Point(7, 2);
			this.VideoScratchLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.VideoScratchLbl.Name = "VideoScratchLbl";
			this.VideoScratchLbl.Size = new System.Drawing.Size(69, 34);
			this.VideoScratchLbl.TabIndex = 4;
			this.VideoScratchLbl.Text = "拉伸视频";
			this.VideoScratchLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// VideoScratchCombo
			//
			this.VideoScratchCombo.Dock = System.Windows.Forms.DockStyle.Top;
			this.VideoScratchCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.VideoScratchCombo.FormattingEnabled = true;
			this.VideoScratchCombo.Items.AddRange(new object[] {
			"不拉伸",
			"可屈伸",
			"仅伸展",
			"仅屈折"});
			this.VideoScratchCombo.Location = new System.Drawing.Point(80, 5);
			this.VideoScratchCombo.Margin = new System.Windows.Forms.Padding(1, 3, 3, 3);
			this.VideoScratchCombo.Name = "VideoScratchCombo";
			this.VideoScratchCombo.Size = new System.Drawing.Size(140, 28);
			this.VideoScratchCombo.TabIndex = 0;
			//
			// VideoLegatoLbl
			//
			this.VideoLegatoLbl.AutoSize = true;
			this.VideoLegatoLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoLegatoLbl.Location = new System.Drawing.Point(226, 2);
			this.VideoLegatoLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.VideoLegatoLbl.Name = "VideoLegatoLbl";
			this.VideoLegatoLbl.Size = new System.Drawing.Size(69, 34);
			this.VideoLegatoLbl.TabIndex = 0;
			this.VideoLegatoLbl.Text = "填补间隙";
			this.VideoLegatoLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// VideoLegatoCombo
			//
			this.VideoLegatoCombo.Dock = System.Windows.Forms.DockStyle.Top;
			this.VideoLegatoCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.VideoLegatoCombo.FormattingEnabled = true;
			this.VideoLegatoCombo.Items.AddRange(new object[] {
			"不填补",
			"最长一拍",
			"最长一小节",
			"无限填补"});
			this.VideoLegatoCombo.Location = new System.Drawing.Point(299, 5);
			this.VideoLegatoCombo.Margin = new System.Windows.Forms.Padding(1, 3, 3, 3);
			this.VideoLegatoCombo.Name = "VideoLegatoCombo";
			this.VideoLegatoCombo.Size = new System.Drawing.Size(140, 28);
			this.VideoLegatoCombo.TabIndex = 1;
			//
			// VideoTogglePanel
			//
			this.VideoTogglePanel.AutoSize = true;
			this.VideoTogglePanel.Controls.Add(this.VideoConfigCheck);
			this.VideoTogglePanel.Controls.Add(this.VideoLoopCheck);
			this.VideoTogglePanel.Controls.Add(this.VideoFreezeFirstFrameCheck);
			this.VideoTogglePanel.Controls.Add(this.VideoFreezeLastFrameCheck);
			this.VideoTogglePanel.Controls.Add(this.VideoMultitrackForChordsCheck);
			this.VideoTogglePanel.Controls.Add(this.CreateEventGroupInVideoCheck);
			this.VideoTogglePanel.Controls.Add(this.VideoGlissandoFlow);
			this.VideoTogglePanel.Dock = System.Windows.Forms.DockStyle.Top;
			this.VideoTogglePanel.Location = new System.Drawing.Point(5, 5);
			this.VideoTogglePanel.Margin = new System.Windows.Forms.Padding(2);
			this.VideoTogglePanel.Name = "VideoTogglePanel";
			this.VideoTogglePanel.Padding = new System.Windows.Forms.Padding(0, 2, 0, 2);
			this.VideoTogglePanel.Size = new System.Drawing.Size(627, 60);
			this.VideoTogglePanel.TabIndex = 0;
			//
			// VideoConfigCheck
			//
			this.VideoConfigCheck.AutoSize = true;
			this.VideoConfigCheck.Checked = true;
			this.VideoConfigCheck.CheckState = System.Windows.Forms.CheckState.Checked;
			this.VideoConfigCheck.Location = new System.Drawing.Point(2, 4);
			this.VideoConfigCheck.Margin = new System.Windows.Forms.Padding(2);
			this.VideoConfigCheck.Name = "VideoConfigCheck";
			this.VideoConfigCheck.Size = new System.Drawing.Size(91, 24);
			this.VideoConfigCheck.TabIndex = 0;
			this.VideoConfigCheck.Text = "生成视频";
			this.VideoConfigCheck.UseVisualStyleBackColor = true;
			//
			// VideoLoopCheck
			//
			this.VideoLoopCheck.AutoSize = true;
			this.VideoLoopCheck.Checked = true;
			this.VideoLoopCheck.CheckState = System.Windows.Forms.CheckState.Checked;
			this.VideoLoopCheck.Location = new System.Drawing.Point(97, 4);
			this.VideoLoopCheck.Margin = new System.Windows.Forms.Padding(2);
			this.VideoLoopCheck.Name = "VideoLoopCheck";
			this.VideoLoopCheck.Size = new System.Drawing.Size(91, 24);
			this.VideoLoopCheck.TabIndex = 2;
			this.VideoLoopCheck.Text = "循环视频";
			this.VideoLoopCheck.UseVisualStyleBackColor = true;
			//
			// VideoFreezeFirstFrameCheck
			//
			this.VideoFreezeFirstFrameCheck.AutoSize = true;
			this.VideoFreezeFirstFrameCheck.Location = new System.Drawing.Point(192, 4);
			this.VideoFreezeFirstFrameCheck.Margin = new System.Windows.Forms.Padding(2);
			this.VideoFreezeFirstFrameCheck.Name = "VideoFreezeFirstFrameCheck";
			this.VideoFreezeFirstFrameCheck.Size = new System.Drawing.Size(91, 24);
			this.VideoFreezeFirstFrameCheck.TabIndex = 3;
			this.VideoFreezeFirstFrameCheck.Text = "静态画面";
			this.VideoFreezeFirstFrameCheck.UseVisualStyleBackColor = true;
			//
			// VideoFreezeLastFrameCheck
			//
			this.VideoFreezeLastFrameCheck.AutoSize = true;
			this.VideoFreezeLastFrameCheck.Location = new System.Drawing.Point(287, 4);
			this.VideoFreezeLastFrameCheck.Margin = new System.Windows.Forms.Padding(2);
			this.VideoFreezeLastFrameCheck.Name = "VideoFreezeLastFrameCheck";
			this.VideoFreezeLastFrameCheck.Size = new System.Drawing.Size(91, 24);
			this.VideoFreezeLastFrameCheck.TabIndex = 4;
			this.VideoFreezeLastFrameCheck.Text = "禁止延长";
			this.VideoFreezeLastFrameCheck.UseVisualStyleBackColor = true;
			//
			// VideoMultitrackForChordsCheck
			//
			this.VideoMultitrackForChordsCheck.AutoSize = true;
			this.VideoMultitrackForChordsCheck.Location = new System.Drawing.Point(382, 4);
			this.VideoMultitrackForChordsCheck.Margin = new System.Windows.Forms.Padding(2);
			this.VideoMultitrackForChordsCheck.Name = "VideoMultitrackForChordsCheck";
			this.VideoMultitrackForChordsCheck.Size = new System.Drawing.Size(91, 24);
			this.VideoMultitrackForChordsCheck.TabIndex = 9;
			this.VideoMultitrackForChordsCheck.Text = "复音多轨";
			this.VideoMultitrackForChordsCheck.UseVisualStyleBackColor = true;
			//
			// CreateEventGroupInVideoCheck
			//
			this.CreateEventGroupInVideoCheck.AutoSize = true;
			this.CreateEventGroupInVideoCheck.Checked = true;
			this.CreateEventGroupInVideoCheck.CheckState = System.Windows.Forms.CheckState.Checked;
			this.CreateEventGroupInVideoCheck.Location = new System.Drawing.Point(477, 4);
			this.CreateEventGroupInVideoCheck.Margin = new System.Windows.Forms.Padding(2);
			this.CreateEventGroupInVideoCheck.Name = "CreateEventGroupInVideoCheck";
			this.CreateEventGroupInVideoCheck.Size = new System.Drawing.Size(91, 24);
			this.CreateEventGroupInVideoCheck.TabIndex = 10;
			this.CreateEventGroupInVideoCheck.Text = "创建分组";
			this.CreateEventGroupInVideoCheck.UseVisualStyleBackColor = true;
			this.CreateEventGroupInVideoCheck.CheckedChanged += new System.EventHandler(this.CreateEventGroupCheck_CheckedChanged);
			//
			// VideoGlissandoFlow
			//
			this.VideoGlissandoFlow.AutoSize = true;
			this.VideoGlissandoFlow.Controls.Add(this.VideoGlissandoCheck);
			this.VideoGlissandoFlow.Controls.Add(this.VideoGlissandoBox);
			this.VideoGlissandoFlow.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoGlissandoFlow.Location = new System.Drawing.Point(0, 30);
			this.VideoGlissandoFlow.Margin = new System.Windows.Forms.Padding(0);
			this.VideoGlissandoFlow.Name = "VideoGlissandoFlow";
			this.VideoGlissandoFlow.Size = new System.Drawing.Size(164, 28);
			this.VideoGlissandoFlow.TabIndex = 11;
			//
			// VideoGlissandoCheck
			//
			this.VideoGlissandoCheck.AutoSize = true;
			this.VideoGlissandoCheck.Checked = true;
			this.VideoGlissandoCheck.CheckState = System.Windows.Forms.CheckState.Checked;
			this.VideoGlissandoCheck.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoGlissandoCheck.Location = new System.Drawing.Point(2, 2);
			this.VideoGlissandoCheck.Margin = new System.Windows.Forms.Padding(2);
			this.VideoGlissandoCheck.Name = "VideoGlissandoCheck";
			this.VideoGlissandoCheck.Size = new System.Drawing.Size(91, 24);
			this.VideoGlissandoCheck.TabIndex = 9;
			this.VideoGlissandoCheck.Text = "滑音效果";
			this.VideoGlissandoCheck.UserChecked = true;
			this.VideoGlissandoCheck.UseVisualStyleBackColor = true;
			//
			// VideoGlissandoBox
			//
			this.VideoGlissandoBox.DecimalPlaces = 2;
			this.VideoGlissandoBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.VideoGlissandoBox.Location = new System.Drawing.Point(97, 0);
			this.VideoGlissandoBox.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.VideoGlissandoBox.Maximum = new decimal(new int[] {
			24,
			0,
			0,
			0});
			this.VideoGlissandoBox.Minimum = new decimal(new int[] {
			24,
			0,
			0,
			-2147483648});
			this.VideoGlissandoBox.Name = "VideoGlissandoBox";
			this.VideoGlissandoBox.Size = new System.Drawing.Size(65, 27);
			this.VideoGlissandoBox.TabIndex = 11;
			this.VideoGlissandoBox.Value = new decimal(new int[] {
			12,
			0,
			0,
			0});
			//
			// SheetTab
			//
			this.SheetTab.AutoScroll = true;
			this.SheetTab.BackColor = System.Drawing.Color.Transparent;
			this.SheetTab.Controls.Add(this.StaffClefParamsGroup);
			this.SheetTab.Controls.Add(this.StaffLinesParamsGroup);
			this.SheetTab.Controls.Add(this.StaffNotesParamsGroup);
			this.SheetTab.Controls.Add(this.flowLayoutPanel8);
			this.SheetTab.Controls.Add(this.SheetConfigInfoLabel);
			this.SheetTab.Location = new System.Drawing.Point(4, 29);
			this.SheetTab.Margin = new System.Windows.Forms.Padding(2);
			this.SheetTab.Name = "SheetTab";
			this.SheetTab.Padding = new System.Windows.Forms.Padding(5);
			this.SheetTab.Size = new System.Drawing.Size(658, 626);
			this.SheetTab.TabIndex = 3;
			this.SheetTab.Text = "五线谱";
			this.SheetTab.UseVisualStyleBackColor = true;
			//
			// StaffClefParamsGroup
			//
			this.StaffClefParamsGroup.AutoSize = true;
			this.StaffClefParamsGroup.Controls.Add(this.tableLayoutPanel2);
			this.StaffClefParamsGroup.Dock = System.Windows.Forms.DockStyle.Top;
			this.StaffClefParamsGroup.Location = new System.Drawing.Point(5, 340);
			this.StaffClefParamsGroup.Margin = new System.Windows.Forms.Padding(2);
			this.StaffClefParamsGroup.Name = "StaffClefParamsGroup";
			this.StaffClefParamsGroup.Padding = new System.Windows.Forms.Padding(5);
			this.StaffClefParamsGroup.Size = new System.Drawing.Size(648, 93);
			this.StaffClefParamsGroup.TabIndex = 8;
			this.StaffClefParamsGroup.TabStop = false;
			this.StaffClefParamsGroup.Text = "谱号参数";
			//
			// tableLayoutPanel2
			//
			this.tableLayoutPanel2.AutoSize = true;
			this.tableLayoutPanel2.ColumnCount = 4;
			this.tableLayoutPanel2.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel2.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 50F));
			this.tableLayoutPanel2.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel2.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 50F));
			this.tableLayoutPanel2.Controls.Add(this.StaffGenerateClefCheck, 0, 0);
			this.tableLayoutPanel2.Controls.Add(this.StaffClefColorBtn, 3, 1);
			this.tableLayoutPanel2.Controls.Add(this.StaffClefColorLbl, 2, 1);
			this.tableLayoutPanel2.Controls.Add(this.StaffClefScaleBox, 1, 1);
			this.tableLayoutPanel2.Controls.Add(this.StaffClefScaleLbl, 0, 1);
			this.tableLayoutPanel2.Dock = System.Windows.Forms.DockStyle.Fill;
			this.tableLayoutPanel2.Location = new System.Drawing.Point(5, 25);
			this.tableLayoutPanel2.Margin = new System.Windows.Forms.Padding(2);
			this.tableLayoutPanel2.Name = "tableLayoutPanel2";
			this.tableLayoutPanel2.RowCount = 2;
			this.tableLayoutPanel2.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel2.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel2.Size = new System.Drawing.Size(638, 63);
			this.tableLayoutPanel2.TabIndex = 0;
			//
			// StaffGenerateClefCheck
			//
			this.StaffGenerateClefCheck.AutoSize = true;
			this.StaffGenerateClefCheck.Checked = true;
			this.StaffGenerateClefCheck.CheckState = System.Windows.Forms.CheckState.Checked;
			this.tableLayoutPanel2.SetColumnSpan(this.StaffGenerateClefCheck, 4);
			this.StaffGenerateClefCheck.Dock = System.Windows.Forms.DockStyle.Fill;
			this.StaffGenerateClefCheck.Enabled = false;
			this.StaffGenerateClefCheck.Location = new System.Drawing.Point(2, 2);
			this.StaffGenerateClefCheck.Margin = new System.Windows.Forms.Padding(2);
			this.StaffGenerateClefCheck.Name = "StaffGenerateClefCheck";
			this.StaffGenerateClefCheck.Size = new System.Drawing.Size(634, 24);
			this.StaffGenerateClefCheck.TabIndex = 0;
			this.StaffGenerateClefCheck.Text = "生成谱号";
			this.StaffGenerateClefCheck.UseVisualStyleBackColor = true;
			//
			// StaffClefColorBtn
			//
			this.StaffClefColorBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.StaffClefColorBtn.Enabled = false;
			this.StaffClefColorBtn.Location = new System.Drawing.Point(394, 30);
			this.StaffClefColorBtn.Margin = new System.Windows.Forms.Padding(2);
			this.StaffClefColorBtn.Name = "StaffClefColorBtn";
			this.StaffClefColorBtn.Size = new System.Drawing.Size(242, 31);
			this.StaffClefColorBtn.TabIndex = 13;
			//
			// StaffClefColorLbl
			//
			this.StaffClefColorLbl.AutoSize = true;
			this.StaffClefColorLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.StaffClefColorLbl.Location = new System.Drawing.Point(321, 28);
			this.StaffClefColorLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.StaffClefColorLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.StaffClefColorLbl.Name = "StaffClefColorLbl";
			this.StaffClefColorLbl.Size = new System.Drawing.Size(69, 35);
			this.StaffClefColorLbl.TabIndex = 12;
			this.StaffClefColorLbl.Text = "谱号颜色";
			this.StaffClefColorLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// StaffClefScaleBox
			//
			this.StaffClefScaleBox.Constrain = new decimal(new int[] {
			100,
			0,
			0,
			0});
			this.StaffClefScaleBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.StaffClefScaleBox.Enabled = false;
			this.StaffClefScaleBox.EnableDecimalPlaces = true;
			this.StaffClefScaleBox.Location = new System.Drawing.Point(75, 30);
			this.StaffClefScaleBox.Margin = new System.Windows.Forms.Padding(2);
			this.StaffClefScaleBox.Maximum = new decimal(new int[] {
			500,
			0,
			0,
			0});
			this.StaffClefScaleBox.Minimum = new decimal(new int[] {
			100,
			0,
			0,
			0});
			this.StaffClefScaleBox.Name = "StaffClefScaleBox";
			this.StaffClefScaleBox.Size = new System.Drawing.Size(242, 27);
			this.StaffClefScaleBox.Suffix = "%";
			this.StaffClefScaleBox.TabIndex = 11;
			this.StaffClefScaleBox.Value = new decimal(new int[] {
			100,
			0,
			0,
			0});
			//
			// StaffClefScaleLbl
			//
			this.StaffClefScaleLbl.AutoSize = true;
			this.StaffClefScaleLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.StaffClefScaleLbl.Location = new System.Drawing.Point(2, 28);
			this.StaffClefScaleLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.StaffClefScaleLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.StaffClefScaleLbl.Name = "StaffClefScaleLbl";
			this.StaffClefScaleLbl.Size = new System.Drawing.Size(69, 35);
			this.StaffClefScaleLbl.TabIndex = 5;
			this.StaffClefScaleLbl.Text = "谱号缩放";
			this.StaffClefScaleLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// StaffLinesParamsGroup
			//
			this.StaffLinesParamsGroup.AutoSize = true;
			this.StaffLinesParamsGroup.Controls.Add(this.tableLayoutPanel7);
			this.StaffLinesParamsGroup.Dock = System.Windows.Forms.DockStyle.Top;
			this.StaffLinesParamsGroup.Location = new System.Drawing.Point(5, 247);
			this.StaffLinesParamsGroup.Margin = new System.Windows.Forms.Padding(2);
			this.StaffLinesParamsGroup.Name = "StaffLinesParamsGroup";
			this.StaffLinesParamsGroup.Padding = new System.Windows.Forms.Padding(5);
			this.StaffLinesParamsGroup.Size = new System.Drawing.Size(648, 93);
			this.StaffLinesParamsGroup.TabIndex = 7;
			this.StaffLinesParamsGroup.TabStop = false;
			this.StaffLinesParamsGroup.Text = "谱线参数";
			//
			// tableLayoutPanel7
			//
			this.tableLayoutPanel7.AutoSize = true;
			this.tableLayoutPanel7.ColumnCount = 4;
			this.tableLayoutPanel7.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel7.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 50F));
			this.tableLayoutPanel7.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel7.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 50F));
			this.tableLayoutPanel7.Controls.Add(this.StaffGenerateLinesCheck, 0, 0);
			this.tableLayoutPanel7.Controls.Add(this.StaffLineColorBtn, 3, 1);
			this.tableLayoutPanel7.Controls.Add(this.StaffLineColorLbl, 2, 1);
			this.tableLayoutPanel7.Controls.Add(this.StaffLineThicknessBox, 1, 1);
			this.tableLayoutPanel7.Controls.Add(this.StaffLineThicknessLbl, 0, 1);
			this.tableLayoutPanel7.Dock = System.Windows.Forms.DockStyle.Fill;
			this.tableLayoutPanel7.Location = new System.Drawing.Point(5, 25);
			this.tableLayoutPanel7.Margin = new System.Windows.Forms.Padding(2);
			this.tableLayoutPanel7.Name = "tableLayoutPanel7";
			this.tableLayoutPanel7.RowCount = 2;
			this.tableLayoutPanel7.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel7.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel7.Size = new System.Drawing.Size(638, 63);
			this.tableLayoutPanel7.TabIndex = 0;
			//
			// StaffGenerateLinesCheck
			//
			this.StaffGenerateLinesCheck.AutoSize = true;
			this.StaffGenerateLinesCheck.Checked = true;
			this.StaffGenerateLinesCheck.CheckState = System.Windows.Forms.CheckState.Checked;
			this.tableLayoutPanel7.SetColumnSpan(this.StaffGenerateLinesCheck, 4);
			this.StaffGenerateLinesCheck.Dock = System.Windows.Forms.DockStyle.Fill;
			this.StaffGenerateLinesCheck.Enabled = false;
			this.StaffGenerateLinesCheck.Location = new System.Drawing.Point(2, 2);
			this.StaffGenerateLinesCheck.Margin = new System.Windows.Forms.Padding(2);
			this.StaffGenerateLinesCheck.Name = "StaffGenerateLinesCheck";
			this.StaffGenerateLinesCheck.Size = new System.Drawing.Size(634, 24);
			this.StaffGenerateLinesCheck.TabIndex = 0;
			this.StaffGenerateLinesCheck.Text = "生成谱线";
			this.StaffGenerateLinesCheck.UseVisualStyleBackColor = true;
			//
			// StaffLineColorBtn
			//
			this.StaffLineColorBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.StaffLineColorBtn.Enabled = false;
			this.StaffLineColorBtn.Location = new System.Drawing.Point(394, 30);
			this.StaffLineColorBtn.Margin = new System.Windows.Forms.Padding(2);
			this.StaffLineColorBtn.Name = "StaffLineColorBtn";
			this.StaffLineColorBtn.Size = new System.Drawing.Size(242, 31);
			this.StaffLineColorBtn.TabIndex = 13;
			//
			// StaffLineColorLbl
			//
			this.StaffLineColorLbl.AutoSize = true;
			this.StaffLineColorLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.StaffLineColorLbl.Location = new System.Drawing.Point(321, 28);
			this.StaffLineColorLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.StaffLineColorLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.StaffLineColorLbl.Name = "StaffLineColorLbl";
			this.StaffLineColorLbl.Size = new System.Drawing.Size(69, 35);
			this.StaffLineColorLbl.TabIndex = 12;
			this.StaffLineColorLbl.Text = "谱线颜色";
			this.StaffLineColorLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// StaffLineThicknessLbl
			//
			this.StaffLineThicknessLbl.AutoSize = true;
			this.StaffLineThicknessLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.StaffLineThicknessLbl.Location = new System.Drawing.Point(2, 28);
			this.StaffLineThicknessLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.StaffLineThicknessLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.StaffLineThicknessLbl.Name = "StaffLineThicknessLbl";
			this.StaffLineThicknessLbl.Size = new System.Drawing.Size(69, 35);
			this.StaffLineThicknessLbl.TabIndex = 5;
			this.StaffLineThicknessLbl.Text = "谱线粗细";
			this.StaffLineThicknessLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// StaffNotesParamsGroup
			//
			this.StaffNotesParamsGroup.AutoSize = true;
			this.StaffNotesParamsGroup.Controls.Add(this.tableLayoutPanel10);
			this.StaffNotesParamsGroup.Dock = System.Windows.Forms.DockStyle.Top;
			this.StaffNotesParamsGroup.Location = new System.Drawing.Point(5, 87);
			this.StaffNotesParamsGroup.Margin = new System.Windows.Forms.Padding(2);
			this.StaffNotesParamsGroup.Name = "StaffNotesParamsGroup";
			this.StaffNotesParamsGroup.Padding = new System.Windows.Forms.Padding(5);
			this.StaffNotesParamsGroup.Size = new System.Drawing.Size(648, 160);
			this.StaffNotesParamsGroup.TabIndex = 6;
			this.StaffNotesParamsGroup.TabStop = false;
			this.StaffNotesParamsGroup.Text = "音符参数";
			//
			// tableLayoutPanel10
			//
			this.tableLayoutPanel10.AutoSize = true;
			this.tableLayoutPanel10.ColumnCount = 4;
			this.tableLayoutPanel10.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel10.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 50F));
			this.tableLayoutPanel10.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel10.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 50F));
			this.tableLayoutPanel10.Controls.Add(this.StaffSurfacePaddingRightBox, 3, 2);
			this.tableLayoutPanel10.Controls.Add(this.StaffSurfacePaddingRightLbl, 2, 2);
			this.tableLayoutPanel10.Controls.Add(this.StaffClefLbl, 0, 1);
			this.tableLayoutPanel10.Controls.Add(this.StaffClefCombo, 1, 1);
			this.tableLayoutPanel10.Controls.Add(this.StaffLineSpacingLbl, 2, 1);
			this.tableLayoutPanel10.Controls.Add(this.StaffLineSpacingBox, 3, 1);
			this.tableLayoutPanel10.Controls.Add(this.StaffSurfacePositionBox, 1, 3);
			this.tableLayoutPanel10.Controls.Add(this.StaffSurfacePaddingLeftLbl, 0, 2);
			this.tableLayoutPanel10.Controls.Add(this.StaffSurfacePaddingLeftBox, 1, 2);
			this.tableLayoutPanel10.Controls.Add(this.StaffSurfacePositionLbl, 0, 3);
			this.tableLayoutPanel10.Controls.Add(this.StaffNotesShiftLbl, 2, 3);
			this.tableLayoutPanel10.Controls.Add(this.StaffNotesShiftBox, 3, 3);
			this.tableLayoutPanel10.Controls.Add(this.flowLayoutPanel4, 0, 0);
			this.tableLayoutPanel10.Dock = System.Windows.Forms.DockStyle.Fill;
			this.tableLayoutPanel10.Location = new System.Drawing.Point(5, 25);
			this.tableLayoutPanel10.Margin = new System.Windows.Forms.Padding(2);
			this.tableLayoutPanel10.Name = "tableLayoutPanel10";
			this.tableLayoutPanel10.RowCount = 4;
			this.tableLayoutPanel10.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel10.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel10.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel10.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel10.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 20F));
			this.tableLayoutPanel10.Size = new System.Drawing.Size(638, 130);
			this.tableLayoutPanel10.TabIndex = 0;
			//
			// StaffSurfacePaddingRightLbl
			//
			this.StaffSurfacePaddingRightLbl.AutoSize = true;
			this.StaffSurfacePaddingRightLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.StaffSurfacePaddingRightLbl.Location = new System.Drawing.Point(321, 62);
			this.StaffSurfacePaddingRightLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.StaffSurfacePaddingRightLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.StaffSurfacePaddingRightLbl.Name = "StaffSurfacePaddingRightLbl";
			this.StaffSurfacePaddingRightLbl.Size = new System.Drawing.Size(69, 34);
			this.StaffSurfacePaddingRightLbl.TabIndex = 14;
			this.StaffSurfacePaddingRightLbl.Text = "谱右边距";
			this.StaffSurfacePaddingRightLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// StaffClefLbl
			//
			this.StaffClefLbl.AutoSize = true;
			this.StaffClefLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.StaffClefLbl.Location = new System.Drawing.Point(2, 28);
			this.StaffClefLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.StaffClefLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.StaffClefLbl.Name = "StaffClefLbl";
			this.StaffClefLbl.Size = new System.Drawing.Size(69, 34);
			this.StaffClefLbl.TabIndex = 0;
			this.StaffClefLbl.Text = "谱号";
			this.StaffClefLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// StaffClefCombo
			//
			this.StaffClefCombo.Dock = System.Windows.Forms.DockStyle.Fill;
			this.StaffClefCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.StaffClefCombo.Enabled = false;
			this.StaffClefCombo.FormattingEnabled = true;
			this.StaffClefCombo.Items.AddRange(new object[] {
			"高音",
			"低音"});
			this.StaffClefCombo.Location = new System.Drawing.Point(75, 30);
			this.StaffClefCombo.Margin = new System.Windows.Forms.Padding(2);
			this.StaffClefCombo.Name = "StaffClefCombo";
			this.StaffClefCombo.Size = new System.Drawing.Size(242, 28);
			this.StaffClefCombo.TabIndex = 6;
			//
			// StaffLineSpacingLbl
			//
			this.StaffLineSpacingLbl.AutoSize = true;
			this.StaffLineSpacingLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.StaffLineSpacingLbl.Location = new System.Drawing.Point(321, 28);
			this.StaffLineSpacingLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.StaffLineSpacingLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.StaffLineSpacingLbl.Name = "StaffLineSpacingLbl";
			this.StaffLineSpacingLbl.Size = new System.Drawing.Size(69, 34);
			this.StaffLineSpacingLbl.TabIndex = 1;
			this.StaffLineSpacingLbl.Text = "谱线间距";
			this.StaffLineSpacingLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// StaffSurfacePaddingLeftLbl
			//
			this.StaffSurfacePaddingLeftLbl.AutoSize = true;
			this.StaffSurfacePaddingLeftLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.StaffSurfacePaddingLeftLbl.Location = new System.Drawing.Point(2, 62);
			this.StaffSurfacePaddingLeftLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.StaffSurfacePaddingLeftLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.StaffSurfacePaddingLeftLbl.Name = "StaffSurfacePaddingLeftLbl";
			this.StaffSurfacePaddingLeftLbl.Size = new System.Drawing.Size(69, 34);
			this.StaffSurfacePaddingLeftLbl.TabIndex = 5;
			this.StaffSurfacePaddingLeftLbl.Text = "谱左边距";
			this.StaffSurfacePaddingLeftLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// StaffSurfacePositionLbl
			//
			this.StaffSurfacePositionLbl.AutoSize = true;
			this.StaffSurfacePositionLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.StaffSurfacePositionLbl.Location = new System.Drawing.Point(2, 96);
			this.StaffSurfacePositionLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.StaffSurfacePositionLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.StaffSurfacePositionLbl.Name = "StaffSurfacePositionLbl";
			this.StaffSurfacePositionLbl.Size = new System.Drawing.Size(69, 34);
			this.StaffSurfacePositionLbl.TabIndex = 2;
			this.StaffSurfacePositionLbl.Text = "谱面位置";
			this.StaffSurfacePositionLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// StaffNotesShiftLbl
			//
			this.StaffNotesShiftLbl.AutoSize = true;
			this.StaffNotesShiftLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.StaffNotesShiftLbl.Location = new System.Drawing.Point(321, 96);
			this.StaffNotesShiftLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.StaffNotesShiftLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.StaffNotesShiftLbl.Name = "StaffNotesShiftLbl";
			this.StaffNotesShiftLbl.Size = new System.Drawing.Size(69, 34);
			this.StaffNotesShiftLbl.TabIndex = 12;
			this.StaffNotesShiftLbl.Text = "音符偏移";
			this.StaffNotesShiftLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// StaffNotesShiftBox
			//
			this.StaffNotesShiftBox.Constrain = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.StaffNotesShiftBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.StaffNotesShiftBox.Enabled = false;
			this.StaffNotesShiftBox.EnableDecimalPlaces = true;
			this.StaffNotesShiftBox.Location = new System.Drawing.Point(394, 98);
			this.StaffNotesShiftBox.Margin = new System.Windows.Forms.Padding(2);
			this.StaffNotesShiftBox.Maximum = new decimal(new int[] {
			120,
			0,
			0,
			0});
			this.StaffNotesShiftBox.Minimum = new decimal(new int[] {
			120,
			0,
			0,
			-2147483648});
			this.StaffNotesShiftBox.Name = "StaffNotesShiftBox";
			this.StaffNotesShiftBox.Size = new System.Drawing.Size(242, 27);
			this.StaffNotesShiftBox.Suffix = "key";
			this.StaffNotesShiftBox.TabIndex = 11;
			//
			// flowLayoutPanel4
			//
			this.flowLayoutPanel4.AutoSize = true;
			this.tableLayoutPanel10.SetColumnSpan(this.flowLayoutPanel4, 4);
			this.flowLayoutPanel4.Controls.Add(this.StaffRelativeValueCheck);
			this.flowLayoutPanel4.Controls.Add(this.StaffLegacyMethodCheck);
			this.flowLayoutPanel4.Controls.Add(this.StaffFreezeAtNoteOffCheck);
			this.flowLayoutPanel4.Dock = System.Windows.Forms.DockStyle.Fill;
			this.flowLayoutPanel4.Location = new System.Drawing.Point(0, 0);
			this.flowLayoutPanel4.Margin = new System.Windows.Forms.Padding(0);
			this.flowLayoutPanel4.Name = "flowLayoutPanel4";
			this.flowLayoutPanel4.Size = new System.Drawing.Size(638, 28);
			this.flowLayoutPanel4.TabIndex = 0;
			//
			// flowLayoutPanel8
			//
			this.flowLayoutPanel8.AutoSize = true;
			this.flowLayoutPanel8.Controls.Add(this.StaffVisualizerConfigCheck);
			this.flowLayoutPanel8.Dock = System.Windows.Forms.DockStyle.Top;
			this.flowLayoutPanel8.Location = new System.Drawing.Point(5, 55);
			this.flowLayoutPanel8.Margin = new System.Windows.Forms.Padding(2);
			this.flowLayoutPanel8.Name = "flowLayoutPanel8";
			this.flowLayoutPanel8.Padding = new System.Windows.Forms.Padding(5, 2, 5, 2);
			this.flowLayoutPanel8.Size = new System.Drawing.Size(648, 32);
			this.flowLayoutPanel8.TabIndex = 5;
			//
			// StaffVisualizerConfigCheck
			//
			this.StaffVisualizerConfigCheck.AutoSize = true;
			this.StaffVisualizerConfigCheck.Dock = System.Windows.Forms.DockStyle.Fill;
			this.StaffVisualizerConfigCheck.Location = new System.Drawing.Point(7, 4);
			this.StaffVisualizerConfigCheck.Margin = new System.Windows.Forms.Padding(2);
			this.StaffVisualizerConfigCheck.Name = "StaffVisualizerConfigCheck";
			this.StaffVisualizerConfigCheck.Size = new System.Drawing.Size(181, 24);
			this.StaffVisualizerConfigCheck.TabIndex = 4;
			this.StaffVisualizerConfigCheck.Text = "启用五线谱可视化效果";
			this.StaffVisualizerConfigCheck.UseVisualStyleBackColor = true;
			//
			// SheetConfigInfoLabel
			//
			this.SheetConfigInfoLabel.AutoSize = true;
			this.SheetConfigInfoLabel.Dock = System.Windows.Forms.DockStyle.Top;
			this.SheetConfigInfoLabel.Font = new System.Drawing.Font("微软雅黑", 9F);
			this.SheetConfigInfoLabel.Location = new System.Drawing.Point(5, 5);
			this.SheetConfigInfoLabel.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.SheetConfigInfoLabel.Name = "SheetConfigInfoLabel";
			this.SheetConfigInfoLabel.Padding = new System.Windows.Forms.Padding(0, 5, 0, 5);
			this.SheetConfigInfoLabel.Size = new System.Drawing.Size(384, 50);
			this.SheetConfigInfoLabel.TabIndex = 4;
			this.SheetConfigInfoLabel.Text = "欲开启五线谱视觉效果，需要先开启“生成视频”选项。\r\n开启本功能会禁用映像节奏视觉效果和视频拉伸选项。";
			this.SheetConfigInfoLabel.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// SonarTab
			//
			this.SonarTab.Controls.Add(this.tableLayoutPanel11);
			this.SonarTab.Location = new System.Drawing.Point(4, 29);
			this.SonarTab.Margin = new System.Windows.Forms.Padding(2);
			this.SonarTab.Name = "SonarTab";
			this.SonarTab.Padding = new System.Windows.Forms.Padding(5);
			this.SonarTab.Size = new System.Drawing.Size(658, 626);
			this.SonarTab.TabIndex = 6;
			this.SonarTab.Text = "声呐";
			this.SonarTab.UseVisualStyleBackColor = true;
			//
			// tableLayoutPanel11
			//
			this.tableLayoutPanel11.ColumnCount = 1;
			this.tableLayoutPanel11.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel11.Controls.Add(this.SonarSwitchesFlow, 0, 0);
			this.tableLayoutPanel11.Controls.Add(this.SonarList, 0, 1);
			this.tableLayoutPanel11.Controls.Add(this.SonarButtonsTable, 0, 2);
			this.tableLayoutPanel11.Controls.Add(this.SonarParamsGroup, 0, 3);
			this.tableLayoutPanel11.Dock = System.Windows.Forms.DockStyle.Fill;
			this.tableLayoutPanel11.Location = new System.Drawing.Point(5, 5);
			this.tableLayoutPanel11.Margin = new System.Windows.Forms.Padding(0);
			this.tableLayoutPanel11.Name = "tableLayoutPanel11";
			this.tableLayoutPanel11.RowCount = 4;
			this.tableLayoutPanel11.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel11.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel11.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel11.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel11.Size = new System.Drawing.Size(648, 616);
			this.tableLayoutPanel11.TabIndex = 0;
			//
			// SonarSwitchesFlow
			//
			this.SonarSwitchesFlow.AutoSize = true;
			this.SonarSwitchesFlow.Controls.Add(this.SonarConfigCheck);
			this.SonarSwitchesFlow.Controls.Add(this.SeparateDrumsCheck);
			this.SonarSwitchesFlow.Controls.Add(this.DifferenceCompositeModeCheck);
			this.SonarSwitchesFlow.Controls.Add(this.flowLayoutPanel15);
			this.SonarSwitchesFlow.Dock = System.Windows.Forms.DockStyle.Top;
			this.SonarSwitchesFlow.Location = new System.Drawing.Point(2, 2);
			this.SonarSwitchesFlow.Margin = new System.Windows.Forms.Padding(2);
			this.SonarSwitchesFlow.Name = "SonarSwitchesFlow";
			this.SonarSwitchesFlow.Padding = new System.Windows.Forms.Padding(0, 2, 0, 2);
			this.SonarSwitchesFlow.Size = new System.Drawing.Size(644, 34);
			this.SonarSwitchesFlow.TabIndex = 0;
			//
			// SonarConfigCheck
			//
			this.SonarConfigCheck.AutoSize = true;
			this.SonarConfigCheck.Checked = true;
			this.SonarConfigCheck.CheckState = System.Windows.Forms.CheckState.Checked;
			this.SonarConfigCheck.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarConfigCheck.Location = new System.Drawing.Point(2, 4);
			this.SonarConfigCheck.Margin = new System.Windows.Forms.Padding(2);
			this.SonarConfigCheck.Name = "SonarConfigCheck";
			this.SonarConfigCheck.Size = new System.Drawing.Size(166, 26);
			this.SonarConfigCheck.TabIndex = 4;
			this.SonarConfigCheck.Text = "为鼓组启用声呐效果";
			this.SonarConfigCheck.UserChecked = true;
			this.SonarConfigCheck.UseVisualStyleBackColor = true;
			//
			// SeparateDrumsCheck
			//
			this.SeparateDrumsCheck.AutoSize = true;
			this.SeparateDrumsCheck.Checked = true;
			this.SeparateDrumsCheck.CheckState = System.Windows.Forms.CheckState.Checked;
			this.SeparateDrumsCheck.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SeparateDrumsCheck.Location = new System.Drawing.Point(172, 4);
			this.SeparateDrumsCheck.Margin = new System.Windows.Forms.Padding(2);
			this.SeparateDrumsCheck.Name = "SeparateDrumsCheck";
			this.SeparateDrumsCheck.Size = new System.Drawing.Size(121, 26);
			this.SeparateDrumsCheck.TabIndex = 6;
			this.SeparateDrumsCheck.Text = "分离不同鼓声";
			this.SeparateDrumsCheck.UseVisualStyleBackColor = true;
			//
			// DifferenceCompositeModeCheck
			//
			this.DifferenceCompositeModeCheck.AutoSize = true;
			this.DifferenceCompositeModeCheck.Dock = System.Windows.Forms.DockStyle.Fill;
			this.DifferenceCompositeModeCheck.Location = new System.Drawing.Point(297, 4);
			this.DifferenceCompositeModeCheck.Margin = new System.Windows.Forms.Padding(2);
			this.DifferenceCompositeModeCheck.Name = "DifferenceCompositeModeCheck";
			this.DifferenceCompositeModeCheck.Size = new System.Drawing.Size(151, 26);
			this.DifferenceCompositeModeCheck.TabIndex = 5;
			this.DifferenceCompositeModeCheck.Text = "差值轨道合成模式";
			this.DifferenceCompositeModeCheck.UseVisualStyleBackColor = true;
			//
			// flowLayoutPanel15
			//
			this.flowLayoutPanel15.AutoSize = true;
			this.flowLayoutPanel15.Controls.Add(this.TrackShadowCheck);
			this.flowLayoutPanel15.Controls.Add(this.TrackShadowColorBtn);
			this.flowLayoutPanel15.Dock = System.Windows.Forms.DockStyle.Fill;
			this.flowLayoutPanel15.Location = new System.Drawing.Point(450, 2);
			this.flowLayoutPanel15.Margin = new System.Windows.Forms.Padding(0);
			this.flowLayoutPanel15.Name = "flowLayoutPanel15";
			this.flowLayoutPanel15.Size = new System.Drawing.Size(178, 30);
			this.flowLayoutPanel15.TabIndex = 8;
			//
			// TrackShadowCheck
			//
			this.TrackShadowCheck.AutoSize = true;
			this.TrackShadowCheck.Dock = System.Windows.Forms.DockStyle.Fill;
			this.TrackShadowCheck.Location = new System.Drawing.Point(2, 2);
			this.TrackShadowCheck.Margin = new System.Windows.Forms.Padding(2);
			this.TrackShadowCheck.Name = "TrackShadowCheck";
			this.TrackShadowCheck.Size = new System.Drawing.Size(61, 26);
			this.TrackShadowCheck.TabIndex = 7;
			this.TrackShadowCheck.Text = "阴影";
			this.TrackShadowCheck.UseVisualStyleBackColor = true;
			//
			// TrackShadowColorBtn
			//
			this.TrackShadowColorBtn.AutoSize = true;
			this.TrackShadowColorBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.TrackShadowColorBtn.Location = new System.Drawing.Point(65, 0);
			this.TrackShadowColorBtn.Margin = new System.Windows.Forms.Padding(0);
			this.TrackShadowColorBtn.Name = "TrackShadowColorBtn";
			this.TrackShadowColorBtn.Padding = new System.Windows.Forms.Padding(6, 0, 6, 0);
			this.TrackShadowColorBtn.Size = new System.Drawing.Size(113, 30);
			this.TrackShadowColorBtn.TabIndex = 8;
			this.TrackShadowColorBtn.Text = "阴影颜色...";
			//
			// SonarList
			//
			this.SonarList.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
			this.SonarNameHeader,
			this.SonarShapeHeader,
			this.SonarDurationHeader});
			this.SonarList.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarList.FullRowSelect = true;
			this.SonarList.HideSelection = false;
			this.SonarList.Location = new System.Drawing.Point(3, 41);
			this.SonarList.Name = "SonarList";
			this.SonarList.ShowItemToolTips = true;
			this.SonarList.Size = new System.Drawing.Size(642, 194);
			this.SonarList.TabIndex = 1;
			this.SonarList.UseCompatibleStateImageBehavior = false;
			this.SonarList.View = System.Windows.Forms.View.Details;
			this.SonarList.SelectedIndexChanged += new System.EventHandler(this.SonarList_SelectedIndexChanged);
			//
			// SonarNameHeader
			//
			this.SonarNameHeader.Text = "匹配鼓声";
			this.SonarNameHeader.Width = 200;
			//
			// SonarShapeHeader
			//
			this.SonarShapeHeader.Text = "形状";
			this.SonarShapeHeader.Width = 120;
			//
			// SonarDurationHeader
			//
			this.SonarDurationHeader.Text = "持续时间";
			this.SonarDurationHeader.Width = 150;
			//
			// SonarButtonsTable
			//
			this.SonarButtonsTable.ColumnCount = 6;
			this.SonarButtonsTable.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute, 42F));
			this.SonarButtonsTable.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute, 42F));
			this.SonarButtonsTable.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.SonarButtonsTable.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute, 42F));
			this.SonarButtonsTable.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute, 42F));
			this.SonarButtonsTable.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute, 42F));
			this.SonarButtonsTable.Controls.Add(this.SonarAddBtn, 5, 0);
			this.SonarButtonsTable.Controls.Add(this.SonarMoveDownBtn, 4, 0);
			this.SonarButtonsTable.Controls.Add(this.SonarMoveUpBtn, 3, 0);
			this.SonarButtonsTable.Controls.Add(this.SonarDeleteBtn, 1, 0);
			this.SonarButtonsTable.Controls.Add(this.SonarResetBtn, 0, 0);
			this.SonarButtonsTable.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarButtonsTable.Location = new System.Drawing.Point(2, 240);
			this.SonarButtonsTable.Margin = new System.Windows.Forms.Padding(2);
			this.SonarButtonsTable.Name = "SonarButtonsTable";
			this.SonarButtonsTable.Padding = new System.Windows.Forms.Padding(0, 2, 0, 2);
			this.SonarButtonsTable.RowCount = 1;
			this.SonarButtonsTable.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.SonarButtonsTable.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 38F));
			this.SonarButtonsTable.Size = new System.Drawing.Size(644, 42);
			this.SonarButtonsTable.TabIndex = 2;
			//
			// SonarAddBtn
			//
			this.SonarAddBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarAddBtn.ForeColor = System.Drawing.Color.Transparent;
			this.SonarAddBtn.Location = new System.Drawing.Point(605, 5);
			this.SonarAddBtn.Name = "SonarAddBtn";
			this.SonarAddBtn.Size = new System.Drawing.Size(36, 32);
			this.SonarAddBtn.TabIndex = 4;
			this.SonarAddBtn.Text = "　　　　　　　　　新增(&N)";
			this.SonarAddBtn.UseVisualStyleBackColor = true;
			this.SonarAddBtn.Click += new System.EventHandler(this.SonarAddBtn_Click);
			this.SonarAddBtn.Paint += new System.Windows.Forms.PaintEventHandler(this.SonarButtons_Paint);
			//
			// SonarMoveDownBtn
			//
			this.SonarMoveDownBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarMoveDownBtn.ForeColor = System.Drawing.Color.Transparent;
			this.SonarMoveDownBtn.Location = new System.Drawing.Point(563, 5);
			this.SonarMoveDownBtn.Name = "SonarMoveDownBtn";
			this.SonarMoveDownBtn.Size = new System.Drawing.Size(36, 32);
			this.SonarMoveDownBtn.TabIndex = 3;
			this.SonarMoveDownBtn.Text = "　　　　　　　　　下移";
			this.SonarMoveDownBtn.UseVisualStyleBackColor = true;
			this.SonarMoveDownBtn.Click += new System.EventHandler(this.SonarMoveBtn_Click);
			this.SonarMoveDownBtn.Paint += new System.Windows.Forms.PaintEventHandler(this.SonarButtons_Paint);
			//
			// SonarMoveUpBtn
			//
			this.SonarMoveUpBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarMoveUpBtn.ForeColor = System.Drawing.Color.Transparent;
			this.SonarMoveUpBtn.Location = new System.Drawing.Point(521, 5);
			this.SonarMoveUpBtn.Name = "SonarMoveUpBtn";
			this.SonarMoveUpBtn.Size = new System.Drawing.Size(36, 32);
			this.SonarMoveUpBtn.TabIndex = 2;
			this.SonarMoveUpBtn.Text = "　　　　　　　　　上移";
			this.SonarMoveUpBtn.UseVisualStyleBackColor = true;
			this.SonarMoveUpBtn.Click += new System.EventHandler(this.SonarMoveBtn_Click);
			this.SonarMoveUpBtn.Paint += new System.Windows.Forms.PaintEventHandler(this.SonarButtons_Paint);
			//
			// SonarDeleteBtn
			//
			this.SonarDeleteBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarDeleteBtn.ForeColor = System.Drawing.Color.Transparent;
			this.SonarDeleteBtn.Location = new System.Drawing.Point(45, 5);
			this.SonarDeleteBtn.Name = "SonarDeleteBtn";
			this.SonarDeleteBtn.Size = new System.Drawing.Size(36, 32);
			this.SonarDeleteBtn.TabIndex = 1;
			this.SonarDeleteBtn.Text = "　　　　　　　　　删除";
			this.SonarDeleteBtn.UseVisualStyleBackColor = true;
			this.SonarDeleteBtn.Click += new System.EventHandler(this.SonarDeleteBtn_Click);
			this.SonarDeleteBtn.Paint += new System.Windows.Forms.PaintEventHandler(this.SonarButtons_Paint);
			//
			// SonarResetBtn
			//
			this.SonarResetBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarResetBtn.ForeColor = System.Drawing.Color.Transparent;
			this.SonarResetBtn.Location = new System.Drawing.Point(3, 5);
			this.SonarResetBtn.Name = "SonarResetBtn";
			this.SonarResetBtn.Size = new System.Drawing.Size(36, 32);
			this.SonarResetBtn.TabIndex = 0;
			this.SonarResetBtn.Text = "　　　　　　　　　重置";
			this.SonarResetBtn.UseVisualStyleBackColor = true;
			this.SonarResetBtn.Click += new System.EventHandler(this.SonarDeleteBtn_Click);
			this.SonarResetBtn.Paint += new System.Windows.Forms.PaintEventHandler(this.SonarButtons_Paint);
			//
			// SonarParamsGroup
			//
			this.SonarParamsGroup.AutoSize = true;
			this.SonarParamsGroup.Controls.Add(this.SonarParamsPanel);
			this.SonarParamsGroup.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarParamsGroup.Location = new System.Drawing.Point(3, 287);
			this.SonarParamsGroup.Name = "SonarParamsGroup";
			this.SonarParamsGroup.Size = new System.Drawing.Size(642, 326);
			this.SonarParamsGroup.TabIndex = 3;
			this.SonarParamsGroup.TabStop = false;
			this.SonarParamsGroup.Text = "参数";
			//
			// SonarParamsPanel
			//
			this.SonarParamsPanel.AutoScroll = true;
			this.SonarParamsPanel.AutoSize = true;
			this.SonarParamsPanel.Controls.Add(this.tableLayoutPanel15);
			this.SonarParamsPanel.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarParamsPanel.Location = new System.Drawing.Point(3, 23);
			this.SonarParamsPanel.MaximumSize = new System.Drawing.Size(0, 300);
			this.SonarParamsPanel.Name = "SonarParamsPanel";
			this.SonarParamsPanel.Size = new System.Drawing.Size(636, 300);
			this.SonarParamsPanel.TabIndex = 0;
			//
			// tableLayoutPanel15
			//
			this.tableLayoutPanel15.AutoSize = true;
			this.tableLayoutPanel15.ColumnCount = 4;
			this.tableLayoutPanel15.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel15.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 50F));
			this.tableLayoutPanel15.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel15.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 50F));
			this.tableLayoutPanel15.Controls.Add(this.SonarFadeOutCurveCombo, 3, 12);
			this.tableLayoutPanel15.Controls.Add(this.SonarFadeOutCurveLbl, 2, 12);
			this.tableLayoutPanel15.Controls.Add(this.SonarFadeInCurveCombo, 1, 12);
			this.tableLayoutPanel15.Controls.Add(this.SonarFadeInCurveLbl, 0, 12);
			this.tableLayoutPanel15.Controls.Add(this.SonarFadeOutBox, 3, 11);
			this.tableLayoutPanel15.Controls.Add(this.SonarFadeOutLbl, 2, 11);
			this.tableLayoutPanel15.Controls.Add(this.SonarFadeInBox, 1, 11);
			this.tableLayoutPanel15.Controls.Add(this.SonarFadeInLbl, 0, 11);
			this.tableLayoutPanel15.Controls.Add(this.SonarRotation2Box, 3, 10);
			this.tableLayoutPanel15.Controls.Add(this.SonarRotation2Lbl, 2, 10);
			this.tableLayoutPanel15.Controls.Add(this.SonarRotationBox, 1, 10);
			this.tableLayoutPanel15.Controls.Add(this.SonarRotationLbl, 0, 10);
			this.tableLayoutPanel15.Controls.Add(this.SonarYPreOffset2Box, 3, 9);
			this.tableLayoutPanel15.Controls.Add(this.SonarYPreOffset2Lbl, 2, 9);
			this.tableLayoutPanel15.Controls.Add(this.SonarXPreOffset2Box, 1, 9);
			this.tableLayoutPanel15.Controls.Add(this.SonarXPreOffset2Lbl, 0, 9);
			this.tableLayoutPanel15.Controls.Add(this.SonarYPreOffsetBox, 3, 8);
			this.tableLayoutPanel15.Controls.Add(this.SonarYPreOffsetLbl, 2, 8);
			this.tableLayoutPanel15.Controls.Add(this.SonarXPreOffsetBox, 1, 8);
			this.tableLayoutPanel15.Controls.Add(this.SonarXPreOffsetLbl, 0, 8);
			this.tableLayoutPanel15.Controls.Add(this.SonarYOffset2Box, 3, 7);
			this.tableLayoutPanel15.Controls.Add(this.SonarYOffset2Lbl, 2, 7);
			this.tableLayoutPanel15.Controls.Add(this.SonarXOffset2Box, 1, 7);
			this.tableLayoutPanel15.Controls.Add(this.SonarXOffset2Lbl, 0, 7);
			this.tableLayoutPanel15.Controls.Add(this.SonarYOffsetBox, 3, 6);
			this.tableLayoutPanel15.Controls.Add(this.SonarYOffsetLbl, 2, 6);
			this.tableLayoutPanel15.Controls.Add(this.SonarXOffsetBox, 1, 6);
			this.tableLayoutPanel15.Controls.Add(this.SonarXOffsetLbl, 0, 6);
			this.tableLayoutPanel15.Controls.Add(this.SonarYPosBox, 3, 5);
			this.tableLayoutPanel15.Controls.Add(this.SonarYPosLbl, 2, 5);
			this.tableLayoutPanel15.Controls.Add(this.SonarXPosBox, 1, 5);
			this.tableLayoutPanel15.Controls.Add(this.SonarXPosLbl, 0, 5);
			this.tableLayoutPanel15.Controls.Add(this.SonarEndSizeBox, 3, 4);
			this.tableLayoutPanel15.Controls.Add(this.SonarEndSizeLbl, 2, 4);
			this.tableLayoutPanel15.Controls.Add(this.SonarEndBorderBox, 1, 4);
			this.tableLayoutPanel15.Controls.Add(this.SonarEndBorderLbl, 0, 4);
			this.tableLayoutPanel15.Controls.Add(this.SonarSizeBox, 3, 3);
			this.tableLayoutPanel15.Controls.Add(this.SonarSizeLbl, 2, 3);
			this.tableLayoutPanel15.Controls.Add(this.SonarBorderBox, 1, 3);
			this.tableLayoutPanel15.Controls.Add(this.SonarBorderLbl, 0, 3);
			this.tableLayoutPanel15.Controls.Add(this.SonarCurveCombo, 3, 2);
			this.tableLayoutPanel15.Controls.Add(this.SonarCurveLbl, 2, 2);
			this.tableLayoutPanel15.Controls.Add(this.SonarDurationTxt, 1, 2);
			this.tableLayoutPanel15.Controls.Add(this.SonarDurationLbl, 0, 2);
			this.tableLayoutPanel15.Controls.Add(this.SonarColorBtn, 3, 1);
			this.tableLayoutPanel15.Controls.Add(this.SonarColorLbl, 2, 1);
			this.tableLayoutPanel15.Controls.Add(this.SonarShapeCombo, 1, 1);
			this.tableLayoutPanel15.Controls.Add(this.SonarShapeLbl, 0, 1);
			this.tableLayoutPanel15.Controls.Add(this.SonarDrumSoundCombo, 1, 0);
			this.tableLayoutPanel15.Controls.Add(this.SonarDrumSoundLbl, 0, 0);
			this.tableLayoutPanel15.Dock = System.Windows.Forms.DockStyle.Top;
			this.tableLayoutPanel15.Location = new System.Drawing.Point(0, 0);
			this.tableLayoutPanel15.Name = "tableLayoutPanel15";
			this.tableLayoutPanel15.RowCount = 13;
			this.tableLayoutPanel15.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel15.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel15.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel15.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel15.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel15.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel15.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel15.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel15.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel15.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel15.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel15.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel15.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel15.Size = new System.Drawing.Size(615, 442);
			this.tableLayoutPanel15.TabIndex = 0;
			//
			// SonarFadeOutCurveCombo
			//
			this.SonarFadeOutCurveCombo.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarFadeOutCurveCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.SonarFadeOutCurveCombo.FormattingEnabled = true;
			this.SonarFadeOutCurveCombo.Items.AddRange(new object[] {
			"线性",
			"快速",
			"慢速",
			"平滑",
			"急剧"});
			this.SonarFadeOutCurveCombo.Location = new System.Drawing.Point(442, 412);
			this.SonarFadeOutCurveCombo.Margin = new System.Windows.Forms.Padding(2, 4, 2, 4);
			this.SonarFadeOutCurveCombo.Name = "SonarFadeOutCurveCombo";
			this.SonarFadeOutCurveCombo.Size = new System.Drawing.Size(171, 28);
			this.SonarFadeOutCurveCombo.TabIndex = 50;
			this.SonarFadeOutCurveCombo.SelectedIndexChanged += new System.EventHandler(this.SonarConfigChanged);
			//
			// SonarFadeOutCurveLbl
			//
			this.SonarFadeOutCurveLbl.AutoSize = true;
			this.SonarFadeOutCurveLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarFadeOutCurveLbl.Location = new System.Drawing.Point(309, 408);
			this.SonarFadeOutCurveLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.SonarFadeOutCurveLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.SonarFadeOutCurveLbl.Name = "SonarFadeOutCurveLbl";
			this.SonarFadeOutCurveLbl.Size = new System.Drawing.Size(129, 34);
			this.SonarFadeOutCurveLbl.TabIndex = 48;
			this.SonarFadeOutCurveLbl.Text = "渐出曲线";
			this.SonarFadeOutCurveLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// SonarFadeInCurveCombo
			//
			this.SonarFadeInCurveCombo.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarFadeInCurveCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.SonarFadeInCurveCombo.FormattingEnabled = true;
			this.SonarFadeInCurveCombo.Items.AddRange(new object[] {
			"线性",
			"快速",
			"慢速",
			"平滑",
			"急剧"});
			this.SonarFadeInCurveCombo.Location = new System.Drawing.Point(135, 412);
			this.SonarFadeInCurveCombo.Margin = new System.Windows.Forms.Padding(2, 4, 2, 4);
			this.SonarFadeInCurveCombo.Name = "SonarFadeInCurveCombo";
			this.SonarFadeInCurveCombo.Size = new System.Drawing.Size(170, 28);
			this.SonarFadeInCurveCombo.TabIndex = 48;
			this.SonarFadeInCurveCombo.SelectedIndexChanged += new System.EventHandler(this.SonarConfigChanged);
			//
			// SonarFadeInCurveLbl
			//
			this.SonarFadeInCurveLbl.AutoSize = true;
			this.SonarFadeInCurveLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarFadeInCurveLbl.Location = new System.Drawing.Point(2, 408);
			this.SonarFadeInCurveLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.SonarFadeInCurveLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.SonarFadeInCurveLbl.Name = "SonarFadeInCurveLbl";
			this.SonarFadeInCurveLbl.Size = new System.Drawing.Size(129, 34);
			this.SonarFadeInCurveLbl.TabIndex = 47;
			this.SonarFadeInCurveLbl.Text = "渐入曲线";
			this.SonarFadeInCurveLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// SonarFadeOutBox
			//
			this.SonarFadeOutBox.Constrain = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.SonarFadeOutBox.DecimalPlaces = 2;
			this.SonarFadeOutBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarFadeOutBox.EnableDecimalPlaces = true;
			this.SonarFadeOutBox.Location = new System.Drawing.Point(443, 377);
			this.SonarFadeOutBox.Name = "SonarFadeOutBox";
			this.SonarFadeOutBox.Size = new System.Drawing.Size(169, 27);
			this.SonarFadeOutBox.Suffix = "%";
			this.SonarFadeOutBox.TabIndex = 46;
			this.SonarFadeOutBox.ValueChanged += new System.EventHandler(this.SonarConfigChanged);
			//
			// SonarFadeOutLbl
			//
			this.SonarFadeOutLbl.AutoSize = true;
			this.SonarFadeOutLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarFadeOutLbl.Location = new System.Drawing.Point(309, 374);
			this.SonarFadeOutLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.SonarFadeOutLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.SonarFadeOutLbl.Name = "SonarFadeOutLbl";
			this.SonarFadeOutLbl.Size = new System.Drawing.Size(129, 34);
			this.SonarFadeOutLbl.TabIndex = 25;
			this.SonarFadeOutLbl.Text = "渐出";
			this.SonarFadeOutLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// SonarFadeInBox
			//
			this.SonarFadeInBox.Constrain = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.SonarFadeInBox.DecimalPlaces = 2;
			this.SonarFadeInBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarFadeInBox.EnableDecimalPlaces = true;
			this.SonarFadeInBox.Location = new System.Drawing.Point(136, 377);
			this.SonarFadeInBox.Name = "SonarFadeInBox";
			this.SonarFadeInBox.Size = new System.Drawing.Size(168, 27);
			this.SonarFadeInBox.Suffix = "%";
			this.SonarFadeInBox.TabIndex = 44;
			this.SonarFadeInBox.ValueChanged += new System.EventHandler(this.SonarConfigChanged);
			//
			// SonarFadeInLbl
			//
			this.SonarFadeInLbl.AutoSize = true;
			this.SonarFadeInLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarFadeInLbl.Location = new System.Drawing.Point(2, 374);
			this.SonarFadeInLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.SonarFadeInLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.SonarFadeInLbl.Name = "SonarFadeInLbl";
			this.SonarFadeInLbl.Size = new System.Drawing.Size(129, 34);
			this.SonarFadeInLbl.TabIndex = 23;
			this.SonarFadeInLbl.Text = "渐入";
			this.SonarFadeInLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// SonarRotation2Box
			//
			this.SonarRotation2Box.Constrain = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.SonarRotation2Box.DecimalPlaces = 3;
			this.SonarRotation2Box.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarRotation2Box.EnableDecimalPlaces = true;
			this.SonarRotation2Box.Location = new System.Drawing.Point(443, 343);
			this.SonarRotation2Box.Maximum = new decimal(new int[] {
			1800,
			0,
			0,
			0});
			this.SonarRotation2Box.Minimum = new decimal(new int[] {
			1800,
			0,
			0,
			-2147483648});
			this.SonarRotation2Box.Name = "SonarRotation2Box";
			this.SonarRotation2Box.Size = new System.Drawing.Size(169, 27);
			this.SonarRotation2Box.Suffix = "°";
			this.SonarRotation2Box.TabIndex = 42;
			this.SonarRotation2Box.ValueChanged += new System.EventHandler(this.SonarConfigChanged);
			//
			// SonarRotation2Lbl
			//
			this.SonarRotation2Lbl.AutoSize = true;
			this.SonarRotation2Lbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarRotation2Lbl.Location = new System.Drawing.Point(309, 340);
			this.SonarRotation2Lbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.SonarRotation2Lbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.SonarRotation2Lbl.Name = "SonarRotation2Lbl";
			this.SonarRotation2Lbl.Size = new System.Drawing.Size(129, 34);
			this.SonarRotation2Lbl.TabIndex = 44;
			this.SonarRotation2Lbl.Text = "起始旋转双数";
			this.SonarRotation2Lbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// SonarRotationBox
			//
			this.SonarRotationBox.Constrain = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.SonarRotationBox.DecimalPlaces = 3;
			this.SonarRotationBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarRotationBox.EnableDecimalPlaces = true;
			this.SonarRotationBox.Location = new System.Drawing.Point(136, 343);
			this.SonarRotationBox.Maximum = new decimal(new int[] {
			1800,
			0,
			0,
			0});
			this.SonarRotationBox.Minimum = new decimal(new int[] {
			1800,
			0,
			0,
			-2147483648});
			this.SonarRotationBox.Name = "SonarRotationBox";
			this.SonarRotationBox.Size = new System.Drawing.Size(168, 27);
			this.SonarRotationBox.Suffix = "°";
			this.SonarRotationBox.TabIndex = 40;
			this.SonarRotationBox.ValueChanged += new System.EventHandler(this.SonarConfigChanged);
			//
			// SonarRotationLbl
			//
			this.SonarRotationLbl.AutoSize = true;
			this.SonarRotationLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarRotationLbl.Location = new System.Drawing.Point(2, 340);
			this.SonarRotationLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.SonarRotationLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.SonarRotationLbl.Name = "SonarRotationLbl";
			this.SonarRotationLbl.Size = new System.Drawing.Size(129, 34);
			this.SonarRotationLbl.TabIndex = 19;
			this.SonarRotationLbl.Text = "起始旋转单数";
			this.SonarRotationLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// SonarYPreOffset2Box
			//
			this.SonarYPreOffset2Box.Constrain = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.SonarYPreOffset2Box.DecimalPlaces = 2;
			this.SonarYPreOffset2Box.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarYPreOffset2Box.EnableDecimalPlaces = true;
			this.SonarYPreOffset2Box.Location = new System.Drawing.Point(443, 309);
			this.SonarYPreOffset2Box.Maximum = new decimal(new int[] {
			50,
			0,
			0,
			0});
			this.SonarYPreOffset2Box.Minimum = new decimal(new int[] {
			50,
			0,
			0,
			-2147483648});
			this.SonarYPreOffset2Box.Name = "SonarYPreOffset2Box";
			this.SonarYPreOffset2Box.Size = new System.Drawing.Size(169, 27);
			this.SonarYPreOffset2Box.Suffix = "%";
			this.SonarYPreOffset2Box.TabIndex = 38;
			this.SonarYPreOffset2Box.ValueChanged += new System.EventHandler(this.SonarConfigChanged);
			//
			// SonarYPreOffset2Lbl
			//
			this.SonarYPreOffset2Lbl.AutoSize = true;
			this.SonarYPreOffset2Lbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarYPreOffset2Lbl.Location = new System.Drawing.Point(309, 306);
			this.SonarYPreOffset2Lbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.SonarYPreOffset2Lbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.SonarYPreOffset2Lbl.Name = "SonarYPreOffset2Lbl";
			this.SonarYPreOffset2Lbl.Size = new System.Drawing.Size(129, 34);
			this.SonarYPreOffset2Lbl.TabIndex = 39;
			this.SonarYPreOffset2Lbl.Text = "预先垂直偏移双数";
			this.SonarYPreOffset2Lbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// SonarXPreOffset2Box
			//
			this.SonarXPreOffset2Box.Constrain = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.SonarXPreOffset2Box.DecimalPlaces = 2;
			this.SonarXPreOffset2Box.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarXPreOffset2Box.EnableDecimalPlaces = true;
			this.SonarXPreOffset2Box.Location = new System.Drawing.Point(136, 309);
			this.SonarXPreOffset2Box.Maximum = new decimal(new int[] {
			50,
			0,
			0,
			0});
			this.SonarXPreOffset2Box.Minimum = new decimal(new int[] {
			50,
			0,
			0,
			-2147483648});
			this.SonarXPreOffset2Box.Name = "SonarXPreOffset2Box";
			this.SonarXPreOffset2Box.Size = new System.Drawing.Size(168, 27);
			this.SonarXPreOffset2Box.Suffix = "%";
			this.SonarXPreOffset2Box.TabIndex = 36;
			this.SonarXPreOffset2Box.ValueChanged += new System.EventHandler(this.SonarConfigChanged);
			//
			// SonarXPreOffset2Lbl
			//
			this.SonarXPreOffset2Lbl.AutoSize = true;
			this.SonarXPreOffset2Lbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarXPreOffset2Lbl.Location = new System.Drawing.Point(2, 306);
			this.SonarXPreOffset2Lbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.SonarXPreOffset2Lbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.SonarXPreOffset2Lbl.Name = "SonarXPreOffset2Lbl";
			this.SonarXPreOffset2Lbl.Size = new System.Drawing.Size(129, 34);
			this.SonarXPreOffset2Lbl.TabIndex = 38;
			this.SonarXPreOffset2Lbl.Text = "预先水平偏移双数";
			this.SonarXPreOffset2Lbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// SonarYPreOffsetBox
			//
			this.SonarYPreOffsetBox.Constrain = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.SonarYPreOffsetBox.DecimalPlaces = 2;
			this.SonarYPreOffsetBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarYPreOffsetBox.EnableDecimalPlaces = true;
			this.SonarYPreOffsetBox.Location = new System.Drawing.Point(443, 275);
			this.SonarYPreOffsetBox.Maximum = new decimal(new int[] {
			50,
			0,
			0,
			0});
			this.SonarYPreOffsetBox.Minimum = new decimal(new int[] {
			50,
			0,
			0,
			-2147483648});
			this.SonarYPreOffsetBox.Name = "SonarYPreOffsetBox";
			this.SonarYPreOffsetBox.Size = new System.Drawing.Size(169, 27);
			this.SonarYPreOffsetBox.Suffix = "%";
			this.SonarYPreOffsetBox.TabIndex = 34;
			this.SonarYPreOffsetBox.ValueChanged += new System.EventHandler(this.SonarConfigChanged);
			//
			// SonarYPreOffsetLbl
			//
			this.SonarYPreOffsetLbl.AutoSize = true;
			this.SonarYPreOffsetLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarYPreOffsetLbl.Location = new System.Drawing.Point(309, 272);
			this.SonarYPreOffsetLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.SonarYPreOffsetLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.SonarYPreOffsetLbl.Name = "SonarYPreOffsetLbl";
			this.SonarYPreOffsetLbl.Size = new System.Drawing.Size(129, 34);
			this.SonarYPreOffsetLbl.TabIndex = 37;
			this.SonarYPreOffsetLbl.Text = "预先垂直偏移单数";
			this.SonarYPreOffsetLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// SonarXPreOffsetBox
			//
			this.SonarXPreOffsetBox.Constrain = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.SonarXPreOffsetBox.DecimalPlaces = 2;
			this.SonarXPreOffsetBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarXPreOffsetBox.EnableDecimalPlaces = true;
			this.SonarXPreOffsetBox.Location = new System.Drawing.Point(136, 275);
			this.SonarXPreOffsetBox.Maximum = new decimal(new int[] {
			50,
			0,
			0,
			0});
			this.SonarXPreOffsetBox.Minimum = new decimal(new int[] {
			50,
			0,
			0,
			-2147483648});
			this.SonarXPreOffsetBox.Name = "SonarXPreOffsetBox";
			this.SonarXPreOffsetBox.Size = new System.Drawing.Size(168, 27);
			this.SonarXPreOffsetBox.Suffix = "%";
			this.SonarXPreOffsetBox.TabIndex = 32;
			this.SonarXPreOffsetBox.ValueChanged += new System.EventHandler(this.SonarConfigChanged);
			//
			// SonarXPreOffsetLbl
			//
			this.SonarXPreOffsetLbl.AutoSize = true;
			this.SonarXPreOffsetLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarXPreOffsetLbl.Location = new System.Drawing.Point(2, 272);
			this.SonarXPreOffsetLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.SonarXPreOffsetLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.SonarXPreOffsetLbl.Name = "SonarXPreOffsetLbl";
			this.SonarXPreOffsetLbl.Size = new System.Drawing.Size(129, 34);
			this.SonarXPreOffsetLbl.TabIndex = 36;
			this.SonarXPreOffsetLbl.Text = "预先水平偏移单数";
			this.SonarXPreOffsetLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// SonarYOffset2Box
			//
			this.SonarYOffset2Box.Constrain = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.SonarYOffset2Box.DecimalPlaces = 2;
			this.SonarYOffset2Box.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarYOffset2Box.EnableDecimalPlaces = true;
			this.SonarYOffset2Box.Location = new System.Drawing.Point(443, 241);
			this.SonarYOffset2Box.Minimum = new decimal(new int[] {
			100,
			0,
			0,
			-2147483648});
			this.SonarYOffset2Box.Name = "SonarYOffset2Box";
			this.SonarYOffset2Box.Size = new System.Drawing.Size(169, 27);
			this.SonarYOffset2Box.Suffix = "%";
			this.SonarYOffset2Box.TabIndex = 30;
			this.SonarYOffset2Box.ValueChanged += new System.EventHandler(this.SonarConfigChanged);
			//
			// SonarYOffset2Lbl
			//
			this.SonarYOffset2Lbl.AutoSize = true;
			this.SonarYOffset2Lbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarYOffset2Lbl.Location = new System.Drawing.Point(309, 238);
			this.SonarYOffset2Lbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.SonarYOffset2Lbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.SonarYOffset2Lbl.Name = "SonarYOffset2Lbl";
			this.SonarYOffset2Lbl.Size = new System.Drawing.Size(129, 34);
			this.SonarYOffset2Lbl.TabIndex = 33;
			this.SonarYOffset2Lbl.Text = "起始垂直偏移双数";
			this.SonarYOffset2Lbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// SonarXOffset2Box
			//
			this.SonarXOffset2Box.Constrain = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.SonarXOffset2Box.DecimalPlaces = 2;
			this.SonarXOffset2Box.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarXOffset2Box.EnableDecimalPlaces = true;
			this.SonarXOffset2Box.Location = new System.Drawing.Point(136, 241);
			this.SonarXOffset2Box.Minimum = new decimal(new int[] {
			100,
			0,
			0,
			-2147483648});
			this.SonarXOffset2Box.Name = "SonarXOffset2Box";
			this.SonarXOffset2Box.Size = new System.Drawing.Size(168, 27);
			this.SonarXOffset2Box.Suffix = "%";
			this.SonarXOffset2Box.TabIndex = 28;
			this.SonarXOffset2Box.ValueChanged += new System.EventHandler(this.SonarConfigChanged);
			//
			// SonarXOffset2Lbl
			//
			this.SonarXOffset2Lbl.AutoSize = true;
			this.SonarXOffset2Lbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarXOffset2Lbl.Location = new System.Drawing.Point(2, 238);
			this.SonarXOffset2Lbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.SonarXOffset2Lbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.SonarXOffset2Lbl.Name = "SonarXOffset2Lbl";
			this.SonarXOffset2Lbl.Size = new System.Drawing.Size(129, 34);
			this.SonarXOffset2Lbl.TabIndex = 32;
			this.SonarXOffset2Lbl.Text = "起始水平偏移双数";
			this.SonarXOffset2Lbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// SonarYOffsetBox
			//
			this.SonarYOffsetBox.Constrain = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.SonarYOffsetBox.DecimalPlaces = 2;
			this.SonarYOffsetBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarYOffsetBox.EnableDecimalPlaces = true;
			this.SonarYOffsetBox.Location = new System.Drawing.Point(443, 207);
			this.SonarYOffsetBox.Minimum = new decimal(new int[] {
			100,
			0,
			0,
			-2147483648});
			this.SonarYOffsetBox.Name = "SonarYOffsetBox";
			this.SonarYOffsetBox.Size = new System.Drawing.Size(169, 27);
			this.SonarYOffsetBox.Suffix = "%";
			this.SonarYOffsetBox.TabIndex = 26;
			this.SonarYOffsetBox.ValueChanged += new System.EventHandler(this.SonarConfigChanged);
			//
			// SonarYOffsetLbl
			//
			this.SonarYOffsetLbl.AutoSize = true;
			this.SonarYOffsetLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarYOffsetLbl.Location = new System.Drawing.Point(309, 204);
			this.SonarYOffsetLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.SonarYOffsetLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.SonarYOffsetLbl.Name = "SonarYOffsetLbl";
			this.SonarYOffsetLbl.Size = new System.Drawing.Size(129, 34);
			this.SonarYOffsetLbl.TabIndex = 17;
			this.SonarYOffsetLbl.Text = "起始垂直偏移单数";
			this.SonarYOffsetLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// SonarXOffsetBox
			//
			this.SonarXOffsetBox.Constrain = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.SonarXOffsetBox.DecimalPlaces = 2;
			this.SonarXOffsetBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarXOffsetBox.EnableDecimalPlaces = true;
			this.SonarXOffsetBox.Location = new System.Drawing.Point(136, 207);
			this.SonarXOffsetBox.Minimum = new decimal(new int[] {
			100,
			0,
			0,
			-2147483648});
			this.SonarXOffsetBox.Name = "SonarXOffsetBox";
			this.SonarXOffsetBox.Size = new System.Drawing.Size(168, 27);
			this.SonarXOffsetBox.Suffix = "%";
			this.SonarXOffsetBox.TabIndex = 24;
			this.SonarXOffsetBox.ValueChanged += new System.EventHandler(this.SonarConfigChanged);
			//
			// SonarXOffsetLbl
			//
			this.SonarXOffsetLbl.AutoSize = true;
			this.SonarXOffsetLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarXOffsetLbl.Location = new System.Drawing.Point(2, 204);
			this.SonarXOffsetLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.SonarXOffsetLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.SonarXOffsetLbl.Name = "SonarXOffsetLbl";
			this.SonarXOffsetLbl.Size = new System.Drawing.Size(129, 34);
			this.SonarXOffsetLbl.TabIndex = 15;
			this.SonarXOffsetLbl.Text = "起始水平偏移单数";
			this.SonarXOffsetLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// SonarYPosBox
			//
			this.SonarYPosBox.Constrain = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.SonarYPosBox.DecimalPlaces = 2;
			this.SonarYPosBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarYPosBox.EnableDecimalPlaces = true;
			this.SonarYPosBox.Location = new System.Drawing.Point(443, 173);
			this.SonarYPosBox.Maximum = new decimal(new int[] {
			200,
			0,
			0,
			0});
			this.SonarYPosBox.Minimum = new decimal(new int[] {
			100,
			0,
			0,
			-2147483648});
			this.SonarYPosBox.Name = "SonarYPosBox";
			this.SonarYPosBox.Size = new System.Drawing.Size(169, 27);
			this.SonarYPosBox.Suffix = "%";
			this.SonarYPosBox.TabIndex = 22;
			this.SonarYPosBox.ValueChanged += new System.EventHandler(this.SonarConfigChanged);
			//
			// SonarYPosLbl
			//
			this.SonarYPosLbl.AutoSize = true;
			this.SonarYPosLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarYPosLbl.Location = new System.Drawing.Point(309, 170);
			this.SonarYPosLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.SonarYPosLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.SonarYPosLbl.Name = "SonarYPosLbl";
			this.SonarYPosLbl.Size = new System.Drawing.Size(129, 34);
			this.SonarYPosLbl.TabIndex = 13;
			this.SonarYPosLbl.Text = "垂直中心";
			this.SonarYPosLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// SonarXPosBox
			//
			this.SonarXPosBox.Constrain = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.SonarXPosBox.DecimalPlaces = 2;
			this.SonarXPosBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarXPosBox.EnableDecimalPlaces = true;
			this.SonarXPosBox.Location = new System.Drawing.Point(136, 173);
			this.SonarXPosBox.Maximum = new decimal(new int[] {
			200,
			0,
			0,
			0});
			this.SonarXPosBox.Minimum = new decimal(new int[] {
			100,
			0,
			0,
			-2147483648});
			this.SonarXPosBox.Name = "SonarXPosBox";
			this.SonarXPosBox.Size = new System.Drawing.Size(168, 27);
			this.SonarXPosBox.Suffix = "%";
			this.SonarXPosBox.TabIndex = 20;
			this.SonarXPosBox.ValueChanged += new System.EventHandler(this.SonarConfigChanged);
			//
			// SonarXPosLbl
			//
			this.SonarXPosLbl.AutoSize = true;
			this.SonarXPosLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarXPosLbl.Location = new System.Drawing.Point(2, 170);
			this.SonarXPosLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.SonarXPosLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.SonarXPosLbl.Name = "SonarXPosLbl";
			this.SonarXPosLbl.Size = new System.Drawing.Size(129, 34);
			this.SonarXPosLbl.TabIndex = 11;
			this.SonarXPosLbl.Text = "水平中心";
			this.SonarXPosLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// SonarEndSizeBox
			//
			this.SonarEndSizeBox.Constrain = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.SonarEndSizeBox.DecimalPlaces = 2;
			this.SonarEndSizeBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarEndSizeBox.EnableDecimalPlaces = true;
			this.SonarEndSizeBox.Location = new System.Drawing.Point(443, 139);
			this.SonarEndSizeBox.Name = "SonarEndSizeBox";
			this.SonarEndSizeBox.Size = new System.Drawing.Size(169, 27);
			this.SonarEndSizeBox.Suffix = "%";
			this.SonarEndSizeBox.TabIndex = 18;
			this.SonarEndSizeBox.ValueChanged += new System.EventHandler(this.SonarConfigChanged);
			//
			// SonarEndSizeLbl
			//
			this.SonarEndSizeLbl.AutoSize = true;
			this.SonarEndSizeLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarEndSizeLbl.Location = new System.Drawing.Point(309, 136);
			this.SonarEndSizeLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.SonarEndSizeLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.SonarEndSizeLbl.Name = "SonarEndSizeLbl";
			this.SonarEndSizeLbl.Size = new System.Drawing.Size(129, 34);
			this.SonarEndSizeLbl.TabIndex = 29;
			this.SonarEndSizeLbl.Text = "终止大小";
			this.SonarEndSizeLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// SonarEndBorderBox
			//
			this.SonarEndBorderBox.Constrain = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.SonarEndBorderBox.DecimalPlaces = 2;
			this.SonarEndBorderBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarEndBorderBox.EnableDecimalPlaces = true;
			this.SonarEndBorderBox.Location = new System.Drawing.Point(136, 139);
			this.SonarEndBorderBox.Name = "SonarEndBorderBox";
			this.SonarEndBorderBox.Size = new System.Drawing.Size(168, 27);
			this.SonarEndBorderBox.Suffix = "%";
			this.SonarEndBorderBox.TabIndex = 16;
			this.SonarEndBorderBox.ValueChanged += new System.EventHandler(this.SonarConfigChanged);
			//
			// SonarEndBorderLbl
			//
			this.SonarEndBorderLbl.AutoSize = true;
			this.SonarEndBorderLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarEndBorderLbl.Location = new System.Drawing.Point(2, 136);
			this.SonarEndBorderLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.SonarEndBorderLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.SonarEndBorderLbl.Name = "SonarEndBorderLbl";
			this.SonarEndBorderLbl.Size = new System.Drawing.Size(129, 34);
			this.SonarEndBorderLbl.TabIndex = 28;
			this.SonarEndBorderLbl.Text = "终止边框";
			this.SonarEndBorderLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// SonarSizeBox
			//
			this.SonarSizeBox.Constrain = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.SonarSizeBox.DecimalPlaces = 2;
			this.SonarSizeBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarSizeBox.EnableDecimalPlaces = true;
			this.SonarSizeBox.Location = new System.Drawing.Point(443, 105);
			this.SonarSizeBox.Name = "SonarSizeBox";
			this.SonarSizeBox.Size = new System.Drawing.Size(169, 27);
			this.SonarSizeBox.Suffix = "%";
			this.SonarSizeBox.TabIndex = 14;
			this.SonarSizeBox.ValueChanged += new System.EventHandler(this.SonarConfigChanged);
			//
			// SonarSizeLbl
			//
			this.SonarSizeLbl.AutoSize = true;
			this.SonarSizeLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarSizeLbl.Location = new System.Drawing.Point(309, 102);
			this.SonarSizeLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.SonarSizeLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.SonarSizeLbl.Name = "SonarSizeLbl";
			this.SonarSizeLbl.Size = new System.Drawing.Size(129, 34);
			this.SonarSizeLbl.TabIndex = 9;
			this.SonarSizeLbl.Text = "起始大小";
			this.SonarSizeLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// SonarBorderBox
			//
			this.SonarBorderBox.Constrain = new decimal(new int[] {
			0,
			0,
			0,
			0});
			this.SonarBorderBox.DecimalPlaces = 2;
			this.SonarBorderBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarBorderBox.EnableDecimalPlaces = true;
			this.SonarBorderBox.Location = new System.Drawing.Point(136, 105);
			this.SonarBorderBox.Name = "SonarBorderBox";
			this.SonarBorderBox.Size = new System.Drawing.Size(168, 27);
			this.SonarBorderBox.Suffix = "%";
			this.SonarBorderBox.TabIndex = 12;
			this.SonarBorderBox.ValueChanged += new System.EventHandler(this.SonarConfigChanged);
			//
			// SonarBorderLbl
			//
			this.SonarBorderLbl.AutoSize = true;
			this.SonarBorderLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarBorderLbl.Location = new System.Drawing.Point(2, 102);
			this.SonarBorderLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.SonarBorderLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.SonarBorderLbl.Name = "SonarBorderLbl";
			this.SonarBorderLbl.Size = new System.Drawing.Size(129, 34);
			this.SonarBorderLbl.TabIndex = 7;
			this.SonarBorderLbl.Text = "起始边框";
			this.SonarBorderLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// SonarCurveCombo
			//
			this.SonarCurveCombo.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarCurveCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.SonarCurveCombo.FormattingEnabled = true;
			this.SonarCurveCombo.Items.AddRange(new object[] {
			"线性",
			"快速",
			"慢速",
			"平滑",
			"急剧"});
			this.SonarCurveCombo.Location = new System.Drawing.Point(442, 72);
			this.SonarCurveCombo.Margin = new System.Windows.Forms.Padding(2, 4, 2, 4);
			this.SonarCurveCombo.Name = "SonarCurveCombo";
			this.SonarCurveCombo.Size = new System.Drawing.Size(171, 28);
			this.SonarCurveCombo.TabIndex = 10;
			this.SonarCurveCombo.SelectedIndexChanged += new System.EventHandler(this.SonarConfigChanged);
			//
			// SonarCurveLbl
			//
			this.SonarCurveLbl.AutoSize = true;
			this.SonarCurveLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarCurveLbl.Location = new System.Drawing.Point(309, 68);
			this.SonarCurveLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.SonarCurveLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.SonarCurveLbl.Name = "SonarCurveLbl";
			this.SonarCurveLbl.Size = new System.Drawing.Size(129, 34);
			this.SonarCurveLbl.TabIndex = 21;
			this.SonarCurveLbl.Text = "曲线";
			this.SonarCurveLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// SonarDurationTxt
			//
			this.SonarDurationTxt.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarDurationTxt.Location = new System.Drawing.Point(136, 71);
			this.SonarDurationTxt.Name = "SonarDurationTxt";
			this.SonarDurationTxt.Size = new System.Drawing.Size(168, 27);
			this.SonarDurationTxt.TabIndex = 8;
			this.SonarDurationTxt.Leave += new System.EventHandler(this.SonarConfigChanged);
			//
			// SonarDurationLbl
			//
			this.SonarDurationLbl.AutoSize = true;
			this.SonarDurationLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarDurationLbl.Location = new System.Drawing.Point(2, 68);
			this.SonarDurationLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.SonarDurationLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.SonarDurationLbl.Name = "SonarDurationLbl";
			this.SonarDurationLbl.Size = new System.Drawing.Size(129, 34);
			this.SonarDurationLbl.TabIndex = 27;
			this.SonarDurationLbl.Text = "持续时间";
			this.SonarDurationLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// SonarColorBtn
			//
			this.SonarColorBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarColorBtn.Location = new System.Drawing.Point(443, 37);
			this.SonarColorBtn.Name = "SonarColorBtn";
			this.SonarColorBtn.Size = new System.Drawing.Size(169, 28);
			this.SonarColorBtn.TabIndex = 6;
			this.SonarColorBtn.TextChanged += new System.EventHandler(this.SonarConfigChanged);
			//
			// SonarColorLbl
			//
			this.SonarColorLbl.AutoSize = true;
			this.SonarColorLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarColorLbl.Location = new System.Drawing.Point(309, 34);
			this.SonarColorLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.SonarColorLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.SonarColorLbl.Name = "SonarColorLbl";
			this.SonarColorLbl.Size = new System.Drawing.Size(129, 34);
			this.SonarColorLbl.TabIndex = 5;
			this.SonarColorLbl.Text = "颜色";
			this.SonarColorLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// SonarShapeCombo
			//
			this.SonarShapeCombo.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarShapeCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.SonarShapeCombo.FormattingEnabled = true;
			this.SonarShapeCombo.Items.AddRange(new object[] {
			"圆形",
			"椭圆形",
			"椭圆边",
			"矩形",
			"菱形",
			"方形",
			"向上三角形",
			"向右三角形",
			"向下三角形",
			"向左三角形",
			"向上箭头",
			"向右箭头",
			"向下箭头",
			"向左箭头"});
			this.SonarShapeCombo.Location = new System.Drawing.Point(136, 37);
			this.SonarShapeCombo.Name = "SonarShapeCombo";
			this.SonarShapeCombo.Size = new System.Drawing.Size(168, 28);
			this.SonarShapeCombo.TabIndex = 4;
			this.SonarShapeCombo.SelectedIndexChanged += new System.EventHandler(this.SonarConfigChanged);
			//
			// SonarShapeLbl
			//
			this.SonarShapeLbl.AutoSize = true;
			this.SonarShapeLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarShapeLbl.Location = new System.Drawing.Point(2, 34);
			this.SonarShapeLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.SonarShapeLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.SonarShapeLbl.Name = "SonarShapeLbl";
			this.SonarShapeLbl.Size = new System.Drawing.Size(129, 34);
			this.SonarShapeLbl.TabIndex = 3;
			this.SonarShapeLbl.Text = "形状";
			this.SonarShapeLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// SonarDrumSoundCombo
			//
			this.tableLayoutPanel15.SetColumnSpan(this.SonarDrumSoundCombo, 3);
			this.SonarDrumSoundCombo.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarDrumSoundCombo.DropDownHeight = 300;
			this.SonarDrumSoundCombo.FormattingEnabled = true;
			this.SonarDrumSoundCombo.IntegralHeight = false;
			this.SonarDrumSoundCombo.Items.AddRange(new object[] {
			"Bass Drum",
			"Clap",
			"Hat",
			"Snare",
			"Cymbal",
			"Crash",
			"Ride",
			"Acoustic Bass Drum",
			"Bass Drum 1",
			"Side Stick",
			"Acoustic Snare",
			"Hand Clap",
			"Electric Snare",
			"Low Floor Tom",
			"Closed Hi-Hat",
			"High Floor Tom",
			"Pedal Hi-Hat",
			"Low Tom",
			"Open Hi-Hat",
			"Low-Mid Tom",
			"Hi-Mid Tom",
			"Crash Cymbal 1",
			"High Tom",
			"Ride Cymbal 1",
			"Chinese Cymbal",
			"Ride Bell",
			"Tambourine",
			"Splash Cymbal",
			"Cowbell",
			"Crash Cymbal 2",
			"Vibraslap",
			"Ride Cymbal 2",
			"Hi Bongo",
			"Low Bongo",
			"Mute Hi Conga",
			"Open Hi Conga",
			"Low Conga",
			"High Timbale",
			"Low Timbale",
			"High Agogo",
			"Low Agogo",
			"Cabasa",
			"Maracas",
			"Short Whistle",
			"Long Whistle",
			"Short Guiro",
			"Long Guiro",
			"Claves",
			"Hi Wood Block",
			"Low Wood Block",
			"Mute Cuica",
			"Open Cuica",
			"Mute Triangle",
			"Open Triangle",
			"Shaker"});
			this.SonarDrumSoundCombo.Location = new System.Drawing.Point(136, 3);
			this.SonarDrumSoundCombo.Name = "SonarDrumSoundCombo";
			this.SonarDrumSoundCombo.Size = new System.Drawing.Size(476, 28);
			this.SonarDrumSoundCombo.TabIndex = 2;
			this.SonarDrumSoundCombo.SelectedIndexChanged += new System.EventHandler(this.SonarConfigChanged);
			this.SonarDrumSoundCombo.Leave += new System.EventHandler(this.SonarConfigChanged);
			//
			// SonarDrumSoundLbl
			//
			this.SonarDrumSoundLbl.AutoSize = true;
			this.SonarDrumSoundLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.SonarDrumSoundLbl.Location = new System.Drawing.Point(2, 0);
			this.SonarDrumSoundLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.SonarDrumSoundLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.SonarDrumSoundLbl.Name = "SonarDrumSoundLbl";
			this.SonarDrumSoundLbl.Size = new System.Drawing.Size(129, 34);
			this.SonarDrumSoundLbl.TabIndex = 1;
			this.SonarDrumSoundLbl.Text = "匹配鼓声";
			this.SonarDrumSoundLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// YtpTab
			//
			this.YtpTab.AutoScroll = true;
			this.YtpTab.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(249)))), ((int)(((byte)(249)))), ((int)(((byte)(249)))));
			this.YtpTab.Controls.Add(this.YtpParamsGroup);
			this.YtpTab.Controls.Add(this.YtpEffectsGroup);
			this.YtpTab.Controls.Add(this.YtpSelectInfo);
			this.YtpTab.Controls.Add(this.YtpLbl);
			this.YtpTab.Location = new System.Drawing.Point(4, 29);
			this.YtpTab.Margin = new System.Windows.Forms.Padding(2);
			this.YtpTab.Name = "YtpTab";
			this.YtpTab.Padding = new System.Windows.Forms.Padding(5);
			this.YtpTab.Size = new System.Drawing.Size(658, 626);
			this.YtpTab.TabIndex = 5;
			this.YtpTab.Text = "YTP";
			this.YtpTab.UseVisualStyleBackColor = true;
			//
			// YtpParamsGroup
			//
			this.YtpParamsGroup.AutoSize = true;
			this.YtpParamsGroup.Controls.Add(this.tableLayoutPanel16);
			this.YtpParamsGroup.Dock = System.Windows.Forms.DockStyle.Top;
			this.YtpParamsGroup.Location = new System.Drawing.Point(5, 242);
			this.YtpParamsGroup.Margin = new System.Windows.Forms.Padding(2);
			this.YtpParamsGroup.Name = "YtpParamsGroup";
			this.YtpParamsGroup.Padding = new System.Windows.Forms.Padding(5);
			this.YtpParamsGroup.Size = new System.Drawing.Size(648, 98);
			this.YtpParamsGroup.TabIndex = 12;
			this.YtpParamsGroup.TabStop = false;
			this.YtpParamsGroup.Text = "参数";
			//
			// tableLayoutPanel16
			//
			this.tableLayoutPanel16.AutoSize = true;
			this.tableLayoutPanel16.ColumnCount = 4;
			this.tableLayoutPanel16.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel16.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 50F));
			this.tableLayoutPanel16.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel16.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 50F));
			this.tableLayoutPanel16.Controls.Add(this.YtpMinLenLbl, 0, 0);
			this.tableLayoutPanel16.Controls.Add(this.YtpClipsCountLbl, 0, 1);
			this.tableLayoutPanel16.Controls.Add(this.YtpClipsCountBox, 1, 1);
			this.tableLayoutPanel16.Controls.Add(this.YtpMinLenBox, 1, 0);
			this.tableLayoutPanel16.Controls.Add(this.YtpMaxLenLbl, 2, 0);
			this.tableLayoutPanel16.Controls.Add(this.YtpMaxLenBox, 3, 0);
			this.tableLayoutPanel16.Dock = System.Windows.Forms.DockStyle.Fill;
			this.tableLayoutPanel16.Location = new System.Drawing.Point(5, 25);
			this.tableLayoutPanel16.Margin = new System.Windows.Forms.Padding(2);
			this.tableLayoutPanel16.Name = "tableLayoutPanel16";
			this.tableLayoutPanel16.RowCount = 2;
			this.tableLayoutPanel16.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel16.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel16.Size = new System.Drawing.Size(638, 68);
			this.tableLayoutPanel16.TabIndex = 0;
			//
			// YtpMinLenLbl
			//
			this.YtpMinLenLbl.AutoSize = true;
			this.YtpMinLenLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.YtpMinLenLbl.Location = new System.Drawing.Point(2, 0);
			this.YtpMinLenLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.YtpMinLenLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.YtpMinLenLbl.Name = "YtpMinLenLbl";
			this.YtpMinLenLbl.Size = new System.Drawing.Size(69, 34);
			this.YtpMinLenLbl.TabIndex = 5;
			this.YtpMinLenLbl.Text = "最小长度";
			this.YtpMinLenLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// YtpClipsCountLbl
			//
			this.YtpClipsCountLbl.AutoSize = true;
			this.YtpClipsCountLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.YtpClipsCountLbl.Location = new System.Drawing.Point(2, 34);
			this.YtpClipsCountLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.YtpClipsCountLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.YtpClipsCountLbl.Name = "YtpClipsCountLbl";
			this.YtpClipsCountLbl.Size = new System.Drawing.Size(69, 34);
			this.YtpClipsCountLbl.TabIndex = 10;
			this.YtpClipsCountLbl.Text = "剪辑数目";
			this.YtpClipsCountLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// YtpClipsCountBox
			//
			this.YtpClipsCountBox.Constrain = new decimal(new int[] {
			30,
			0,
			0,
			0});
			this.YtpClipsCountBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.YtpClipsCountBox.EnableDecimalPlaces = true;
			this.YtpClipsCountBox.Location = new System.Drawing.Point(75, 36);
			this.YtpClipsCountBox.Margin = new System.Windows.Forms.Padding(2);
			this.YtpClipsCountBox.Maximum = new decimal(new int[] {
			300,
			0,
			0,
			0});
			this.YtpClipsCountBox.Minimum = new decimal(new int[] {
			1,
			0,
			0,
			0});
			this.YtpClipsCountBox.Name = "YtpClipsCountBox";
			this.YtpClipsCountBox.Size = new System.Drawing.Size(242, 27);
			this.YtpClipsCountBox.TabIndex = 11;
			this.YtpClipsCountBox.Value = new decimal(new int[] {
			30,
			0,
			0,
			0});
			//
			// YtpMaxLenLbl
			//
			this.YtpMaxLenLbl.AutoSize = true;
			this.YtpMaxLenLbl.Dock = System.Windows.Forms.DockStyle.Fill;
			this.YtpMaxLenLbl.Location = new System.Drawing.Point(321, 0);
			this.YtpMaxLenLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.YtpMaxLenLbl.MinimumSize = new System.Drawing.Size(0, 34);
			this.YtpMaxLenLbl.Name = "YtpMaxLenLbl";
			this.YtpMaxLenLbl.Size = new System.Drawing.Size(69, 34);
			this.YtpMaxLenLbl.TabIndex = 2;
			this.YtpMaxLenLbl.Text = "最大长度";
			this.YtpMaxLenLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// YtpEffectsGroup
			//
			this.YtpEffectsGroup.AutoSize = true;
			this.YtpEffectsGroup.Controls.Add(this.YtpEnableAllEffectsCheck);
			this.YtpEffectsGroup.Controls.Add(this.YtpEffectsCheckList);
			this.YtpEffectsGroup.Dock = System.Windows.Forms.DockStyle.Top;
			this.YtpEffectsGroup.Location = new System.Drawing.Point(5, 80);
			this.YtpEffectsGroup.Margin = new System.Windows.Forms.Padding(2);
			this.YtpEffectsGroup.Name = "YtpEffectsGroup";
			this.YtpEffectsGroup.Padding = new System.Windows.Forms.Padding(9, 2, 6, 6);
			this.YtpEffectsGroup.Size = new System.Drawing.Size(648, 162);
			this.YtpEffectsGroup.TabIndex = 11;
			this.YtpEffectsGroup.TabStop = false;
			this.YtpEffectsGroup.Text = "效果";
			//
			// YtpEnableAllEffectsCheck
			//
			this.YtpEnableAllEffectsCheck.AutoSize = true;
			this.YtpEnableAllEffectsCheck.Checked = true;
			this.YtpEnableAllEffectsCheck.CheckState = System.Windows.Forms.CheckState.Checked;
			this.YtpEnableAllEffectsCheck.Dock = System.Windows.Forms.DockStyle.Top;
			this.YtpEnableAllEffectsCheck.Location = new System.Drawing.Point(9, 22);
			this.YtpEnableAllEffectsCheck.Margin = new System.Windows.Forms.Padding(2);
			this.YtpEnableAllEffectsCheck.Name = "YtpEnableAllEffectsCheck";
			this.YtpEnableAllEffectsCheck.Padding = new System.Windows.Forms.Padding(1, 0, 0, 0);
			this.YtpEnableAllEffectsCheck.Size = new System.Drawing.Size(633, 24);
			this.YtpEnableAllEffectsCheck.TabIndex = 0;
			this.YtpEnableAllEffectsCheck.Text = "开启所有效果";
			this.YtpEnableAllEffectsCheck.CheckedChanged += new System.EventHandler(this.YtpEnableAllEffectsCheck_CheckedChanged);
			//
			// YtpEffectsCheckList
			//
			this.YtpEffectsCheckList.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(249)))), ((int)(((byte)(249)))), ((int)(((byte)(249)))));
			this.YtpEffectsCheckList.BorderStyle = System.Windows.Forms.BorderStyle.None;
			this.YtpEffectsCheckList.CheckOnClick = true;
			this.YtpEffectsCheckList.Dock = System.Windows.Forms.DockStyle.Bottom;
			this.YtpEffectsCheckList.FormattingEnabled = true;
			this.YtpEffectsCheckList.HorizontalScrollbar = true;
			this.YtpEffectsCheckList.Items.AddRange(new object[] {
			"合唱",
			"更改音调",
			"颤音（概率性附加波浪效果）",
			"倒放",
			"延迟",
			"更改速度",
			"更改色相",
			"旋转色相",
			"黑白",
			"颜色反转（概率性附加降调效果）",
			"高频重复",
			"随机调音（附加左右翻转效果）",
			"放大（附加增加音量）",
			"球面化",
			"镜像",
			"高对比（附加增加音量）",
			"过饱和（概率性附加升调效果）",
			"重说三（附加放大聚焦效果）"});
			this.YtpEffectsCheckList.Location = new System.Drawing.Point(9, 46);
			this.YtpEffectsCheckList.Margin = new System.Windows.Forms.Padding(2);
			this.YtpEffectsCheckList.Name = "YtpEffectsCheckList";
			this.YtpEffectsCheckList.Size = new System.Drawing.Size(633, 110);
			this.YtpEffectsCheckList.TabIndex = 1;
			this.YtpEffectsCheckList.Click += new System.EventHandler(this.YtpEffectsCheckList_SelectedIndexChanged);
			this.YtpEffectsCheckList.SelectedIndexChanged += new System.EventHandler(this.YtpEffectsCheckList_SelectedIndexChanged);
			this.YtpEffectsCheckList.DoubleClick += new System.EventHandler(this.YtpEffectsCheckList_SelectedIndexChanged);
			//
			// YtpSelectInfo
			//
			this.YtpSelectInfo.AutoSize = true;
			this.YtpSelectInfo.Dock = System.Windows.Forms.DockStyle.Top;
			this.YtpSelectInfo.Location = new System.Drawing.Point(5, 52);
			this.YtpSelectInfo.Margin = new System.Windows.Forms.Padding(2, 0, 2, 2);
			this.YtpSelectInfo.Name = "YtpSelectInfo";
			this.YtpSelectInfo.Padding = new System.Windows.Forms.Padding(0, 0, 0, 8);
			this.YtpSelectInfo.Size = new System.Drawing.Size(160, 28);
			this.YtpSelectInfo.TabIndex = 13;
			this.YtpSelectInfo.Text = "已选中 0 项媒体素材。";
			this.YtpSelectInfo.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// YtpLbl
			//
			this.YtpLbl.AutoSize = true;
			this.YtpLbl.Dock = System.Windows.Forms.DockStyle.Top;
			this.YtpLbl.Font = new System.Drawing.Font("微软雅黑", 9F);
			this.YtpLbl.Location = new System.Drawing.Point(5, 5);
			this.YtpLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.YtpLbl.Name = "YtpLbl";
			this.YtpLbl.Padding = new System.Windows.Forms.Padding(0, 5, 0, 2);
			this.YtpLbl.Size = new System.Drawing.Size(514, 47);
			this.YtpLbl.TabIndex = 10;
			this.YtpLbl.Text = "在当前选项卡下单击“完成”按钮，将会生成 YTP 而不是音 MAD / YTPMV。\r\n除“生成音频”“生成视频”外其它的参数设置并不会在 YTP 中使用。";
			//
			// MoshTab
			//
			this.MoshTab.AutoScroll = true;
			this.MoshTab.Controls.Add(this.DatamoshTable);
			this.MoshTab.Controls.Add(this.DatamoshNotInstalledTable);
			this.MoshTab.Controls.Add(this.DatamoshInfoLbl);
			this.MoshTab.Location = new System.Drawing.Point(4, 29);
			this.MoshTab.Name = "MoshTab";
			this.MoshTab.Padding = new System.Windows.Forms.Padding(3);
			this.MoshTab.Size = new System.Drawing.Size(658, 626);
			this.MoshTab.TabIndex = 7;
			this.MoshTab.Text = "抹失";
			this.MoshTab.UseVisualStyleBackColor = true;
			//
			// DatamoshTable
			//
			this.DatamoshTable.AutoSize = true;
			this.DatamoshTable.ColumnCount = 1;
			this.DatamoshTable.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.DatamoshTable.Controls.Add(this.CloseAfterOpenMoshCheck, 0, 0);
			this.DatamoshTable.Controls.Add(this.DatamoshClipsFolderGroup, 0, 1);
			this.DatamoshTable.Controls.Add(this.DatamoshBtn, 0, 2);
			this.DatamoshTable.Controls.Add(this.DatamixBtn, 0, 3);
			this.DatamoshTable.Controls.Add(this.LayeringBtn, 0, 4);
			this.DatamoshTable.Controls.Add(this.RenderingBtn, 0, 5);
			this.DatamoshTable.Controls.Add(this.ScrambleBtn, 0, 6);
			this.DatamoshTable.Controls.Add(this.AutomatorBtn, 0, 7);
			this.DatamoshTable.Controls.Add(this.StutterBtn, 0, 8);
			this.DatamoshTable.Controls.Add(this.CameraShakeBtn, 0, 9);
			this.DatamoshTable.Dock = System.Windows.Forms.DockStyle.Top;
			this.DatamoshTable.Location = new System.Drawing.Point(3, 82);
			this.DatamoshTable.Margin = new System.Windows.Forms.Padding(0);
			this.DatamoshTable.Name = "DatamoshTable";
			this.DatamoshTable.RowCount = 10;
			this.DatamoshTable.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.DatamoshTable.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.DatamoshTable.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 90F));
			this.DatamoshTable.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 90F));
			this.DatamoshTable.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 110F));
			this.DatamoshTable.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 90F));
			this.DatamoshTable.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 110F));
			this.DatamoshTable.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 110F));
			this.DatamoshTable.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 110F));
			this.DatamoshTable.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 110F));
			this.DatamoshTable.Size = new System.Drawing.Size(631, 946);
			this.DatamoshTable.TabIndex = 9;
			//
			// CloseAfterOpenMoshCheck
			//
			this.CloseAfterOpenMoshCheck.AutoSize = true;
			this.CloseAfterOpenMoshCheck.Checked = true;
			this.CloseAfterOpenMoshCheck.CheckState = System.Windows.Forms.CheckState.Checked;
			this.CloseAfterOpenMoshCheck.Dock = System.Windows.Forms.DockStyle.Fill;
			this.CloseAfterOpenMoshCheck.Location = new System.Drawing.Point(8, 8);
			this.CloseAfterOpenMoshCheck.Margin = new System.Windows.Forms.Padding(8);
			this.CloseAfterOpenMoshCheck.Name = "CloseAfterOpenMoshCheck";
			this.CloseAfterOpenMoshCheck.Size = new System.Drawing.Size(615, 24);
			this.CloseAfterOpenMoshCheck.TabIndex = 0;
			this.CloseAfterOpenMoshCheck.Text = "操作完成之后关闭本对话框";
			this.CloseAfterOpenMoshCheck.UseVisualStyleBackColor = true;
			//
			// DatamoshClipsFolderGroup
			//
			this.DatamoshClipsFolderGroup.AutoSize = true;
			this.DatamoshClipsFolderGroup.Controls.Add(this.tableLayoutPanel21);
			this.DatamoshClipsFolderGroup.Dock = System.Windows.Forms.DockStyle.Top;
			this.DatamoshClipsFolderGroup.Location = new System.Drawing.Point(2, 42);
			this.DatamoshClipsFolderGroup.Margin = new System.Windows.Forms.Padding(2);
			this.DatamoshClipsFolderGroup.Name = "DatamoshClipsFolderGroup";
			this.DatamoshClipsFolderGroup.Padding = new System.Windows.Forms.Padding(5);
			this.DatamoshClipsFolderGroup.Size = new System.Drawing.Size(627, 82);
			this.DatamoshClipsFolderGroup.TabIndex = 6;
			this.DatamoshClipsFolderGroup.TabStop = false;
			this.DatamoshClipsFolderGroup.Text = "数据抹失片段目录";
			//
			// tableLayoutPanel21
			//
			this.tableLayoutPanel21.AutoSize = true;
			this.tableLayoutPanel21.ColumnCount = 3;
			this.tableLayoutPanel21.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel21.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel21.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.tableLayoutPanel21.Controls.Add(this.DatamoshClipsFolderInfo, 0, 0);
			this.tableLayoutPanel21.Controls.Add(this.DatamoshClipsFolderTxt, 0, 1);
			this.tableLayoutPanel21.Controls.Add(this.DatamoshClipsFolderButton, 1, 1);
			this.tableLayoutPanel21.Controls.Add(this.DatamoshClipsFolderOpenButton, 2, 1);
			this.tableLayoutPanel21.Dock = System.Windows.Forms.DockStyle.Top;
			this.tableLayoutPanel21.Location = new System.Drawing.Point(5, 25);
			this.tableLayoutPanel21.Margin = new System.Windows.Forms.Padding(2);
			this.tableLayoutPanel21.Name = "tableLayoutPanel21";
			this.tableLayoutPanel21.RowCount = 2;
			this.tableLayoutPanel21.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel21.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel21.Size = new System.Drawing.Size(617, 52);
			this.tableLayoutPanel21.TabIndex = 3;
			//
			// DatamoshClipsFolderInfo
			//
			this.tableLayoutPanel21.SetColumnSpan(this.DatamoshClipsFolderInfo, 3);
			this.DatamoshClipsFolderInfo.Dock = System.Windows.Forms.DockStyle.Top;
			this.DatamoshClipsFolderInfo.Location = new System.Drawing.Point(2, 0);
			this.DatamoshClipsFolderInfo.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
			this.DatamoshClipsFolderInfo.Name = "DatamoshClipsFolderInfo";
			this.DatamoshClipsFolderInfo.Size = new System.Drawing.Size(613, 20);
			this.DatamoshClipsFolderInfo.TabIndex = 5;
			this.DatamoshClipsFolderInfo.Text = "请先指定一个用于存放生成的数据抹失片段的文件夹。";
			//
			// DatamoshClipsFolderTxt
			//
			this.DatamoshClipsFolderTxt.Dock = System.Windows.Forms.DockStyle.Top;
			this.DatamoshClipsFolderTxt.Location = new System.Drawing.Point(2, 22);
			this.DatamoshClipsFolderTxt.Margin = new System.Windows.Forms.Padding(2);
			this.DatamoshClipsFolderTxt.Name = "DatamoshClipsFolderTxt";
			this.DatamoshClipsFolderTxt.ReadOnly = true;
			this.DatamoshClipsFolderTxt.Size = new System.Drawing.Size(455, 27);
			this.DatamoshClipsFolderTxt.TabIndex = 2;
			//
			// DatamoshClipsFolderButton
			//
			this.DatamoshClipsFolderButton.AutoSize = true;
			this.DatamoshClipsFolderButton.Dock = System.Windows.Forms.DockStyle.Top;
			this.DatamoshClipsFolderButton.Location = new System.Drawing.Point(461, 22);
			this.DatamoshClipsFolderButton.Margin = new System.Windows.Forms.Padding(2);
			this.DatamoshClipsFolderButton.MaximumSize = new System.Drawing.Size(300, 28);
			this.DatamoshClipsFolderButton.Name = "DatamoshClipsFolderButton";
			this.DatamoshClipsFolderButton.Size = new System.Drawing.Size(75, 28);
			this.DatamoshClipsFolderButton.TabIndex = 3;
			this.DatamoshClipsFolderButton.Text = "浏览...";
			this.DatamoshClipsFolderButton.UseVisualStyleBackColor = true;
			this.DatamoshClipsFolderButton.Click += new System.EventHandler(this.DatamoshClipsFolderButton_Click);
			//
			// DatamoshClipsFolderOpenButton
			//
			this.DatamoshClipsFolderOpenButton.AutoSize = true;
			this.DatamoshClipsFolderOpenButton.Dock = System.Windows.Forms.DockStyle.Top;
			this.DatamoshClipsFolderOpenButton.Location = new System.Drawing.Point(540, 22);
			this.DatamoshClipsFolderOpenButton.Margin = new System.Windows.Forms.Padding(2);
			this.DatamoshClipsFolderOpenButton.MaximumSize = new System.Drawing.Size(300, 28);
			this.DatamoshClipsFolderOpenButton.Name = "DatamoshClipsFolderOpenButton";
			this.DatamoshClipsFolderOpenButton.Size = new System.Drawing.Size(75, 28);
			this.DatamoshClipsFolderOpenButton.TabIndex = 4;
			this.DatamoshClipsFolderOpenButton.Text = "打开...";
			this.DatamoshClipsFolderOpenButton.UseVisualStyleBackColor = true;
			this.DatamoshClipsFolderOpenButton.Click += new System.EventHandler(this.DatamoshClipsFolderOpenButton_Click);
			//
			// DatamoshBtn
			//
			this.DatamoshBtn.CommandLink = true;
			this.DatamoshBtn.CommandLinkNote = "快速自动地对视频选中区域进行数据抹失。";
			this.DatamoshBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.DatamoshBtn.Location = new System.Drawing.Point(2, 128);
			this.DatamoshBtn.Margin = new System.Windows.Forms.Padding(2);
			this.DatamoshBtn.Name = "DatamoshBtn";
			this.DatamoshBtn.Size = new System.Drawing.Size(627, 86);
			this.DatamoshBtn.TabIndex = 11;
			this.DatamoshBtn.Text = "数据抹失";
			this.DatamoshBtn.Click += new System.EventHandler(this.DatamoshBtn_Click);
			//
			// DatamixBtn
			//
			this.DatamixBtn.CommandLink = true;
			this.DatamixBtn.CommandLinkNote = "快速自动地对视频选中区域进行数据抹失（将一个剪辑抹入另一个剪辑）。";
			this.DatamixBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.DatamixBtn.Location = new System.Drawing.Point(2, 218);
			this.DatamixBtn.Margin = new System.Windows.Forms.Padding(2);
			this.DatamixBtn.Name = "DatamixBtn";
			this.DatamixBtn.Size = new System.Drawing.Size(627, 86);
			this.DatamixBtn.TabIndex = 12;
			this.DatamixBtn.Text = "数据抹拭";
			this.DatamixBtn.UseVisualStyleBackColor = true;
			this.DatamixBtn.Click += new System.EventHandler(this.DatamoshBtn_Click);
			//
			// LayeringBtn
			//
			this.LayeringBtn.CommandLink = true;
			this.LayeringBtn.CommandLinkNote = "快速自动地对选中剪辑进行多层叠化。";
			this.LayeringBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.LayeringBtn.Location = new System.Drawing.Point(2, 308);
			this.LayeringBtn.Margin = new System.Windows.Forms.Padding(2);
			this.LayeringBtn.Name = "LayeringBtn";
			this.LayeringBtn.Size = new System.Drawing.Size(627, 106);
			this.LayeringBtn.TabIndex = 13;
			this.LayeringBtn.Text = "多层叠化";
			this.LayeringBtn.UseVisualStyleBackColor = true;
			this.LayeringBtn.Click += new System.EventHandler(this.DatamoshBtn_Click);
			//
			// RenderingBtn
			//
			this.RenderingBtn.CommandLink = true;
			this.RenderingBtn.CommandLinkNote = "快速自动地对视频选中区域进行渲染。";
			this.RenderingBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.RenderingBtn.Location = new System.Drawing.Point(2, 418);
			this.RenderingBtn.Margin = new System.Windows.Forms.Padding(2);
			this.RenderingBtn.Name = "RenderingBtn";
			this.RenderingBtn.Size = new System.Drawing.Size(627, 86);
			this.RenderingBtn.TabIndex = 14;
			this.RenderingBtn.Text = "预渲染化";
			this.RenderingBtn.UseVisualStyleBackColor = true;
			this.RenderingBtn.Click += new System.EventHandler(this.DatamoshBtn_Click);
			//
			// ScrambleBtn
			//
			this.ScrambleBtn.CommandLink = true;
			this.ScrambleBtn.CommandLinkNote = "快速自动地对选中剪辑进行打乱。";
			this.ScrambleBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.ScrambleBtn.Location = new System.Drawing.Point(2, 508);
			this.ScrambleBtn.Margin = new System.Windows.Forms.Padding(2);
			this.ScrambleBtn.Name = "ScrambleBtn";
			this.ScrambleBtn.Size = new System.Drawing.Size(627, 106);
			this.ScrambleBtn.TabIndex = 15;
			this.ScrambleBtn.Text = "随机扰乱";
			this.ScrambleBtn.UseVisualStyleBackColor = true;
			this.ScrambleBtn.Click += new System.EventHandler(this.DatamoshBtn_Click);
			//
			// AutomatorBtn
			//
			this.AutomatorBtn.CommandLink = true;
			this.AutomatorBtn.CommandLinkNote = "快速自动地为选中视频效果设定随机值。";
			this.AutomatorBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AutomatorBtn.Location = new System.Drawing.Point(2, 618);
			this.AutomatorBtn.Margin = new System.Windows.Forms.Padding(2);
			this.AutomatorBtn.Name = "AutomatorBtn";
			this.AutomatorBtn.Size = new System.Drawing.Size(627, 106);
			this.AutomatorBtn.TabIndex = 16;
			this.AutomatorBtn.Text = "自动生效";
			this.AutomatorBtn.UseVisualStyleBackColor = true;
			this.AutomatorBtn.Click += new System.EventHandler(this.DatamoshBtn_Click);
			//
			// StutterBtn
			//
			this.StutterBtn.CommandLink = true;
			this.StutterBtn.CommandLinkNote = "口吃剪辑（向前向后播放）。";
			this.StutterBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.StutterBtn.Location = new System.Drawing.Point(2, 728);
			this.StutterBtn.Margin = new System.Windows.Forms.Padding(2);
			this.StutterBtn.Name = "StutterBtn";
			this.StutterBtn.Size = new System.Drawing.Size(627, 106);
			this.StutterBtn.TabIndex = 17;
			this.StutterBtn.Text = "结巴效果";
			this.StutterBtn.UseVisualStyleBackColor = true;
			this.StutterBtn.Click += new System.EventHandler(this.DatamoshBtn_Click);
			//
			// CameraShakeBtn
			//
			this.CameraShakeBtn.CommandLink = true;
			this.CameraShakeBtn.CommandLinkNote = "使用平移/裁切来摇晃选中剪辑。";
			this.CameraShakeBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.CameraShakeBtn.Location = new System.Drawing.Point(2, 838);
			this.CameraShakeBtn.Margin = new System.Windows.Forms.Padding(2);
			this.CameraShakeBtn.Name = "CameraShakeBtn";
			this.CameraShakeBtn.Size = new System.Drawing.Size(627, 106);
			this.CameraShakeBtn.TabIndex = 18;
			this.CameraShakeBtn.Text = "镜头摇晃";
			this.CameraShakeBtn.UseVisualStyleBackColor = true;
			this.CameraShakeBtn.Click += new System.EventHandler(this.DatamoshBtn_Click);
			//
			// DatamoshNotInstalledTable
			//
			this.DatamoshNotInstalledTable.AutoSize = true;
			this.DatamoshNotInstalledTable.ColumnCount = 1;
			this.DatamoshNotInstalledTable.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.DatamoshNotInstalledTable.Controls.Add(this.DatamoshNotInstalledInfo, 0, 0);
			this.DatamoshNotInstalledTable.Controls.Add(this.DownloadDatamoshLink, 0, 1);
			this.DatamoshNotInstalledTable.Dock = System.Windows.Forms.DockStyle.Top;
			this.DatamoshNotInstalledTable.Location = new System.Drawing.Point(3, 29);
			this.DatamoshNotInstalledTable.Name = "DatamoshNotInstalledTable";
			this.DatamoshNotInstalledTable.Padding = new System.Windows.Forms.Padding(0, 8, 0, 5);
			this.DatamoshNotInstalledTable.RowCount = 2;
			this.DatamoshNotInstalledTable.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.DatamoshNotInstalledTable.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 20F));
			this.DatamoshNotInstalledTable.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 25F));
			this.DatamoshNotInstalledTable.Size = new System.Drawing.Size(631, 53);
			this.DatamoshNotInstalledTable.TabIndex = 8;
			//
			// DatamoshNotInstalledInfo
			//
			this.DatamoshNotInstalledInfo.AutoSize = true;
			this.DatamoshNotInstalledInfo.Dock = System.Windows.Forms.DockStyle.Top;
			this.DatamoshNotInstalledInfo.Font = new System.Drawing.Font("微软雅黑", 9F);
			this.DatamoshNotInstalledInfo.Location = new System.Drawing.Point(3, 8);
			this.DatamoshNotInstalledInfo.Name = "DatamoshNotInstalledInfo";
			this.DatamoshNotInstalledInfo.Size = new System.Drawing.Size(625, 20);
			this.DatamoshNotInstalledInfo.TabIndex = 2;
			this.DatamoshNotInstalledInfo.Text = "未安装数据抹失扩展包，下载后方可使用全部功能。";
			//
			// DownloadDatamoshLink
			//
			this.DownloadDatamoshLink.AutoSize = true;
			this.DownloadDatamoshLink.Dock = System.Windows.Forms.DockStyle.Fill;
			this.DownloadDatamoshLink.Location = new System.Drawing.Point(3, 28);
			this.DownloadDatamoshLink.Name = "DownloadDatamoshLink";
			this.DownloadDatamoshLink.Size = new System.Drawing.Size(625, 20);
			this.DownloadDatamoshLink.TabIndex = 3;
			this.DownloadDatamoshLink.TabStop = true;
			this.DownloadDatamoshLink.Text = "下载扩展包";
			//
			// DatamoshInfoLbl
			//
			this.DatamoshInfoLbl.AutoSize = true;
			this.DatamoshInfoLbl.Dock = System.Windows.Forms.DockStyle.Top;
			this.DatamoshInfoLbl.Font = new System.Drawing.Font("微软雅黑", 9F);
			this.DatamoshInfoLbl.Location = new System.Drawing.Point(3, 3);
			this.DatamoshInfoLbl.Name = "DatamoshInfoLbl";
			this.DatamoshInfoLbl.Padding = new System.Windows.Forms.Padding(3, 6, 3, 0);
			this.DatamoshInfoLbl.Size = new System.Drawing.Size(345, 26);
			this.DatamoshInfoLbl.TabIndex = 10;
			this.DatamoshInfoLbl.Text = "数据抹失是一种磨损素材以产生故障效果的技术。";
			//
			// HelperTab
			//
			this.HelperTab.AutoScroll = true;
			this.HelperTab.BackColor = System.Drawing.Color.Transparent;
			this.HelperTab.Controls.Add(this.toolsTableLayoutPanel);
			this.HelperTab.Controls.Add(this.tableLayoutPanel19);
			this.HelperTab.Location = new System.Drawing.Point(4, 29);
			this.HelperTab.Margin = new System.Windows.Forms.Padding(2);
			this.HelperTab.Name = "HelperTab";
			this.HelperTab.Padding = new System.Windows.Forms.Padding(2, 4, 2, 4);
			this.HelperTab.Size = new System.Drawing.Size(658, 626);
			this.HelperTab.TabIndex = 4;
			this.HelperTab.Text = "工具";
			this.HelperTab.UseVisualStyleBackColor = true;
			//
			// toolsTableLayoutPanel
			//
			this.toolsTableLayoutPanel.AutoSize = true;
			this.toolsTableLayoutPanel.ColumnCount = 1;
			this.toolsTableLayoutPanel.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.toolsTableLayoutPanel.Controls.Add(this.CloseAfterOpenHelperCheck, 0, 0);
			this.toolsTableLayoutPanel.Controls.Add(this.AutoLayoutTracksGroup, 0, 1);
			this.toolsTableLayoutPanel.Controls.Add(this.QuickSelectIntervalBtn, 0, 2);
			this.toolsTableLayoutPanel.Controls.Add(this.QuickNormalizeBtn, 0, 3);
			this.toolsTableLayoutPanel.Controls.Add(this.ReplaceClipsBtn, 0, 4);
			this.toolsTableLayoutPanel.Controls.Add(this.ChangeTuneMethodBtn, 0, 5);
			this.toolsTableLayoutPanel.Controls.Add(this.BatchSubtitleGenerationBtn, 0, 6);
			this.toolsTableLayoutPanel.Controls.Add(this.FindClipsBtn, 0, 7);
			this.toolsTableLayoutPanel.Controls.Add(this.ApplyVisualEffectBtn, 0, 8);
			this.toolsTableLayoutPanel.Controls.Add(this.ConvertMusicBeatsBtn, 0, 9);
			this.toolsTableLayoutPanel.Controls.Add(this.CustomFadeGainBtn, 0, 10);
			this.toolsTableLayoutPanel.Dock = System.Windows.Forms.DockStyle.Top;
			this.toolsTableLayoutPanel.Location = new System.Drawing.Point(2, 29);
			this.toolsTableLayoutPanel.Margin = new System.Windows.Forms.Padding(0);
			this.toolsTableLayoutPanel.Name = "toolsTableLayoutPanel";
			this.toolsTableLayoutPanel.Padding = new System.Windows.Forms.Padding(1, 0, 1, 0);
			this.toolsTableLayoutPanel.RowCount = 11;
			this.toolsTableLayoutPanel.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.toolsTableLayoutPanel.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.toolsTableLayoutPanel.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 110F));
			this.toolsTableLayoutPanel.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 110F));
			this.toolsTableLayoutPanel.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 110F));
			this.toolsTableLayoutPanel.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 110F));
			this.toolsTableLayoutPanel.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 110F));
			this.toolsTableLayoutPanel.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 110F));
			this.toolsTableLayoutPanel.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 110F));
			this.toolsTableLayoutPanel.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 110F));
			this.toolsTableLayoutPanel.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 110F));
			this.toolsTableLayoutPanel.Size = new System.Drawing.Size(633, 1180);
			this.toolsTableLayoutPanel.TabIndex = 8;
			//
			// CloseAfterOpenHelperCheck
			//
			this.CloseAfterOpenHelperCheck.AutoSize = true;
			this.CloseAfterOpenHelperCheck.Checked = true;
			this.CloseAfterOpenHelperCheck.CheckState = System.Windows.Forms.CheckState.Checked;
			this.CloseAfterOpenHelperCheck.Dock = System.Windows.Forms.DockStyle.Fill;
			this.CloseAfterOpenHelperCheck.Location = new System.Drawing.Point(9, 8);
			this.CloseAfterOpenHelperCheck.Margin = new System.Windows.Forms.Padding(8);
			this.CloseAfterOpenHelperCheck.Name = "CloseAfterOpenHelperCheck";
			this.CloseAfterOpenHelperCheck.Size = new System.Drawing.Size(615, 24);
			this.CloseAfterOpenHelperCheck.TabIndex = 0;
			this.CloseAfterOpenHelperCheck.Text = "操作完成之后关闭本对话框";
			this.CloseAfterOpenHelperCheck.UseVisualStyleBackColor = true;
			//
			// AutoLayoutTracksGroup
			//
			this.AutoLayoutTracksGroup.AutoSize = true;
			this.AutoLayoutTracksGroup.Controls.Add(this.tableLayoutPanel14);
			this.AutoLayoutTracksGroup.Dock = System.Windows.Forms.DockStyle.Top;
			this.AutoLayoutTracksGroup.Location = new System.Drawing.Point(3, 42);
			this.AutoLayoutTracksGroup.Margin = new System.Windows.Forms.Padding(2);
			this.AutoLayoutTracksGroup.Name = "AutoLayoutTracksGroup";
			this.AutoLayoutTracksGroup.Padding = new System.Windows.Forms.Padding(5);
			this.AutoLayoutTracksGroup.Size = new System.Drawing.Size(627, 146);
			this.AutoLayoutTracksGroup.TabIndex = 6;
			this.AutoLayoutTracksGroup.TabStop = false;
			this.AutoLayoutTracksGroup.Text = "自动布局轨道";
			//
			// tableLayoutPanel14
			//
			this.tableLayoutPanel14.AutoSize = true;
			this.tableLayoutPanel14.ColumnCount = 1;
			this.tableLayoutPanel14.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel14.Controls.Add(this.AutoLayoutTracksLbl, 0, 0);
			this.tableLayoutPanel14.Controls.Add(this.AutoLayoutTracksSelectInfo, 0, 1);
			this.tableLayoutPanel14.Controls.Add(this.AutoLayoutTracksButtons, 0, 2);
			this.tableLayoutPanel14.Controls.Add(this.AutoLayoutTracksClearButtons, 0, 3);
			this.tableLayoutPanel14.Dock = System.Windows.Forms.DockStyle.Fill;
			this.tableLayoutPanel14.Location = new System.Drawing.Point(5, 25);
			this.tableLayoutPanel14.Margin = new System.Windows.Forms.Padding(2);
			this.tableLayoutPanel14.Name = "tableLayoutPanel14";
			this.tableLayoutPanel14.RowCount = 4;
			this.tableLayoutPanel14.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel14.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel14.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel14.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel14.Size = new System.Drawing.Size(617, 116);
			this.tableLayoutPanel14.TabIndex = 2;
			//
			// AutoLayoutTracksLbl
			//
			this.AutoLayoutTracksLbl.AutoSize = true;
			this.AutoLayoutTracksLbl.Dock = System.Windows.Forms.DockStyle.Top;
			this.AutoLayoutTracksLbl.Location = new System.Drawing.Point(2, 0);
			this.AutoLayoutTracksLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 2);
			this.AutoLayoutTracksLbl.Name = "AutoLayoutTracksLbl";
			this.AutoLayoutTracksLbl.Size = new System.Drawing.Size(613, 20);
			this.AutoLayoutTracksLbl.TabIndex = 1;
			this.AutoLayoutTracksLbl.Text = "类 YTPMV 风格自动布局选中的轨道。";
			this.AutoLayoutTracksLbl.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// AutoLayoutTracksSelectInfo
			//
			this.AutoLayoutTracksSelectInfo.AutoSize = true;
			this.tableLayoutPanel14.SetColumnSpan(this.AutoLayoutTracksSelectInfo, 2);
			this.AutoLayoutTracksSelectInfo.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AutoLayoutTracksSelectInfo.Location = new System.Drawing.Point(2, 22);
			this.AutoLayoutTracksSelectInfo.Margin = new System.Windows.Forms.Padding(2, 0, 2, 2);
			this.AutoLayoutTracksSelectInfo.Name = "AutoLayoutTracksSelectInfo";
			this.AutoLayoutTracksSelectInfo.Size = new System.Drawing.Size(613, 20);
			this.AutoLayoutTracksSelectInfo.TabIndex = 7;
			this.AutoLayoutTracksSelectInfo.Text = "已选中 0 个视频轨道。";
			this.AutoLayoutTracksSelectInfo.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			//
			// AutoLayoutTracksButtons
			//
			this.AutoLayoutTracksButtons.AutoSize = true;
			this.AutoLayoutTracksButtons.ColumnCount = 4;
			this.AutoLayoutTracksButtons.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.AutoLayoutTracksButtons.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.AutoLayoutTracksButtons.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.AutoLayoutTracksButtons.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.AutoLayoutTracksButtons.Controls.Add(this.GradientTracksBtn, 0, 0);
			this.AutoLayoutTracksButtons.Controls.Add(this.AutoLayoutTracksBox3dBtn, 0, 0);
			this.AutoLayoutTracksButtons.Controls.Add(this.AutoLayoutTracksGridBtn, 0, 0);
			this.AutoLayoutTracksButtons.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AutoLayoutTracksButtons.Location = new System.Drawing.Point(0, 44);
			this.AutoLayoutTracksButtons.Margin = new System.Windows.Forms.Padding(0);
			this.AutoLayoutTracksButtons.Name = "AutoLayoutTracksButtons";
			this.AutoLayoutTracksButtons.RowCount = 1;
			this.AutoLayoutTracksButtons.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.AutoLayoutTracksButtons.Size = new System.Drawing.Size(617, 36);
			this.AutoLayoutTracksButtons.TabIndex = 8;
			//
			// GradientTracksBtn
			//
			this.GradientTracksBtn.AutoSize = true;
			this.GradientTracksBtn.Dock = System.Windows.Forms.DockStyle.Left;
			this.GradientTracksBtn.Location = new System.Drawing.Point(278, 2);
			this.GradientTracksBtn.Margin = new System.Windows.Forms.Padding(2);
			this.GradientTracksBtn.MaximumSize = new System.Drawing.Size(300, 32);
			this.GradientTracksBtn.Name = "GradientTracksBtn";
			this.GradientTracksBtn.Size = new System.Drawing.Size(134, 32);
			this.GradientTracksBtn.TabIndex = 5;
			this.GradientTracksBtn.Text = "渐变轨道...";
			this.GradientTracksBtn.UseVisualStyleBackColor = true;
			this.GradientTracksBtn.Click += new System.EventHandler(this.ReadyToShowHelperDialog);
			//
			// AutoLayoutTracksBox3dBtn
			//
			this.AutoLayoutTracksBox3dBtn.AutoSize = true;
			this.AutoLayoutTracksBox3dBtn.Dock = System.Windows.Forms.DockStyle.Left;
			this.AutoLayoutTracksBox3dBtn.Location = new System.Drawing.Point(140, 2);
			this.AutoLayoutTracksBox3dBtn.Margin = new System.Windows.Forms.Padding(2);
			this.AutoLayoutTracksBox3dBtn.MaximumSize = new System.Drawing.Size(300, 32);
			this.AutoLayoutTracksBox3dBtn.Name = "AutoLayoutTracksBox3dBtn";
			this.AutoLayoutTracksBox3dBtn.Size = new System.Drawing.Size(134, 32);
			this.AutoLayoutTracksBox3dBtn.TabIndex = 4;
			this.AutoLayoutTracksBox3dBtn.Text = "3D 方盒布局...";
			this.AutoLayoutTracksBox3dBtn.UseVisualStyleBackColor = true;
			this.AutoLayoutTracksBox3dBtn.Click += new System.EventHandler(this.ReadyToShowHelperDialog);
			//
			// AutoLayoutTracksGridBtn
			//
			this.AutoLayoutTracksGridBtn.AutoSize = true;
			this.AutoLayoutTracksGridBtn.Dock = System.Windows.Forms.DockStyle.Left;
			this.AutoLayoutTracksGridBtn.Location = new System.Drawing.Point(2, 2);
			this.AutoLayoutTracksGridBtn.Margin = new System.Windows.Forms.Padding(2);
			this.AutoLayoutTracksGridBtn.MaximumSize = new System.Drawing.Size(300, 32);
			this.AutoLayoutTracksGridBtn.Name = "AutoLayoutTracksGridBtn";
			this.AutoLayoutTracksGridBtn.Size = new System.Drawing.Size(134, 32);
			this.AutoLayoutTracksGridBtn.TabIndex = 3;
			this.AutoLayoutTracksGridBtn.Text = "网格布局...";
			this.AutoLayoutTracksGridBtn.UseVisualStyleBackColor = true;
			this.AutoLayoutTracksGridBtn.Click += new System.EventHandler(this.ReadyToShowHelperDialog);
			//
			// AutoLayoutTracksClearButtons
			//
			this.AutoLayoutTracksClearButtons.AutoSize = true;
			this.AutoLayoutTracksClearButtons.ColumnCount = 4;
			this.AutoLayoutTracksClearButtons.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.AutoLayoutTracksClearButtons.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.AutoLayoutTracksClearButtons.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.AutoLayoutTracksClearButtons.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.AutoLayoutTracksClearButtons.Controls.Add(this.TrackLegatoBtn, 2, 0);
			this.AutoLayoutTracksClearButtons.Controls.Add(this.ClearTrackMotionBtn, 0, 0);
			this.AutoLayoutTracksClearButtons.Controls.Add(this.ClearTrackEffectBtn, 1, 0);
			this.AutoLayoutTracksClearButtons.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AutoLayoutTracksClearButtons.Location = new System.Drawing.Point(0, 80);
			this.AutoLayoutTracksClearButtons.Margin = new System.Windows.Forms.Padding(0);
			this.AutoLayoutTracksClearButtons.Name = "AutoLayoutTracksClearButtons";
			this.AutoLayoutTracksClearButtons.RowCount = 1;
			this.AutoLayoutTracksClearButtons.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.AutoLayoutTracksClearButtons.Size = new System.Drawing.Size(617, 36);
			this.AutoLayoutTracksClearButtons.TabIndex = 9;
			//
			// TrackLegatoBtn
			//
			this.TrackLegatoBtn.AutoSize = true;
			this.TrackLegatoBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.TrackLegatoBtn.ForeColor = System.Drawing.Color.Red;
			this.TrackLegatoBtn.Location = new System.Drawing.Point(278, 2);
			this.TrackLegatoBtn.Margin = new System.Windows.Forms.Padding(2);
			this.TrackLegatoBtn.MaximumSize = new System.Drawing.Size(300, 32);
			this.TrackLegatoBtn.Name = "TrackLegatoBtn";
			this.TrackLegatoBtn.Padding = new System.Windows.Forms.Padding(0, 0, 14, 0);
			this.TrackLegatoBtn.Size = new System.Drawing.Size(134, 32);
			this.TrackLegatoBtn.TabIndex = 2;
			this.TrackLegatoBtn.Text = "填补轨道间隙";
			this.TrackLegatoBtn.UseVisualStyleBackColor = true;
			this.TrackLegatoBtn.Click += new System.EventHandler(this.TrackLegatoBtn_Click);
			this.TrackLegatoBtn.Paint += new System.Windows.Forms.PaintEventHandler(this.TrackLegatoBtn_Paint);
			this.TrackLegatoBtn.MouseDown += new System.Windows.Forms.MouseEventHandler(this.MouseDownMapToClick);
			this.TrackLegatoBtn.MouseUp += new System.Windows.Forms.MouseEventHandler(this.MouseUpMapToClick);
			//
			// ClearTrackMotionBtn
			//
			this.ClearTrackMotionBtn.AutoSize = true;
			this.ClearTrackMotionBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.ClearTrackMotionBtn.ForeColor = System.Drawing.Color.Red;
			this.ClearTrackMotionBtn.Location = new System.Drawing.Point(2, 2);
			this.ClearTrackMotionBtn.Margin = new System.Windows.Forms.Padding(2);
			this.ClearTrackMotionBtn.MaximumSize = new System.Drawing.Size(300, 32);
			this.ClearTrackMotionBtn.Name = "ClearTrackMotionBtn";
			this.ClearTrackMotionBtn.Size = new System.Drawing.Size(134, 32);
			this.ClearTrackMotionBtn.TabIndex = 0;
			this.ClearTrackMotionBtn.Text = "清除轨道运动";
			this.ClearTrackMotionBtn.UseVisualStyleBackColor = true;
			this.ClearTrackMotionBtn.Click += new System.EventHandler(this.ClearTrackMotionBtn_Click);
			//
			// ClearTrackEffectBtn
			//
			this.ClearTrackEffectBtn.AutoSize = true;
			this.ClearTrackEffectBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.ClearTrackEffectBtn.ForeColor = System.Drawing.Color.Red;
			this.ClearTrackEffectBtn.Location = new System.Drawing.Point(140, 2);
			this.ClearTrackEffectBtn.Margin = new System.Windows.Forms.Padding(2);
			this.ClearTrackEffectBtn.MaximumSize = new System.Drawing.Size(300, 32);
			this.ClearTrackEffectBtn.Name = "ClearTrackEffectBtn";
			this.ClearTrackEffectBtn.Size = new System.Drawing.Size(134, 32);
			this.ClearTrackEffectBtn.TabIndex = 1;
			this.ClearTrackEffectBtn.Text = "清除轨道效果";
			this.ClearTrackEffectBtn.UseVisualStyleBackColor = true;
			this.ClearTrackEffectBtn.Click += new System.EventHandler(this.ClearTrackEffectBtn_Click);
			//
			// QuickSelectIntervalBtn
			//
			this.QuickSelectIntervalBtn.CommandLink = true;
			this.QuickSelectIntervalBtn.CommandLinkNote = "本功能旨在辅助用户每隔一个或几个选中一个素材，然后可以执行“粘贴事件属性”等操作。\r\n已选中 0 个轨道剪辑。";
			this.QuickSelectIntervalBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.QuickSelectIntervalBtn.Location = new System.Drawing.Point(3, 192);
			this.QuickSelectIntervalBtn.Margin = new System.Windows.Forms.Padding(2);
			this.QuickSelectIntervalBtn.Name = "QuickSelectIntervalBtn";
			this.QuickSelectIntervalBtn.Size = new System.Drawing.Size(627, 106);
			this.QuickSelectIntervalBtn.TabIndex = 11;
			this.QuickSelectIntervalBtn.Text = "快速间隔选择";
			this.QuickSelectIntervalBtn.UseVisualStyleBackColor = true;
			this.QuickSelectIntervalBtn.Click += new System.EventHandler(this.ReadyToShowHelperDialog);
			//
			// QuickNormalizeBtn
			//
			this.QuickNormalizeBtn.CommandLink = true;
			this.QuickNormalizeBtn.CommandLinkNote = "将选中的多个音频轨道剪辑全部规范化音量。\r\n已选中 0 个音频轨道剪辑。";
			this.QuickNormalizeBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.QuickNormalizeBtn.Location = new System.Drawing.Point(3, 302);
			this.QuickNormalizeBtn.Margin = new System.Windows.Forms.Padding(2);
			this.QuickNormalizeBtn.Name = "QuickNormalizeBtn";
			this.QuickNormalizeBtn.Size = new System.Drawing.Size(627, 106);
			this.QuickNormalizeBtn.TabIndex = 12;
			this.QuickNormalizeBtn.Text = "快速规范音量";
			this.QuickNormalizeBtn.UseVisualStyleBackColor = true;
			this.QuickNormalizeBtn.Click += new System.EventHandler(this.QuickNormalizeBtn_Click);
			//
			// ReplaceClipsBtn
			//
			this.ReplaceClipsBtn.CommandLink = true;
			this.ReplaceClipsBtn.CommandLinkNote = "将多个轨道剪辑替换为指定的新轨道剪辑。\r\n已选中 0 个轨道剪辑。";
			this.ReplaceClipsBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.ReplaceClipsBtn.Location = new System.Drawing.Point(3, 412);
			this.ReplaceClipsBtn.Margin = new System.Windows.Forms.Padding(2);
			this.ReplaceClipsBtn.Name = "ReplaceClipsBtn";
			this.ReplaceClipsBtn.Size = new System.Drawing.Size(627, 106);
			this.ReplaceClipsBtn.TabIndex = 13;
			this.ReplaceClipsBtn.Text = "替换轨道素材";
			this.ReplaceClipsBtn.UseVisualStyleBackColor = true;
			this.ReplaceClipsBtn.Click += new System.EventHandler(this.ReadyToShowHelperDialog);
			//
			// ChangeTuneMethodBtn
			//
			this.ChangeTuneMethodBtn.CommandLink = true;
			this.ChangeTuneMethodBtn.CommandLinkNote = "将多个音频轨道剪辑统一更改为指定的调音算法。\r\n已选中 0 个音频轨道剪辑。";
			this.ChangeTuneMethodBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.ChangeTuneMethodBtn.Location = new System.Drawing.Point(3, 522);
			this.ChangeTuneMethodBtn.Margin = new System.Windows.Forms.Padding(2);
			this.ChangeTuneMethodBtn.Name = "ChangeTuneMethodBtn";
			this.ChangeTuneMethodBtn.Size = new System.Drawing.Size(627, 106);
			this.ChangeTuneMethodBtn.TabIndex = 14;
			this.ChangeTuneMethodBtn.Text = "更改调音算法";
			this.ChangeTuneMethodBtn.UseVisualStyleBackColor = true;
			this.ChangeTuneMethodBtn.Click += new System.EventHandler(this.ReadyToShowHelperDialog);
			//
			// BatchSubtitleGenerationBtn
			//
			this.BatchSubtitleGenerationBtn.CommandLink = true;
			this.BatchSubtitleGenerationBtn.CommandLinkNote = "预先设定好“字幕和文字”的预设，然后在此添加多行文本。";
			this.BatchSubtitleGenerationBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.BatchSubtitleGenerationBtn.Location = new System.Drawing.Point(3, 632);
			this.BatchSubtitleGenerationBtn.Margin = new System.Windows.Forms.Padding(2);
			this.BatchSubtitleGenerationBtn.Name = "BatchSubtitleGenerationBtn";
			this.BatchSubtitleGenerationBtn.Size = new System.Drawing.Size(627, 106);
			this.BatchSubtitleGenerationBtn.TabIndex = 15;
			this.BatchSubtitleGenerationBtn.Text = "批量生成字幕";
			this.BatchSubtitleGenerationBtn.UseVisualStyleBackColor = true;
			this.BatchSubtitleGenerationBtn.Click += new System.EventHandler(this.ReadyToShowHelperDialog);
			//
			// FindClipsBtn
			//
			this.FindClipsBtn.CommandLink = true;
			this.FindClipsBtn.CommandLinkNote = "根据指定的条件（如剪辑名称、与选中剪辑相同的素材等）选中符合条件的所有轨道剪辑。";
			this.FindClipsBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.FindClipsBtn.Location = new System.Drawing.Point(3, 742);
			this.FindClipsBtn.Margin = new System.Windows.Forms.Padding(2);
			this.FindClipsBtn.Name = "FindClipsBtn";
			this.FindClipsBtn.Size = new System.Drawing.Size(627, 106);
			this.FindClipsBtn.TabIndex = 16;
			this.FindClipsBtn.Text = "查找轨道素材";
			this.FindClipsBtn.UseVisualStyleBackColor = true;
			this.FindClipsBtn.Click += new System.EventHandler(this.ReadyToShowHelperDialog);
			//
			// ApplyVisualEffectBtn
			//
			this.ApplyVisualEffectBtn.CommandLink = true;
			this.ApplyVisualEffectBtn.CommandLinkNote = "将指定的视频轨道剪辑应用映像节奏视觉效果。\r\n已选中 0 个视频轨道剪辑。";
			this.ApplyVisualEffectBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.ApplyVisualEffectBtn.Location = new System.Drawing.Point(3, 852);
			this.ApplyVisualEffectBtn.Margin = new System.Windows.Forms.Padding(2);
			this.ApplyVisualEffectBtn.Name = "ApplyVisualEffectBtn";
			this.ApplyVisualEffectBtn.Size = new System.Drawing.Size(627, 106);
			this.ApplyVisualEffectBtn.TabIndex = 17;
			this.ApplyVisualEffectBtn.Text = "应用视觉效果";
			this.ApplyVisualEffectBtn.UseVisualStyleBackColor = true;
			this.ApplyVisualEffectBtn.Click += new System.EventHandler(this.ReadyToShowHelperDialog);
			//
			// ConvertMusicBeatsBtn
			//
			this.ConvertMusicBeatsBtn.CommandLink = true;
			this.ConvertMusicBeatsBtn.CommandLinkNote = "将指定的音乐的节拍在四四拍、四三拍、八六拍等之间进行转换。\r\n必须恰好选择 1 个音频轨道剪辑，不得多选或少选。";
			this.ConvertMusicBeatsBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.ConvertMusicBeatsBtn.Location = new System.Drawing.Point(3, 962);
			this.ConvertMusicBeatsBtn.Margin = new System.Windows.Forms.Padding(2);
			this.ConvertMusicBeatsBtn.Name = "ConvertMusicBeatsBtn";
			this.ConvertMusicBeatsBtn.Size = new System.Drawing.Size(627, 106);
			this.ConvertMusicBeatsBtn.TabIndex = 18;
			this.ConvertMusicBeatsBtn.Text = "转换音乐节拍";
			this.ConvertMusicBeatsBtn.UseVisualStyleBackColor = true;
			this.ConvertMusicBeatsBtn.Click += new System.EventHandler(this.ConvertMusicBeatsBtn_Click);
			//
			// CustomFadeGainBtn
			//
			this.CustomFadeGainBtn.CommandLink = true;
			this.CustomFadeGainBtn.CommandLinkNote = "将多个轨道剪辑根据指定的规则来更改增益值。\r\n已选中 0 个轨道剪辑。";
			this.CustomFadeGainBtn.Dock = System.Windows.Forms.DockStyle.Fill;
			this.CustomFadeGainBtn.Location = new System.Drawing.Point(3, 1072);
			this.CustomFadeGainBtn.Margin = new System.Windows.Forms.Padding(2);
			this.CustomFadeGainBtn.Name = "CustomFadeGainBtn";
			this.CustomFadeGainBtn.Size = new System.Drawing.Size(627, 106);
			this.CustomFadeGainBtn.TabIndex = 19;
			this.CustomFadeGainBtn.Text = "自定渐入增益";
			this.CustomFadeGainBtn.UseVisualStyleBackColor = true;
			this.CustomFadeGainBtn.Click += new System.EventHandler(this.ReadyToShowHelperDialog);
			//
			// tableLayoutPanel19
			//
			this.tableLayoutPanel19.AutoSize = true;
			this.tableLayoutPanel19.ColumnCount = 1;
			this.tableLayoutPanel19.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
			this.tableLayoutPanel19.Controls.Add(this.HelperLbl, 0, 0);
			this.tableLayoutPanel19.Dock = System.Windows.Forms.DockStyle.Top;
			this.tableLayoutPanel19.Location = new System.Drawing.Point(2, 4);
			this.tableLayoutPanel19.Margin = new System.Windows.Forms.Padding(2);
			this.tableLayoutPanel19.Name = "tableLayoutPanel19";
			this.tableLayoutPanel19.RowCount = 1;
			this.tableLayoutPanel19.RowStyles.Add(new System.Windows.Forms.RowStyle());
			this.tableLayoutPanel19.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 25F));
			this.tableLayoutPanel19.Size = new System.Drawing.Size(633, 25);
			this.tableLayoutPanel19.TabIndex = 7;
			//
			// HelperLbl
			//
			this.HelperLbl.AutoSize = true;
			this.HelperLbl.Dock = System.Windows.Forms.DockStyle.Top;
			this.HelperLbl.Font = new System.Drawing.Font("微软雅黑", 9F);
			this.HelperLbl.Location = new System.Drawing.Point(4, 0);
			this.HelperLbl.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.HelperLbl.Name = "HelperLbl";
			this.HelperLbl.Padding = new System.Windows.Forms.Padding(0, 5, 0, 0);
			this.HelperLbl.Size = new System.Drawing.Size(625, 25);
			this.HelperLbl.TabIndex = 2;
			this.HelperLbl.Text = "以下功能只是一些独立的辅助功能，与其它生成音视频的参数无关。";
			//
			// TrackLegatoMenu
			//
			this.TrackLegatoMenu.ImageScalingSize = new System.Drawing.Size(20, 20);
			this.TrackLegatoMenu.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
			this.stackingTracksToolStripMenuItem,
			this.stackingAllAfterTracksToolStripMenuItem,
			this.stackingAllTracksTracksToolStripMenuItem,
			this.limitStretchLegatoTracksToolStripMenuItem,
			this.stretchLegatoTracksToolStripMenuItem,
			this.lengthenLegatoToolStripMenuItem,
			this.toolStripSeparator9,
			this.increaseSpacingToolStripMenuItem,
			this.increaseSpacingAllTracksToolStripMenuItem,
			this.toolStripSeparator10,
			this.effectToSelectedEventsToolStripMenuItem,
			this.includeEventsInGroupToolStripMenuItem,
			this.reverseDirectionToolStripMenuItem,
			this.trackLegatoSelectInfoToolStripMenuItem});
			this.TrackLegatoMenu.Name = "TrackLegatoMenu";
			this.TrackLegatoMenu.Size = new System.Drawing.Size(394, 304);
			//
			// stackingTracksToolStripMenuItem
			//
			this.stackingTracksToolStripMenuItem.Name = "stackingTracksToolStripMenuItem";
			this.stackingTracksToolStripMenuItem.Size = new System.Drawing.Size(393, 24);
			this.stackingTracksToolStripMenuItem.Text = "堆积素材（仅应用于选中素材）";
			this.stackingTracksToolStripMenuItem.Click += new System.EventHandler(this.TrackLegatoMenuItems_Click);
			//
			// stackingAllAfterTracksToolStripMenuItem
			//
			this.stackingAllAfterTracksToolStripMenuItem.Name = "stackingAllAfterTracksToolStripMenuItem";
			this.stackingAllAfterTracksToolStripMenuItem.Size = new System.Drawing.Size(393, 24);
			this.stackingAllAfterTracksToolStripMenuItem.Text = "堆积素材（也应用于后续所有素材）";
			this.stackingAllAfterTracksToolStripMenuItem.Click += new System.EventHandler(this.TrackLegatoMenuItems_Click);
			//
			// stackingAllTracksTracksToolStripMenuItem
			//
			this.stackingAllTracksTracksToolStripMenuItem.Name = "stackingAllTracksTracksToolStripMenuItem";
			this.stackingAllTracksTracksToolStripMenuItem.Size = new System.Drawing.Size(393, 24);
			this.stackingAllTracksTracksToolStripMenuItem.Text = "堆积素材（应用于所有轨道）";
			this.stackingAllTracksTracksToolStripMenuItem.Click += new System.EventHandler(this.TrackLegatoMenuItems_Click);
			//
			// limitStretchLegatoTracksToolStripMenuItem
			//
			this.limitStretchLegatoTracksToolStripMenuItem.Name = "limitStretchLegatoTracksToolStripMenuItem";
			this.limitStretchLegatoTracksToolStripMenuItem.Size = new System.Drawing.Size(393, 24);
			this.limitStretchLegatoTracksToolStripMenuItem.Text = "拉伸素材（限制在拉伸极限范围之内）";
			this.limitStretchLegatoTracksToolStripMenuItem.Click += new System.EventHandler(this.TrackLegatoMenuItems_Click);
			//
			// stretchLegatoTracksToolStripMenuItem
			//
			this.stretchLegatoTracksToolStripMenuItem.Font = new System.Drawing.Font("Microsoft YaHei UI", 9F, System.Drawing.FontStyle.Bold);
			this.stretchLegatoTracksToolStripMenuItem.Name = "stretchLegatoTracksToolStripMenuItem";
			this.stretchLegatoTracksToolStripMenuItem.Size = new System.Drawing.Size(393, 24);
			this.stretchLegatoTracksToolStripMenuItem.Text = "拉伸素材（超出拉伸极限范围之后再延长素材）";
			this.stretchLegatoTracksToolStripMenuItem.Click += new System.EventHandler(this.TrackLegatoMenuItems_Click);
			//
			// lengthenLegatoToolStripMenuItem
			//
			this.lengthenLegatoToolStripMenuItem.Name = "lengthenLegatoToolStripMenuItem";
			this.lengthenLegatoToolStripMenuItem.Size = new System.Drawing.Size(393, 24);
			this.lengthenLegatoToolStripMenuItem.Text = "延长素材（改变素材持续时间）";
			this.lengthenLegatoToolStripMenuItem.Click += new System.EventHandler(this.TrackLegatoMenuItems_Click);
			//
			// toolStripSeparator9
			//
			this.toolStripSeparator9.Name = "toolStripSeparator9";
			this.toolStripSeparator9.Size = new System.Drawing.Size(390, 6);
			//
			// increaseSpacingToolStripMenuItem
			//
			this.increaseSpacingToolStripMenuItem.Name = "increaseSpacingToolStripMenuItem";
			this.increaseSpacingToolStripMenuItem.Size = new System.Drawing.Size(393, 24);
			this.increaseSpacingToolStripMenuItem.Text = "增加间隙（应用于当前轨道）...";
			this.increaseSpacingToolStripMenuItem.Click += new System.EventHandler(this.TrackLegatoMenuItems_Click);
			//
			// increaseSpacingAllTracksToolStripMenuItem
			//
			this.increaseSpacingAllTracksToolStripMenuItem.Name = "increaseSpacingAllTracksToolStripMenuItem";
			this.increaseSpacingAllTracksToolStripMenuItem.Size = new System.Drawing.Size(393, 24);
			this.increaseSpacingAllTracksToolStripMenuItem.Text = "增加间隙（应用于所有轨道）...";
			this.increaseSpacingAllTracksToolStripMenuItem.Click += new System.EventHandler(this.TrackLegatoMenuItems_Click);
			//
			// toolStripSeparator10
			//
			this.toolStripSeparator10.Name = "toolStripSeparator10";
			this.toolStripSeparator10.Size = new System.Drawing.Size(390, 6);
			//
			// effectToSelectedEventsToolStripMenuItem
			//
			this.effectToSelectedEventsToolStripMenuItem.CheckOnClick = true;
			this.effectToSelectedEventsToolStripMenuItem.Name = "effectToSelectedEventsToolStripMenuItem";
			this.effectToSelectedEventsToolStripMenuItem.Size = new System.Drawing.Size(393, 24);
			this.effectToSelectedEventsToolStripMenuItem.Text = "仅应用于选中的轨道剪辑";
			//
			// includeEventsInGroupToolStripMenuItem
			//
			this.includeEventsInGroupToolStripMenuItem.CheckOnClick = true;
			this.includeEventsInGroupToolStripMenuItem.Name = "includeEventsInGroupToolStripMenuItem";
			this.includeEventsInGroupToolStripMenuItem.Size = new System.Drawing.Size(393, 24);
			this.includeEventsInGroupToolStripMenuItem.Text = "也应用于同分组内的其它轨道剪辑";
			//
			// reverseDirectionToolStripMenuItem
			//
			this.reverseDirectionToolStripMenuItem.CheckOnClick = true;
			this.reverseDirectionToolStripMenuItem.Name = "reverseDirectionToolStripMenuItem";
			this.reverseDirectionToolStripMenuItem.Size = new System.Drawing.Size(393, 24);
			this.reverseDirectionToolStripMenuItem.Text = "反转方向";
			//
			// trackLegatoSelectInfoToolStripMenuItem
			//
			this.trackLegatoSelectInfoToolStripMenuItem.Enabled = false;
			this.trackLegatoSelectInfoToolStripMenuItem.Name = "trackLegatoSelectInfoToolStripMenuItem";
			this.trackLegatoSelectInfoToolStripMenuItem.Size = new System.Drawing.Size(393, 24);
			this.trackLegatoSelectInfoToolStripMenuItem.Text = "已选中 0 个轨道。";
			//
			// OverflowToolTip
			//
			this.OverflowToolTip.AutoPopDelay = 60000;
			this.OverflowToolTip.InitialDelay = 0;
			this.OverflowToolTip.ReshowDelay = 0;
			//
			// indonesianToolStripMenuItem
			//
			this.indonesianToolStripMenuItem.CheckOnClick = true;
			this.indonesianToolStripMenuItem.Font = new System.Drawing.Font("Segoe UI", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
			this.indonesianToolStripMenuItem.Name = "indonesianToolStripMenuItem";
			this.indonesianToolStripMenuItem.Size = new System.Drawing.Size(224, 26);
			this.indonesianToolStripMenuItem.Text = "Bahasa Indonesia";
			//
			// panel2
			//
			this.panel2.AutoScroll = true;
			this.panel2.AutoSize = true;
			this.panel2.Controls.Add(this.MidiConfigGroup);
			this.panel2.Controls.Add(this.SourceConfigGroup);
			this.panel2.Dock = System.Windows.Forms.DockStyle.Fill;
			this.panel2.Location = new System.Drawing.Point(0, 0);
			this.panel2.Margin = new System.Windows.Forms.Padding(0);
			this.panel2.Name = "panel2";
			this.panel2.Padding = new System.Windows.Forms.Padding(5);
			this.panel2.Size = new System.Drawing.Size(658, 595);
			this.panel2.TabIndex = 0;
			//
			// ConfigForm
			//
			this.AcceptButton = this.OkBtn;
			this.AutoScaleDimensions = new System.Drawing.SizeF(120F, 120F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Dpi;
			this.CancelButton = this.CancelBtn;
			this.ClientSize = new System.Drawing.Size(682, 743);
			this.Controls.Add(this.panel1);
			this.Controls.Add(this.tableLayoutPanel1);
			this.Controls.Add(this.menu);
			this.DoubleBuffered = true;
			this.Font = new System.Drawing.Font("Microsoft YaHei UI", 9F);
			this.Location = new System.Drawing.Point(40, 40);
			this.MainMenuStrip = this.menu;
			this.Margin = new System.Windows.Forms.Padding(4);
			this.MaximizeBox = false;
			this.MinimizeBox = false;
			this.MinimumSize = new System.Drawing.Size(700, 790);
			this.Name = "ConfigForm";
			this.Padding = new System.Windows.Forms.Padding(0, 0, 0, 4);
			this.StartPosition = System.Windows.Forms.FormStartPosition.Manual;
			this.Text = "Otomad Helper for Vegas - 配置";
			this.FormClosing += new System.Windows.Forms.FormClosingEventHandler(this.ConfigForm_FormClosing);
			this.ResizeEnd += new System.EventHandler(this.ConfigForm_Resize);
			this.tableLayoutPanel1.ResumeLayout(false);
			this.tableLayoutPanel1.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.MidiStartSecondBox)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.MidiEndSecondBox)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.SourceStartTimeText)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.SourceEndTimeText)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.PreviewBeepDurationBox)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.StaffLineThicknessBox)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.StaffSurfacePaddingRightBox)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.StaffLineSpacingBox)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.StaffSurfacePositionBox)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.StaffSurfacePaddingLeftBox)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.YtpMinLenBox)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.YtpMaxLenBox)).EndInit();
			this.menu.ResumeLayout(false);
			this.menu.PerformLayout();
			this.panel1.ResumeLayout(false);
			this.Tabs.ResumeLayout(false);
			this.SourceTab.ResumeLayout(false);
			this.SourceTab.PerformLayout();
			this.MidiConfigGroup.ResumeLayout(false);
			this.MidiConfigGroup.PerformLayout();
			this.MidiConfigTablePanel.ResumeLayout(false);
			this.MidiConfigTablePanel.PerformLayout();
			this.tableLayoutPanel5.ResumeLayout(false);
			this.tableLayoutPanel5.PerformLayout();
			this.QuickConfigMidiChannelsMenu.ResumeLayout(false);
			this.tableLayoutPanel6.ResumeLayout(false);
			this.tableLayoutPanel6.PerformLayout();
			this.flowLayoutPanel3.ResumeLayout(false);
			this.flowLayoutPanel3.PerformLayout();
			this.MidiBpmFlowPanel.ResumeLayout(false);
			this.MidiBpmFlowPanel.PerformLayout();
			this.MidiDynamicTempoFlow.ResumeLayout(false);
			this.MidiDynamicTempoFlow.PerformLayout();
			this.flowLayoutPanel2.ResumeLayout(false);
			this.flowLayoutPanel2.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.MidiCustomBpmBox)).EndInit();
			this.tableLayoutPanel12.ResumeLayout(false);
			this.tableLayoutPanel12.PerformLayout();
			this.RestrictLengthFlow.ResumeLayout(false);
			this.RestrictLengthFlow.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.RestrictLengthBox)).EndInit();
			this.SourceConfigGroup.ResumeLayout(false);
			this.SourceConfigGroup.PerformLayout();
			this.tableLayoutPanel3.ResumeLayout(false);
			this.tableLayoutPanel3.PerformLayout();
			this.tableLayoutPanel4.ResumeLayout(false);
			this.tableLayoutPanel4.PerformLayout();
			this.flowLayoutPanel1.ResumeLayout(false);
			this.flowLayoutPanel1.PerformLayout();
			this.flowLayoutPanel9.ResumeLayout(false);
			this.flowLayoutPanel9.PerformLayout();
			this.flowLayoutPanel11.ResumeLayout(false);
			this.flowLayoutPanel11.PerformLayout();
			this.flowLayoutPanel5.ResumeLayout(false);
			this.flowLayoutPanel5.PerformLayout();
			this.AudioTab.ResumeLayout(false);
			this.AudioTab.PerformLayout();
			this.AudioParamsGroup.ResumeLayout(false);
			this.AudioParamsGroup.PerformLayout();
			this.AudioParamsTable.ResumeLayout(false);
			this.AudioParamsTable.PerformLayout();
			this.tableLayoutPanel20.ResumeLayout(false);
			this.tableLayoutPanel20.PerformLayout();
			this.AudioTuneGroup.ResumeLayout(false);
			this.AudioTuneGroup.PerformLayout();
			this.AudioTuneTablePanel.ResumeLayout(false);
			this.AudioTuneTablePanel.PerformLayout();
			this.flowLayoutPanel10.ResumeLayout(false);
			this.flowLayoutPanel10.PerformLayout();
			this.flowLayoutPanel6.ResumeLayout(false);
			this.tableLayoutPanel17.ResumeLayout(false);
			this.tableLayoutPanel17.PerformLayout();
			this.AudioPreviewAttrLayoutPanel.ResumeLayout(false);
			this.AudioPreviewAttrLayoutPanel.PerformLayout();
			this.AudioVelocityGroup.ResumeLayout(false);
			this.AudioVelocityGroup.PerformLayout();
			this.tableLayoutPanel13.ResumeLayout(false);
			this.tableLayoutPanel13.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.AudioGainMoreBox)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.AudioGainLessBox)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.AudioVelocityMoreBox)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.AudioVelocityLessBox)).EndInit();
			this.AudioPreferredTrackPanel.ResumeLayout(false);
			this.AudioPreferredTrackPanel.PerformLayout();
			this.AudioComboPanel.ResumeLayout(false);
			this.AudioComboPanel.PerformLayout();
			this.AudioTogglePanel.ResumeLayout(false);
			this.AudioTogglePanel.PerformLayout();
			this.AudioAutoPanFlow.ResumeLayout(false);
			this.AudioAutoPanFlow.PerformLayout();
			this.VideoTab.ResumeLayout(false);
			this.VideoTab.PerformLayout();
			this.VideoParamsGroup.ResumeLayout(false);
			this.VideoParamsGroup.PerformLayout();
			this.VideoParamsTable.ResumeLayout(false);
			this.VideoParamsTable.PerformLayout();
			this.tableLayoutPanel9.ResumeLayout(false);
			this.tableLayoutPanel9.PerformLayout();
			this.VideoEffectsGroup.ResumeLayout(false);
			this.VideoEffectsGroup.PerformLayout();
			this.tableLayoutPanel8.ResumeLayout(false);
			this.tableLayoutPanel8.PerformLayout();
			this.VideoVelocityGroup.ResumeLayout(false);
			this.VideoVelocityGroup.PerformLayout();
			this.tableLayoutPanel18.ResumeLayout(false);
			this.tableLayoutPanel18.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.VideoGainMoreBox)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.VideoGainLessBox)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.VideoVelocityMoreBox)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.VideoVelocityLessBox)).EndInit();
			this.VideoPreferredTrackPanel.ResumeLayout(false);
			this.VideoPreferredTrackPanel.PerformLayout();
			this.VideoComboPanel.ResumeLayout(false);
			this.VideoComboPanel.PerformLayout();
			this.VideoTogglePanel.ResumeLayout(false);
			this.VideoTogglePanel.PerformLayout();
			this.VideoGlissandoFlow.ResumeLayout(false);
			this.VideoGlissandoFlow.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.VideoGlissandoBox)).EndInit();
			this.SheetTab.ResumeLayout(false);
			this.SheetTab.PerformLayout();
			this.StaffClefParamsGroup.ResumeLayout(false);
			this.StaffClefParamsGroup.PerformLayout();
			this.tableLayoutPanel2.ResumeLayout(false);
			this.tableLayoutPanel2.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.StaffClefScaleBox)).EndInit();
			this.StaffLinesParamsGroup.ResumeLayout(false);
			this.StaffLinesParamsGroup.PerformLayout();
			this.tableLayoutPanel7.ResumeLayout(false);
			this.tableLayoutPanel7.PerformLayout();
			this.StaffNotesParamsGroup.ResumeLayout(false);
			this.StaffNotesParamsGroup.PerformLayout();
			this.tableLayoutPanel10.ResumeLayout(false);
			this.tableLayoutPanel10.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.StaffNotesShiftBox)).EndInit();
			this.flowLayoutPanel4.ResumeLayout(false);
			this.flowLayoutPanel4.PerformLayout();
			this.flowLayoutPanel8.ResumeLayout(false);
			this.flowLayoutPanel8.PerformLayout();
			this.SonarTab.ResumeLayout(false);
			this.tableLayoutPanel11.ResumeLayout(false);
			this.tableLayoutPanel11.PerformLayout();
			this.SonarSwitchesFlow.ResumeLayout(false);
			this.SonarSwitchesFlow.PerformLayout();
			this.flowLayoutPanel15.ResumeLayout(false);
			this.flowLayoutPanel15.PerformLayout();
			this.SonarButtonsTable.ResumeLayout(false);
			this.SonarParamsGroup.ResumeLayout(false);
			this.SonarParamsGroup.PerformLayout();
			this.SonarParamsPanel.ResumeLayout(false);
			this.SonarParamsPanel.PerformLayout();
			this.tableLayoutPanel15.ResumeLayout(false);
			this.tableLayoutPanel15.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.SonarFadeOutBox)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.SonarFadeInBox)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.SonarRotation2Box)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.SonarRotationBox)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.SonarYPreOffset2Box)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.SonarXPreOffset2Box)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.SonarYPreOffsetBox)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.SonarXPreOffsetBox)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.SonarYOffset2Box)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.SonarXOffset2Box)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.SonarYOffsetBox)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.SonarXOffsetBox)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.SonarYPosBox)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.SonarXPosBox)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.SonarEndSizeBox)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.SonarEndBorderBox)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.SonarSizeBox)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.SonarBorderBox)).EndInit();
			this.YtpTab.ResumeLayout(false);
			this.YtpTab.PerformLayout();
			this.YtpParamsGroup.ResumeLayout(false);
			this.YtpParamsGroup.PerformLayout();
			this.tableLayoutPanel16.ResumeLayout(false);
			this.tableLayoutPanel16.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.YtpClipsCountBox)).EndInit();
			this.YtpEffectsGroup.ResumeLayout(false);
			this.YtpEffectsGroup.PerformLayout();
			this.MoshTab.ResumeLayout(false);
			this.MoshTab.PerformLayout();
			this.DatamoshTable.ResumeLayout(false);
			this.DatamoshTable.PerformLayout();
			this.DatamoshClipsFolderGroup.ResumeLayout(false);
			this.DatamoshClipsFolderGroup.PerformLayout();
			this.tableLayoutPanel21.ResumeLayout(false);
			this.tableLayoutPanel21.PerformLayout();
			this.DatamoshNotInstalledTable.ResumeLayout(false);
			this.DatamoshNotInstalledTable.PerformLayout();
			this.HelperTab.ResumeLayout(false);
			this.HelperTab.PerformLayout();
			this.toolsTableLayoutPanel.ResumeLayout(false);
			this.toolsTableLayoutPanel.PerformLayout();
			this.AutoLayoutTracksGroup.ResumeLayout(false);
			this.AutoLayoutTracksGroup.PerformLayout();
			this.tableLayoutPanel14.ResumeLayout(false);
			this.tableLayoutPanel14.PerformLayout();
			this.AutoLayoutTracksButtons.ResumeLayout(false);
			this.AutoLayoutTracksButtons.PerformLayout();
			this.AutoLayoutTracksClearButtons.ResumeLayout(false);
			this.AutoLayoutTracksClearButtons.PerformLayout();
			this.tableLayoutPanel19.ResumeLayout(false);
			this.tableLayoutPanel19.PerformLayout();
			this.TrackLegatoMenu.ResumeLayout(false);
			this.panel2.ResumeLayout(false);
			this.panel2.PerformLayout();
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion

		public System.Windows.Forms.TableLayoutPanel tableLayoutPanel1;
		public System.Windows.Forms.Button OkBtn;
		public System.Windows.Forms.Button CancelBtn;
		public System.Windows.Forms.Button AboutBtn;
		public System.Windows.Forms.LinkLabel UserHelpLink;
		public System.Windows.Forms.ToolTip Balloon;
		public System.Windows.Forms.MenuStrip menu;
		public System.Windows.Forms.ToolStripMenuItem fileMenuItem;
		public System.Windows.Forms.ToolStripMenuItem saveConfigToolStripMenuItem;
		public System.Windows.Forms.ToolStripMenuItem resetConfigToolStripMenuItem;
		public System.Windows.Forms.ToolStripSeparator toolStripSeparator6;
		public System.Windows.Forms.ToolStripMenuItem exitToolStripMenuItem;
		public System.Windows.Forms.ToolStripMenuItem helpToolStripMenuItem;
		public System.Windows.Forms.ToolStripMenuItem aboutToolStripMenuItem;
		public System.Windows.Forms.ToolStripSeparator toolStripSeparator7;
		public System.Windows.Forms.ToolStripMenuItem languageToolStripMenuItem;
		public System.Windows.Forms.ToolStripMenuItem githubToolStripMenuItem;
		public System.Windows.Forms.TabControl Tabs;
		public System.Windows.Forms.TabPage SourceTab;
		public System.Windows.Forms.Label WarningInfoLabel;
		public System.Windows.Forms.GroupBox MidiConfigGroup;
		public System.Windows.Forms.TableLayoutPanel MidiConfigTablePanel;
		public System.Windows.Forms.FlowLayoutPanel flowLayoutPanel3;
		public System.Windows.Forms.Label MidiStartSecondLbl;
		public TimecodeBox MidiStartSecondBox;
		public System.Windows.Forms.Label MidiEndSecondLbl;
		public TimecodeBox MidiEndSecondBox;
		public System.Windows.Forms.Label MidiBpmLbl;
		public System.Windows.Forms.Label MidiChannelLbl;
		public System.Windows.Forms.TableLayoutPanel tableLayoutPanel6;
		public System.Windows.Forms.Button ChooseMidiBtn;
		public System.Windows.Forms.TextBox ChooseMidiText;
		public System.Windows.Forms.Label ChooseMidiLbl;
		public System.Windows.Forms.FlowLayoutPanel MidiBpmFlowPanel;
		public Otomad.VegasScript.OtomadHelper.V4.GroupedRadioButton MidiMidiBpmCheck;
		public Otomad.VegasScript.OtomadHelper.V4.GroupedRadioButton MidiProjectBpmCheck;
		public System.Windows.Forms.GroupBox SourceConfigGroup;
		public System.Windows.Forms.TableLayoutPanel tableLayoutPanel3;
		public System.Windows.Forms.FlowLayoutPanel flowLayoutPanel9;
		public Otomad.VegasScript.OtomadHelper.V4.GroupedRadioButton GenerateAtBeginRadio;
		public Otomad.VegasScript.OtomadHelper.V4.GroupedRadioButton GenerateAtCursorRadio;
		public System.Windows.Forms.Label GenerateAtLbl;
		public System.Windows.Forms.Label ChooseSourceLbl;
		public System.Windows.Forms.TableLayoutPanel tableLayoutPanel4;
		public System.Windows.Forms.ComboBox ChooseSourceCombo;
		public System.Windows.Forms.Button ChooseSourceBtn;
		public System.Windows.Forms.FlowLayoutPanel flowLayoutPanel1;
		public System.Windows.Forms.Label SourceStartTimeLbl;
		public TimecodeBox SourceStartTimeText;
		public System.Windows.Forms.Label SourceEndTimeLbl;
		public TimecodeBox SourceEndTimeText;
		public System.Windows.Forms.TabPage AudioTab;
		public System.Windows.Forms.GroupBox AudioParamsGroup;
		public System.Windows.Forms.TableLayoutPanel AudioParamsTable;
		public System.Windows.Forms.ComboBox AudioFadeOutCurveCombo;
		public System.Windows.Forms.Label AudioFadeInLbl;
		public System.Windows.Forms.Label AudioFadeOutLbl;
		public IntegerTrackWithBox AudioFadeInBox;
		public IntegerTrackWithBox AudioFadeOutBox;
		public System.Windows.Forms.ComboBox AudioFadeInCurveCombo;
		public System.Windows.Forms.GroupBox AudioTuneGroup;
		public System.Windows.Forms.FlowLayoutPanel AudioTogglePanel;
		public System.Windows.Forms.CheckBox AudioConfigCheck;
		public System.Windows.Forms.CheckBox AudioLoopCheck;
		public System.Windows.Forms.CheckBox AudioNormalizeCheck;
		public System.Windows.Forms.TabPage VideoTab;
		public System.Windows.Forms.GroupBox VideoParamsGroup;
		public System.Windows.Forms.TableLayoutPanel VideoParamsTable;
		public IntegerTrackWithBox VideoEndVerticalTransBox;
		public IntegerTrackWithBox VideoStartVerticalTransBox;
		public IntegerTrackWithBox VideoEndHorizontalTransBox;
		public IntegerTrackWithBox VideoStartHorizontalTransBox;
		public IntegerTrackWithBox VideoEndRotationBox;
		public IntegerTrackWithBox VideoStartRotationBox;
		public IntegerTrackWithBox VideoEndSizeBox;
		public System.Windows.Forms.ComboBox VideoStartSizeCurveCombo;
		public IntegerTrackWithBox VideoStartSizeBox;
		public System.Windows.Forms.Label VideoEndVerticalTransLbl;
		public System.Windows.Forms.Label VideoStartHorizontalTransLbl;
		public System.Windows.Forms.Label VideoStartVerticalTransLbl;
		public System.Windows.Forms.Label VideoEndHorizontalTransLbl;
		public System.Windows.Forms.Label VideoEndRotationLbl;
		public System.Windows.Forms.Label VideoStartRotationLbl;
		public System.Windows.Forms.Label VideoEndSizeLbl;
		public System.Windows.Forms.Label VideoStartSizeLbl;
		public System.Windows.Forms.ComboBox VideoFadeOutCurveCombo;
		public System.Windows.Forms.Label VideoFadeInLbl;
		public System.Windows.Forms.Label VideoFadeOutLbl;
		public IntegerTrackWithBox VideoFadeInBox;
		public IntegerTrackWithBox VideoFadeOutBox;
		public System.Windows.Forms.ComboBox VideoFadeInCurveCombo;
		public System.Windows.Forms.GroupBox VideoEffectsGroup;
		public System.Windows.Forms.TableLayoutPanel tableLayoutPanel8;
		public System.Windows.Forms.ComboBox VideoEffectInitialValueCombo;
		public System.Windows.Forms.Label VideoEffectLbl;
		public System.Windows.Forms.Label VideoEffectInitialValueLbl;
		public System.Windows.Forms.ComboBox VideoEffectCombo;
		public System.Windows.Forms.FlowLayoutPanel VideoTogglePanel;
		public System.Windows.Forms.CheckBox VideoConfigCheck;
		public System.Windows.Forms.CheckBox VideoLoopCheck;
		public System.Windows.Forms.CheckBox VideoFreezeFirstFrameCheck;
		public System.Windows.Forms.CheckBox VideoFreezeLastFrameCheck;
		public System.Windows.Forms.TabPage SheetTab;
		public System.Windows.Forms.TabPage HelperTab;
		public ToolStripRadioButtonMenuItem chineseToolStripMenuItem;
		public ToolStripRadioButtonMenuItem englishToolStripMenuItem;
		public ToolStripRadioButtonMenuItem japaneseToolStripMenuItem;
		public ToolStripRadioButtonMenuItem russianToolStripMenuItem;
		public System.Windows.Forms.Panel panel1;
		public ToolStripRadioButtonMenuItem tchineseToolStripMenuItem;
		public System.Windows.Forms.CheckBox AudioFreezeLastFrameCheck;
		public System.Windows.Forms.TableLayoutPanel AudioTuneTablePanel;
		public System.Windows.Forms.Label AudioTuneMethodLbl;
		public System.Windows.Forms.Label AudioBasePitchLbl;
		public System.Windows.Forms.ComboBox AudioTuneMethodCombo;
		public System.Windows.Forms.FlowLayoutPanel flowLayoutPanel6;
		public System.Windows.Forms.ComboBox AudioMainKeyCombo;
		public System.Windows.Forms.ComboBox AudioMainOctaveCombo;
		public System.Windows.Forms.ComboBox VideoGlowCurveCombo;
		public IntegerTrackWithBox VideoGlowBox;
		public System.Windows.Forms.Label VideoGlowLbl;
		public IntegerTrackWithBox VideoGlowBrightBox;
		public System.Windows.Forms.Label VideoGlowBrightLbl;
		public System.Windows.Forms.TableLayoutPanel tableLayoutPanel17;
		public System.Windows.Forms.Button PreviewBasePitchBtn;
		public System.Windows.Forms.Button PreviewAudioBtn;
		public System.Windows.Forms.TabPage YtpTab;
		public System.Windows.Forms.ToolStripMenuItem exitDiscardingChangesToolStripMenuItem;
		public System.Windows.Forms.ComboBox AudioStretchAttrCombo;
		public System.Windows.Forms.FlowLayoutPanel flowLayoutPanel10;
		public System.Windows.Forms.CheckBox AudioLockStretchPitchCheck;
		public System.Windows.Forms.CheckBox AudioReserveFormantCheck;
		public System.Windows.Forms.Label AudioStretchAttrLbl;
		public System.Windows.Forms.Label AudioPreviewLbl;
		public System.Windows.Forms.Label AudioLockAttrLbl;
		public System.Windows.Forms.TableLayoutPanel toolsTableLayoutPanel;
		public System.Windows.Forms.GroupBox AutoLayoutTracksGroup;
		public System.Windows.Forms.TableLayoutPanel tableLayoutPanel14;
		public System.Windows.Forms.Label AutoLayoutTracksSelectInfo;
		public System.Windows.Forms.Label AutoLayoutTracksLbl;
		public System.Windows.Forms.TableLayoutPanel AutoLayoutTracksButtons;
		public System.Windows.Forms.Button GradientTracksBtn;
		public System.Windows.Forms.Button AutoLayoutTracksBox3dBtn;
		public System.Windows.Forms.Button AutoLayoutTracksGridBtn;
		public System.Windows.Forms.TableLayoutPanel AutoLayoutTracksClearButtons;
		public System.Windows.Forms.Button ClearTrackMotionBtn;
		public System.Windows.Forms.Button ClearTrackEffectBtn;
		public System.Windows.Forms.TableLayoutPanel tableLayoutPanel19;
		public System.Windows.Forms.Label HelperLbl;
		public System.Windows.Forms.GroupBox YtpParamsGroup;
		public System.Windows.Forms.TableLayoutPanel tableLayoutPanel16;
		public NumericUpDownWithUnit YtpClipsCountBox;
		public System.Windows.Forms.Label YtpClipsCountLbl;
		public NumericUpDownWithUnit YtpMaxLenBox;
		public NumericUpDownWithUnit YtpMinLenBox;
		public System.Windows.Forms.Label YtpMinLenLbl;
		public System.Windows.Forms.Label YtpMaxLenLbl;
		public System.Windows.Forms.GroupBox YtpEffectsGroup;
		public System.Windows.Forms.CheckBox YtpEnableAllEffectsCheck;
		public System.Windows.Forms.CheckedListBox YtpEffectsCheckList;
		public System.Windows.Forms.Label YtpLbl;
		public System.Windows.Forms.GroupBox StaffNotesParamsGroup;
		public System.Windows.Forms.TableLayoutPanel tableLayoutPanel10;
		public NumericUpDownWithUnit StaffNotesShiftBox;
		public NumericUpDownWithUnit StaffSurfacePositionBox;
		public NumericUpDownWithUnit StaffSurfacePaddingLeftBox;
		public System.Windows.Forms.Label StaffSurfacePaddingLeftLbl;
		public System.Windows.Forms.Label StaffSurfacePositionLbl;
		public System.Windows.Forms.Label StaffClefLbl;
		public System.Windows.Forms.Label StaffLineSpacingLbl;
		public System.Windows.Forms.ComboBox StaffClefCombo;
		public NumericUpDownWithUnit StaffLineSpacingBox;
		public System.Windows.Forms.Label StaffNotesShiftLbl;
		public System.Windows.Forms.FlowLayoutPanel flowLayoutPanel8;
		public System.Windows.Forms.CheckBox StaffVisualizerConfigCheck;
		public System.Windows.Forms.Label SheetConfigInfoLabel;
		public System.Windows.Forms.FlowLayoutPanel AudioPreviewAttrLayoutPanel;
		public System.Windows.Forms.ComboBox PreviewBeepWaveFormCombo;
		public NumericUpDownWithUnit PreviewBeepDurationBox;
		public System.Windows.Forms.CheckBox PreviewTuneAudioCheck;
		public System.Windows.Forms.Label AudioPreviewAttrLbl;
		public CommandLinkButton QuickSelectIntervalBtn;
		public CommandLinkButton ReplaceClipsBtn;
		public CommandLinkButton ChangeTuneMethodBtn;
		public System.Windows.Forms.ToolStripMenuItem whyOkBtnIsDisabledToolStripMenuItem;
		public System.Windows.Forms.ToolStripMenuItem checkUpdateToolStripMenuItem;
		public System.Windows.Forms.ToolStripMenuItem versionToolStripMenuItem;
		public System.Windows.Forms.Label YtpSelectInfo;
		public System.Windows.Forms.CheckBox CloseAfterOpenHelperCheck;
		public System.Windows.Forms.Button TrackLegatoBtn;
		public System.Windows.Forms.ContextMenuStrip TrackLegatoMenu;
		public System.Windows.Forms.ToolStripMenuItem stackingTracksToolStripMenuItem;
		public System.Windows.Forms.ToolStripMenuItem limitStretchLegatoTracksToolStripMenuItem;
		public System.Windows.Forms.ToolStripMenuItem stretchLegatoTracksToolStripMenuItem;
		public System.Windows.Forms.ToolStripMenuItem lengthenLegatoToolStripMenuItem;
		public System.Windows.Forms.TableLayoutPanel tableLayoutPanel12;
		public System.Windows.Forms.Label MidiBeatLbl;
		public System.Windows.Forms.Label MidiBeatTxt;
		public System.Windows.Forms.ComboBox PreviewBeepEngineCombo;
		public System.Windows.Forms.FlowLayoutPanel flowLayoutPanel2;
		public GroupedRadioButton MidiCustomBpmCheck;
		public NumericUpDownWithUnit MidiCustomBpmBox;
		public System.Windows.Forms.FlowLayoutPanel flowLayoutPanel11;
		public GroupedRadioButton GenerateAtCustomRadio;
		public System.Windows.Forms.TextBox GenerateAtCustomText;
		public System.Windows.Forms.FlowLayoutPanel MidiDynamicTempoFlow;
		public GroupedRadioButton MidiDynamicMidiBpmCheck;
		public System.Windows.Forms.ComboBox MidiDynamicMidiBpmFormCombo;
		public System.Windows.Forms.ToolStripMenuItem pitchShiftPresetMenuItem;
		public System.Windows.Forms.ToolStripMenuItem loadPresetsToolStripMenuItem;
		public System.Windows.Forms.ToolStripMenuItem unloadPresetsToolStripMenuItem;
		public System.Windows.Forms.ToolStripSeparator toolStripSeparator1;
		public System.Windows.Forms.ToolStripMenuItem formSizeToolStripMenuItem;
		public System.Windows.Forms.CheckBox CreateEventGroupInAudioCheck;
		public CommandLinkButton BatchSubtitleGenerationBtn;
		public CommandLinkButton FindClipsBtn;
		public CommandLinkButton QuickNormalizeBtn;
		public System.Windows.Forms.ToolStripMenuItem restoreDefaultFormSizeToolStripMenuItem;
		public System.Windows.Forms.ToolStripMenuItem rememberFormSizeToolStripMenuItem;
		public System.Windows.Forms.ToolStripSeparator toolStripSeparator2;
		public RememberedCheckBox VideoMultitrackForChordsCheck;
		public System.Windows.Forms.ToolStripMenuItem rememberOnceFormSizeToolStripMenuItem;
		public System.Windows.Forms.ToolStripMenuItem updateLogsToolStripMenuItem;
		public System.Windows.Forms.ToolStripSeparator toolStripSeparator3;
		public System.Windows.Forms.ToolStripMenuItem englishDocumentationsToolStripMenuItem;
		public System.Windows.Forms.ToolStripMenuItem documentationEnglishToolStripMenuItem;
		public System.Windows.Forms.ToolStripMenuItem tutorialVideoEnglishToolStripMenuItem;
		public System.Windows.Forms.ToolStripMenuItem chineseDocumentationsToolStripMenuItem;
		public System.Windows.Forms.ToolStripMenuItem troubleShootingToolStripMenuItem;
		public System.Windows.Forms.ToolStripSeparator toolStripSeparator4;
		public System.Windows.Forms.ToolStripMenuItem releaseNotesV4_9_25_0ToolStripMenuItem;
		public System.Windows.Forms.ToolStripMenuItem releaseNotesV4_10_17_0ToolStripMenuItem;
		public System.Windows.Forms.ToolStripSeparator toolStripSeparator5;
		public System.Windows.Forms.ToolStripMenuItem documentationV0_1ToolStripMenuItem;
		public System.Windows.Forms.ToolStripMenuItem staffVisualizerV0_1ToolStripMenuItem;
		public System.Windows.Forms.ToolStripMenuItem tutorialVideoV0_1ToolStripMenuItem;
		public System.Windows.Forms.ToolStripMenuItem roadmapToolStripMenuItem;
		public IntegerTrackWithBox VideoEndContrastBox;
		public IntegerTrackWithBox VideoEndSaturationBox;
		public IntegerTrackWithBox VideoEndHueBox;
		public IntegerTrackWithBox VideoEndThresholdBox;
		public IntegerTrackWithBox VideoStartContrastBox;
		public IntegerTrackWithBox VideoStartSaturationBox;
		public IntegerTrackWithBox VideoStartThresholdBox;
		public IntegerTrackWithBox VideoStartHueBox;
		public System.Windows.Forms.Label VideoStartThresholdLbl;
		public System.Windows.Forms.Label VideoEndThresholdLbl;
		public System.Windows.Forms.Label VideoEndSaturationLbl;
		public System.Windows.Forms.Label VideoEndContrastLbl;
		public System.Windows.Forms.Label VideoStartContrastLbl;
		public System.Windows.Forms.Label VideoStartHueLbl;
		public System.Windows.Forms.Label VideoStartSaturationLbl;
		public System.Windows.Forms.Label VideoEndHueLbl;
		public System.Windows.Forms.ComboBox VideoStartContrastCurveCombo;
		public System.Windows.Forms.ComboBox VideoStartHueCurveCombo;
		public System.Windows.Forms.TableLayoutPanel tableLayoutPanel5;
		public System.Windows.Forms.ComboBox MidiChannelCombo;
		public System.Windows.Forms.Button MidiChannelAdvancedBtn;
		public System.Windows.Forms.GroupBox StaffLinesParamsGroup;
		public System.Windows.Forms.TableLayoutPanel tableLayoutPanel7;
		public System.Windows.Forms.CheckBox StaffGenerateLinesCheck;
		public Otomad.VegasScript.OtomadHelper.V4.ColorButton StaffLineColorBtn;
		public System.Windows.Forms.Label StaffLineColorLbl;
		public NumericUpDownWithUnit StaffLineThicknessBox;
		public System.Windows.Forms.Label StaffLineThicknessLbl;
		public System.Windows.Forms.ComboBox VideoStartThresholdCurveCombo;
		public System.Windows.Forms.ComboBox VideoStartSaturationCurveCombo;
		public System.Windows.Forms.CheckBox StaffRelativeValueCheck;
		public System.Windows.Forms.CheckBox StaffLegacyMethodCheck;
		public System.Windows.Forms.FlowLayoutPanel flowLayoutPanel4;
		public System.Windows.Forms.ToolStripMenuItem experimentalThemeToolStripMenuItem;
		public System.Windows.Forms.FlowLayoutPanel AudioComboPanel;
		public System.Windows.Forms.Label AudioLegatoLbl;
		public System.Windows.Forms.ComboBox AudioLegatoCombo;
		public System.Windows.Forms.FlowLayoutPanel VideoComboPanel;
		public System.Windows.Forms.Label VideoLegatoLbl;
		public System.Windows.Forms.ComboBox VideoLegatoCombo;
		public System.Windows.Forms.ToolStripMenuItem checkUpdateOnStartupToolStripMenuItem;
		public System.Windows.Forms.ToolStripMenuItem latestVersionLinkToolStripMenuItem;
		public System.Windows.Forms.ToolStripSeparator toolStripSeparator8;
		public System.Windows.Forms.ContextMenuStrip QuickConfigMidiChannelsMenu;
		public System.Windows.Forms.ToolStripMenuItem quickConfigMidiChannelsToolStripMenuItem;
		public System.Windows.Forms.ToolStripMenuItem latestVersionToolStripMenuItemInBar;
		public System.Windows.Forms.ToolStripMenuItem githubIssuesToolStripMenuItem;
		public System.Windows.Forms.ToolStripSeparator toolStripSeparator9;
		public System.Windows.Forms.ToolStripMenuItem effectToSelectedEventsToolStripMenuItem;
		public System.Windows.Forms.ToolStripMenuItem trackLegatoSelectInfoToolStripMenuItem;
		public System.Windows.Forms.GroupBox StaffClefParamsGroup;
		public System.Windows.Forms.TableLayoutPanel tableLayoutPanel2;
		public System.Windows.Forms.CheckBox StaffGenerateClefCheck;
		public Otomad.VegasScript.OtomadHelper.V4.ColorButton StaffClefColorBtn;
		public System.Windows.Forms.Label StaffClefColorLbl;
		public NumericUpDownWithUnit StaffClefScaleBox;
		public System.Windows.Forms.Label StaffClefScaleLbl;
		public System.Windows.Forms.CheckBox StaffFreezeAtNoteOffCheck;
		public NumericUpDownWithUnit StaffSurfacePaddingRightBox;
		public System.Windows.Forms.Label StaffSurfacePaddingRightLbl;
		public System.Windows.Forms.ToolStripMenuItem increaseSpacingToolStripMenuItem;
		public System.Windows.Forms.ToolStripSeparator toolStripSeparator10;
		public System.Windows.Forms.ToolStripMenuItem includeEventsInGroupToolStripMenuItem;
		public System.Windows.Forms.ToolTip OverflowToolTip;
		public System.Windows.Forms.ToolStripMenuItem stackingAllAfterTracksToolStripMenuItem;
		public System.Windows.Forms.ToolStripMenuItem stackingAllTracksTracksToolStripMenuItem;
		public System.Windows.Forms.ToolStripMenuItem reverseDirectionToolStripMenuItem;
		public System.Windows.Forms.ToolStripMenuItem increaseSpacingAllTracksToolStripMenuItem;
		public System.Windows.Forms.TextBox AudioFadeOutTimeTxt;
		public System.Windows.Forms.TextBox AudioFadeInTimeTxt;
		public System.Windows.Forms.TextBox VideoFadeInTimeTxt;
		public System.Windows.Forms.TextBox VideoFadeOutTimeTxt;
		public System.Windows.Forms.Button VideoParamsPresetsBtn;
		public System.Windows.Forms.TableLayoutPanel tableLayoutPanel9;
		public System.Windows.Forms.RadioButton VideoFadeSetAsTimecodeRadio;
		public System.Windows.Forms.RadioButton VideoFadeSetAsPercentRadio;
		public CommandLinkButton ApplyVisualEffectBtn;
		public System.Windows.Forms.Button VisualEffectAdvancedBtn;
		public System.Windows.Forms.TabPage SonarTab;
		public System.Windows.Forms.TableLayoutPanel tableLayoutPanel11;
		public System.Windows.Forms.FlowLayoutPanel SonarSwitchesFlow;
		public RememberedCheckBox SonarConfigCheck;
		public System.Windows.Forms.CheckBox DifferenceCompositeModeCheck;
		public System.Windows.Forms.CheckBox SeparateDrumsCheck;
		public System.Windows.Forms.ListView SonarList;
		public System.Windows.Forms.ColumnHeader SonarNameHeader;
		public System.Windows.Forms.ColumnHeader SonarShapeHeader;
		public System.Windows.Forms.TableLayoutPanel SonarButtonsTable;
		public System.Windows.Forms.Button SonarAddBtn;
		public System.Windows.Forms.Button SonarDeleteBtn;
		public System.Windows.Forms.Button SonarResetBtn;
		public System.Windows.Forms.GroupBox SonarParamsGroup;
		public System.Windows.Forms.Panel SonarParamsPanel;
		public System.Windows.Forms.TableLayoutPanel tableLayoutPanel15;
		public System.Windows.Forms.Label SonarShapeLbl;
		public System.Windows.Forms.Label SonarDrumSoundLbl;
		public System.Windows.Forms.ComboBox SonarShapeCombo;
		public System.Windows.Forms.ComboBox SonarDrumSoundCombo;
		public NumericUpDownWithUnit SonarFadeOutBox;
		public System.Windows.Forms.Label SonarFadeOutLbl;
		public NumericUpDownWithUnit SonarFadeInBox;
		public System.Windows.Forms.Label SonarFadeInLbl;
		public System.Windows.Forms.ComboBox SonarCurveCombo;
		public System.Windows.Forms.Label SonarCurveLbl;
		public NumericUpDownWithUnit SonarRotationBox;
		public System.Windows.Forms.Label SonarRotationLbl;
		public NumericUpDownWithUnit SonarYOffsetBox;
		public System.Windows.Forms.Label SonarYOffsetLbl;
		public NumericUpDownWithUnit SonarXOffsetBox;
		public System.Windows.Forms.Label SonarXOffsetLbl;
		public NumericUpDownWithUnit SonarYPosBox;
		public System.Windows.Forms.Label SonarYPosLbl;
		public NumericUpDownWithUnit SonarXPosBox;
		public System.Windows.Forms.Label SonarXPosLbl;
		public NumericUpDownWithUnit SonarSizeBox;
		public System.Windows.Forms.Label SonarSizeLbl;
		public System.Windows.Forms.Label SonarBorderLbl;
		public System.Windows.Forms.Label SonarColorLbl;
		public ColorButton SonarColorBtn;
		public NumericUpDownWithUnit SonarBorderBox;
		public System.Windows.Forms.Label SonarDurationLbl;
		public System.Windows.Forms.TextBox SonarDurationTxt;
		public System.Windows.Forms.Button SonarMoveDownBtn;
		public System.Windows.Forms.Button SonarMoveUpBtn;
		public System.Windows.Forms.ColumnHeader SonarDurationHeader;
		public NumericUpDownWithUnit SonarRotation2Box;
		public System.Windows.Forms.Label SonarRotation2Lbl;
		public NumericUpDownWithUnit SonarYPreOffset2Box;
		public NumericUpDownWithUnit SonarXPreOffset2Box;
		public NumericUpDownWithUnit SonarYPreOffsetBox;
		public NumericUpDownWithUnit SonarXPreOffsetBox;
		public System.Windows.Forms.Label SonarYPreOffset2Lbl;
		public System.Windows.Forms.Label SonarXPreOffset2Lbl;
		public System.Windows.Forms.Label SonarYPreOffsetLbl;
		public System.Windows.Forms.Label SonarXPreOffsetLbl;
		public NumericUpDownWithUnit SonarYOffset2Box;
		public NumericUpDownWithUnit SonarXOffset2Box;
		public System.Windows.Forms.Label SonarYOffset2Lbl;
		public System.Windows.Forms.Label SonarXOffset2Lbl;
		public NumericUpDownWithUnit SonarEndSizeBox;
		public NumericUpDownWithUnit SonarEndBorderBox;
		public System.Windows.Forms.Label SonarEndSizeLbl;
		public System.Windows.Forms.Label SonarEndBorderLbl;
		public System.Windows.Forms.Label SonarFadeOutCurveLbl;
		public System.Windows.Forms.Label SonarFadeInCurveLbl;
		public System.Windows.Forms.ComboBox SonarFadeOutCurveCombo;
		public System.Windows.Forms.ComboBox SonarFadeInCurveCombo;
		public System.Windows.Forms.CheckBox TrackShadowCheck;
		public System.Windows.Forms.GroupBox AudioVelocityGroup;
		public System.Windows.Forms.TableLayoutPanel tableLayoutPanel13;
		public System.Windows.Forms.Label AudioGainTildeLbl;
		public System.Windows.Forms.Label AudioVelocityTildeLbl;
		public NumericUpDownWithUnit AudioGainMoreBox;
		public NumericUpDownWithUnit AudioGainLessBox;
		public NumericUpDownWithUnit AudioVelocityMoreBox;
		public System.Windows.Forms.Label AudioGainLbl;
		public System.Windows.Forms.Label AudioVelocityLbl;
		public System.Windows.Forms.CheckBox AudioVelocityCheck;
		public NumericUpDownWithUnit AudioVelocityLessBox;
		public System.Windows.Forms.CheckBox AudioAutoPanCheck;
		public System.Windows.Forms.GroupBox VideoVelocityGroup;
		public System.Windows.Forms.TableLayoutPanel tableLayoutPanel18;
		public System.Windows.Forms.Label VideoGainTildeLbl;
		public System.Windows.Forms.Label VideoVelocityTildeLbl;
		public NumericUpDownWithUnit VideoGainMoreBox;
		public NumericUpDownWithUnit VideoGainLessBox;
		public NumericUpDownWithUnit VideoVelocityMoreBox;
		public NumericUpDownWithUnit VideoVelocityLessBox;
		public System.Windows.Forms.Label VideoGainLbl;
		public System.Windows.Forms.Label VideoVelocityLbl;
		public System.Windows.Forms.CheckBox VideoVelocityCheck;
		public System.Windows.Forms.FlowLayoutPanel flowLayoutPanel15;
		public ColorButton TrackShadowColorBtn;
		public System.Windows.Forms.ComboBox AudioAutoPanCurveCombo;
		public System.Windows.Forms.FlowLayoutPanel AudioAutoPanFlow;
		public CommandLinkButton ConvertMusicBeatsBtn;
		public System.Windows.Forms.ToolStripMenuItem exportConfigToolStripMenuItem;
		public System.Windows.Forms.ToolStripMenuItem importConfigToolStripMenuItem;
		public System.Windows.Forms.ToolStripSeparator toolStripSeparator11;
		public System.Windows.Forms.TabPage MoshTab;
		public System.Windows.Forms.TableLayoutPanel DatamoshNotInstalledTable;
		public System.Windows.Forms.Label DatamoshNotInstalledInfo;
		public System.Windows.Forms.LinkLabel DownloadDatamoshLink;
		public System.Windows.Forms.TableLayoutPanel DatamoshTable;
		public System.Windows.Forms.CheckBox CloseAfterOpenMoshCheck;
		public System.Windows.Forms.GroupBox DatamoshClipsFolderGroup;
		public System.Windows.Forms.TableLayoutPanel tableLayoutPanel21;
		public System.Windows.Forms.TextBox DatamoshClipsFolderTxt;
		public System.Windows.Forms.Button DatamoshClipsFolderButton;
		public CommandLinkButton DatamoshBtn;
		public CommandLinkButton DatamixBtn;
		public CommandLinkButton LayeringBtn;
		public CommandLinkButton RenderingBtn;
		public CommandLinkButton ScrambleBtn;
		public CommandLinkButton AutomatorBtn;
		public System.Windows.Forms.Button DatamoshClipsFolderOpenButton;
		public CommandLinkButton StutterBtn;
		public System.Windows.Forms.Label AudioScratchLbl;
		public System.Windows.Forms.ComboBox AudioScratchCombo;
		public System.Windows.Forms.Label VideoScratchLbl;
		public System.Windows.Forms.ComboBox VideoScratchCombo;
		public CommandLinkButton CustomFadeGainBtn;
		public System.Windows.Forms.CheckBox AudioMultitrackForChordsCheck;
		public System.Windows.Forms.Label DatamoshClipsFolderInfo;
		public System.Windows.Forms.Label DatamoshInfoLbl;
		public System.Windows.Forms.ToolStripMenuItem enableLegacyProgressDialogToolStripMenuItem;
		public System.Windows.Forms.ToolStripSeparator toolStripSeparator12;
		public CommandLinkButton CameraShakeBtn;
		public System.Windows.Forms.TableLayoutPanel tableLayoutPanel20;
		public System.Windows.Forms.RadioButton AudioFadeSetAsPercentRadio;
		public System.Windows.Forms.RadioButton AudioFadeSetAsTimecodeRadio;
		public System.Windows.Forms.CheckBox CreateEventGroupInVideoCheck;
		public ToolStripRadioButtonMenuItem vietnameseToolStripMenuItem;
		public System.Windows.Forms.Label RestrictLengthLbl;
		public System.Windows.Forms.FlowLayoutPanel RestrictLengthFlow;
		public GroupedRadioButton UnrestrictLengthRadio;
		public GroupedRadioButton RestrictMaxLengthRadio;
		public GroupedRadioButton RestrictFixedLengthRadio;
		public TimecodeBox RestrictLengthBox;
		public System.Windows.Forms.FlowLayoutPanel VideoGlissandoFlow;
		public RememberedCheckBox VideoGlissandoCheck;
		public System.Windows.Forms.NumericUpDown VideoGlissandoBox;
		public System.Windows.Forms.TableLayoutPanel VideoPreferredTrackPanel;
		public System.Windows.Forms.Label VideoPreferredTrackLbl;
		public System.Windows.Forms.ComboBox VideoPreferredTrackCombo;
		public System.Windows.Forms.TableLayoutPanel AudioPreferredTrackPanel;
		public System.Windows.Forms.Label AudioPreferredTrackLbl;
		public System.Windows.Forms.ComboBox AudioPreferredTrackCombo;
		public System.Windows.Forms.CheckBox BelowTopAdjustmentTrackCheck;
		public RememberedCheckBox RemoveSourceTrackEventsCheck;
		public System.Windows.Forms.CheckBox SelectAllGeneratedEventsCheck;
		public System.Windows.Forms.FlowLayoutPanel flowLayoutPanel5;
		public ToolStripRadioButtonMenuItem indonesianToolStripMenuItem;
		public System.Windows.Forms.Panel panel2;
	}
	#endregion

	public partial class ConfigForm : Form, IConfigIniUser, IInterpret {
		public bool AcceptConfig = false;
		public static Icon icon;
		#if VEGAS_ENVIRONMENT
		public ConfigIni configIni { get { return parent.configIni; } set { parent.configIni = value; } }
		public readonly EntryPoint parent;
		private Vegas vegas { get { return parent.vegas; } }
		public readonly Timecode originalCursorPosition;
		public bool IsGenerateYtp = false;
		private bool RequireSaveIni = true;
		public readonly string ScriptPath;
		private string browseClipName = "";
		private bool openReplaceClipDirectly = false;
		private bool isAlertedUnsupport = false;
		private Thread checkUpdateThread;
		private bool enableGridLayoutForTracks = true;
		private bool enableGradientForTracks = true;
		#endif

		/// <summary>
		/// ConfigForm 脚本对话框窗体的入口方法。
		/// </summary>
		/// <param name="entryPoint">调用本对象的父对象，也就是 Vegas 脚本的入口类</param>
		public ConfigForm(EntryPoint entryPoint) {
			this.EnableDoubleBuffer();
			InitializeComponent();
			parent = entryPoint;
			originalCursorPosition = vegas.Transport.CursorPosition;
			this.ReserveSystemMenuItems(SystemMenuItemType.MOVE | SystemMenuItemType.SIZE | SystemMenuItemType.CLOSE);

			#region 国际化
			ScriptPath = Script.File;
			configIni = new ConfigIni(Path.r(
				vegas.GetApplicationDataPath(Environment.SpecialFolder.ApplicationData),
				new Path(ScriptPath) { Extension = "ini" }.FullFileName
			).FullPath, this);
			GetSystemLanguage();
			try {
				LanguageBackup = Language = configIni.Read("Language", "", "Personalize");
			} catch (Exception) { }
			#if INTERNATIONALIZED
			Translate();
			#endif
			#endregion

			#region 检查版本支持情况
			if (!isAlertedUnsupport && parent.Supported == SupportVegasVersionState.UNSUPPORTED) {
				EntryPoint.AlertUnsupportVersion();
				isAlertedUnsupport = true;
			}
			if (EntryPoint.CurrentVegasVersion == null || // 当获取当前版本号为未知时。
				EntryPoint.CurrentVegasVersion < new Version(19, 0))
				BelowTopAdjustmentTrackCheck.Checked = BelowTopAdjustmentTrackCheck.Enabled = false;
			#endregion

			#region MIDI 速度控制点击事件
			MidiCustomBpmCheck.CheckedChanged += (sender, e) => { MidiCustomBpmBox.Enabled = MidiCustomBpmCheck.Checked; };
			GenerateAtCustomRadio.CheckedChanged += (sender, e) => { GenerateAtCustomText.Enabled = GenerateAtCustomRadio.Checked; };
			UnrestrictLengthRadio.CheckedChanged += (sender, e) => { RestrictLengthBox.Enabled = !UnrestrictLengthRadio.Checked; };
			MidiProjectBpmCheck.Text = Lang.str.midi_project_bpm + Lang.str.colon + ProcessBpmDouble(parent.ProjectBpm);
			MidiCustomBpmBox.Value = (decimal)Math.Max(parent.ProjectBpm, (double)MidiCustomBpmBox.Minimum);
			GenerateAtBeginRadio.Text = Lang.str.generate_at_begin + Lang.str.colon + Timecode.FromMilliseconds(0).ToPositionString();
			GenerateAtCursorRadio.Text = Lang.str.generate_at_cursor + Lang.str.colon + vegas.Transport.CursorPosition.ToPositionString();
			#endregion

			#region 浏览并打开媒体文件
			parent.audioVideoEnabledTable = new EntryPoint.AudioVideoEnabledTable(parent);
			ChooseSourceCombo_InitSourceNames();
			ChooseSourceCombo_SelectedIndexChanged(null, null);
			HelperSelectedCount();
			#endregion

			#region 菜单选项
			saveConfigToolStripMenuItem.Click += (sender, e) => SaveIni();
			exitToolStripMenuItem.Click += new EventHandler(CancelBtn_Click);
			aboutToolStripMenuItem.Click += new EventHandler(AboutBtn_Click);
			DownloadDatamoshLink.Click += (sender, e) => OpenLink(Links.GITHUB_DATAMOSH_EXTPACK);
			BindMenuLink(latestVersionLinkToolStripMenuItem, Links.GITHUB_LATEST);
			BindMenuLink(latestVersionToolStripMenuItemInBar, Links.GITHUB_LATEST);
			BindMenuLink(githubToolStripMenuItem, Links.REPOSITORY);
			BindMenuLink(roadmapToolStripMenuItem, Links.ROADMAP);
			BindMenuLink(githubIssuesToolStripMenuItem, Links.GITHUB_ISSUES);
			BindMenuLink(updateLogsToolStripMenuItem, Links.UPDATE_LOGS);
			BindMenuLink(documentationEnglishToolStripMenuItem, Links.DOCUMENTATION_ENGLISH);
			BindMenuLink(tutorialVideoEnglishToolStripMenuItem, Links.TUTORIAL_VIDEO_ENGLISH);
			BindMenuLink(troubleShootingToolStripMenuItem, Links.TROUBLE_SHOOTING);
			BindMenuLink(releaseNotesV4_9_25_0ToolStripMenuItem, Links.RELEASE_NOTES_V4_9_25_0);
			BindMenuLink(releaseNotesV4_10_17_0ToolStripMenuItem, Links.RELEASE_NOTES_V4_10_17_0);
			BindMenuLink(documentationV0_1ToolStripMenuItem, Links.DOCUMENTATION_V0_1);
			BindMenuLink(staffVisualizerV0_1ToolStripMenuItem, Links.STAFF_VISUALIZER_DOCUMENTATION_V0_1);
			BindMenuLink(tutorialVideoV0_1ToolStripMenuItem, Links.TUTORIAL_VIDEO_V0_1);

			foreach (ToolStripItem item in languageToolStripMenuItem.DropDownItems)
				item.Click += new EventHandler(LanguageStripMenuItem_Click);
			TrackLegatoMenu.Renderer = menu.Renderer = new Windows10StyledContextMenuStripRenderer();
			QuickConfigMidiChannelsMenu.Renderer = menu.Renderer = new Windows10StyledContextMenuStripRenderer();
			#endregion

			#region 复选框设置、下拉菜单默认值
			{
				EventHandler e = new EventHandler(SetCheckedEnabled);
				VideoConfigCheck.CheckedChanged += e;
				AudioConfigCheck.CheckedChanged += e;
				StaffVisualizerConfigCheck.CheckedChanged += e;
				StaffGenerateLinesCheck.CheckedChanged += e;
				StaffGenerateClefCheck.CheckedChanged += e;
				AudioTuneMethodCombo.SelectedIndexChanged += e;
				AudioStretchAttrCombo.SelectedIndexChanged += e;
				AudioLockStretchPitchCheck.CheckedChanged += e;
				VideoEffectCombo.SelectedIndexChanged += e;
				Tabs.SelectedIndexChanged += e;
				PreviewBeepEngineCombo.SelectedIndexChanged += e;
				SonarConfigCheck.CheckedChanged += e;
				MidiChannelCombo.SelectedIndexChanged += e;
				AudioVelocityCheck.CheckedChanged += e;
				VideoVelocityCheck.CheckedChanged += e;
				AudioAutoPanCheck.CheckedChanged += e;
				VideoGlissandoCheck.CheckedChanged += e;
				TrackShadowCheck.CheckedChanged += e;
			}
			AudioMainKeyCombo.MouseWheel += AudioMainKeyCombo_MouseWheel;
			SourceConfigGroup.AllowDrop = MidiConfigGroup.AllowDrop = true;
			VideoEffectCombo.MaxDropDownItems = 50;
			MidiChannelCombo.DisplayMember = "DisplayValue"; // 本脚本基于 bug 运行。
			SonarList_SelectedIndexChanged(null, null);
			SonarList_SelectedIndexChanged_Timer.Tick += SonarList_SelectedIndexChanged_Timer_Tick;
			#if VEGAS_ENVIRONMENT
			((Action)ReadIni).OnErrorBreak();
			#endif
			#endregion

			#region 加载项目轨道信息
			List<AudioTrack> audioTracks = vegas.Project.Tracks.Where(track => track.MediaType == MediaType.Audio).Cast<AudioTrack>().ToList();
			List<VideoTrack> videoTracks = vegas.Project.Tracks.Where(track => track.MediaType == MediaType.Video).Cast<VideoTrack>().ToList();
			AudioPreferredTrackCombo.Items.Add(new PreferredNewTrackWrapper(Lang.str.new_track));
			VideoPreferredTrackCombo.Items.Add(new PreferredNewTrackWrapper(Lang.str.new_track));
			AudioPreferredTrackCombo.SelectedIndex = VideoPreferredTrackCombo.SelectedIndex = 0;
			Func<Track, string> GetTrackDisplayValue = track => {
				Lang str = Lang.str;
				string result = str.track + " " + (track.Index + 1);
				if (!string.IsNullOrWhiteSpace(track.Name)) result += str.colon + track.Name.Trim();
				return result;
			};
			audioTracks.ForEach(track => AudioPreferredTrackCombo.Items.Add(new PreferredTrackWrapper<AudioTrack>(track, GetTrackDisplayValue(track))));
			videoTracks.ForEach(track => VideoPreferredTrackCombo.Items.Add(new PreferredTrackWrapper<VideoTrack>(track, GetTrackDisplayValue(track))));
			RemoveSourceTrackEventsCheck_CheckedChanged(null, null);
			#endregion

			#region 预听音频计时器
			previewAudioTimer = new System.Windows.Forms.Timer { Interval = 1000 };
			previewAudioTimer.Tick += PreviewAudioTimer_Tick;
			#endregion

			#region 数据抹失
			Path internalPath = new Path(ScriptPath);
			internalPath.UpOneLevel();
			internalPath.Add("_internal");
			if (!Directory.Exists(internalPath.FullPath))
				DatamoshBtn.Enabled = DatamixBtn.Enabled = false;
			else
				DatamoshNotInstalledTable.Visible = false;
			string datamoshFolder = (string)Registry.GetValue(Datamosh.Template.DataPath, "ClipFolder", "");
			if (!(string.IsNullOrEmpty(datamoshFolder) || !Directory.Exists(datamoshFolder)))
				DatamoshClipsFolderTxt.Text = datamoshFolder;
			#endregion

			#region 优化界面颜色和外观
			YtpEffectsCheckList.BackColor = YtpEffectsCheckList.Parent.BackColor;
			List<Label>[] labels = { new List<Label>(), new List<Label>() };
			int[] maxSheetTabLabelWidth = { 0, 0 };
			foreach (Control control_i in SheetTab.Controls)
				if (control_i is GroupBox)
					foreach (Control control_j in control_i.Controls)
						if (control_j is TableLayoutPanel)
							foreach (Control control_k in control_j.Controls)
								if (control_k is Label) {
									Label label = control_k as Label;
									int column = (control_j as TableLayoutPanel).GetColumn(label);
									int i = column == 0 ? 0 : column == 2 ? 1 : -1;
									if (i == -1) continue;
									labels[i].Add(label);
									if (label.Width > maxSheetTabLabelWidth[i])
										maxSheetTabLabelWidth[i] = label.Width;
								}
			for (int i = 0; i < labels.Length; i++)
				foreach (Label label in labels[i]) {
					Size minSize = label.MinimumSize;
					minSize.Width = maxSheetTabLabelWidth[i];
					label.MinimumSize = minSize;
				}
			if (Language != "ru") {
				int autoLayoutTracksButtonsMinCount = Math.Min(AutoLayoutTracksButtons.Controls.Count,
					AutoLayoutTracksClearButtons.Controls.Count);
				for (int i = 0; i < autoLayoutTracksButtonsMinCount; i++) {
					Control controlA = AutoLayoutTracksButtons.GetControlFromPosition(i, 0),
						controlB = AutoLayoutTracksClearButtons.GetControlFromPosition(i, 0);
					if (controlA == null || controlB == null) break;
					Size maxSize = new Size(Math.Max(controlA.Width, controlB.Width),
						Math.Max(controlA.Height, controlB.Height));
					controlA.MinimumSize = controlB.MinimumSize = maxSize;
				}
			}
			YtpEffectsCheckList.MinimumSize = new Size(0, YtpEnableAllEffectsCheck.Height * 5);
			#endregion

			#region 程序图标
			#if VEGAS_ENVIRONMENT
			try {
				//icon = Icon = Icon.ExtractAssociatedIcon(System.IO.Path.ChangeExtension(ScriptPath, "ico"));
				icon = Icon = new Icon(System.IO.Path.ChangeExtension(ScriptPath, "ico"), new Size(16, 16));
			} catch (Exception) { } // 如果路径不存在则不受影响
			#else
			icon = Icon = Properties.Resources.Otomad_Helper;
			#endif
			ConfigForm_Resize(null, null);
			#endregion

			#region 直接进入替换轨道素材页面
			if (openReplaceClipDirectly) {
				if (CloseAfterOpenHelperCheck.Checked) Opacity = 0;
				openReplaceClipDirectly = false;
				Load += OpenReplaceClipDirectlyEvent;
			}
			#endregion

			#region 检查更新
			CheckUpdate(false);
			#endregion
		}

		protected override CreateParams CreateParams { get { return base.CreateParams.DoubleBuffer(); } }

		private void OpenReplaceClipDirectlyEvent(object sender, EventArgs e) {
			ReadyToShowHelperDialog(ReplaceClipsBtn, null);
			Load -= OpenReplaceClipDirectlyEvent;
		}

		private void BindMenuLink(ToolStripMenuItem menu, string link) {
			menu.Click += (sender, e) => OpenLink(link);
		}

		public void ReadIni() {
			#region 音频配置
			configIni.StartSection("Audio");
			AudioScratchCombo.SetIndex(configIni.Read("Stretch", 0), 0);
			AudioLoopCheck.Checked = configIni.Read("Loop", false);
			AudioNormalizeCheck.Checked = configIni.Read("Normalize", true);
			AudioFreezeLastFrameCheck.Checked = configIni.Read("FreezeLastFrame", true);
			AudioLegatoCombo.SetIndex(configIni.Read("Legato", 0), 0);
			AudioAutoPanCheck.Checked = configIni.Read("AutoPan", true);
			AudioAutoPanCurveCombo.SetIndex(configIni.Read("AutoPanCurve", 5), 5);
			AudioMultitrackForChordsCheck.Checked = configIni.Read("MultitrackForChords", true);
			AudioVelocityCheck.Checked = configIni.Read("Velocity", false);
			AudioVelocityLessBox.SetValue(configIni.Read("VelocityLessVelocity", 0), 0);
			AudioVelocityMoreBox.SetValue(configIni.Read("VelocityMoreVelocity", 127), 127);
			AudioGainLessBox.SetValue(configIni.Read("VelocityLessGain", 0), 0);
			AudioGainMoreBox.SetValue(configIni.Read("VelocityMoreGain", 100), 100);
			AudioFadeInBox.SetValue(configIni.Read("FadeIn", 0m), 0m);
			AudioFadeOutBox.SetValue(configIni.Read("FadeOut", 0m), 0m);
			AudioFadeInTimeTxt.Text = configIni.Read("FadeInTimecode", Timecode.FromMilliseconds(0).ToString());
			AudioFadeOutTimeTxt.Text = configIni.Read("FadeOutTimecode", Timecode.FromMilliseconds(0).ToString());
			TimecodeText_Leave(AudioFadeInTimeTxt, null);
			TimecodeText_Leave(AudioFadeOutTimeTxt, null);
			if (configIni.Read("SetFadeByTimecode", false)) AudioFadeSetAsTimecodeRadio.Checked = true;
			else AudioFadeSetAsPercentRadio.Checked = true;
			AudioFadeInCurveCombo.SetIndex(configIni.Read("FadeInCurve", 1), 1);
			AudioFadeOutCurveCombo.SetIndex(configIni.Read("FadeOutCurve", 2), 2);
			SetBasePitchCombo(configIni.Read("BasePitch", "C5"));
			AudioTuneMethodCombo.SetIndex(configIni.Read("TuneMethod", 2), 2);
			AudioStretchAttrCombo.SetIndex(configIni.Read("StretchAttr", 1), 1);
			AudioLockStretchPitchCheck.Checked = configIni.Read("LockStretchPitch", false);
			AudioReserveFormantCheck.Checked = configIni.Read("ReserveFormant", false);
			CreateEventGroupInAudioCheck.Checked = configIni.Read("CreateEventGroup", true);
			configIni.EndSection();
			#endregion

			#region 视频配置
			configIni.StartSection("Video");
			VideoEffectCombo.SetIndex(configIni.Read("VisualEffect", 1), 1);
			selectedVisualEffectBackupIndex = VideoEffectCombo.SelectedIndex;
			VideoScratchCombo.SetIndex(configIni.Read("Stretch", 0), 0);
			VideoLoopCheck.Checked = configIni.Read("Loop", true);
			VideoFreezeFirstFrameCheck.Checked = configIni.Read("FreezeFirstFrame", false);
			VideoFreezeLastFrameCheck.Checked = configIni.Read("FreezeLastFrame", false);
			VideoLegatoCombo.SetIndex(configIni.Read("Legato", 1), 1);
			VideoMultitrackForChordsCheck.UserChecked = configIni.Read("MultitrackForChords", false);
			VideoGlissandoCheck.UserChecked = configIni.Read("VideoGlissando", true);
			VideoGlissandoBox.SetValue(configIni.Read("VideoGlissandoAmount", 12m), 12m);
			VideoVelocityCheck.Checked = configIni.Read("Velocity", false);
			VideoVelocityLessBox.SetValue(configIni.Read("VelocityLessVelocity", 0), 0);
			VideoVelocityMoreBox.SetValue(configIni.Read("VelocityMoreVelocity", 127), 127);
			VideoGainLessBox.SetValue(configIni.Read("VelocityLessGain", 0), 0);
			VideoGainMoreBox.SetValue(configIni.Read("VelocityMoreGain", 100), 100);
			VideoFadeInBox.SetValue(configIni.Read("FadeIn", 0m), 0m);
			VideoFadeOutBox.SetValue(configIni.Read("FadeOut", 0m), 0m);
			VideoFadeInTimeTxt.Text = configIni.Read("FadeInTimecode", Timecode.FromMilliseconds(0).ToString());
			VideoFadeOutTimeTxt.Text = configIni.Read("FadeOutTimecode", Timecode.FromMilliseconds(0).ToString());
			TimecodeText_Leave(VideoFadeInTimeTxt, null);
			TimecodeText_Leave(VideoFadeOutTimeTxt, null);
			if (configIni.Read("SetFadeByTimecode", false)) VideoFadeSetAsTimecodeRadio.Checked = true;
			else VideoFadeSetAsPercentRadio.Checked = true;
			VideoGlowBox.SetValue(configIni.Read("Glow", 0m), 0m);
			VideoGlowBrightBox.SetValue(configIni.Read("GlowBrightness", 100m), 100m);
			VideoStartSizeBox.SetValue(configIni.Read("StartSize", 90m), 90m);
			VideoEndSizeBox.SetValue(configIni.Read("EndSize", 100m), 100m);
			VideoStartRotationBox.SetValue(configIni.Read("StartRotation", 0m), 0m);
			VideoEndRotationBox.SetValue(configIni.Read("EndRotation", 0m), 0m);
			VideoStartHorizontalTransBox.SetValue(configIni.Read("StartHorizontalTrans", 0m), 0m);
			VideoEndHorizontalTransBox.SetValue(configIni.Read("EndHorizontalTrans", 0m), 0m);
			VideoStartVerticalTransBox.SetValue(configIni.Read("StartVerticalTrans", 0m), 0m);
			VideoEndVerticalTransBox.SetValue(configIni.Read("EndVerticalTrans", 0m), 0m);
			VideoStartHueBox.SetValue(configIni.Read("StartHue", 0m), 0m);
			VideoEndHueBox.SetValue(configIni.Read("EndHue", 0m), 0m);
			VideoStartSaturationBox.SetValue(configIni.Read("StartSaturation", 100m), 100m);
			VideoEndSaturationBox.SetValue(configIni.Read("EndSaturation", 100m), 100m);
			VideoStartContrastBox.SetValue(configIni.Read("StartContrast", 0m), 0m);
			VideoEndContrastBox.SetValue(configIni.Read("EndContrast", 0m), 0m);
			VideoStartThresholdBox.SetValue(configIni.Read("StartThreshold", 50m), 50m);
			VideoEndThresholdBox.SetValue(configIni.Read("EndThreshold", 50m), 50m);
			VideoStartSizeCurveCombo.SetIndex(configIni.Read("StartSizeCurve", 1), 1);
			VideoFadeInCurveCombo.SetIndex(configIni.Read("FadeInCurve", 3), 3);
			VideoFadeOutCurveCombo.SetIndex(configIni.Read("FadeOutCurve", 3), 3);
			VideoGlowCurveCombo.SetIndex(configIni.Read("GlowCurve", 1), 1);
			VideoStartHueCurveCombo.SetIndex(configIni.Read("StartHueCurve", 1), 1);
			VideoStartSaturationCurveCombo.SetIndex(configIni.Read("StartSaturationCurve", 1), 1);
			VideoStartContrastCurveCombo.SetIndex(configIni.Read("StartContrastCurve", 1), 1);
			VideoStartThresholdCurveCombo.SetIndex(configIni.Read("StartThresholdCurve", 1), 1);
			configIni.EndSection();
			#endregion

			#region 素材配置
			configIni.StartSection("Source");
			bool requireReadCustomValues = configIni.Read("LastProjectPath", "") == (vegas.Project.FilePath ?? "");
			GenerateAt = (GenerateAt)configIni.Read("GenerateAt", 0);
			GenerateAtCustomText.Text = configIni.Read("GenerateAtCustomValue", Timecode.FromMilliseconds(0).ToPositionString());
			GenerateAtCustomText_Leave(null, null);
			if (parent.SuggestSelectedSourceFrom == MediaSourceFrom.LAST_USER_PREFERENCE || parent.SuggestSelectedSourceFrom == MediaSourceFrom.NOTHING_SELECTED) {
				int lastMediaSourceFrom = configIni.Read("LastMediaSourceFrom", 2);
				if (lastMediaSourceFrom == 0 || lastMediaSourceFrom == 1) ChooseSourceCombo.SelectedIndex = lastMediaSourceFrom;
				else if (parent.SuggestSelectedSourceFrom != MediaSourceFrom.NOTHING_SELECTED) ChooseSourceCombo.SelectedIndex = (int)MediaSourceFrom.SELECTED_CLIP;
				else ChooseSourceCombo.SelectedIndex = (int)MediaSourceFrom.SELECTED_CLIP; // SELECTED_MEDIA;
			} else ChooseSourceCombo.SelectedIndex = (int)parent.SuggestSelectedSourceFrom;
			if (OpenMidiFile(configIni.Read("LastMidiFile", null), true)) {
				MidiChannelCombo.SetIndex(configIni.Read("LastMidiChannel", -1), -1);
				lastMidiChannelsChecked = configIni.Read("LastMidiChannelsChecked", "");
			} else RemoveLastMidiConfig();
			MidiDynamicMidiBpmFormCombo.SetIndex(configIni.Read("DynamicMidiBpmForm", 0), 0);
			MidiUseBpm_int = configIni.Read("MidiUseBpm", 0);
			if (requireReadCustomValues) MidiCustomBpmBox.SetValue(configIni.Read("MidiCustomBpm", -1m));
			else configIni.DeleteKey("MidiCustomBpm");
			if (BelowTopAdjustmentTrackCheck.Enabled)
				BelowTopAdjustmentTrackCheck.Checked = configIni.Read("BelowTopAdjustmentTracks", true);
			RemoveSourceTrackEventsCheck.UserChecked = configIni.Read("RemoveSourceTrackEvents", false);
			SelectAllGeneratedEventsCheck.Checked = configIni.Read("SelectAllGeneratedEvents", true);
			RestrictLengthMode_int = configIni.Read("RestrictLengthMode", 0);
			RestrictLengthBox.Value = configIni.Read("RestrictLengthValue", 1000);
			enableGridLayoutForTracks = configIni.Read("EnableGridLayoutForTracks", true);
			enableGradientForTracks = configIni.Read("EnableGradientForTracks", true);
			configIni.EndSection();
			#endregion

			#region 五线谱配置
			configIni.StartSection("Staff");
			StaffVisualizerConfigCheck.Checked = configIni.Read("Enable", false);
			StaffGenerateLinesCheck.Checked = configIni.Read("GenerateStaffLines", true);
			StaffRelativeValueCheck.Checked = configIni.Read("RelativeValue", true);
			StaffClefCombo.SetIndex(configIni.Read("Clef", 0), 0);
			// 参数默认值的历史记录。
			// 谱线间距：45, 44, 100
			// 谱面位置：0, 225, 0
			// 谱面宽度：1000, 1500, 1200
			// 谱左边距：720, 500
			// 谱右边距：420, 200
			StaffLineSpacingBox.SetValue(configIni.Read("Gap", 100), 100);
			StaffSurfacePositionBox.SetValue(configIni.Read("Position", 0), 0);
			StaffSurfacePaddingLeftBox.SetValue(configIni.Read("PaddingLeft", 500), 500);
			StaffSurfacePaddingRightBox.SetValue(configIni.Read("PaddingRight", 200), 200);
			StaffLineThicknessBox.SetValue(configIni.Read("Thickness", 25), 25);
			StaffNotesShiftBox.SetValue(configIni.Read("Shift", 0), 0);
			StaffLineColorBtn.Color = Color.FromArgb(configIni.Read("LineColor", Color.White.ToArgb()));
			StaffClefColorBtn.Color = Color.FromArgb(configIni.Read("ClefColor", Color.White.ToArgb()));
			StaffClefScaleBox.SetValue(configIni.Read("ClefScale", 100), 100);
			StaffGenerateClefCheck.Checked = configIni.Read("GenerateStaffClef", true);
			StaffFreezeAtNoteOffCheck.Checked = configIni.Read("FreezeAtNoteOff", true);
			StaffLegacyMethodCheck.Checked = configIni.Read("LegacyMethod", false);
			configIni.EndSection();
			#endregion

			#region YTP 配置
			configIni.StartSection("YTP");
			YtpMinLenBox.SetValue(configIni.Read("MinLength", 10), 10);
			YtpMaxLenBox.SetValue(configIni.Read("MaxLength", 5000), 5000);
			YtpClipsCountBox.SetValue(configIni.Read("ClipsCount", 30), 30);
			string ytpEffectsValue = configIni.Read("Effects", "");
			if (!string.IsNullOrWhiteSpace(ytpEffectsValue)) YtpEffectsCheckList.BatchSet(ytpEffectsValue);
			else YtpEffectsCheckList.SetChecks(true);
			YtpEffectsCheckList_SelectedIndexChanged(null, null);
			configIni.EndSection();
			#endregion

			#region 音频预览配置
			configIni.StartSection("PreviewAudio");
			PreviewBeepWaveFormCombo.SetIndex(configIni.Read("BeepWaveForm", 0), 0);
			PreviewBeepDurationBox.SetValue(configIni.Read("BeepDuration", 500), 500);
			PreviewTuneAudioCheck.Checked = configIni.Read("IsTuneAudio", false);
			PreviewBeepEngineCombo.SelectedIndex = configIni.Read("PreviewBeepEngine", 2);
			MidiDynamicMidiBpmFormCombo.SelectedIndex = configIni.Read("DynamicMidiBpmForm", 0);
			configIni.EndSection();
			#endregion

			#region 个性化配置
			configIni.StartSection("Personalize");
			CloseAfterOpenHelperCheck.Checked = configIni.Read("CloseAfterOpenHelper", true);
			CloseAfterOpenMoshCheck.Checked = configIni.Read("CloseAfterOpenMosh", true);
			if (configIni.HasKey("FormSize")) {
				rememberFormSizeToolStripMenuItem.Checked = true;
				string formSize_string = configIni.Read("FormSize", "");
				Size size;
				if (ReadSize(formSize_string, out size)) Size = size;
			}
			checkUpdateOnStartupToolStripMenuItem.Checked = configIni.Read("CheckUpdateOnStartup", true);
			enableLegacyProgressDialogToolStripMenuItem.Checked = configIni.Read("EnableLegacyProgressDialog", false);
			configIni.EndSection();
			#endregion

			#region 填补轨道间隙配置
			configIni.StartSection("TracksLegato");
			effectToSelectedEventsToolStripMenuItem.Checked = configIni.Read("ApplyToSelectedEvents", false);
			includeEventsInGroupToolStripMenuItem.Checked = configIni.Read("IncludeEventsWithinGroup", false);
			reverseDirectionToolStripMenuItem.Checked = configIni.Read("ReverseDirection", false);
			configIni.EndSection();
			#endregion

			#region 声呐配置
			configIni.StartSection("Sonar");
			SonarConfigCheck.UserChecked = configIni.Read("Enable", true);
			SeparateDrumsCheck.Checked = configIni.Read("SeparateDrums", true);
			DifferenceCompositeModeCheck.Checked = configIni.Read("DifferenceCompositeMode", false);
			TrackShadowCheck.Checked = configIni.Read("Shadow", false);
			TrackShadowColorBtn.Color = Color.FromArgb(configIni.Read("ShadowColor", Color.Black.ToArgb()));
			int sonarCount = configIni.Read("Count", 0);
			if (sonarCount == 0) ResetSonarToDefault();
			else for (int i = 0; i < sonarCount; i++) {
				SonarItem item = SonarItem.FromString(this, configIni.Read("Item" + i, ""));
				if (item == null) break;
				SonarList.Items.Add(item);
			}
			configIni.EndSection();
			#endregion

			#region 工具配置
			openReplaceClipDirectly = configIni.Read("OpenToolDirectlyNext", false, "ReplaceClips");
			#endregion
		}

		public void SaveIni() {
			#region 音频配置
			configIni.StartSection("Audio");
			configIni.Write("Stretch", AudioScratchCombo.SelectedIndex);
			configIni.Write("Loop", AudioLoopCheck.Checked);
			configIni.Write("Normalize", AudioNormalizeCheck.Checked);
			configIni.Write("FreezeLastFrame", AudioFreezeLastFrameCheck.Checked);
			configIni.Write("Legato", AudioLegatoCombo.SelectedIndex);
			configIni.Write("AutoPan", AudioAutoPanCheck.Checked);
			configIni.Write("AutoPanCurve", AudioAutoPanCurveCombo.SelectedIndex);
			configIni.Write("MultitrackForChords", AudioMultitrackForChordsCheck.Checked);
			configIni.Write("Velocity", AudioVelocityCheck.Checked);
			configIni.Write("VelocityLessVelocity", AudioVelocityLessBox.Value);
			configIni.Write("VelocityMoreVelocity", AudioVelocityMoreBox.Value);
			configIni.Write("VelocityLessGain", AudioGainLessBox.Value);
			configIni.Write("VelocityMoreGain", AudioGainMoreBox.Value);
			configIni.Write("FadeIn", AudioFadeInBox.Value);
			configIni.Write("FadeOut", AudioFadeOutBox.Value);
			configIni.Write("FadeInTimecode", AudioFadeInTimeTxt.Text);
			configIni.Write("FadeOutTimecode", AudioFadeOutTimeTxt.Text);
			configIni.Write("SetFadeByTimecode", !AudioFadeSetAsPercentRadio.Checked);
			configIni.Write("FadeInCurve", AudioFadeInCurveCombo.SelectedIndex);
			configIni.Write("FadeOutCurve", AudioFadeOutCurveCombo.SelectedIndex);
			configIni.Write("BasePitch", AudioMainKeyCombo.SelectedItem.ToString() + AudioMainOctaveCombo.SelectedItem.ToString());
			configIni.Write("TuneMethod", AudioTuneMethodCombo.SelectedIndex);
			configIni.Write("StretchAttr", AudioStretchAttrCombo.SelectedIndex);
			configIni.Write("LockStretchPitch", AudioLockStretchPitchCheck.Checked);
			configIni.Write("ReserveFormant", AudioReserveFormantCheck.Checked);
			configIni.Write("CreateEventGroup", CreateEventGroupInAudioCheck.Checked);
			configIni.EndSection();
			#endregion

			#region 视频配置
			configIni.StartSection("Video");
			if (!StaffVisualizerConfigCheck.Checked)
				configIni.Write("VisualEffect", VideoEffectCombo.SelectedIndex);
			else if (IsSelectedVisualEffectBackupIndexLegal())
				configIni.Write("VisualEffect", selectedVisualEffectBackupIndex);
			configIni.Write("Stretch", VideoScratchCombo.SelectedIndex);
			configIni.Write("Loop", VideoLoopCheck.Checked);
			configIni.Write("FreezeFirstFrame", VideoFreezeFirstFrameCheck.Checked);
			configIni.Write("FreezeLastFrame", VideoFreezeLastFrameCheck.Checked);
			configIni.Write("Legato", VideoLegatoCombo.SelectedIndex);
			configIni.Write("MultitrackForChords", VideoMultitrackForChordsCheck.UserChecked);
			configIni.Write("VideoGlissando", VideoGlissandoCheck.UserChecked);
			configIni.Write("VideoGlissandoAmount", VideoGlissandoBox.Value);
			configIni.Write("Velocity", VideoVelocityCheck.Checked);
			configIni.Write("VelocityLessVelocity", VideoVelocityLessBox.Value);
			configIni.Write("VelocityMoreVelocity", VideoVelocityMoreBox.Value);
			configIni.Write("VelocityLessGain", VideoGainLessBox.Value);
			configIni.Write("VelocityMoreGain", VideoGainMoreBox.Value);
			configIni.Write("FadeIn", VideoFadeInBox.Value);
			configIni.Write("FadeOut", VideoFadeOutBox.Value);
			configIni.Write("FadeInTimecode", VideoFadeInTimeTxt.Text);
			configIni.Write("FadeOutTimecode", VideoFadeOutTimeTxt.Text);
			configIni.Write("SetFadeByTimecode", !VideoFadeSetAsPercentRadio.Checked);
			configIni.Write("Glow", VideoGlowBox.Value);
			configIni.Write("GlowBrightness", VideoGlowBrightBox.Value);
			configIni.Write("StartSize", VideoStartSizeBox.Value);
			configIni.Write("EndSize", VideoEndSizeBox.Value);
			configIni.Write("StartRotation", VideoStartRotationBox.Value);
			configIni.Write("EndRotation", VideoEndRotationBox.Value);
			configIni.Write("StartHorizontalTrans", VideoStartHorizontalTransBox.Value);
			configIni.Write("EndHorizontalTrans", VideoEndHorizontalTransBox.Value);
			configIni.Write("StartVerticalTrans", VideoStartVerticalTransBox.Value);
			configIni.Write("EndVerticalTrans", VideoEndVerticalTransBox.Value);
			configIni.Write("StartHue", VideoStartHueBox.Value);
			configIni.Write("EndHue", VideoEndHueBox.Value);
			configIni.Write("StartSaturation", VideoStartSaturationBox.Value);
			configIni.Write("EndSaturation", VideoEndSaturationBox.Value);
			configIni.Write("StartContrast", VideoStartContrastBox.Value);
			configIni.Write("EndContrast", VideoEndContrastBox.Value);
			configIni.Write("StartThreshold", VideoStartThresholdBox.Value);
			configIni.Write("EndThreshold", VideoEndThresholdBox.Value);
			configIni.Write("StartSizeCurve", VideoStartSizeCurveCombo.SelectedIndex);
			configIni.Write("FadeInCurve", VideoFadeInCurveCombo.SelectedIndex);
			configIni.Write("FadeOutCurve", VideoFadeOutCurveCombo.SelectedIndex);
			configIni.Write("GlowCurve", VideoGlowCurveCombo.SelectedIndex);
			configIni.Write("StartHueCurve", VideoStartHueCurveCombo.SelectedIndex);
			configIni.Write("StartSaturationCurve", VideoStartSaturationCurveCombo.SelectedIndex);
			configIni.Write("StartContrastCurve", VideoStartContrastCurveCombo.SelectedIndex);
			configIni.Write("StartThresholdCurve", VideoStartThresholdCurveCombo.SelectedIndex);
			configIni.EndSection();
			#endregion

			#region 素材配置
			configIni.StartSection("Source");
			configIni.Write("LastProjectPath", vegas.Project.FilePath ?? "");
			configIni.Write("GenerateAt", (int)GenerateAt);
			configIni.Write("GenerateAtCustomValue", GenerateAtCustomText.Text);
			if (AcceptConfig) configIni.Write("LastMediaSourceFrom", ChooseSourceCombo.SelectedIndex);
			if (!ChooseMidiText.Text.Contains("<")) { // 是否不为 "<未选择 MIDI 文件>"
				configIni.Write("LastMidiFile", ChooseMidiText.Text);
				int lastMidiChannelIndex = MidiChannelCombo.SelectedIndex;
				if (MidiChannelCombo.SelectedItem is MidiChannels) {
					MidiChannels channels = MidiChannelCombo.SelectedItem as MidiChannels;
					if (channels.Count != 0) {
						lastMidiChannelIndex = MidiChannelCombo.Items.IndexOf(channels[0]);
						configIni.Write("LastMidiChannelsChecked", lastMidiChannelsChecked);
					}
				}
				configIni.Write("LastMidiChannel", lastMidiChannelIndex);
			} else RemoveLastMidiConfig();
			configIni.Write("DynamicMidiBpmForm", MidiDynamicMidiBpmFormCombo.SelectedIndex);
			configIni.Write("MidiUseBpm", MidiUseBpm_int);
			if (MidiCustomBpmCheck.Checked)
				configIni.Write("MidiCustomBpm", MidiCustomBpmBox.Value);
			configIni.Write("BelowTopAdjustmentTracks", BelowTopAdjustmentTrackCheck.Checked);
			configIni.Write("RemoveSourceTrackEvents", RemoveSourceTrackEventsCheck.UserChecked);
			configIni.Write("SelectAllGeneratedEvents", SelectAllGeneratedEventsCheck.Checked);
			configIni.Write("RestrictLengthMode", RestrictLengthMode_int);
			configIni.Write("RestrictLengthValue", RestrictLengthBox.Value);
			configIni.Write("EnableGridLayoutForTracks", enableGridLayoutForTracks);
			configIni.Write("EnableGradientForTracks", enableGradientForTracks);
			configIni.EndSection();
			#endregion

			#region 五线谱配置
			configIni.StartSection("Staff");
			configIni.Write("Enable", StaffVisualizerConfigCheck.Checked);
			configIni.Write("GenerateStaffLines", StaffGenerateLinesCheck.Checked);
			configIni.Write("RelativeValue", StaffRelativeValueCheck.Checked);
			configIni.Write("Clef", StaffClefCombo.SelectedIndex);
			configIni.Write("Gap", StaffLineSpacingBox.Value);
			configIni.Write("Position", StaffSurfacePositionBox.Value);
			configIni.Write("PaddingLeft", StaffSurfacePaddingLeftBox.Value);
			configIni.Write("PaddingRight", StaffSurfacePaddingRightBox.Value);
			configIni.Write("Thickness", StaffLineThicknessBox.Value);
			configIni.Write("Shift", StaffNotesShiftBox.Value);
			configIni.Write("LineColor", StaffLineColorBtn.Color.ToArgb());
			configIni.Write("ClefColor", StaffClefColorBtn.Color.ToArgb());
			configIni.Write("ClefScale", StaffClefScaleBox.Value);
			configIni.Write("GenerateStaffClef", StaffGenerateClefCheck.Checked);
			configIni.Write("FreezeAtNoteOff", StaffFreezeAtNoteOffCheck.Checked);
			configIni.Write("LegacyMethod", StaffLegacyMethodCheck.Checked);
			configIni.EndSection();
			#endregion

			#region YTP 配置
			configIni.StartSection("YTP");
			configIni.Write("MinLength", YtpMinLenBox.Value);
			configIni.Write("MaxLength", YtpMaxLenBox.Value);
			configIni.Write("ClipsCount", YtpClipsCountBox.Value);
			configIni.Write("Effects", YtpEffectsCheckList.BatchGet());
			configIni.EndSection();
			#endregion

			#region 音频预览配置
			configIni.StartSection("PreviewAudio");
			configIni.Write("BeepWaveForm", PreviewBeepWaveFormCombo.SelectedIndex);
			configIni.Write("BeepDuration", PreviewBeepDurationBox.Value);
			configIni.Write("IsTuneAudio", PreviewTuneAudioCheck.Checked);
			configIni.Write("PreviewBeepEngine", PreviewBeepEngineCombo.SelectedIndex);
			configIni.EndSection();
			#endregion

			#region 个性化配置
			configIni.StartSection("Personalize");
			configIni.Write("Language", Language);
			configIni.Write("CloseAfterOpenHelper", CloseAfterOpenHelperCheck.Checked);
			configIni.Write("CloseAfterOpenMosh", CloseAfterOpenMoshCheck.Checked);
			if (rememberFormSizeToolStripMenuItem.Checked) configIni.Write("FormSize", WriteSize(Size));
			configIni.Write("CheckUpdateOnStartup", checkUpdateOnStartupToolStripMenuItem.Checked);
			configIni.Write("EnableLegacyProgressDialog", enableLegacyProgressDialogToolStripMenuItem.Checked);
			configIni.EndSection();
			#endregion

			#region 填补轨道间隙配置
			configIni.StartSection("TracksLegato");
			configIni.Write("ApplyToSelectedEvents", effectToSelectedEventsToolStripMenuItem.Checked);
			configIni.Write("IncludeEventsWithinGroup", includeEventsInGroupToolStripMenuItem.Checked);
			configIni.Write("ReverseDirection", reverseDirectionToolStripMenuItem.Checked);
			configIni.EndSection();
			#endregion

			#region 声呐配置
			configIni.StartSection("Sonar");
			configIni.Write("Enable", SonarConfigCheck.UserChecked);
			configIni.Write("SeparateDrums", SeparateDrumsCheck.Checked);
			configIni.Write("DifferenceCompositeMode", DifferenceCompositeModeCheck.Checked);
			configIni.Write("Shadow", TrackShadowCheck.Checked);
			configIni.Write("ShadowColor", TrackShadowColorBtn.Color.ToArgb());
			configIni.Write("Count", SonarList.Items.Count);
			int originalSonarCount = configIni.Read("Count", 0);
			for (int i = 0; i < SonarList.Items.Count; i++)
				configIni.Write("Item" + i, (SonarList.Items[i] as SonarItem).ToString());
			if (originalSonarCount > SonarList.Items.Count)
				for (int i = SonarList.Items.Count; i < originalSonarCount; i++)
					configIni.DeleteKey("Item" + i);
			configIni.EndSection();
			#endregion
		}

		private void ChooseSourceBtn_Click(object sender, EventArgs e) {
			OpenSourceFile(parent.SelectVideoClip(), true);
		}

		private void OpenSourceFile(string clipName = "", bool inSilence = false) {
			if (!inSilence) clipName = parent.SelectVideoClip(clipName);
			if (string.IsNullOrWhiteSpace(clipName)) return;
			browseClipName = clipName;
			ChooseSourceCombo_SelectedIndexChanged(null, null);
			if (ChooseSourceCombo.Items.Count < 3)
				ChooseSourceCombo.Items.Add("");
			ChooseSourceCombo.Items[2] = browseClipName;
			ChooseSourceCombo.SelectedIndex = 2;
		}

		private void ChooseMidiBtn_Click(object sender, EventArgs e) {
			string midiFileName = parent.SelectMidiFile();
			if (!string.IsNullOrWhiteSpace(midiFileName)) OpenMidiFile(midiFileName);
			ConfigForm_Resize(null, null); // 原先位于 SetCheckedEnabled 方法中，为了节省性能移至这里。
		}

		private bool OpenMidiFile(string filePath, bool inSilence = false) {
			MIDI midi;
			bool ok = parent.OpenMidiFile(filePath, out midi, inSilence);
			if (ok) {
				#region 生成每个 MIDI 音轨的统计信息
				int? preferredChannel = null;
				MidiChannelCombo.Items.Clear();
				for (int i = 0; i < midi.TrackInfos.Length; i++) {
					MIDI.TrackInfo info = midi.TrackInfos[i];
					MidiChannelCombo.Items.Add(info);
					if (preferredChannel == null && (!info.IsDrumKit || info.Index != 10))
						preferredChannel = i; // 10 号通道是鼓组专用通道，不要选。
				}
				MidiChannelCombo.SelectedIndex = preferredChannel ?? 0;
				ChooseMidiText.Text = filePath;
				UpdateMidiInfo(midi);
				SetCheckedEnabled(null, null);
				midiChannels = null;
				lastMidiChannelsChecked = "";
				quickConfigMidiChannelsToolStripMenuItem.Enabled = MidiChannelCombo.Items.Count > 1;
				#endregion
			}
			return ok;
		}

		private void RemoveLastMidiConfig() {
			#if VEGAS_ENVIRONMENT
			configIni.DeleteKey("LastMidiFile");
			configIni.DeleteKey("LastMidiChannel");
			configIni.DeleteKey("LastMidiChannelsChecked");
			#endif
		}

		private string GetSystemLanguage() {
			// string lang = CultureInfo.InstalledUICulture.Name; // 取决于计算机系统语言。
			string lang = vegas.AppCultureInfo.Name; // 取决于 Vegas 语言。
			return Language = lang;
		}

		private string Language {
			get {
				if (chineseToolStripMenuItem.Checked) return "zhs";
				else if (tchineseToolStripMenuItem.Checked) return "zht";
				else if (japaneseToolStripMenuItem.Checked) return "ja";
				else if (russianToolStripMenuItem.Checked) return "ru";
				else if (vietnameseToolStripMenuItem.Checked) return "vi";
				else if (indonesianToolStripMenuItem.Checked) return "id";
				else return "en";
			}
			set {
				if (value == "") return;
				string lang = value.Trim().ToLower();
				if (lang.StartsWith("zh")) {
					if (lang == "zh-tw" || lang == "zh-hk" || lang == "zh-mo" || lang == "zh-hant" || lang == "zht")
						tchineseToolStripMenuItem.Checked = true;
					else chineseToolStripMenuItem.Checked = true;
				} else if (lang.StartsWith("ja")) japaneseToolStripMenuItem.Checked = true;
				else if (lang.StartsWith("ru")) russianToolStripMenuItem.Checked = true;
				else if (lang.StartsWith("vi")) vietnameseToolStripMenuItem.Checked = true;
				else if (lang.StartsWith("id")) indonesianToolStripMenuItem.Checked = true;
				else englishToolStripMenuItem.Checked = true;
				Lang.SetLanguage(lang);
			}
		}
		private string LanguageBackup;

		private void LanguageStripMenuItem_Click(object sender, EventArgs e) {
			Language = Language; // 禁止套娃！
			DialogResult result = MessageBoxEx.Show(Lang.str.restart_to_effect_language, Lang.str.__name__, MessageBoxButtons.YesNoCancel, new string[] { Lang.str.yes_to_restart_to_effect_language, Lang.str.no_to_restart_to_effect_language, Lang.str.cancel }, MessageBoxIcon.Question, MessageBoxDefaultButton.Button3);
			if (result == DialogResult.Cancel) {
				Language = LanguageBackup;
				return;
			}
			LanguageBackup = Language;
			if (result == DialogResult.No) {
				Translate();
				Invalidate();
			}
			else Close();
		}

		public void Translate() {
			Lang str = Lang.str;
			TrackLegatoMenu.Font = menu.Font = QuickConfigMidiChannelsMenu.Font = Font = new Font(str.ui_font, 9F);
			WarningInfoLabel.Font = new Font(str.info_label_font, 11F, FontStyle.Bold);
			Label[] infoLabels = { SheetConfigInfoLabel, YtpLbl, HelperLbl, DatamoshInfoLbl };
			foreach (Label label in infoLabels)
				label.Font = new Font(str.info_label_font, 9F);
			latestVersionToolStripMenuItemInBar.Font = stretchLegatoTracksToolStripMenuItem.Font = new Font(str.ui_font, 9F, FontStyle.Bold);
			DragHereLbl.Font = new Font(str.info_label_font, 20F, FontStyle.Bold);
			versionToolStripMenuItem.Text = Lang.str.version_number + Lang.str.colon + EntryPoint.VERSION;
			OkBtn.Text = str.complete;
			CancelBtn.Text = IsIrreversibleCancel ? str.close : str.cancel;
			AboutBtn.Text = str.about;
			UserHelpLink.Text = str.user_help + str.dialog_sign;
			Balloon.ToolTipTitle = str.balloon_title;
			Balloon.SetToolTip(StaffSurfacePositionBox, str.sheet_position_tooltip);
			Balloon.SetToolTip(StaffSurfacePaddingLeftBox, str.sheet_width_tooltip);
			Balloon.SetToolTip(StaffSurfacePaddingRightBox, str.sheet_width_tooltip);
			Balloon.SetToolTip(StaffLineSpacingBox, str.sheet_gap_tooltip);
			Balloon.SetToolTip(StaffRelativeValueCheck, str.sheet_relative_tooltip);
			Balloon.SetToolTip(StaffLineThicknessBox, str.sheet_line_thickness_tooltip);
			Balloon.SetToolTip(AudioTuneMethodCombo, str.tune_method_tooltip);
			StaffRelativeValueCheck.Text = str.sheet_relative;
			AudioTuneMethodCombo.Items[0] = str.no_tune;
			AudioTuneMethodCombo.Items[1] = str.pitch_shift_plugin;
			#if VER_GEQ_16
			AudioTuneMethodCombo.Items[2] = str.elastique_method;
			AudioTuneMethodCombo.Items[3] = str.classic_method;
			AudioTuneMethodCombo.Items[4] = str.fool_tuning_method;
			#endif
			PreviewBeepWaveFormCombo.Items[0] = str.sine_wave;
			PreviewBeepWaveFormCombo.Items[1] = str.triangle_wave;
			PreviewBeepWaveFormCombo.Items[2] = str.square_wave;
			PreviewBeepWaveFormCombo.Items[3] = str.sawtooth_wave;
			PreviewBasePitchBtn.Text = str.preview_base_pitch;
			Balloon.SetToolTip(YtpMaxLenBox, str.ytp_max_length_tooltip);
			Balloon.SetToolTip(YtpMinLenBox, str.ytp_min_length_tooltip);
			Balloon.SetToolTip(MidiStartSecondBox, str.midi_start_second_tooltip);
			Balloon.SetToolTip(MidiEndSecondBox, str.midi_end_second_tooltip);
			Balloon.SetToolTip(SourceStartTimeText, str.source_start_time_tooltip);
			Balloon.SetToolTip(SourceEndTimeText, str.source_end_time_tooltip);
			Balloon.SetToolTip(AudioLockStretchPitchCheck, str.audio_lock_stretch_pitch_tooltip);
			Balloon.SetToolTip(PreviewBeepDurationBox, str.preview_beep_duration_tooltip);
			Balloon.SetToolTip(PreviewTuneAudioCheck, str.preview_tune_audio_tooltip);
			Balloon.SetToolTip(StaffLegacyMethodCheck, str.sheet_legacy_method_tooltip);
			AudioLockStretchPitchCheck.Text = str.audio_lock_stretch_pitch;
			fileMenuItem.Text = str.file;
			saveConfigToolStripMenuItem.Text = str.save_config;
			resetConfigToolStripMenuItem.Text = str.reset_config;
			exitDiscardingChangesToolStripMenuItem.Text = str.exit_discarding_changes;
			exitToolStripMenuItem.Text = str.exit;
			importConfigToolStripMenuItem.Text = str.import_config + str.dialog_sign;
			exportConfigToolStripMenuItem.Text = str.export_config + str.dialog_sign;
			pitchShiftPresetMenuItem.Text = str.pitch_shift_preset;
			loadPresetsToolStripMenuItem.Text = str.load_presets + str.dialog_sign;
			unloadPresetsToolStripMenuItem.Text = str.unload_presets + str.dialog_sign;
			formSizeToolStripMenuItem.Text = str.form_size;
			rememberFormSizeToolStripMenuItem.Text = str.remember_form_size;
			restoreDefaultFormSizeToolStripMenuItem.Text = str.restore_default_form_size;
			rememberOnceFormSizeToolStripMenuItem.Text = str.remember_once_form_size;
			helpToolStripMenuItem.Text = str.help;
			aboutToolStripMenuItem.Text = str.about;
			troubleShootingToolStripMenuItem.Text = str.trouble_shooting;
			githubToolStripMenuItem.Text = str.repository_link;
			checkUpdateToolStripMenuItem.Text = str.check_update + str.dialog_sign;
			checkUpdateOnStartupToolStripMenuItem.Text = str.check_update_on_startup;
			latestVersionLinkToolStripMenuItem.Text = str.latest_version_link;
			latestVersionToolStripMenuItemInBar.Text = str.download_latest_version;
			whyOkBtnIsDisabledToolStripMenuItem.Text = str.why_ok_btn_is_disabled;
			roadmapToolStripMenuItem.Text = str.roadmap;
			githubIssuesToolStripMenuItem.Text = str.send_issues;
			updateLogsToolStripMenuItem.Text = str.update_logs;
			chineseDocumentationsToolStripMenuItem.Text = str.chinese_documentations;
			englishDocumentationsToolStripMenuItem.Text = str.english_documentations;
			documentationEnglishToolStripMenuItem.Text = str.documentation;
			tutorialVideoEnglishToolStripMenuItem.Text = str.tutorial_video;
			releaseNotesV4_9_25_0ToolStripMenuItem.Text = str.release_notes + " (v4.9.25.0)";
			releaseNotesV4_10_17_0ToolStripMenuItem.Text = str.release_notes + " (v4.10.17.0)";
			documentationV0_1ToolStripMenuItem.Text = str.documentation + " (v0.1)";
			tutorialVideoV0_1ToolStripMenuItem.Text = str.tutorial_video + " (v0.1)";
			staffVisualizerV0_1ToolStripMenuItem.Text = str.staff_visualizer_documentation + " (v0.1)";
			experimentalThemeToolStripMenuItem.Text = str.experimental_theme;
			quickConfigMidiChannelsToolStripMenuItem.Text = str.quick_config;
			enableLegacyProgressDialogToolStripMenuItem.Text = str.enable_legacy_progress_dialog;
			MidiConfigGroup.Text = str.midi_settings;
			MidiStartSecondLbl.Text = str.midi_start_time;
			MidiEndSecondLbl.Text = str.midi_end_time;
			MidiBpmLbl.Text = str.bpm_setting;
			MidiBeatLbl.Text = str.midi_beat;
			MidiBeatTxt.Text = str.none;
			MidiChannelLbl.Text = str.midi_channel_setting;
			ChooseMidiBtn.Text = ChooseSourceBtn.Text = str.browse;
			ChooseMidiText.Text = str.no_midi_selected;
			ChooseMidiLbl.Text = str.choose_midi_file;
			MidiChannelAdvancedBtn.Text = str.advanced;
			MidiDynamicMidiBpmCheck.Text = str.midi_dynamic_midi_bpm;
			MidiMidiBpmCheck.Text = str.midi_midi_bpm;
			MidiProjectBpmCheck.Text = str.midi_project_bpm;
			RestrictLengthLbl.Text = str.restrict_note_length;
			UnrestrictLengthRadio.Text = str.unrestricted;
			RestrictMaxLengthRadio.Text = str.restrict_max_length;
			RestrictFixedLengthRadio.Text = str.restrict_fixed_length;
			GenerateAtCustomRadio.Text = MidiCustomBpmCheck.Text = str.midi_custom_bpm;
			SourceConfigGroup.Text = str.source_settings;
			GenerateAtBeginRadio.Text = str.generate_at_begin;
			GenerateAtCursorRadio.Text = str.generate_at_cursor;
			GenerateAtLbl.Text = str.generate_position;
			BelowTopAdjustmentTrackCheck.Text = str.generate_below_top_adjustment_tracks;
			RemoveSourceTrackEventsCheck.Text = str.remove_source_track_events;
			SelectAllGeneratedEventsCheck.Text = str.select_all_generated_events;
			ChooseSourceLbl.Text = str.choose_source_file;
			ChooseSourceCombo.Items[0] = str.selected_media;
			ChooseSourceCombo.Items[1] = str.selected_clip;
			SourceStartTimeLbl.Text = str.source_start_time;
			SourceEndTimeLbl.Text = str.source_end_time;
			SourceTab.Text = str.media;
			AudioTab.Text = str.audio;
			AudioParamsGroup.Text = VideoParamsGroup.Text = YtpParamsGroup.Text = str.parameters;
			Action<Control> UpdateCurveCombo = new Action<Control>(control => {
				ComboBox combo = control as ComboBox;
				combo.Items.Clear();
				combo.Items.AddRange(new string[] {
					str.linear, str.fast, str.slow, str.smooth, str.sharp
				});
			});
			foreach (TableLayoutPanel table in new TableLayoutPanel[] { AudioParamsTable, VideoParamsTable })
				foreach (Control control in table.Controls)
					if (control is ComboBox)
						UpdateCurveCombo(control);
			foreach (ComboBox combo in new ComboBox[] { SonarCurveCombo, SonarFadeInCurveCombo, SonarFadeOutCurveCombo })
				UpdateCurveCombo(combo);
			AudioAutoPanCurveCombo.Items.Clear();
			AudioAutoPanCurveCombo.Items.AddRange(new string[] {
				str.linear, str.fast, str.slow, str.smooth, str.sharp, str.hold
			});
			MidiDynamicMidiBpmFormCombo.Items.Clear();
			MidiDynamicMidiBpmFormCombo.Items.AddRange(new string[] {
				str.hold, str.linear
			});
			foreach (ComboBox legatoCombo in new ComboBox[] { AudioLegatoCombo, VideoLegatoCombo }) {
				legatoCombo.Items.Clear();
				legatoCombo.Items.AddRange(new string[] {
					str.legato_staccato, str.legato_one_beat_longest, str.legato_one_bar_longest, str.legato_unlimited
				});
			}
			AudioFadeInLbl.Text = VideoFadeInLbl.Text = str.fade_in;
			AudioFadeOutLbl.Text = VideoFadeOutLbl.Text = str.fade_out;
			AudioTuneGroup.Text = str.tune;
			AudioPreviewLbl.Text = str.preview_listen;
			AudioLockAttrLbl.Text = str.lock_attr;
			AudioPreviewAttrLbl.Text = str.preview_listen_attr;
			PreviewTuneAudioCheck.Text = str.preview_tune_audio;
			AudioReserveFormantCheck.Text = str.reserve_formant;
			AudioTuneMethodLbl.Text = str.tune_method;
			AudioBasePitchLbl.Text = str.base_pitch;
			PreviewAudioBtn.Text = str.preview_audio;
			AudioStretchAttrLbl.Text = str.stretch_attr;
			AudioConfigCheck.Text = str.aconfig;
			AudioScratchLbl.Text = str.audio_stretch;
			AudioLoopCheck.Text = str.audio_loop;
			AudioNormalizeCheck.Text = str.audio_normalize;
			AudioFreezeLastFrameCheck.Text = VideoFreezeLastFrameCheck.Text = str.freeze_last_frame;
			AudioLegatoLbl.Text = VideoLegatoLbl.Text = str.legato;
			CreateEventGroupInAudioCheck.Text = CreateEventGroupInVideoCheck.Text = str.create_event_group;
			AudioAutoPanCheck.Text = str.auto_pan;
			AudioVelocityGroup.Text = VideoVelocityGroup.Text = str.velocity;
			AudioVelocityCheck.Text = VideoVelocityCheck.Text = str.mapping_velocity;
			AudioVelocityLbl.Text = VideoVelocityLbl.Text = str.notes_velocity;
			AudioGainLbl.Text = str.volume_gain;
			VideoGainLbl.Text = str.opacity;
			AudioFadeSetAsPercentRadio.Text = VideoFadeSetAsPercentRadio.Text = str.set_fade_by_percent;
			AudioFadeSetAsTimecodeRadio.Text = VideoFadeSetAsTimecodeRadio.Text = str.set_fade_by_timecode;
			VideoTab.Text = str.video;
			VideoGlowBrightLbl.Text = str.video_glow_bright;
			VideoGlowLbl.Text = str.video_glow;
			VideoStartSizeLbl.Text = str.video_start_size;
			VideoEndSizeLbl.Text = str.video_end_size;
			VideoStartRotationLbl.Text = str.video_start_rotation;
			VideoEndRotationLbl.Text = str.video_end_rotation;
			VideoStartHorizontalTransLbl.Text = str.video_start_h_trans;
			VideoEndHorizontalTransLbl.Text = str.video_end_h_trans;
			VideoStartVerticalTransLbl.Text = str.video_start_v_trans;
			VideoEndVerticalTransLbl.Text = str.video_end_v_trans;
			VideoStartHueLbl.Text = str.video_start_hue;
			VideoEndHueLbl.Text = str.video_end_hue;
			VideoStartSaturationLbl.Text = str.video_start_saturation;
			VideoEndSaturationLbl.Text = str.video_end_saturation;
			VideoStartContrastLbl.Text = str.video_start_contrast;
			VideoEndContrastLbl.Text = str.video_end_contrast;
			VideoStartThresholdLbl.Text = str.video_start_threshold;
			VideoEndThresholdLbl.Text = str.video_end_threshold;
			VideoEffectsGroup.Text = YtpEffectsGroup.Text = str.effect;
			VideoEffectLbl.Text = str.visual_effect;
			VideoEffectInitialValueLbl.Text = str.initial_visual_effect;
			VisualEffectAdvancedBtn.Text = str.advanced;
			VideoEffectCombo.Items.Clear();
			VideoEffectCombo.Items.AddRange(new string[] {
				str.no_effects, str.h_flip, str.v_flip,
				str.ccw_flip, str.cw_flip,
				str.h_flip_sustain, str.h_flip_relay, str.h_flip_invert,
				str.ccw_rotate, str.cw_rotate, str.turned,
				str.zoom_out_in,
				str.h_mirror, str.v_mirror,
				str.ccw_mirror, str.cw_mirror,
				str.negative, str.lumin_invert, str.hue_invert,
				string.Format(str.step_change_hue, 3),
				string.Format(str.step_change_hue, 4),
				string.Format(str.step_change_hue, 5),
				string.Format(str.step_change_hue, 6),
				string.Format(str.step_change_hue, 7),
				string.Format(str.step_change_hue, 8),
				str.chromatic_and_monochrome, str.pingpong, str.whirl,
				str.sharp_rewind, str.wobble_period,
				str.vertical_expansion,
				str.vertical_expansion_with_rebound,
				str.vertical_compression,
				str.vertical_compression_with_rebound,
				str.oblique_expansion_and_compression,
				str.puyo_puyo, str.pendulum,
				str.gaussian_blur, str.radial_blur,
			});
			VideoConfigCheck.Text = str.vconfig;
			VideoScratchLbl.Text = str.video_stretch;
			foreach (ComboBox combo in new ComboBox[] { AudioScratchCombo, VideoScratchCombo }) {
				combo.Items.Clear();
				combo.Items.AddRange(new string[] {
					str.no_stretching, str.flexing_and_extending, str.extending_only, str.flexing_only
				});
			}
			VideoLoopCheck.Text = str.video_loop;
			VideoFreezeFirstFrameCheck.Text = str.freeze_first_frame;
			AudioMultitrackForChordsCheck.Text = VideoMultitrackForChordsCheck.Text = str.multitrack_for_chords;
			VideoParamsPresetsBtn.Text = str.presets;
			SheetTab.Text = str.staff;
			StaffLineThicknessLbl.Text = str.sheet_thickness;
			StaffLineColorLbl.Text = str.sheet_color;
			StaffSurfacePositionLbl.Text = str.sheet_position;
			StaffClefLbl.Text = str.sheet_clef;
			StaffLineSpacingLbl.Text = str.sheet_gap;
			StaffClefCombo.Items[0] = str.sheet_g_clef;
			StaffClefCombo.Items[1] = str.sheet_f_clef;
			StaffNotesShiftLbl.Text = str.sheet_notes_shift;
			StaffVisualizerConfigCheck.Text = str.sheet_config;
			StaffGenerateLinesCheck.Text = str.sheet_generate_lines;
			StaffLegacyMethodCheck.Text = str.sheet_legacy_method;
			StaffNotesParamsGroup.Text = str.sheet_notes_params;
			StaffLinesParamsGroup.Text = str.sheet_sheet_line_params;
			StaffClefParamsGroup.Text = str.sheet_clef_params;
			StaffGenerateClefCheck.Text = str.sheet_generate_clef;
			StaffClefScaleLbl.Text = str.sheet_clef_scale;
			StaffClefColorLbl.Text = str.sheet_clef_color;
			StaffSurfacePaddingLeftLbl.Text = str.sheet_padding_left;
			StaffSurfacePaddingRightLbl.Text = str.sheet_padding_right;
			StaffFreezeAtNoteOffCheck.Text = str.sheet_freeze_at_noteoff;
			SheetConfigInfoLabel.Text = str.sheet_config_info;
			YtpTab.Text = str.ytp;
			YtpClipsCountLbl.Text = str.ytp_clips_count;
			YtpMinLenLbl.Text = str.ytp_min_length;
			YtpMaxLenLbl.Text = str.ytp_max_length;
			YtpEnableAllEffectsCheck.Text = str.enable_all_effects;
			string ytpChecked = YtpEffectsCheckList.BatchGet();
			YtpEffectsCheckList.Items.Clear();
			YtpEffectsCheckList.Items.AddRange(new string[] {
				str.ytp_chorus, str.ytp_pitch_change, str.ytp_vibrato, str.ytp_reverse,
				str.ytp_delay, str.ytp_speed_change, str.ytp_hue_change, str.ytp_hue_rotate,
				str.ytp_monochrome, str.ytp_negative, str.ytp_high_freq_repeat, str.ytp_random_tone,
				str.ytp_enlarge, str.ytp_spherize, str.ytp_mirror, str.ytp_high_contrast,
				str.ytp_oversaturation, str.ytp_emphasize_thrice,
			});
			YtpEffectsCheckList.BatchSet(ytpChecked);
			YtpLbl.Text = str.ytp_info;
			YtpSelectInfo.Text = str.select_source_count_info;
			SonarTab.Text = str.sonar;
			SonarConfigCheck.Text = str.sonar_config;
			SeparateDrumsCheck.Text = str.separate_drums;
			DifferenceCompositeModeCheck.Text = str.difference_composite_mode;
			TrackShadowCheck.Text = str.shadow;
			TrackShadowColorBtn.Text = str.shadow_color + str.dialog_sign;
			SonarNameHeader.Text = str.matched_drum_sound;
			SonarShapeHeader.Text = str.shape;
			SonarDurationHeader.Text = str.duration;
			SonarParamsGroup.Text = str.parameters;
			SonarDrumSoundLbl.Text = str.matched_drum_sound;
			SonarShapeLbl.Text = str.shape;
			SonarColorLbl.Text = str.color;
			SonarDurationLbl.Text = str.duration;
			SonarCurveLbl.Text = str.curve;
			SonarBorderLbl.Text = str.start_border;
			SonarEndBorderLbl.Text = str.end_border;
			SonarSizeLbl.Text = str.start_size;
			SonarEndSizeLbl.Text = str.end_size;
			SonarXPosLbl.Text = str.x_center;
			SonarYPosLbl.Text = str.y_center;
			SonarXOffsetLbl.Text = str.start_x_offset_odd;
			SonarXOffset2Lbl.Text = str.start_x_offset_even;
			SonarXPreOffsetLbl.Text = str.prestart_x_offset_odd;
			SonarXPreOffset2Lbl.Text = str.prestart_x_offset_even;
			SonarYOffsetLbl.Text = str.start_y_offset_odd;
			SonarYOffset2Lbl.Text = str.start_y_offset_even;
			SonarYPreOffsetLbl.Text = str.prestart_y_offset_odd;
			SonarYPreOffset2Lbl.Text = str.prestart_y_offset_even;
			SonarRotationLbl.Text = str.start_rotation_odd;
			SonarRotation2Lbl.Text = str.start_rotation_even;
			SonarFadeInLbl.Text = str.fade_in;
			SonarFadeOutLbl.Text = str.fade_out;
			SonarFadeInCurveLbl.Text = str.fade_in_curve;
			SonarFadeOutCurveLbl.Text = str.fade_out_curve;
			SonarShapeCombo.Items.Clear();
			SonarShapeCombo.Items.AddRange(new string[] {
				str.cookie_cutter_shape_circle,
				str.cookie_cutter_shape_oval,
				str.cookie_cutter_shape_oval_side,
				str.cookie_cutter_shape_rectangle,
				str.cookie_cutter_shape_diamond,
				str.cookie_cutter_shape_square,
				str.cookie_cutter_shape_triangle_up,
				str.cookie_cutter_shape_triangle_right,
				str.cookie_cutter_shape_triangle_down,
				str.cookie_cutter_shape_triangle_left,
				str.cookie_cutter_shape_arrowhead_up,
				str.cookie_cutter_shape_arrowhead_right,
				str.cookie_cutter_shape_arrowhead_down,
				str.cookie_cutter_shape_arrowhead_left,
			});
			HelperTab.Text = str.helper;
			QuickSelectIntervalBtn.Text = str.quick_select_interval;
			QuickSelectIntervalBtn.CommandLinkNote = str.select_interval_configform_info;
			QuickNormalizeBtn.Text = str.quick_normalize;
			QuickNormalizeBtn.CommandLinkNote = str.quick_normalize_configform_info;
			ReplaceClipsBtn.Text = str.replace_clips;
			ReplaceClipsBtn.CommandLinkNote = str.replace_clips_configform_info;
			ChangeTuneMethodBtn.Text = str.change_tune_method;
			ChangeTuneMethodBtn.CommandLinkNote = str.change_tune_method_configform_info;
			#if !VER_GEQ_16
				ChangeTuneMethodBtn.CommandLinkNote = str.change_tune_method_configform_info + '\n' + string.Format(str.unsupported_vegas_version_feature, 16);
			#endif
			AutoLayoutTracksGroup.Text = str.auto_layout_tracks;
			AutoLayoutTracksSelectInfo.Text = str.select_videotracks_count_info;
			AutoLayoutTracksLbl.Text = str.auto_layout_tracks_configform_info;
			GradientTracksBtn.Text = str.gradient_tracks + str.dialog_sign;
			AutoLayoutTracksGridBtn.Text = str.grid_layout + str.dialog_sign;
			AutoLayoutTracksBox3dBtn.Text = str.box_3d_layout + str.dialog_sign;
			ClearTrackMotionBtn.Text = str.clear_tracks_motion;
			ClearTrackEffectBtn.Text = str.clear_tracks_effect;
			TrackLegatoBtn.Text = str.track_legato;
			stackingTracksToolStripMenuItem.Text = str.track_legato_stacking;
			stackingAllAfterTracksToolStripMenuItem.Text = str.track_legato_stacking_all_after;
			stackingAllTracksTracksToolStripMenuItem.Text = str.track_legato_stacking_all_tracks;
			limitStretchLegatoTracksToolStripMenuItem.Text = str.track_legato_limit_stretch;
			stretchLegatoTracksToolStripMenuItem.Text = str.track_legato_stretch;
			lengthenLegatoToolStripMenuItem.Text = str.track_legato_lengthen;
			increaseSpacingToolStripMenuItem.Text = str.increase_spacing + str.dialog_sign;
			increaseSpacingAllTracksToolStripMenuItem.Text = str.increase_spacing_all_tracks + str.dialog_sign;
			effectToSelectedEventsToolStripMenuItem.Text = str.effect_to_selected_events;
			includeEventsInGroupToolStripMenuItem.Text = str.include_events_within_group;
			reverseDirectionToolStripMenuItem.Text = str.reverse_direction;
			DragHereLbl.Text = str.drag_here_to_import;
			BatchSubtitleGenerationBtn.Text = str.batch_subtitle_generation;
			BatchSubtitleGenerationBtn.CommandLinkNote = str.batch_subtitle_generation_configform_info;
			FindClipsBtn.Text = str.find_clips;
			FindClipsBtn.CommandLinkNote = str.find_clips_configform_info;
			ApplyVisualEffectBtn.Text = str.apply_visual_effect;
			ApplyVisualEffectBtn.CommandLinkNote = str.apply_visual_effect_configform_info;
			ConvertMusicBeatsBtn.Text = str.convert_music_beats;
			ConvertMusicBeatsBtn.CommandLinkNote = str.convert_music_beats_configform_info;
			CustomFadeGainBtn.Text = str.custom_fade_gain;
			CustomFadeGainBtn.CommandLinkNote = str.custom_fade_gain_configform_info;
			HelperLbl.Text = str.helper_info;
			CloseAfterOpenHelperCheck.Text = str.close_after_open_helper;
			CloseAfterOpenMoshCheck.Text = str.close_after_open_helper;
			DownloadDatamoshLink.Text = str.datamosh_install;
			MoshTab.Text = str.mosh;
			DatamoshInfoLbl.Text = str.datamosh_info;
			DatamoshClipsFolderButton.Text = str.browse;
			DatamoshClipsFolderGroup.Text = str.datamosh_clips_folder;
			DatamoshNotInstalledInfo.Text = str.datamosh_not_installed_info;
			DatamoshClipsFolderOpenButton.Text = str.open + str.dialog_sign;
			DatamoshClipsFolderInfo.Text = str.datamosh_no_clips_folder_info;
			DatamoshBtn.Text = str.datamosh;
			DatamixBtn.Text = str.datamix;
			LayeringBtn.Text = str.layering;
			RenderingBtn.Text = str.rendering;
			ScrambleBtn.Text = str.scramble;
			AutomatorBtn.Text = str.automator;
			StutterBtn.Text = str.stutter;
			CameraShakeBtn.Text = str.camera_shake;
			DatamoshBtn.CommandLinkNote = str.datamosh_configform_info;
			DatamixBtn.CommandLinkNote = str.datamix_configform_info;
			LayeringBtn.CommandLinkNote = str.layering_configform_info;
			RenderingBtn.CommandLinkNote = str.rendering_configform_info;
			ScrambleBtn.CommandLinkNote = str.scramble_configform_info;
			AutomatorBtn.CommandLinkNote = str.automator_configform_info;
			CameraShakeBtn.CommandLinkNote = str.camera_shake_configform_info;
			StutterBtn.CommandLinkNote = str.stutter_configform_info;
			VideoGlissandoCheck.Text = str.glissando;
			AudioPreferredTrackLbl.Text = VideoPreferredTrackLbl.Text = str.preferred_track;
			Text = str.otomad_helper_config;
		}

		/// <summary>
		/// 获得本窗体的句柄。
		/// </summary>
		/// <returns>本窗体的句柄</returns>
		[DllImport("user32.dll", EntryPoint = "GetForegroundWindow", CharSet = CharSet.Auto, ExactSpelling = true)]
		private static extern IntPtr GetF();

		/// <summary>
		/// 设置此窗体为活动窗体。
		/// </summary>
		/// <param name="hWnd">窗体的句柄</param>
		/// <returns>操作是否成功</returns>
		[DllImport("user32.dll", EntryPoint = "SetForegroundWindow")]
		private static extern bool SetF(IntPtr hWnd);

		/// <summary>
		/// 请求强制聚焦本对话框。
		/// </summary>
		public void FocusOn(object sender, EventArgs e) {
			SetF(Handle);
		}

		/// <summary>
		/// 执行系统命令行命令。
		/// </summary>
		/// <param name="exeName">运行命令</param>
		/// <param name="operType">窗口显示方式</param>
		/// <returns>操作是否成功</returns>
		[DllImport("kernel32.dll")]
		public static extern int WinExec(string exeName, int operType);

		private void CancelBtn_Click(object sender, EventArgs e) {
			AcceptConfig = false;
			Close();
		}

		private void OkBtn_Click(object sender, EventArgs e) {
			if (ChooseSourceCombo.SelectedIndex == 2)
				if (!parent.OpenMedia(browseClipName)) return;
			if (!CheckMappingVelocityValidation()) {
				DialogResult = DialogResult.None;
				EntryPoint.ShowError(new Exceptions.InvalidMappingVelocityValuesException());
				return;
			}
			if (VideoGlissandoCheck.Checked && VideoGlissandoBox.Value == 0) {
				DialogResult = DialogResult.None;
				EntryPoint.ShowError(new Exceptions.InvalidGlissandoAmountException());
				return;
			}
			parent.MidiConfigTracks = IsMultiMidiChannel ? midiChannels : new MidiChannels { MidiChannelCombo.SelectedItem as MIDI.TrackInfo };
			AcceptConfig = true;
			SaveIni();
			// 特殊处理部分
			if (StaffVisualizerConfigCheck.Checked && StaffVisualizerConfigCheck.Enabled) {
				VideoEffectCombo.SelectedIndex = 0; // TO-DO: 那边把这里锁死了改不了。
				VideoScratchCombo.SelectedIndex = 0;
				VideoLegatoCombo.SetIndex(0);
			}
			if (!StaffGenerateLinesCheck.Enabled) StaffGenerateLinesCheck.Checked = false;
			if (!StaffGenerateClefCheck.Enabled) StaffGenerateClefCheck.Checked = false;
			if (Tabs.SelectedTab == YtpTab) IsGenerateYtp = true;
			Close();
		}
		private void ConfigForm_FormClosing(object sender, FormClosingEventArgs e) {
			checkUpdateThread.Abort();
			if (IsPreviewingAudio) PreviewAudioBtn_Click(false);
			if (!AcceptConfig && RequireSaveIni) SaveIni();
			// Environment.Exit(0); // 可以顺带一块ㄦ把 Vegas 干掉。
		}

		private void exitDiscardingChangesToolStripMenuItem_Click(object sender, EventArgs e) {
			RequireSaveIni = false;
			Close();
		}

		private void resetConfigToolStripMenuItem_Click(object sender, EventArgs e) {
			DialogResult result = MessageBox.Show(Lang.str.sure_to_reset_config, Lang.str.reset_config_successful_title, MessageBoxButtons.YesNo, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button2);
			if (result == DialogResult.No) return;
			configIni.Delete(true);
			exitDiscardingChangesToolStripMenuItem_Click(null, null);
			MessageBox.Show(Lang.str.reset_config_successful, Lang.str.reset_config_successful_title, MessageBoxButtons.OK, MessageBoxIcon.Information);
		}

		public new void ShowDialog() {
			AcceptConfig = false;
			RequireSaveIni = true;
			RequestToShowHelperDialog = null;
			RequestToDatamosh = null;
			foreach (TableLayoutPanel table in new TableLayoutPanel[] { toolsTableLayoutPanel, DatamoshTable })
				foreach (Control _control in table.Controls)
					if (_control is CommandLinkButton)
						(_control as CommandLinkButton).UpdateCommandLink();
			base.ShowDialog();
		}

		private class StaffVisualizerInVisualEffect {
			public override string ToString() { return Lang.str.staff; }
		}
		private readonly StaffVisualizerInVisualEffect staffVisualizerInVisualEffect = new StaffVisualizerInVisualEffect();
		private int selectedVisualEffectBackupIndex = -1;
		private bool IsSelectedVisualEffectBackupIndexLegal() {
			return IsVisualEffectIndexLegal(selectedVisualEffectBackupIndex);
		}
		private bool IsVisualEffectIndexLegal(int visualEffectIndex) {
			return visualEffectIndex >= 0 && visualEffectIndex < PvVisualEffect.InitialValues.Length;
		}

		/// <summary>
		/// 控件的使能和失能控制。
		/// </summary>
		internal void SetCheckedEnabled(object sender, EventArgs e) {
			bool isVConfigOn = VideoConfigCheck.Checked;
			if (VideoParamsGroup.Enabled != isVConfigOn)
				SetEnabled(VideoTab, isVConfigOn, new Control[] { VideoConfigCheck, VideoScratchCombo });
			StaffVisualizerConfigCheck.Enabled = isVConfigOn;
			if (!isVConfigOn) StaffVisualizerConfigCheck.Checked = false;
			if (VideoEffect >= PvVisualEffectType.PINGPONG && VideoEffect <= PvVisualEffectType.WHIRL) {
				VideoScratchCombo.SelectedIndex = 1;
				VideoScratchCombo.Enabled = false;
			} else {
				if (!VideoScratchCombo.Enabled && VideoConfigCheck.Enabled) VideoScratchCombo.SelectedIndex = 0;
				VideoScratchCombo.Enabled = isVConfigOn;
			}

			bool isAConfigOn = AudioConfigCheck.Checked;
			if (AudioParamsGroup.Enabled != isAConfigOn)
				SetEnabled(AudioTab, isAConfigOn, new Control[] { AudioConfigCheck });
			AudioTuneMethod method = (AudioTuneMethod)AudioTuneMethodCombo.SelectedIndex;
			AudioLockStretchPitchCheck.Enabled = AudioMainKeyCombo.Enabled = AudioMainOctaveCombo.Enabled
				= PreviewBasePitchBtn.Enabled = AudioPreviewAttrLayoutPanel.Enabled = AudioScratchCombo.Enabled
				= isAConfigOn && method != AudioTuneMethod.NO_TUNE && method != AudioTuneMethod.FOOL_TUNING;
			if (method == AudioTuneMethod.FOOL_TUNING) {
				AudioLockStretchPitchCheck.Enabled = AudioScratchCombo.Enabled = false;
				AudioLockStretchPitchCheck.Checked = true;
				AudioScratchCombo.SelectedIndex = 1;
			}
			bool isPitchChangeMethod = method == AudioTuneMethod.ELASTIQUE || method == AudioTuneMethod.CLASSIC;
			AudioStretchAttrCombo.Enabled = isPitchChangeMethod;
			AudioReserveFormantCheck.Enabled = false;
			if (isPitchChangeMethod && AudioLockStretchPitchCheck.Checked) {
				AudioScratchCombo.Enabled = false;
				AudioScratchCombo.SelectedIndex = 0;
			}
			#if VER_GEQ_16
			if (method == AudioTuneMethod.ELASTIQUE) {
				ElastiqueStretchAttributes attr = (ElastiqueStretchAttributes)AudioStretchAttrCombo.SelectedIndex;
				if (attr == ElastiqueStretchAttributes.Pro) AudioReserveFormantCheck.Enabled = true;
				else if (attr == ElastiqueStretchAttributes.Soloist_Monophonic) AudioReserveFormantCheck.Checked = true;
				else AudioReserveFormantCheck.Checked = false;
			} else AudioReserveFormantCheck.Checked = false;
			#endif
			if (AudioLockStretchPitchCheck.Checked) AudioStretchAttrCombo.Enabled = AudioReserveFormantCheck.Enabled = false;

			bool isSheetConfigOn = StaffVisualizerConfigCheck.Checked;
			bool isVConfigOnButNotSheetConfigOn = isVConfigOn && !isSheetConfigOn;
			VideoEffectInitialValueCombo.Visible = VideoEffectInitialValueLbl.Visible = VisualEffectAdvancedBtn.Visible = !isSheetConfigOn;
			VideoEffectCombo.Enabled = VideoEffectInitialValueCombo.Enabled =
				VideoLegatoCombo.Enabled = VideoGlissandoFlow.Enabled = isVConfigOnButNotSheetConfigOn;
			VideoGlissandoCheck.Status = isSheetConfigOn ? RememberedCheckBox.StatusType.False : RememberedCheckBox.StatusType.Unlocked;
			VideoMultitrackForChordsCheck.Status = isSheetConfigOn ? RememberedCheckBox.StatusType.True : RememberedCheckBox.StatusType.Unlocked;
			if (!isVConfigOn) VideoMultitrackForChordsCheck.Enabled = false;
			if (isSheetConfigOn) {
				VideoScratchCombo.Enabled = false;
				VideoScratchCombo.SelectedIndex = 0;
				if (IsVisualEffectIndexLegal(VideoEffectCombo.SelectedIndex))
					selectedVisualEffectBackupIndex = VideoEffectCombo.SelectedIndex;
				if (!VideoEffectCombo.Items.Contains(staffVisualizerInVisualEffect))
					VideoEffectCombo.Items.Add(staffVisualizerInVisualEffect);
				VideoEffectCombo.SelectedItem = staffVisualizerInVisualEffect;
			} else {
				if (VideoEffectCombo.SelectedItem == staffVisualizerInVisualEffect && IsSelectedVisualEffectBackupIndexLegal())
					VideoEffectCombo.SelectedIndex = selectedVisualEffectBackupIndex;
				while (VideoEffectCombo.Items.Contains(staffVisualizerInVisualEffect))
					VideoEffectCombo.Items.Remove(staffVisualizerInVisualEffect);
			}
			SetEnabled(SheetTab, isSheetConfigOn, new Control[] { StaffVisualizerConfigCheck, SheetConfigInfoLabel });
			if (!StaffGenerateLinesCheck.Checked)
				StaffLineThicknessBox.Enabled = StaffLineColorBtn.Enabled = false;
			if (!StaffGenerateClefCheck.Checked)
				StaffClefScaleBox.Enabled = StaffClefColorBtn.Enabled = false;
			SetEnabled(YtpTab, VideoConfigCheck.Checked || AudioConfigCheck.Checked);

			bool mediaConfigOn = isVConfigOn || isAConfigOn;
			bool midiConfigOn = parent.midi != null;
			bool enableSonar = false;
			if (midiConfigOn) {
				if (MidiChannelCombo.SelectedItem is MIDI.TrackInfo) {
					if ((MidiChannelCombo.SelectedItem as MIDI.TrackInfo).IsDrumKit)
						enableSonar = true;
				} else if (MidiChannelCombo.SelectedItem is MidiChannels) {
					if ((MidiChannelCombo.SelectedItem as MidiChannels).HasDrumKitChannel)
						enableSonar = true;
				}
			}
			if (SonarConfigCheck.Enabled != enableSonar) {
				SonarConfigCheck.Status = enableSonar ? RememberedCheckBox.StatusType.Unlocked : RememberedCheckBox.StatusType.False;
			}

			enableSonar = enableSonar && SonarConfigCheck.Checked;
			SetEnabled(SonarSwitchesFlow, enableSonar, new Control[] { SonarConfigCheck, TrackShadowCheck.Parent });
			SonarButtonsTable.Enabled = SonarList.Enabled = TrackShadowCheck.Parent.Enabled = enableSonar;
			TrackShadowColorBtn.Enabled = TrackShadowCheck.Checked && TrackShadowCheck.Enabled;
			SonarDeleteBtn.Enabled = SonarMoveUpBtn.Enabled = SonarMoveDownBtn.Enabled = SonarParamsGroup.Enabled = enableSonar && SonarList.SelectedItems.Count != 0;

			SetEnabled(AudioVelocityCheck.Parent, AudioVelocityCheck.Checked, new Control[] { AudioVelocityCheck });
			SetEnabled(VideoVelocityCheck.Parent, VideoVelocityCheck.Checked, new Control[] { VideoVelocityCheck });
			AudioAutoPanCurveCombo.Enabled = AudioAutoPanCheck.CheckedAndEnabled();
			VideoGlissandoBox.Enabled = VideoGlissandoCheck.CheckedAndEnabled();

			PreviewBeepWaveFormCombo.Enabled = PreviewBeepEngineCombo.SelectedIndex == 2;

			#if !VER_GEQ_16
			{
				AudioStretchAttrCombo.Enabled = false;
				AudioStretchAttrCombo.SelectedIndex = -1;
				AudioReserveFormantCheck.Enabled = AudioReserveFormantCheck.Checked = false;
				PreviewTuneAudioCheck.Enabled = PreviewTuneAudioCheck.Checked = false;
				int INVALID_METHOD_LESS_THAN_16 = 2;
				if (AudioTuneMethodCombo.SelectedIndex >= INVALID_METHOD_LESS_THAN_16)
					AudioTuneMethodCombo.SelectedIndex = INVALID_METHOD_LESS_THAN_16 - 1;
				while (AudioTuneMethodCombo.Items.Count > INVALID_METHOD_LESS_THAN_16)
					AudioTuneMethodCombo.Items.RemoveAt(INVALID_METHOD_LESS_THAN_16);
			}
			#endif

			// ConfigForm_Resize(null, null); // 为减少闪烁，已禁用。

			#if VEGAS_ENVIRONMENT
			{
				bool sonarConfigOn = SonarConfigCheck.Enabled && SonarConfigCheck.Checked;
				if (Tabs.SelectedTab == HelperTab || Tabs.SelectedTab == MoshTab) OkBtn_Enabled = false;
				else if (Tabs.SelectedTab == YtpTab) OkBtn_Enabled = mediaConfigOn;
				else OkBtn_Enabled = (mediaConfigOn || sonarConfigOn) && midiConfigOn;
			}
			#else
				OkBtn_Enabled = (isVConfigOn || isAConfigOn) && Tabs.SelectedTab != HelperTab;
			#endif
		}

		/// <summary>
		/// 使能或失能某个控件及其所有子控件。
		/// </summary>
		/// <param name="container">容器</param>
		/// <param name="enabled">启用还是禁用</param>
		/// <param name="excepts">例外列表，位于列表内的控件不受影响</param>
		private void SetEnabled(Control container, bool enabled, Control[] excepts = null) {
			var contains = new Func<Control[], Control, bool>((list, item) => {
				foreach (Control control in list)
					if (control == item)
						return true;
				return false;
			});
			foreach (Control control in container.Controls) {
				if (excepts != null && contains(excepts, control)) continue;
				if (!(control is FlowLayoutPanel)) control.Enabled = enabled;
				if (control.Controls.Count != 0) SetEnabled(control, enabled, excepts);
			}
		}

		public bool OkBtn_Enabled {
			get { return OkBtn.Enabled; }
			set {
				OkBtn.Enabled = value;
				whyOkBtnIsDisabledToolStripMenuItem.Visible = !value;
			}
		}

		/// <summary>
		/// 将 BPM 的值保留三位小数，并转换为字符串。如果此时低位小数位为 0 则省略。
		/// </summary>
		/// <param name="bpm">BPM 速度</param>
		/// <returns>处理后的 BPM 的字符串值</returns>
		private string ProcessBpmDouble(double bpm) {
			bpm = Math.Round(bpm * 1e3) / 1e3;
			return bpm.ToString();
		}

		/// <summary>
		/// 更新 MIDI 速度的值。
		/// 同时控制自定义 BPM 速度控件的使能与失能。
		/// </summary>
		/// <param name="midi">MIDI 对象。</param>
		public void UpdateMidiInfo(MIDI midi) {
			MidiStartSecondBox.Enabled
				= MidiEndSecondBox.Enabled
				= MidiMidiBpmCheck.Enabled
				= MidiProjectBpmCheck.Enabled
				= MidiCustomBpmCheck.Enabled
				= MidiChannelCombo.Enabled
				= MidiChannelAdvancedBtn.Enabled
				= MidiBeatTxt.Enabled
				= RestrictLengthFlow.Enabled
				= true;
			Lang str = Lang.str;
			string bpm_str = ProcessBpmDouble(midi.Bpm);
			IsDynamicMidiBpm = midi.IsDynamicBpm;
			MidiMidiBpmCheck.Text = str.midi_midi_bpm + str.colon + bpm_str;
			MidiDynamicMidiBpmCheck.Text = str.midi_dynamic_midi_bpm + str.colon + string.Format(str.dynamic_midi_bpm_info, bpm_str);
			MidiBeatTxt.Text = midi.IsDynamicBeat ? string.Format(str.dynamic_midi_beat_info, midi.TimeSignature) : midi.TimeSignature;
		}

		/// <summary>
		/// 一堆链接。
		/// </summary>
		public static class Links {
			public const string
				GITHUB_LATEST = "https://github.com/otomad/OtomadHelper/releases/latest",
				REPOSITORY = "https://github.com/otomad/OtomadHelper",
				REPOSITORY_ORIG = "https://github.com/Chaosinism/vegas_scripts",
				ROADMAP = "https://github.com/otomad/OtomadHelper/blob/winform/roadmap.md",
				UPDATE_LOGS = "https://github.com/otomad/OtomadHelper/releases",
				TROUBLE_SHOOTING = "https://www.bilibili.com/read/cv495309",
				DOCUMENTATION_V0_1 = "https://www.bilibili.com/read/cv392013",
				STAFF_VISUALIZER_DOCUMENTATION_V0_1 = "https://www.bilibili.com/read/cv1027442",
				TUTORIAL_VIDEO_V0_1 = "https://www.bilibili.com/video/av22226321",
				RELEASE_NOTES_V4_9_25_0 = "http://www.bilibili.com/read/cv13335178",
				RELEASE_NOTES_V4_10_17_0 = "https://www.bilibili.com/read/cv13614419",
				DOCUMENTATION_ENGLISH = "https://docs.google.com/document/d/1PEkh0_WFDLUAYGD-YzIDNXUQiAKqogEvpuRQhfqz9ng",
				TUTORIAL_VIDEO_ENGLISH = "https://youtu.be/8vSpzgL_86A", // Bug 之一：链接中不能包含如问号或等号等特殊符号。暂时打不开，以 YouTube 短链替换之。
				GITHUB_LATEST_API = "https://api.github.com/repos/otomad/VegasScripts/releases/latest", // 一小时 60 次上限。
				GITHUB_LATEST_API_2 = "https://otomad.github.io/VegasScripts/README.md",
				GITHUB_ISSUES = "https://github.com/otomad/OtomadHelper/issues",
				GITHUB_DATAMOSH_EXTPACK = "https://github.com/otomad/OtomadHelper/releases/tag/v1.0-datamosh";
		}

		private void UserHelpLink_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e) {
			OpenLink(Links.DOCUMENTATION_ENGLISH);
		}

		public void OpenLink(string link) {
			Process.Start("explorer.exe", link);
		}

		private void AboutBtn_Click(object sender, EventArgs e) {
			Lang str = Lang.str;
			string[,] pairs = {
				{ str.version_number, EntryPoint.VERSION.ToString() },
				{ str.revision_date, EntryPoint.REVISION_DATE.ToString("D") },
				{ str.vegas_version, vegas.Version },
				{ str.script_supported_vegas_version, EntryPoint.GetScriptSupportedVersionRange() },
				{ "", "" },
				{ str.script_author, str.ranne },
				{ str.script_original_author , "Chaosinism" },
				{ str.script_translator, str.__translator__ },
				{ "", "" },
				{ str.repository_link , Links.REPOSITORY },
				{ str.latest_version_link , Links.GITHUB_LATEST },
			};
			StringBuilder text = new StringBuilder();
			for (int i = 0; i < pairs.GetLength(0); i++) {
				string key = pairs[i, 0], value = pairs[i, 1];
				if (value == Lang.NO_TRANSLATOR) continue;
				if (string.IsNullOrWhiteSpace(value)) text.AppendLine();
				else text.AppendLine(key + str.colon + value);
			}
			MessageBox.Show(text.ToString(), str.about_title, MessageBoxButtons.OK, MessageBoxIcon.Information);
		}

		private void TrimTime_ValueChanged(object sender, EventArgs e) {
			TimecodeBox start, end;
			if (sender == SourceStartTimeText || sender == SourceEndTimeText) {
				start = SourceStartTimeText;
				end = SourceEndTimeText;
			} else if (sender == MidiStartSecondBox || sender == MidiEndSecondBox) {
				start = MidiStartSecondBox;
				end = MidiEndSecondBox;
			} else return;
			if (end.Value < start.Value) end.Value = start.Value;
		}

		public PvVisualEffectType VideoEffect { get { return (VideoEffectCombo.SelectedIndex < PvVisualEffect.InitialValues.Length && VideoEffectCombo.SelectedIndex >= 0) ? (PvVisualEffectType)VideoEffectCombo.SelectedIndex : PvVisualEffectType.NONE; } }

		public void ChooseSourceCombo_InitSourceNames() {
			EntryPoint.AudioVideoEnabledTable table = parent.audioVideoEnabledTable;
			if (!string.IsNullOrWhiteSpace(table.SelectMediaName)) ChooseSourceCombo.Items[0] += Lang.str.colon + table.SelectMediaName;
			if (!string.IsNullOrWhiteSpace(table.SelectClipName)) ChooseSourceCombo.Items[1] += Lang.str.colon + table.SelectClipName;
		}

		private bool isValidSource = true;
		public void ChooseSourceCombo_SelectedIndexChanged(object sender, EventArgs e) {
			#if VEGAS_ENVIRONMENT
			MediaSourceFrom SourceConfigFrom = (MediaSourceFrom)ChooseSourceCombo.SelectedIndex;
			var table = parent.audioVideoEnabledTable;
			var group = SourceConfigFrom == MediaSourceFrom.SELECTED_MEDIA ? table.FromSelectedMedia :
						SourceConfigFrom == MediaSourceFrom.SELECTED_CLIP ? table.FromSelectedClip : table.FromBrowseFile;
			AudioConfigCheck.Enabled = AudioConfigCheck.Checked = group.AudioEnabled;
			VideoConfigCheck.Enabled = VideoConfigCheck.Checked = group.VideoEnabled;
			WarningInfoLabel.Text =
				SourceConfigFrom == MediaSourceFrom.SELECTED_MEDIA && parent.audioVideoEnabledTable.SelectNoMedia ? Lang.str.no_selected_media_warning :
				SourceConfigFrom == MediaSourceFrom.SELECTED_CLIP && parent.audioVideoEnabledTable.SelectNoEvents ? Lang.str.no_selected_clip_warning : "";
			isValidSource = string.IsNullOrWhiteSpace(WarningInfoLabel.Text);
			WarningInfoLabel.Visible = !isValidSource;
			int selectSourceCountForYtp =
				SourceConfigFrom == MediaSourceFrom.SELECTED_MEDIA ? parent.GetSelectedMedia().Length :
				SourceConfigFrom == MediaSourceFrom.SELECTED_CLIP ? parent.GetSelectedEvents().Length : 1;
			YtpSelectInfo.Text = string.Format(Lang.str.select_source_count_info, selectSourceCountForYtp);
			doNotChangePreferredTracksWhileSwitchSourceFrom = true;
			RemoveSourceTrackEventsCheck.Status = SourceConfigFrom == MediaSourceFrom.SELECTED_CLIP && !parent.audioVideoEnabledTable.SelectNoEvents ? RememberedCheckBox.StatusType.Unlocked : RememberedCheckBox.StatusType.False;
			doNotChangePreferredTracksWhileSwitchSourceFrom = false;
			#endif
		}

		public void VideoEffectCombo_SelectedIndexChanged(object sender, EventArgs e) {
			if (VideoEffectCombo.SelectedItem is StaffVisualizerInVisualEffect) return;
			if (!(VideoEffectCombo.SelectedItem is PrveValues))
				ApplyVisualEffectForm.SetVisualEffectsInitials(VideoEffectCombo, VideoEffectInitialValueCombo);
			else VideoEffectInitialValueCombo.Items.Clear();
			for (int i = VideoEffectCombo.Items.Count - 1; i >= 0; i--) {
				object effect = VideoEffectCombo.Items[i];
				if (effect is PrveValues && VideoEffectCombo.SelectedItem != effect)
					VideoEffectCombo.Items.Remove(effect);
			}
		}

		public static void SetTrackBarValue(TrackBar track, NumericUpDown numeric, int value, int def = -1) {
			int min = track.Minimum, max = track.Maximum;
			if (value < min || value > max) {
				if (def < min || def > max) return;
				numeric.Value = track.Value = def;
			} else numeric.Value = track.Value = value;
		}

		public void SetBasePitchCombo(string basePitch) {
			basePitch = basePitch.Trim().ToUpper();
			MatchCollection matches = Regex.Matches(basePitch, @"[A-G]#?(?=\d)");
			string key = matches.Count != 0 ? matches[0].ToString() : "C";
			bool isSet = false;
			for (int i = 0; i < AudioMainKeyCombo.Items.Count; i++)
				if (AudioMainKeyCombo.Items[i].ToString() == key) {
					AudioMainKeyCombo.SelectedIndex = i;
					isSet = true;
					break;
				}
			if (!isSet) AudioMainKeyCombo.SelectedIndex = 0;
			matches = Regex.Matches(basePitch, @"\d+$");
			int oct = matches.Count != 0 ? int.Parse(matches[0].ToString()) : 5;
			AudioMainOctaveCombo.SetIndex(oct, 5);
		}

		private void HelperSelectedCount() {
			Lang str = Lang.str;

			#region 选中剪辑
			int selectedClipsCount = parent.GetSelectedEvents().Length;
			string selectInfo = string.Format(str.select_events_count_info, selectedClipsCount);
			QuickSelectIntervalBtn.CommandLinkNote = str.select_interval_configform_info + '\n' + selectInfo;
			ReplaceClipsBtn.CommandLinkNote = str.replace_clips_configform_info + '\n' + selectInfo;
			CustomFadeGainBtn.CommandLinkNote = str.custom_fade_gain_configform_info + '\n' + selectInfo;
			ScrambleBtn.CommandLinkNote = str.scramble_configform_info + '\n' + selectInfo;
			StutterBtn.CommandLinkNote = str.stutter_configform_info + '\n' + selectInfo;
			if (selectedClipsCount == 0)
				ReplaceClipsBtn.Enabled = QuickSelectIntervalBtn.Enabled = CustomFadeGainBtn.Enabled =
					ScrambleBtn.Enabled = StutterBtn.Enabled = false;
			#endregion

			#region 选中音频剪辑
			int selectedAudioClipsCount = parent.GetSelectedAudioEvents().Length;
			string selectAudioInfo = string.Format(str.select_audioevents_count_info, selectedAudioClipsCount);
			ChangeTuneMethodBtn.CommandLinkNote = str.change_tune_method_configform_info + '\n' + selectAudioInfo;
			QuickNormalizeBtn.CommandLinkNote = str.quick_normalize_configform_info + '\n' + selectAudioInfo;
			ConvertMusicBeatsBtn.CommandLinkNote = str.convert_music_beats_configform_info + '\n' + str.select_exactly_one_audio_event_configform_info;
			if (selectedAudioClipsCount == 0)
				ChangeTuneMethodBtn.Enabled = QuickNormalizeBtn.Enabled = false;
			if (selectedAudioClipsCount != 1)
				ConvertMusicBeatsBtn.Enabled = false;

			// 低于 Vegas 16 的版本不支持更改调音算法。
			#if !VER_GEQ_16
				ChangeTuneMethodBtn.Enabled = false;
				ChangeTuneMethodBtn.CommandLinkNote = str.change_tune_method_configform_info + '\n' +
					string.Format(str.unsupported_vegas_version_feature, 16);
			#endif
			#endregion

			#region 选中视频剪辑
			int selectedVideoClipsCount = parent.GetSelectedVideoEvents().Length;
			string selectVideoInfo = string.Format(str.select_videoevents_count_info, selectedVideoClipsCount);
			ApplyVisualEffectBtn.CommandLinkNote = str.apply_visual_effect_configform_info + '\n' + selectVideoInfo;
			AutomatorBtn.CommandLinkNote = str.automator_configform_info + '\n' + selectVideoInfo;
			CameraShakeBtn.CommandLinkNote = str.camera_shake_configform_info + '\n' + selectVideoInfo;
			LayeringBtn.CommandLinkNote = str.layering_configform_info + '\n' + str.select_exactly_one_video_event_configform_info;
			if (selectedVideoClipsCount == 0)
				ApplyVisualEffectBtn.Enabled = AutomatorBtn.Enabled = CameraShakeBtn.Enabled = false;
			if (selectedVideoClipsCount != 1)
				LayeringBtn.Enabled = false;
			#endregion

			#region 选中轨道
			int selectedTracksCount = parent.GetSelectedTracks().Length;
			if (selectedTracksCount == 0) ClearTrackEffectBtn.Enabled = false;
			#endregion

			#region 选中视频轨道
			int selectedVideoTracksCount = parent.GetSelectedVideoTracks().Length;
			AutoLayoutTracksSelectInfo.Text = string.Format(str.select_videotracks_count_info, selectedVideoTracksCount);
			if (selectedVideoTracksCount == 0)
				AutoLayoutTracksButtons.Enabled = ClearTrackMotionBtn.Enabled = false;
			#endregion

			DatamoshBtn.CommandLinkNote = str.datamosh_configform_info;
			DatamixBtn.CommandLinkNote = str.datamix_configform_info;
			RenderingBtn.CommandLinkNote = str.rendering_configform_info;
		}

		[Obsolete]
		private void ReadyToShowHelperDialog_Legacy() {
			System.Windows.Forms.Timer timer = new System.Windows.Forms.Timer { Interval = 30 };
			const double bite = 0.05;
			timer.Tick += (sender, e) => {
				if (Opacity >= bite) Opacity -= bite;
				else {
					timer.Stop();
					timer.Dispose();
					Opacity = 0;
					Close();
				}
			};
			timer.Start();
		}

		private void ReadyToShowHelperDialog(object sender, EventArgs e) {
			Button btn = sender as Button;
			if (btn == null) return;
			Dictionary<Button, Type> map = new Dictionary<Button, Type> {
				{ QuickSelectIntervalBtn, typeof(SelectIntervalForm) },
				{ ReplaceClipsBtn, typeof(ReplaceClipsForm) },
				{ AutoLayoutTracksGridBtn, typeof(AutoLayoutTracksGridForm) },
				{ AutoLayoutTracksBox3dBtn, typeof(AutoLayoutTracksBox3dForm) },
				{ GradientTracksBtn, typeof(GradientTracksForm) },
				{ ChangeTuneMethodBtn, typeof(ChangeTuneMethodForm) },
				{ BatchSubtitleGenerationBtn, typeof(BatchSubtitleGenerationForm) },
				{ FindClipsBtn, typeof(FindClipsForm) },
				{ ApplyVisualEffectBtn, typeof(ApplyVisualEffectForm) },
				{ CustomFadeGainBtn, typeof(CustomFadeGainForm) },
			};
			map.TryGetValue(btn, out RequestToShowHelperDialog);
			Close();
		}

		public Type RequestToShowHelperDialog = null;

		private void AudioMainKeyCombo_MouseWheel(object sender, MouseEventArgs e) {
			ComboBox combo = AudioMainKeyCombo, combo2 = AudioMainOctaveCombo;
			HandledMouseEventArgs hme = e as HandledMouseEventArgs;
			if (hme != null) hme.Handled = true;
			int count = combo.Items.Count;
			if (count == 0) return;
			int selected = combo.SelectedIndex;
			if (selected == -1) {
				combo.SelectedIndex = 0;
				return;
			}
			if (e.Delta > 0) { // 上滑
				selected--;
				if (selected < 0) {
					if (combo2.SelectedIndex == 0) return;
					else combo2.SelectedIndex--;
					selected = count - 1;
				}
			} else if (e.Delta < 0) { // 下滑
				selected++;
				if (selected >= count) {
					if (combo2.SelectedIndex == combo2.Items.Count - 1) return;
					else combo2.SelectedIndex++;
					selected = 0;
				}
			}
			combo.SelectedIndex = (selected + count) % count;
		}

		private bool IsDoing_AudioLegatoCheck_Or_AudioFreezeLastFrameCheck_CheckedChanged = false;
		private void AudioLegatoCheck_Or_AudioFreezeLastFrameCheck_CheckedChanged(object sender, EventArgs e) {
			if (IsDoing_AudioLegatoCheck_Or_AudioFreezeLastFrameCheck_CheckedChanged) return;
			IsDoing_AudioLegatoCheck_Or_AudioFreezeLastFrameCheck_CheckedChanged = true;
			if (sender == AudioFreezeLastFrameCheck) AudioLegatoCombo.SetIndex(0);
			else if (sender == AudioLegatoCombo && AudioLegatoCombo.SelectedIndex > 0)
				AudioFreezeLastFrameCheck.Checked = false;
			IsDoing_AudioLegatoCheck_Or_AudioFreezeLastFrameCheck_CheckedChanged = false;
		}

		public void BaseTrackMotionKeyframe_Reset(BaseTrackMotionKeyframe frame, bool isParentTrack = false) {
			Timecode begin = Timecode.FromMilliseconds(0);
			frame.Position = begin;
			frame.Selected = false;
			frame.PositionX = 0;
			frame.PositionY = 0;
			frame.Width = isParentTrack ? vegas.Project.Video.Height : vegas.Project.Video.Width;
			frame.Height = vegas.Project.Video.Height;
			frame.RotationZ = 0;
			frame.RotationOffsetX = 0;
			frame.RotationOffsetY = 0;
			frame.OrientationZ = 0;
		}

		public void TrackMotionKeyframe_Reset(TrackMotionKeyframe frame, bool isParentTrack = false) {
			BaseTrackMotionKeyframe_Reset(frame, isParentTrack);
			const double DEPTH_RATIO = 20;
			try {
				frame.PositionZ = 0;
				frame.Depth = isParentTrack ? vegas.Project.Video.Height : vegas.Project.Video.Height / DEPTH_RATIO;
				frame.RotationX = 0;
				frame.RotationY = 0;
				frame.RotationOffsetZ = 0;
				frame.OrientationX = 0;
				frame.OrientationY = 0;
			} catch (Exception) { }
		}

		private void ClearTrackMotionBtn_Click(object sender, EventArgs e) {
			foreach (VideoTrack track in parent.GetSelectedVideoTracks()) {
				List<TrackMotion> motions = new List<TrackMotion> { track.TrackMotion };
				if (track.IsCompositingParent) motions.Add(track.ParentTrackMotion);
				for (int i = 0; i < motions.Count; i++) {
					TrackMotion motion = motions[i];
					motion.MotionKeyframes.Clear();
					motion.ShadowKeyframes.Clear();
					motion.GlowKeyframes.Clear();
					try {
						motion.ShadowEnabled = false;
						motion.GlowEnabled = false;
					} catch (Exception) { }
					TrackMotionKeyframe_Reset(motion.MotionKeyframes[0], i == 1);
					BaseTrackMotionKeyframe_Reset(motion.ShadowKeyframes[0]);
					BaseTrackMotionKeyframe_Reset(motion.GlowKeyframes[0]);
				}
			}
			ClearTrackMotionBtn.Enabled = false;
			IsIrreversibleCancel = true;
			vegas.UpdateUI();
		}

		private void ClearTrackEffectBtn_Click(object sender, EventArgs e) {
			foreach (Track track in parent.GetSelectedTracks())
				track.Effects.Clear();
			ClearTrackEffectBtn.Enabled = false;
			IsIrreversibleCancel = true;
			vegas.UpdateUI();
		}

		public double Semitone2Freq(int semitone) {
			return 440.0 * Math.Pow(2, semitone / 12.0);
		}

		private void PreviewBasePitchBtn_MouseDown(object sender, EventArgs e) {
			int semitone = (!PreviewTuneAudioCheck.Checked ? BasePitch : REFERENCE_PITCH) - EntryPoint.PitchMap("A", "4");
			int freq = (int)Semitone2Freq(semitone);
			if (freq < 37 || freq > 32767) { // 频率超出 37~32767 Hz 这个范围会崩溃，反正这个频率你也不一定听得到。
				Asterisk.Play();
				return;
			}
			if (PreviewBeepEngineCombo.SelectedIndex == 2) // 使用 NAudio 库蜂鸣。
				NAudioBeep(freq, PreviewBasePitchBeepDuration);
			else if (PreviewBeepEngineCombo.SelectedIndex == 1) // 使用 PowerShell 进行蜂鸣。
				WinExec(string.Format("powershell [Console]::Beep({0:D},{1:D})", freq, PreviewBasePitchBeepDuration), 0);
			else // 使用 C# 自带 API 蜂鸣。
				new Thread(() => Console.Beep(freq, PreviewBasePitchBeepDuration)).Start();
		}
		public System.Media.SystemSound Asterisk = System.Media.SystemSounds.Asterisk;
		public System.Media.SystemSound CriticalStop = System.Media.SystemSounds.Hand;
		private int PreviewBasePitchBeepDuration { get { return (int)PreviewBeepDurationBox.Value; } }
		public bool IsPreviewingAudio = false;
		private AudioTrack previewAudioTrack;
		private readonly System.Windows.Forms.Timer previewAudioTimer;
		private DateTime startPreviewAudioTime;
		private Timecode projectEndTimecode;
		private Timecode stopPreviewAudioTimecode;
		private void PreviewAudioBtn_Click(object sender, EventArgs e) { PreviewAudioBtn_Click(null); }
		private readonly bool DEBUG_PREVIEW_AUDIO_TRACK_SHOW = true; // 关闭后有界面错位并且丢失音频前几秒的问题。
		public static readonly int REFERENCE_PITCH = EntryPoint.PitchMap("C", "6"); // 指定中央标准音调。
		public int BasePitch {
			get {
				return EntryPoint.PitchMap(
					AudioMainKeyCombo.SelectedItem.ToString() ?? "C",
					AudioMainOctaveCombo.SelectedItem.ToString() ?? "5"
				);
			}
		}
		private void PreviewAudioBtn_Click(bool? requestPlaying) {
			IsPreviewingAudio = !IsPreviewingAudio;
			if (requestPlaying != null) IsPreviewingAudio = (bool)requestPlaying;
			if (IsPreviewingAudio) {
				projectEndTimecode = vegas.Project.Length + Timecode.FromMilliseconds(1000); // 避免闪现视频尾帧。
				vegas.Transport.LoopMode = false;
				previewAudioTrack = new AudioTrack(vegas.Project, 0, Lang.str.preview_audio_track_name);
				vegas.Project.Tracks.Add(previewAudioTrack);
				AudioEvent previewAudio;
				bool putOk = parent.PutPreviewAudioEvent(previewAudioTrack, projectEndTimecode, out previewAudio);
				if (!putOk) goto notOk;
				if (PreviewTuneAudioCheck.Checked) ApplyTuningToAudioEvent(previewAudio);
				vegas.Transport.CursorPosition = projectEndTimecode;
				stopPreviewAudioTimecode = previewAudio.End;
				vegas.Transport.Play();
				startPreviewAudioTime = DateTime.Now;
				previewAudioTimer.Start();
			} else {
				vegas.Transport.Stop();
				vegas.Transport.CursorPosition = originalCursorPosition;
				if (previewAudioTrack == null) goto notOk;
				vegas.Project.Tracks.Remove(previewAudioTrack);
				previewAudioTrack = null;
				previewAudioTimer.Stop();
			}
			PreviewAudioBtn.Text = IsPreviewingAudio ? Lang.str.stop_preview_audio : Lang.str.preview_audio;
			if (DEBUG_PREVIEW_AUDIO_TRACK_SHOW) vegas.UpdateUI();
			return;

		notOk:
			IsPreviewingAudio = false;
			Asterisk.Play();
			return;
		}

		private void PreviewAudioTimer_Tick(object sender, EventArgs e) {
			if (!IsPreviewingAudio) previewAudioTimer.Stop();
			TimeSpan playTimeSpan = DateTime.Now - startPreviewAudioTime;
			Timecode playTimecode = projectEndTimecode + Timecode.FromMilliseconds(playTimeSpan.TotalMilliseconds);
			if (playTimecode > stopPreviewAudioTimecode && IsPreviewingAudio) PreviewAudioBtn_Click(false);
		}

		private void ApplyTuningToAudioEvent(AudioEvent @event) {
			#if VER_GEQ_16 // Vegas 版本号 15 及以下无法调整。
			AudioTuneMethod method = (AudioTuneMethod)AudioTuneMethodCombo.SelectedIndex;
			if (method == AudioTuneMethod.NO_TUNE) return;
			@event.Method = method == AudioTuneMethod.CLASSIC ? TimeStretchPitchShift.Classic : TimeStretchPitchShift.Elastique;
			if (method == AudioTuneMethod.ELASTIQUE) {
				ElastiqueStretchAttributes elastiqueAttr = @event.ElastiqueAttribute = (ElastiqueStretchAttributes)AudioStretchAttrCombo.SelectedIndex;
				if (elastiqueAttr == ElastiqueStretchAttributes.Pro) @event.FormantLock = AudioReserveFormantCheck.Checked;
			} else if (method == AudioTuneMethod.CLASSIC)
				@event.ClassicAttribute = (ClassicStretchAttributes)AudioStretchAttrCombo.SelectedIndex;
			try {
				@event.PitchLock = @event.PitchLock;
			} catch (Exception e) {
				EntryPoint.ShowError(new Exceptions.NoTimeStretchPitchShiftException(), e); return;
			}
			int pitchDelta = REFERENCE_PITCH - BasePitch;
			if (!AudioLockStretchPitchCheck.Checked) @event.PitchSemis += pitchDelta;
			else {
				double origPitch = @event.PitchSemis;
				@event.PitchLock = true;
				double rate = EntryPoint.Pitch2Stretch(origPitch + pitchDelta);
				@event.AdjustPlaybackRate(rate, true);
				@event.Length = @event.Length.Multiply(1 / rate);
			}
			#endif
		}

		private void YtpLenBox_ValueChanged(object sender, EventArgs e) {
			NumericUpDown min = YtpMinLenBox, max = YtpMaxLenBox, cur = sender as NumericUpDown;
			if (min.Value > max.Value) {
				if (cur == min) min.Value = max.Value;
				else max.Value = min.Value;
			}
		}

		private void YtpEnableAllEffectsCheck_CheckedChanged(object sender, EventArgs e) {
			CheckBox check = sender as CheckBox;
			if (check.CheckState != CheckState.Indeterminate)
				for (int i = 0; i < YtpEffectsCheckList.Items.Count; i++)
					YtpEffectsCheckList.SetItemChecked(i, check.Checked);
			YtpEffectsCheckList_SelectedIndexChanged(null, null);
		}

		public YtpEffectType[] selectedYtpEffects;
		private void YtpEffectsCheckList_SelectedIndexChanged(object sender, EventArgs e) {
			CheckState? state = null;
			List<YtpEffectType> selected = new List<YtpEffectType>();
			for (int i = 0; i < YtpEffectsCheckList.Items.Count; i++) {
				bool isChecked = YtpEffectsCheckList.GetItemChecked(i);
				if (isChecked) selected.Add((YtpEffectType)i);
				if (isChecked && (state == null || state == CheckState.Checked)) state = CheckState.Checked;
				else if (!isChecked && (state == null || state == CheckState.Unchecked)) state = CheckState.Unchecked;
				else state = CheckState.Indeterminate;
			}
			selectedYtpEffects = selected.ToArray();
			if (state == null) return;
			YtpEnableAllEffectsCheck.CheckState = (CheckState)state;
			YtpEffectsGroup.Text = Lang.str.effect + " (" + selected.Count + ")";
		}

		private void ConfigForm_Resize(object sender, EventArgs e) {
			const int MARGIN = 6;
			SheetConfigInfoLabel.MaximumSize = YtpLbl.MaximumSize = new Size(Tabs.SelectedTab.Size.Width - MARGIN, 0);
			WarningInfoLabel.MaximumSize = new Size(Tabs.SelectedTab.Size.Width - MARGIN, 0);

			// 处理 FlowLayoutPanel 的换行问题。
			AudioTuneTablePanel.RowStyles[AudioTuneTablePanel.GetRow(AudioPreviewAttrLayoutPanel)] = new RowStyle();
			AudioTuneTablePanel.RowStyles[AudioTuneTablePanel.GetRow(AudioPreviewAttrLayoutPanel)] = new RowStyle(SizeType.Absolute, AudioPreviewAttrLayoutPanel.Height);
			MidiConfigTablePanel.RowStyles[MidiConfigTablePanel.GetRow(MidiBpmFlowPanel)] = new RowStyle();
			MidiConfigTablePanel.RowStyles[MidiConfigTablePanel.GetRow(MidiBpmFlowPanel)] = new RowStyle(SizeType.Absolute, MidiBpmFlowPanel.Height);
		}

		private AudioTuneMethod previousAudioTuneMethod = new AudioTuneMethod();
		private void AudioTuneMethodCombo_SelectedIndexChanged(object sender, EventArgs e) {
			ComboBox attrs = AudioStretchAttrCombo;
			AudioTuneMethod method = (AudioTuneMethod)AudioTuneMethodCombo.SelectedIndex;
			if (method == previousAudioTuneMethod) return;
			else previousAudioTuneMethod = method;
			attrs.Items.Clear();
			if (method == AudioTuneMethod.ELASTIQUE) {
				attrs.Items.AddRange(ChangeTuneMethodForm.ElastiqueAttrArray);
				attrs.SelectedIndex = 1;
			} else if (method == AudioTuneMethod.CLASSIC) {
				attrs.Items.AddRange(ChangeTuneMethodForm.ClassicAttrArray);
				attrs.SelectedIndex = 2;
			}
		}

		private void WhyOkBtnIsDisabledToolStripMenuItem_Click(object sender, EventArgs e) {
			Lang str = Lang.str;
			List<string> reasons = new List<string>();
			if (Tabs.SelectedTab == HelperTab || Tabs.SelectedTab == MoshTab)
				reasons.Add(str.why_ok_btn_is_disabled_in_helper_tab);
			if (!AudioConfigCheck.Checked && !VideoConfigCheck.Checked)
				reasons.Add(isValidSource ? str.why_ok_btn_is_disabled_no_audio_and_video_enabled : str.why_ok_btn_is_disabled_no_media_take);
			if (parent.midi == null && Tabs.SelectedTab != YtpTab) reasons.Add(str.why_ok_btn_is_disabled_no_midi_select);
			string resultInfo = str.why_ok_btn_is_disabled_unknown_problem;
			if (reasons.Count != 0) {
				StringBuilder reason = new StringBuilder(str.why_ok_btn_is_disabled_info + "\n\n");
				for (int i = 0; i < reasons.Count; i++)
					reason.AppendLine(i + 1 + ". " + reasons[i]);
				resultInfo = reason.ToString();
			}
			MessageBox.Show(resultInfo, str.why_ok_btn_is_disabled, MessageBoxButtons.OK, MessageBoxIcon.Information);
		}

		public void NAudioBeep(int freq, int duration) {
			PreviewBasePitchBtn.Enabled = false;
			SignalGeneratorType type = new SignalGeneratorType[] {
				SignalGeneratorType.Sin, SignalGeneratorType.Triangle, SignalGeneratorType.Square, SignalGeneratorType.SawTooth
			}[PreviewBeepWaveFormCombo.SelectedIndex];
			ISampleProvider beep = new SignalGenerator() {
				Gain = 0.2, // 保护听力用
				Frequency = freq,
				Type = type
			}.Take(TimeSpan.FromMilliseconds(duration));
			WaveOutEvent waveOut = new WaveOutEvent();
			waveOut.Init(beep);
			waveOut.Play();
			waveOut.PlaybackStopped += (sender, e) => {
				PreviewBasePitchBtn.Enabled = true;
				PreviewBasePitchBtn.Focus();
			};
		}

		public GenerateAt GenerateAt {
			get {
				return (GenerateAt)(GenerateAtCustomRadio.Checked ? 2 : GenerateAtCursorRadio.Checked ? 1 : 0);
			}
			set {
				GenerateAtBeginRadio.Related.Selected = value == GenerateAt.BEGIN ? GenerateAtBeginRadio :
					value == GenerateAt.CURSOR ? GenerateAtCursorRadio :
					value == GenerateAt.CUSTOM ? GenerateAtCustomRadio : GenerateAtBeginRadio.Related.Selected;
			}
		}

		public MidiUseBpm MidiUseBpm {
			get {
				return MidiMidiBpmCheck.Checked ? MidiUseBpm.MIDI :
					MidiProjectBpmCheck.Checked ? MidiUseBpm.PROJECT :
					MidiCustomBpmCheck.Checked ? MidiUseBpm.CUSTOM : MidiUseBpm.DYNAMIC_MIDI;
			}
			set {
				MidiMidiBpmCheck.Related.Selected = value == MidiUseBpm.MIDI ? MidiMidiBpmCheck :
					value == MidiUseBpm.PROJECT ? MidiProjectBpmCheck :
					value == MidiUseBpm.CUSTOM ? MidiCustomBpmCheck : MidiDynamicMidiBpmCheck;
			}
		}

		private int MidiUseBpm_int {
			get { return (int)MidiUseBpm; }
			set { MidiUseBpm = (MidiUseBpm)value; }
		}

		public RestrictLengthModeType RestrictLengthMode {
			get {
				return RestrictMaxLengthRadio.Checked ? RestrictLengthModeType.MAX_LENGTH :
					RestrictFixedLengthRadio.Checked ? RestrictLengthModeType.FIXED_LENGTH :
					RestrictLengthModeType.UNRESTRICTED;
			}
			set {
				UnrestrictLengthRadio.Related.Selected = value == RestrictLengthModeType.MAX_LENGTH ? RestrictMaxLengthRadio :
					value == RestrictLengthModeType.FIXED_LENGTH ? RestrictFixedLengthRadio : UnrestrictLengthRadio;
			}
		}

		private int RestrictLengthMode_int {
			get { return (int)RestrictLengthMode; }
			set { RestrictLengthMode = (RestrictLengthModeType)value; }
		}

		public Timecode GenerateAtCustomTimecode = Timecode.FromMilliseconds(0);

		private void GenerateAtCustomText_Leave(object sender, EventArgs e) {
			GenerateAtCustomTimecode = Timecode.FromPositionString(GenerateAtCustomText.Text);
			GenerateAtCustomText.Text = GenerateAtCustomTimecode.ToPositionString();
		}

		private void TrackLegatoMenuItems_Click(object sender, EventArgs e) {
			List<bool> selects = new List<bool> {
				sender == stackingTracksToolStripMenuItem,
				sender == stackingAllAfterTracksToolStripMenuItem,
				sender == stackingAllTracksTracksToolStripMenuItem,
				sender == limitStretchLegatoTracksToolStripMenuItem,
				sender == stretchLegatoTracksToolStripMenuItem,
				sender == lengthenLegatoToolStripMenuItem,
				sender == increaseSpacingToolStripMenuItem,
				sender == increaseSpacingAllTracksToolStripMenuItem,
			};
			int selected = selects.IndexOf(true);
			if (selected == -1) return;
			TrackLegatoType type = (TrackLegatoType)selected;
			IncreaseSpacingDialog dialog;
			Timecode increaseSpacingTime = null;
			if (type == TrackLegatoType.STACKING_ALL_TRACKS || type == TrackLegatoType.INCREASE_SPACING_ALL_TRACKS) {
				bool forEvents = effectToSelectedEventsToolStripMenuItem.Checked;
				if (!forEvents && parent.GetSelectedTracks().Length > 1 ||
					forEvents && parent.IsSelectedEventsOnMultipleTracks())
					if (MessageBox.Show(Lang.str.select_multiple_tracks_warning, Lang.str.track_legato_stacking_all_after,
						MessageBoxButtons.YesNo, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button2) == DialogResult.No)
						return;
			}
			if (type == TrackLegatoType.INCREASE_SPACING || type == TrackLegatoType.INCREASE_SPACING_ALL_TRACKS) {
				dialog = new IncreaseSpacingDialog(this);
				dialog.Text = type == TrackLegatoType.INCREASE_SPACING ? Lang.str.increase_spacing : Lang.str.increase_spacing_all_tracks;
				if (dialog.ShowDialog() != DialogResult.OK || dialog.Spacing.ToMilliseconds() == 0) return;
				increaseSpacingTime = dialog.Spacing;
			}
			Cursor = Cursors.WaitCursor;
			parent.LegatoTracks(type, effectToSelectedEventsToolStripMenuItem.Checked,
				includeEventsInGroupToolStripMenuItem.Checked, increaseSpacingTime, reverseDirectionToolStripMenuItem.Checked);
			IsIrreversibleCancel = true;
			vegas.UpdateUI();
			Cursor = Cursors.Default;
		}

		private bool _isIrreversibleCancel = false;
		internal bool IsIrreversibleCancel {
			get { return _isIrreversibleCancel; }
			set {
				_isIrreversibleCancel = value;
				CancelBtn.Text = value ? Lang.str.close : Lang.str.cancel;
			}
		}

		private bool _isDynamicMidiBpm = false;
		public bool IsDynamicMidiBpm {
			get { return _isDynamicMidiBpm; }
			set {
				if (_isDynamicMidiBpm != value) {
					MidiDynamicTempoFlow.Visible = value;
					if (MidiMidiBpmCheck.Checked || MidiDynamicMidiBpmCheck.Checked)
						MidiMidiBpmCheck.Related.Selected = value ? MidiDynamicMidiBpmCheck : MidiMidiBpmCheck;
				}
				_isDynamicMidiBpm = value;
				if (!value && MidiDynamicMidiBpmCheck.Checked)
					MidiMidiBpmCheck.Related.Selected = MidiMidiBpmCheck;
			}
		}

		private void LoadPresetsToolStripMenuItem_Click(object sender, EventArgs e) {
			ToolStripMenuItem menuItem = sender as ToolStripMenuItem;
			bool isLoad;
			if (menuItem == loadPresetsToolStripMenuItem) isLoad = true;
			else if (menuItem == unloadPresetsToolStripMenuItem) isLoad = false;
			else return;
			if (MessageBox.Show(isLoad ? Lang.str.ensure_load_presets : Lang.str.ensure_unload_presets, "", MessageBoxButtons.OKCancel, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button2) != DialogResult.OK) return;
			if (isLoad) parent.LoadPitchShiftPresets();
			else parent.UnloadPitchShiftPresets();
		}

		/// <summary>
		/// 将 Size 转化为字符串。
		/// </summary>
		/// <param name="size">Size 对象。</param>
		/// <returns>以逗号分隔的宽度和长度。</returns>
		private static string WriteSize(Size size) {
			return size.Width + "," + size.Height;
		}

		/// <summary>
		/// 将字符串转化为 Size。
		/// </summary>
		/// <param name="size_string">将 Size 对象处理过后的字符串。</param>
		/// <param name="size">返回 Size 对象。</param>
		/// <returns>是否成功读取数据。</returns>
		private static bool ReadSize(string size_string, out Size size) {
			try {
				Exception e = new Exception();
				string[] arr = size_string.Split(',');
				if (arr.Length != 2) throw e;
				int width = int.Parse(arr[0].Trim());
				int height = int.Parse(arr[1].Trim());
				size = new Size(width, height);
				return true;
			} catch (Exception) {
				size = new Size();
				return false;
			}
		}

		private void TrackLegatoBtn_Paint(object sender, PaintEventArgs e) {
			Button button = sender as Button;
			e.Graphics.SmoothingMode = SmoothingMode.AntiAlias;
			const int ICON_SIZE = 8, MARGIN_RIGHT = 10;
			Rectangle r = new Rectangle(button.Width - MARGIN_RIGHT - ICON_SIZE, (button.Height - ICON_SIZE / 2) / 2, ICON_SIZE, ICON_SIZE / 2);
			e.Graphics.DrawLines(button.Enabled ? new Pen(button.ForeColor) : Pens.Gray, new Point[] {
				new Point(r.Left, r.Top),
				new Point(r.Left + r.Width / 2, r.Bottom),
				new Point(r.Right, r.Top)
			});
		}

		private void OnDragDrop(object sender, DragEventArgs e) {
			string fileName = e.GetFileNames()[0];
			if (sender == MidiConfigGroup)
				OpenMidiFile(fileName);
			if (sender == SourceConfigGroup)
				OpenSourceFile(fileName);
			OnDragLeave(sender, null);
		}

		private Label DragHereLbl = new Label {
			Text = "拖动到这里以导入",
			TextAlign = System.Drawing.ContentAlignment.MiddleCenter,
			Font = new Font("Microsoft Yahei UI", 20f, FontStyle.Bold),
			Dock = DockStyle.Fill,
		};

		private void OnDragEnter(object sender, DragEventArgs e) {
			e.Effect = DragDropEffects.None;
			if (e.Data.GetDataPresent(DataFormats.FileDrop)) {
				string ext = new Path(e.GetFileNames()[0]).Extension.ToLower();
				var IsMediaExtension = new Func<string, bool>(extension => {
					string[] extensions = EntryPoint.MEDIA_EXTENSION.Split(';');
					foreach (string _extension in extensions)
						if (extension == _extension.Substring(1))
							return true;
					return false;
				});
				GroupBox group = sender as GroupBox;
				if (group == MidiConfigGroup && (ext == ".mid" || ext == ".midi") ||
					group == SourceConfigGroup && IsMediaExtension(ext)) {
					e.Effect = DragDropEffects.Link;
					// 设置样式
					group.MinimumSize = group.Size;
					foreach (Control control in group.Controls) control.Hide();
					group.BackColor = System.Drawing.SystemColors.Window;
					group.Controls.Add(DragHereLbl);
				}
			}
		}

		private void OnDragLeave(object sender, EventArgs e) {
			GroupBox group = sender as GroupBox;
			if (group == null) return;
			group.Controls.Remove(DragHereLbl);
			foreach (Control control in group.Controls) control.Show();
			group.MinimumSize = new Size();
			group.BackColor = Color.Transparent;
		}

		private void QuickNormalizeBtn_Click(object sender, EventArgs e) {
			Cursor = Cursors.WaitCursor;
			parent.NormalizeSelectedAudioEvents();
			Cursor = Cursors.Default;
			if (CloseAfterOpenHelperCheck.Checked) CancelBtn_Click(null, null);
			else {
				IsIrreversibleCancel = true;
				vegas.UpdateUI();
				MessageBox.Show(Lang.str.quick_normalize_complete, Lang.str.quick_normalize, MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
			}
		}

		private void RememberOnceFormSizeToolStripMenuItem_Click(object sender, EventArgs e) {
			configIni.Write("FormSize", WriteSize(Size), "Personalize");
		}

		private void RestoreDefaultFormSizeToolStripMenuItem_Click(object sender, EventArgs e) {
			rememberFormSizeToolStripMenuItem.Checked = false;
			configIni.DeleteKey("FormSize", "Personalize");
		}

		public MidiChannels midiChannels;
		public AutoLayoutTracksInfos layoutInfos;
		public bool IsMultiMidiChannel { get { return midiChannels != null; } }
		private string lastMidiChannelsChecked;
		private void MidiChannelAdvancedBtn_Click(object sender, EventArgs e) {
			MidiChannelAdvancedForm advanced = new MidiChannelAdvancedForm(this, midiChannels, layoutInfos);
			if (advanced.ShowDialog() != DialogResult.OK || advanced.Channels.Count == 0) return;
			PostprocessMidiChannelAdvanced(advanced);
		}
		private void PostprocessMidiChannelAdvanced(MidiChannelAdvancedForm advanced) {
			if (advanced.Channels.Count == 1) {
				MidiChannelCombo.SelectedItem = advanced.Channels[0];
				return;
			}
			for (int i = MidiChannelCombo.Items.Count - 1; i >= 0; i--) {
				object item = MidiChannelCombo.Items[i];
				if (item is MidiChannels)
					MidiChannelCombo.Items.Remove(item);
			}
			midiChannels = advanced.Channels;
			layoutInfos = advanced.LayoutInfos;
			MidiChannelCombo.Items.Add(midiChannels);
			MidiChannelCombo.SelectedItem = midiChannels;
			lastMidiChannelsChecked = advanced.ChannelListView.BatchGet();
			enableGridLayoutForTracks = advanced.LayoutInfos.Grid.enabled;
			enableGradientForTracks = advanced.LayoutInfos.GradientTracks.enabled;
		}

		private void MidiChannelCombo_SelectedIndexChanged(object sender, EventArgs e) {
			// 直接边 foreach 边删除可能会导致遗漏。
			for (int i = MidiChannelCombo.Items.Count - 1; i >= 0; i--) {
				object item = MidiChannelCombo.Items[i];
				if (item is MidiChannels && MidiChannelCombo.SelectedItem != item) {
					MidiChannelCombo.Items.Remove(item);
					if (item == midiChannels) {
						midiChannels = null;
						layoutInfos = null;
					}
				}
			}
		}

		private void VideoParamsPresetMenuItem_Click(object sender, EventArgs e) {
			ToolStripRadioButtonMenuItem menuItem = sender as ToolStripRadioButtonMenuItem;
			if (menuItem == null || menuItem.Tag == null || !(menuItem.Tag is VideoParamsPreset)) return;
			VideoParamsPreset data = menuItem.Tag as VideoParamsPreset;
			if (data.FadeBy == SetFadeByType.PERCENT) VideoFadeSetAsPercentRadio.Checked = true;
			else if (data.FadeBy == SetFadeByType.TIMECODE) VideoFadeSetAsTimecodeRadio.Checked = true;
			IntegerTrackWithBox[] boxes = VideoParamBoxes;
			for (int i = 0; i < boxes.Length && i < data.Count; i++)
				boxes[i].SetValue(data[i]);
		}

		private IntegerTrackWithBox[] VideoParamBoxes {
			get {
				List<IntegerTrackWithBox> boxes = new List<IntegerTrackWithBox>();
				foreach (Control control in VideoParamsTable.Controls)
					if (control is IntegerTrackWithBox)
						boxes.Add(control as IntegerTrackWithBox);
				boxes.Sort((x, y) => VideoParamsTable.GetCellPosition(x).Row - VideoParamsTable.GetCellPosition(y).Row);
				return boxes.ToArray();
			}
		}

		private bool ComparePresetsWithCurrent(VideoParamsPreset presets) {
			IntegerTrackWithBox[] boxes = VideoParamBoxes;
			if (presets == null
				|| presets.Count != boxes.Length
				|| presets.FadeBy == SetFadeByType.PERCENT && !VideoFadeSetAsPercentRadio.Checked
				|| presets.FadeBy == SetFadeByType.TIMECODE && !VideoFadeSetAsTimecodeRadio.Checked)
				return false;
			for (int i = 0; i < presets.Count; i++)
				if (boxes[i].Value != presets[i])
					return false;
			return true;
		}

		[DllImport("uxtheme.dll", SetLastError = true, ExactSpelling = true, CharSet = CharSet.Unicode)]

		public static extern int SetWindowTheme(IntPtr hWnd, string pszSubAppName, string pszSubIdList);
		[DllImport("dwmapi.dll")]
		public static extern int DwmSetWindowAttribute(IntPtr hwnd, DwmWindowAttribute dwAttribute, ref int pvAttribute, int cbAttribute);
		[Flags]
		public enum DwmWindowAttribute : uint {
			DWMWA_USE_IMMERSIVE_DARK_MODE = 20,
			DWMWA_MICA_EFFECT = 1029
		}

		private void ThemeAllControls(Control parent = null) {
			parent = parent ?? this;
			Action<Control> Theme = new Action<Control>(control => {
				int trueValue = 0x01;
				SetWindowTheme(control.Handle, "DarkMode_Explorer", null);
				DwmSetWindowAttribute(control.Handle, DwmWindowAttribute.DWMWA_USE_IMMERSIVE_DARK_MODE, ref trueValue, Marshal.SizeOf(typeof(int)));
				DwmSetWindowAttribute(control.Handle, DwmWindowAttribute.DWMWA_MICA_EFFECT, ref trueValue, Marshal.SizeOf(typeof(int)));
				control.BackColor = Color.FromArgb(32, 32, 32);
				control.ForeColor = Color.White;
			});
			if (parent == this) Theme(this);
			foreach (Control control in parent.Controls) {
				Theme(control);
				if (control.Controls.Count != 0)
					ThemeAllControls(control);
			}
		}

		private void ExperimentalThemeToolStripMenuItem_Click(object sender, EventArgs e) {
			ThemeAllControls();
			ToolStripMenuItem me = experimentalThemeToolStripMenuItem;
			me.Checked = true;
			me.Enabled = false;
		}

		private void QuickConfigMidiChannelsToolStripMenuItem_Click(object sender, EventArgs e) {
			if (midiChannels != null || MidiChannelCombo.Items.Count < 2) return;
			MidiChannelAdvancedForm advanced = new MidiChannelAdvancedForm(this, midiChannels, layoutInfos);
			if (string.IsNullOrWhiteSpace(lastMidiChannelsChecked) || Regex.Matches(lastMidiChannelsChecked, "1").Count < 2)
				advanced.ChannelListView.SelectAll();
			else advanced.ChannelListView.BatchSet(lastMidiChannelsChecked);
			advanced.ChannelListView_ItemChecked(null, null);
			advanced.QuickEnableAllAutoLayoutTracks(grid: enableGridLayoutForTracks, gradient: enableGradientForTracks);
			PostprocessMidiChannelAdvanced(advanced);
		}

		private void CheckUpdateToolStripMenuItem_Click(object sender, EventArgs e) {
			CheckUpdate(true);
		}

		private void CheckUpdate(bool isManualUpdate) {
			checkUpdateThread = new Thread(() => {
				Lang str = Lang.str;
				bool alertable = isManualUpdate; // 修改：自动检测更新失败时不要播放关键性终止提示音。
				bool ok, isLatest;
				string newVersion = EntryPoint.GetLatestScriptVersion(out ok, out isLatest);
				if (!ok || string.IsNullOrWhiteSpace(newVersion)) {
					if (alertable) CriticalStop.Play();
					return;
				}
				if (!isLatest) {
					latestVersionToolStripMenuItemInBar.Text = str.download_latest_version + str.colon + newVersion;
					latestVersionToolStripMenuItemInBar.Visible = true;
					if (alertable) {
						DialogResult updateNow = MessageBox.Show(string.Format(str.check_update_found, newVersion, "v" + EntryPoint.VERSION), str.check_update_title, MessageBoxButtons.YesNo, MessageBoxIcon.Information);
						if (updateNow == DialogResult.Yes) latestVersionLinkToolStripMenuItem.PerformClick();
					}
				} else if (isManualUpdate)
					MessageBox.Show(string.Format(str.check_update_not_found, newVersion), str.check_update_title, MessageBoxButtons.OK, MessageBoxIcon.Information);
			});
			checkUpdateThread.Start();
		}

		private bool isMousedown = false;
		private void MouseDownMapToClick(object sender, MouseEventArgs e) {
			Button button = sender as Button;
			if (button == null) return;
			if (e.Button == MouseButtons.Left) {
				button.PerformClick();
				isMousedown = true;
			}
		}
		private void MouseUpMapToClick(object sender, MouseEventArgs e) {
			isMousedown = false;
		}

		private void TrackLegatoBtn_Click(object sender, EventArgs e) {
			if (isMousedown) return;
			int count;
			if (!effectToSelectedEventsToolStripMenuItem.Checked) {
				count = parent.GetSelectedTracks().Length;
				trackLegatoSelectInfoToolStripMenuItem.Text = string.Format(Lang.str.select_tracks_count_info, count);
			} else {
				count = (!includeEventsInGroupToolStripMenuItem.Checked ? parent.GetSelectedEvents() :
					parent.GetSelectedEventsWithinGroup()).Length;
				trackLegatoSelectInfoToolStripMenuItem.Text = string.Format(Lang.str.select_events_count_info, count);
			}
			foreach (ToolStripMenuItem menuItem in new ToolStripMenuItem[] {
				stackingTracksToolStripMenuItem,
				stackingAllAfterTracksToolStripMenuItem,
				stackingAllTracksTracksToolStripMenuItem,
				stretchLegatoTracksToolStripMenuItem,
				limitStretchLegatoTracksToolStripMenuItem,
				lengthenLegatoToolStripMenuItem,
				increaseSpacingToolStripMenuItem,
				increaseSpacingAllTracksToolStripMenuItem,
			}) menuItem.Enabled = count != 0;
			stackingAllAfterTracksToolStripMenuItem.Visible = effectToSelectedEventsToolStripMenuItem.Checked;
			stackingTracksToolStripMenuItem.Text = effectToSelectedEventsToolStripMenuItem.Checked ?
				Lang.str.track_legato_stacking_selected : Lang.str.track_legato_stacking;
			// 弹出菜单。
			Button button = sender as Button;
			TrackLegatoMenu.Show(button, new Point(0, button.Height));
		}

		private void VideoParamsPresetsBtn_Click(object sender, EventArgs e) {
			if (isMousedown) return;
			ContextMenuStrip menu = new ContextMenuStrip();
			menu.Renderer = new Windows10StyledContextMenuStripRenderer();
			menu.Font = new Font(Lang.str.ui_font, 9F);

			bool isChecked = false;
			Dictionary<string, VideoParamsPreset> presets = VideoParamsPreset.Presets;
			foreach (KeyValuePair<string, VideoParamsPreset> preset in presets) {
				ToolStripRadioButtonMenuItem menuItem = new ToolStripRadioButtonMenuItem(preset.Key);
				menuItem.Tag = preset.Value;
				menuItem.Click += VideoParamsPresetMenuItem_Click;
				menu.Items.Add(menuItem);
				if (!isChecked && ComparePresetsWithCurrent(preset.Value)) {
					menuItem.Checked = true;
					isChecked = true;
				}
			}
			// 弹出菜单。
			Button button = sender as Button;
			menu.Show(button, new Point(0, button.Height));
		}

		private void SetComboBoxToolTipWhenOverflowText(object sender, EventArgs e) {
			ComboBox comboBox = sender as ComboBox;
			string text = comboBox.SelectedItem.ToString();
			float iSize = comboBox.CreateGraphics().MeasureString(text, comboBox.Font).Width + comboBox.Height; // 去掉右边下拉图标的宽度
			if (iSize > comboBox.Width) OverflowToolTip.SetToolTip(comboBox, text);
			else OverflowToolTip.SetToolTip(comboBox, "");
		}

		private void TimecodeText_Leave(object sender, EventArgs e) {
			TextBox textBox = sender as TextBox;
			Timecode timecode = Timecode.FromString(textBox.Text);
			textBox.Text = timecode.ToString();
		}

		private void FadeSetAsRadio_CheckedChanged(object sender, EventArgs e) {
			RadioButton radio = sender as RadioButton;
			Control fadeInTrack, fadeOutTrack, fadeInTxt, fadeOutTxt;
			TableLayoutPanel table;
			bool isTimecode;
			if (radio == AudioFadeSetAsPercentRadio || radio == AudioFadeSetAsTimecodeRadio) {
				fadeInTrack = AudioFadeInBox;
				fadeOutTrack = AudioFadeOutBox;
				fadeInTxt = AudioFadeInTimeTxt;
				fadeOutTxt = AudioFadeOutTimeTxt;
				table = AudioParamsTable;
				isTimecode = AudioFadeSetAsTimecodeRadio.Checked;
			} else if (radio == VideoFadeSetAsPercentRadio || radio == VideoFadeSetAsTimecodeRadio) {
				fadeInTrack = VideoFadeInBox;
				fadeOutTrack = VideoFadeOutBox;
				fadeInTxt = VideoFadeInTimeTxt;
				fadeOutTxt = VideoFadeOutTimeTxt;
				table = VideoParamsTable;
				isTimecode = VideoFadeSetAsTimecodeRadio.Checked;
			} else return;
			Control fadeInShown = isTimecode ? fadeInTxt : fadeInTrack,
				fadeOutShown = isTimecode ? fadeOutTxt : fadeOutTrack,
				fadeInHidden = !isTimecode ? fadeInTxt : fadeInTrack,
				fadeOutHidden = !isTimecode ? fadeOutTxt : fadeOutTrack;
			fadeInHidden.Visible = fadeOutHidden.Visible = false;
			table.SetCellPosition(fadeInShown, new TableLayoutPanelCellPosition(1, 1));
			table.SetCellPosition(fadeOutShown, new TableLayoutPanelCellPosition(1, 2));
			fadeInShown.Visible = fadeOutShown.Visible = true;
		}

		private void VisualEffectAdvancedBtn_Click(object sender, EventArgs e) {
			PvRhythmVisualEffectAdvancedForm dialog = new PvRhythmVisualEffectAdvancedForm(this);
			if (dialog.ShowDialog() != DialogResult.OK) return;
			PrveValues values = dialog.GetPrves();
			if (values.Count == 0) VideoEffectCombo.SelectedIndex = 0;
			else if (values.Count == 1) {
				VideoEffectCombo.SelectedIndex = (int)values[0].Effect;
				VideoEffectInitialValueCombo.SelectedIndex = values[0].Initial;
			} else {
				VideoEffectCombo.Items.Add(values);
				VideoEffectCombo.SelectedItem = values;
			}
		}

		private void SonarDeleteBtn_Click(object sender, EventArgs e) {
			if (MessageBox.Show(sender == SonarResetBtn ? Lang.str.sure_to_reset : Lang.str.sure_to_delete, "", MessageBoxButtons.YesNo, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button2) == DialogResult.No) return;
			if (sender == SonarResetBtn) {
				SonarList.Items.Clear();
				ResetSonarToDefault();
			} else if (sender == SonarDeleteBtn) {
				foreach (ListViewItem item in SonarList.SelectedItems)
					SonarList.Items.Remove(item);
			}
			SonarList_SelectedIndexChanged(null, null);
		}

		private void SonarAddBtn_Click(object sender, EventArgs e) {
			SonarItem newItem = new SonarItem(this);
			SonarList.Items.Add(newItem);
			foreach (ListViewItem item in SonarList.SelectedItems)
				item.Selected = false;
			newItem.Selected = true;
		}

		private void SonarConfigChanged(object sender, EventArgs e) {
			if (Is_SonarList_SelectedIndexChanging) return;
			ListView.SelectedListViewItemCollection selected = SonarList.SelectedItems;
			if (selected.Count != 0) {
				SonarItem item = selected[0] as SonarItem;
				item.DrumSound = SonarDrumSoundCombo.Text;
				SonarDrumSoundCombo.Text = item.DrumSound;
				item.Shape = SonarShapeCombo.SelectedIndex;
				item.Color = SonarColorBtn.Color;
				item.Duration = Timecode.FromString(SonarDurationTxt.Text);
				SonarDurationTxt.Text = item.Duration.ToString();
				item.Curve = SonarCurveCombo.SelectedIndex;
				item.Border = (double)SonarBorderBox.Value;
				item.EndBorder = (double)SonarEndBorderBox.Value;
				item.Size = (double)SonarSizeBox.Value;
				item.EndSize = (double)SonarEndSizeBox.Value;
				item.XPos = (double)SonarXPosBox.Value;
				item.YPos = (double)SonarYPosBox.Value;
				item.XOffset = (double)SonarXOffsetBox.Value;
				item.YOffset = (double)SonarYOffsetBox.Value;
				item.XOffset2 = (double)SonarXOffset2Box.Value;
				item.YOffset2 = (double)SonarYOffset2Box.Value;
				item.XPreOffset = (double)SonarXPreOffsetBox.Value;
				item.YPreOffset = (double)SonarYPreOffsetBox.Value;
				item.XPreOffset2 = (double)SonarXPreOffset2Box.Value;
				item.YPreOffset2 = (double)SonarYPreOffset2Box.Value;
				item.Rotation = (double)SonarRotationBox.Value;
				item.Rotation2 = (double)SonarRotation2Box.Value;
				item.FadeIn = (double)SonarFadeInBox.Value;
				item.FadeOut = (double)SonarFadeOutBox.Value;
				item.FadeInCurve = SonarFadeInCurveCombo.SelectedIndex;
				item.FadeOutCurve = SonarFadeOutCurveCombo.SelectedIndex;
			}
		}

		private bool Is_SonarList_SelectedIndexChanging = false;
		private readonly System.Windows.Forms.Timer SonarList_SelectedIndexChanged_Timer = new System.Windows.Forms.Timer {
			Interval = 50,
			Enabled = false,
		};

		private void SonarList_SelectedIndexChanged(object sender, EventArgs e) {
			Is_SonarList_SelectedIndexChanging = true;
			ListView.SelectedListViewItemCollection selected = SonarList.SelectedItems;
			bool isSelected = selected.Count != 0;
			if (SonarParamsGroup.Enabled != isSelected) {
				if (!isSelected) {
					SonarList_SelectedIndexChanged_Timer.Stop();
					SonarList_SelectedIndexChanged_Timer.Start();
				} else SonarList_SelectedIndexChanged_Timer_Tick(null, null);
			}
			if (isSelected) {
				SonarItem item = selected[0] as SonarItem;
				SonarDrumSoundCombo.Text = item.DrumSound;
				SonarShapeCombo.SetIndex(item.Shape);
				SonarColorBtn.Color = item.Color;
				SonarDurationTxt.Text = item.Duration.ToString();
				SonarCurveCombo.SetIndex(item.Curve);
				SonarBorderBox.SetValue((decimal)item.Border);
				SonarEndBorderBox.SetValue((decimal)item.EndBorder);
				SonarSizeBox.SetValue((decimal)item.Size);
				SonarEndSizeBox.SetValue((decimal)item.EndSize);
				SonarXPosBox.SetValue((decimal)item.XPos);
				SonarYPosBox.SetValue((decimal)item.YPos);
				SonarXOffsetBox.SetValue((decimal)item.XOffset);
				SonarYOffsetBox.SetValue((decimal)item.YOffset);
				SonarXOffset2Box.SetValue((decimal)item.XOffset2);
				SonarYOffset2Box.SetValue((decimal)item.YOffset2);
				SonarXPreOffsetBox.SetValue((decimal)item.XPreOffset);
				SonarYPreOffsetBox.SetValue((decimal)item.YPreOffset);
				SonarXPreOffset2Box.SetValue((decimal)item.XPreOffset2);
				SonarYPreOffset2Box.SetValue((decimal)item.YPreOffset2);
				SonarRotationBox.SetValue((decimal)item.Rotation);
				SonarRotation2Box.SetValue((decimal)item.Rotation2);
				SonarFadeInBox.SetValue((decimal)item.FadeIn);
				SonarFadeOutBox.SetValue((decimal)item.FadeOut);
				SonarFadeInCurveCombo.SetIndex(item.FadeInCurve);
				SonarFadeOutCurveCombo.SetIndex(item.FadeOutCurve);
			}
			Is_SonarList_SelectedIndexChanging = false;
		}

		private void SonarList_SelectedIndexChanged_Timer_Tick(object sender, EventArgs e) {
			bool isSelected = SonarList.SelectedItems.Count != 0;
			if (SonarParamsGroup.Enabled != isSelected)
				SonarMoveUpBtn.Enabled = SonarMoveDownBtn.Enabled = SonarDeleteBtn.Enabled = SonarParamsGroup.Enabled = isSelected;
			SonarList_SelectedIndexChanged_Timer.Stop();
		}

		private void SonarMoveBtn_Click(object sender, EventArgs e) {
			int move = sender == SonarMoveUpBtn ? -1 : sender == SonarMoveDownBtn ? 1 : 0;
			if (move == 0) return;
			ListView.SelectedListViewItemCollection selected = SonarList.SelectedItems;
			List<ListViewItem> movedList = new List<ListViewItem>();
			for (int i = move == -1 ? 0 : selected.Count - 1; move == -1 ? i < selected.Count : i >= 0; i -= move) {
				ListViewItem item = selected[i];
				int index = SonarList.Items.IndexOf(item),
					newIndex = index + move;
				if (newIndex < 0 || newIndex >= SonarList.Items.Count ||
					movedList.Contains(SonarList.Items[newIndex])) goto marked;
				SonarList.Items.Remove(item);
				SonarList.Items.Insert(newIndex, item);
			marked:
				movedList.Add(item);
			}
		}

		private void SonarButtons_Paint(object sender, PaintEventArgs e) {
			Button button = sender as Button;
			List<Button> buttons = new List<Button> { SonarResetBtn, SonarDeleteBtn, SonarMoveUpBtn, SonarMoveDownBtn, SonarAddBtn };
			if (!buttons.Contains(button)) return;
			int index = buttons.IndexOf(button);
			e.Graphics.SmoothingMode = SmoothingMode.AntiAlias;
			const int PADDING = 8;
			int buttonSize = Math.Min(button.Width, button.Height),
				iconSize = buttonSize - PADDING * 2;
			Rectangle r = new Rectangle((button.Width - iconSize) / 2, (button.Height - iconSize) / 2, iconSize, iconSize);
			int XCenter = r.Left + r.Width / 2, YCenter = r.Top + r.Height / 2;
			List<Pen> pens = new List<Pen> {
				/* 橙色 */ new Pen(Color.FromArgb(255, 127, 39)),
				/* 红色 */ new Pen(Color.FromArgb(237, 28, 36)),
				/* 蓝色 */ new Pen(Color.FromArgb(50, 130, 246)),
				/* 蓝色 */ new Pen(Color.FromArgb(50, 130, 246)),
				/* 绿色 */ new Pen(Color.FromArgb(34, 177, 76)),
			};
			Pen penColor = button.Enabled ? pens[index] : Pens.Gray;
			const int RESET_ARC_OPEN_ANGLE = 60;
			double resetArcOpenRadian = RESET_ARC_OPEN_ANGLE * Math.PI / 180 / 2;
			int resetFinalPointX = (int)(XCenter - r.Width / 2 * Math.Cos(resetArcOpenRadian)),
				resetFinalPointY = (int)(YCenter - r.Height / 2 * Math.Sin(resetArcOpenRadian)),
				resetArrowLength = resetFinalPointY - r.Top;
			List<Point[]> points = new List<Point[]> {
				new Point[] {
					new Point(resetFinalPointX, r.Top),
					new Point(resetFinalPointX, resetFinalPointY),
					new Point(resetFinalPointX + resetArrowLength, resetFinalPointY),
				},
				new Point[] {
					new Point(r.Left, r.Top),
					new Point(r.Right, r.Bottom),
					new Point(XCenter, YCenter),
					new Point(r.Right, r.Top),
					new Point(r.Left, r.Bottom),
				},
				new Point[] {
					new Point(XCenter, r.Bottom),
					new Point(XCenter, r.Top),
					new Point(r.Left, YCenter),
					new Point(XCenter, r.Top),
					new Point(r.Right, YCenter),
				},
				new Point[] {
					new Point(XCenter, r.Top),
					new Point(XCenter, r.Bottom),
					new Point(r.Left, YCenter),
					new Point(XCenter, r.Bottom),
					new Point(r.Right, YCenter),
				},
				new Point[] {
					new Point(r.Left, YCenter),
					new Point(r.Right, YCenter),
					new Point(XCenter, YCenter),
					new Point(XCenter, r.Top),
					new Point(XCenter, r.Bottom),
				},
			};
			e.Graphics.DrawLines(penColor, points[index]);
			if (button == SonarResetBtn)
				e.Graphics.DrawArc(penColor, r, 180 + RESET_ARC_OPEN_ANGLE / 2, 360 - RESET_ARC_OPEN_ANGLE);
		}

		private void ConvertMusicBeatsBtn_Click(object sender, EventArgs e) {
			AudioEvent[] audioEvents = parent.GetSelectedAudioEvents();
			if (audioEvents.Length != 1) {
				EntryPoint.ShowError(new Exceptions.ConvertMusicBeatsNotOneAudioEventException(audioEvents.Length), ShowErrorState.SILENCE);
				return;
			}
			uint beats = vegas.Project.Ruler.BeatsPerMeasure;
			if (!new List<uint> { 4, 3, 6 }.Contains(beats)) {
				MessageBox.Show(Lang.str.convert_music_beats_unsupported_beats_exception, Lang.str.convert_music_beats, MessageBoxButtons.OK, MessageBoxIcon.Error);
				return;
			} else {
				string curBeats = beats == 4 ? Lang.str.metre_4_4 : beats == 3 ? Lang.str.metre_3_4 : beats == 6 ? Lang.str.metre_6_8 : "";
				string willBeats = beats == 4 ? Lang.str.metre_3_4 : Lang.str.metre_4_4;
				if (MessageBox.Show(string.Format(Lang.str.convert_music_beats_info, curBeats, willBeats), "", MessageBoxButtons.OKCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) == DialogResult.Cancel)
					return;
			}
			uint wBeats = beats == 4 ? 3u : beats == 6 ? 8u : 4u;
			AudioEvent audioEvent = audioEvents[0];
			Cursor = Cursors.WaitCursor;
			parent.ConvertMusicBeats(audioEvent);
			vegas.Project.Ruler.BeatsPerMeasure = wBeats;
			Cursor = Cursors.Default;
			if (CloseAfterOpenHelperCheck.Checked) CancelBtn_Click(null, null);
			else {
				IsIrreversibleCancel = true;
				vegas.UpdateUI();
				MessageBox.Show(Lang.str.convert_music_beats_complete, Lang.str.convert_music_beats, MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
			}
		}

		[DllImport("user32")]
		private static extern int SendMessage(IntPtr hwnd, int wMsg, int wParam, IntPtr lParam);
		private const int WM_SETREDRAW = 0xB;

		public void SetRedraw(bool enabled, Control control = null) {
			control = control ?? this;
			SendMessage(control.Handle, WM_SETREDRAW, enabled ? 1 : 0, IntPtr.Zero);
		}

		public void ResetSonarToDefault() {
			// 注意：该函数不负责处理清空现有数据。
			SonarList.Items.AddRange(new SonarItem[] {
				new SonarItem(this) { // 方 - Kick
					DrumSound = "Bass Drum",
					Duration = Timecode.FromString("0.1.000", RulerFormat.MeasuresAndBeats),
					Shape = 5,
					Border = 15,
					EndBorder = 0,
					Size = 10,
					EndSize = 20,
				},
				new SonarItem(this) { // 菱 - Snare
					DrumSound = "Snare",
					Duration = Timecode.FromString("0.1.000", RulerFormat.MeasuresAndBeats),
					Shape = 4,
					Border = 15,
					EndBorder = 0,
					Size = 7.5,
					EndSize = 17.5,
					Rotation = -30,
					Rotation2 = 30,
				},
				new SonarItem(this) { // 圆 - Crash
					DrumSound = "Cymbal",
					Duration = Timecode.FromString("0.2.000", RulerFormat.MeasuresAndBeats),
					Shape = 0,
					Border = 15,
					EndBorder = 0,
					Size = 10,
					EndSize = 25,
				},
			});
		}

		private void ExportConfigToolStripMenuItem_Click(object sender, EventArgs e) {
			SaveIni();
			SaveFileDialog saveFileDialog = new SaveFileDialog {
				Filter = EntryPoint.GetOpenFileDialogFilter(Lang.str.configuration_settings, "*.ini"),
				RestoreDirectory = false,
				FilterIndex = 1,
				Title = Lang.str.export,
			};
			if (saveFileDialog.ShowDialog() != DialogResult.OK) return;
			File.Copy(configIni.FilePath, saveFileDialog.FileName, true);
		}

		private void ImportConfigToolStripMenuItem_Click(object sender, EventArgs e) {
			OpenFileDialog openFileDialog = new OpenFileDialog {
				Filter = EntryPoint.GetOpenFileDialogFilter(Lang.str.configuration_settings, "*.ini"),
				RestoreDirectory = false,
				FilterIndex = 1,
				Title = Lang.str.import,
			};
			if (openFileDialog.ShowDialog() != DialogResult.OK) return;
			if (MessageBox.Show(Lang.str.about_to_import_config, Lang.str.import, MessageBoxButtons.OKCancel, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button2) == DialogResult.Cancel) return;
			File.Copy(openFileDialog.FileName, configIni.FilePath, true);
			MessageBox.Show(Lang.str.import_config_complete, Lang.str.import, MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
			exitDiscardingChangesToolStripMenuItem_Click(null, null);
		}

		private void DatamoshClipsFolderButton_Click(object sender, EventArgs e) {
			FolderBrowserDialog dialog = new FolderBrowserDialog();
			if (IsDatamoshFolderExist(false))
				dialog.DirectoryPath = DatamoshClipsFolderTxt.Text;
			if (dialog.ShowDialog(this) != DialogResult.OK) return;
			DatamoshClipsFolderTxt.Text = dialog.DirectoryPath;
			Registry.SetValue(Datamosh.Template.DataPath, "ClipFolder", dialog.DirectoryPath, RegistryValueKind.String);
		}

		private void DatamoshBtn_Click(object sender, EventArgs e) {
			Button btn = sender as Button;
			if (btn == null) return;
			var T = new Func<Type, bool, Tuple<Type, bool>>((t, b) => new Tuple<Type, bool>(t, b));
			Dictionary<Button, Tuple<Type, bool>> map = new Dictionary<Button, Tuple<Type, bool>> {
				{ DatamoshBtn, T(typeof(Datamosh.Datamosh), true) },
				{ DatamixBtn, T(typeof(Datamosh.Datamix), true) },
				{ LayeringBtn, T(typeof(Datamosh.Layering), true) },
				{ RenderingBtn, T(typeof(Datamosh.Render), true) },
				{ ScrambleBtn, T(typeof(Datamosh.Scramble), false) },
				{ AutomatorBtn, T(typeof(Datamosh.Automator), false) },
				{ StutterBtn, T(typeof(Datamosh.Stutter), false) },
				{ CameraShakeBtn, T(typeof(Datamosh.CameraShake), false) },
			};
			// Item2 的布尔值表示该功能是否需要设定剪辑缓存目录。
			if (!map.ContainsKey(btn)) return;
			if (map[btn].Item2 && !IsDatamoshFolderExist()) return;
			RequestToDatamosh = map[btn].Item1;
			Close();
		}

		public Type RequestToDatamosh = null;

		private void DatamoshClipsFolderOpenButton_Click(object sender, EventArgs e) {
			if (!IsDatamoshFolderExist()) return;
			OpenLink(DatamoshClipsFolderTxt.Text);
		}

		private bool IsDatamoshFolderExist(bool alert = true) {
			string datamoshFolder = DatamoshClipsFolderTxt.Text;
			if (string.IsNullOrWhiteSpace(datamoshFolder) || !Directory.Exists(datamoshFolder)) {
				if (alert)
					MessageBox.Show(Lang.str.datamosh_no_clips_folder_info, "Datamosh",
						MessageBoxButtons.OK, MessageBoxIcon.Error);
				return false;
			}
			return true;
		}

		private bool CheckMappingVelocityValidation() {
			if (AudioVelocityCheck.Enabled && AudioVelocityCheck.Checked)
				if (AudioVelocityLessBox.Value >= AudioVelocityMoreBox.Value || AudioGainLessBox.Value > AudioGainMoreBox.Value)
					return false;
			if (VideoVelocityCheck.Enabled && VideoVelocityCheck.Checked)
				if (VideoVelocityLessBox.Value >= VideoVelocityMoreBox.Value || VideoGainLessBox.Value > VideoGainMoreBox.Value)
					return false;
			return true;
		}

		private bool Is_CreateEventGroupCheck_CheckedChanging = false;
		private void CreateEventGroupCheck_CheckedChanged(object sender, EventArgs e) {
			if (Is_CreateEventGroupCheck_CheckedChanging) return;
			Is_CreateEventGroupCheck_CheckedChanging = true;
			if (sender == CreateEventGroupInVideoCheck)
				CreateEventGroupInAudioCheck.Checked = CreateEventGroupInVideoCheck.Checked;
			else if (sender == CreateEventGroupInAudioCheck)
				CreateEventGroupInVideoCheck.Checked = CreateEventGroupInAudioCheck.Checked;
			Is_CreateEventGroupCheck_CheckedChanging = false;
		}

		private void SetPreferredTrackCombo<T>(T track) where T : Track {
			bool isAudio = track is AudioTrack;
			ComboBox combo = isAudio ? AudioPreferredTrackCombo : VideoPreferredTrackCombo;
			foreach (object item in combo.Items)
				if (item is PreferredTrackWrapper<T>) {
					PreferredTrackWrapper<T> trackWrapper = item as PreferredTrackWrapper<T>;
					if (trackWrapper.Track == track) {
						combo.SelectedItem = item;
						return;
					}
				}
		}

		private bool doNotChangePreferredTracksWhileSwitchSourceFrom = false;
		private void RemoveSourceTrackEventsCheck_CheckedChanged(object sender, EventArgs e) {
			if (!RemoveSourceTrackEventsCheck.Checked || doNotChangePreferredTracksWhileSwitchSourceFrom) return;
			MediaSourceFrom sourceFrom = (MediaSourceFrom)ChooseSourceCombo.SelectedIndex;
			if (sourceFrom != MediaSourceFrom.SELECTED_CLIP || parent.audioVideoEnabledTable.SelectNoEvents) return;
			EntryPoint.EventSet eventSet = parent.selectedEventSet;
			if (eventSet.audioEvent != null)
				SetPreferredTrackCombo(eventSet.audioEvent.Track as AudioTrack);
			if (eventSet.videoEvent != null)
				SetPreferredTrackCombo(eventSet.videoEvent.Track as VideoTrack);
		}
	}

	#region 翻译
	/// <summary>
	/// 多语言翻译类
	/// </summary>
	public class Lang {
		public static Lang SChinese;
		public static Lang TChinese;
		public static Lang English;
		public static Lang Japanese;
		public static Lang Russian;
		public static Lang Vietnamese;
		public static Lang Indonesian;

		/// <summary>
		/// 获取当前语言的字符串值。
		/// </summary>
		public static Lang str = SChinese;
		/// <summary>
		/// 设定当前语言。
		/// </summary>
		/// <param name="lang">语言编码名称</param>
		public static void SetLanguage(string lang) {
			lang = lang.Trim().ToLower();
			if (lang.StartsWith("zh")) {
				if (lang == "zh-tw" || lang == "zh-hk" || lang == "zh-mo" || lang == "zht") str = TChinese;
				else str = SChinese;
			} else if (lang.StartsWith("ja")) str = Japanese;
			else if (lang.StartsWith("ru")) str = Russian;
			else if (lang.StartsWith("vi")) str = Vietnamese;
			else if (lang.StartsWith("id")) str = Indonesian;
			else str = English;
		}
		/// <summary>
		/// 获取当前语言名称。
		/// </summary>
		/// <returns></returns>
		public string GetLanguage() {
			return __name__;
		}

		public const string NO_TRANSLATOR = "null";
		public readonly string dialog_sign = "...";
		public readonly string dropdown_sign = "▾";
		public string __name__ = "简体中文",
			__translator__ = NO_TRANSLATOR,
			info_label_font = "Microsoft YaHei",
			ui_font = "Microsoft YaHei UI",
			restart_to_effect_language = "重新启动以使语言生效？",
			yes_to_restart_to_effect_language = "立即手动重启",
			no_to_restart_to_effect_language = "不重启以生效",
			version_number = "版本号",
			revision_date = "最后修订日期",
			vegas_version = "Vegas 版本",
			script_supported_vegas_version = "脚本支持版本",
			unsupported_vegas_version = "警告：当前脚本与您当前所使用的 Vegas 版本不匹配，部分功能可能不能正常工作！请重新安装正确版本的脚本。\n脚本支持的版本为：Vegas Pro {0}\n当前软件的版本为：Vegas Pro {1}",
			unsupported_vegas_version_title = "版本不匹配",
			unsupported_vegas_version_feature = "低于 Vegas Pro {0} 的版本不支持本功能。",
			check_update_title = "更新脚本",
			check_update_found = "检测到新版本，是否立即更新？\n\n最新版本：{0}\n当前版本：{1}",
			check_update_not_found = "已是最新版本！\n\n最新版本：{0}",
			check_update_on_startup = "启动时自动检查更新",
			download_latest_version = "下载最新版本",
			quick_config = "快速配置",
			midi_file_name = "MIDI 序列",
			all_files = "所有文件",
			choose_a_midi_file = "请选择一个 MIDI 文件",
			media_file_name = "支持的媒体文件",
			choose_a_source_file = "请选择一个视频或图片素材片段",
			error = "错误",
			details = "详细信息：",
			brightness_and_contrast = "亮度和对比度",
			invert = "反转",
			black_and_white = "黑白",
			lab_adjust = "LAB 调整",
			hsl_adjust = "HSL 调整",
			mirror = "镜像",
			pic_in_pic = "画中画",
			crop = "修剪",
			bz_masking = "贝兹蒙版",
			cookie_cutter = "区域裁切",
			check_pitch_shift_presets = "正在检查移调插件的预设是否可用⋯⋯",
			no_pitch_shift_presets = "由于您试图使用“移调”效果插件调音，但是系统发现您并没有完全配置好所需的所有音效预设。您可尝试由脚本尝试为您自动添加预设，可能会添加失败。如果失败，则请按照使用教程的说明来手动操作。是否由脚本为您自动添加预设？",
			yes_to_add_pitch_shift_presets = "自动添加",
			no_to_add_pitch_shift_presets = "返回配置",
			no_pitch_shift_presets_title = "未找到所有的移调音效预设",
			add_pitch_shift_presets_successful = "添加预设完成！",
			add_pitch_shift_presets_fail = "添加预设失败！",
			add_pitch_shift_presets_fail_title = "很遗憾",
			ensure_load_presets = "确定加载预设？",
			ensure_unload_presets = "确定卸载预设？",
			reverse_suffix_tag = "（反转）",
			effect_init_forward = "正",
			effect_init_reversed = "反",
			effect_init_turned = "倒",
			effect_init_left = "左",
			effect_init_right = "右",
			effect_init_up = "上",
			effect_init_down = "下",
			effect_init_left_up = "左上",
			effect_init_right_up = "右上",
			effect_init_left_down = "左下",
			effect_init_right_down = "右下",
			effect_init_invert = "负",
			effect_init_conform = "符",
			effect_init_opposite = "对",
			effect_init_chromatic = "彩",
			effect_init_monochrome = "灰",
			effect_init_counter = "逆",
			effect_init_stepon = "继",
			effect_init_flat = "扁",
			effect_init_thin = "细",
			effect_init_blur = "糊",
			effect_init_zoom_out = "缩小",
			effect_init_zoom_in = "放大",
			enable_all_effects = "开启所有效果",
			chorus = "合唱",
			vibrato = "颤音",
			wave = "波浪",
			multi_beat_delay = "多拍延迟",
			spherize = "球面化",
			warning_missing_plugin = "警告：找不到插件 “{0}”！",
			midi_channel = "通道",
			midi_notes_count = "音符数",
			midi_begin_note = "起音",
			midi_instrument = "乐器",
			instrument = "乐器",
			drum_kit = "鼓组",
			pan = "声像",
			pan_left_abbr = "左",
			pan_right_abbr = "右",
			pan_center_abbr = "中",
			pan_dynamic_abbr = "起",
			yes = "是",
			no = "否",
			error_code = "错误代码：",
			processing_otomad = "正在生成音 MAD / YTPMV⋯⋯",
			processing_otomad_swirl = "正在生成滑音效果⋯⋯",
			processing_ytp = "正在生成 YTP⋯⋯",
			processing_it = "正在处理它",
			processing_tracks = "正在生成第 {0} 个轨道，共 {1} 个。通道 {2}{3}⋯⋯",
			processing_tracks_swirl = "正在生成第 {0} 个轨道的滑音效果，共 {1} 个。通道 {2}{3}⋯⋯",
			real_time_update = "实时更新当前进度（会减慢生成速度）",
			replacer_is = "指定的替换项为",
			replacer_info = "请先在轨道窗口中选中替换与被替换的素材，然后指定一个素材为替换的素材，剩余素材均为被替换素材。\n请先将替换素材的音视频创建分组，并确保替换素材放置在时间靠后的位置并且尽量不与其它被替换素材位于同一轨道。",
			replace_clips = "替换轨道素材",
			replaced_info = "则剩余 {0} 项轨道剪辑将被替换为选定素材。",
			replaced_label = "被替换项",
			replacer_label = "替换项",
			separation_replaced_info = "已选中 {0} 个轨道素材，其中 {1} 个音频剪辑，{2} 个视频剪辑。",
			separation_set_replaced = "将选中的 {0} 个素材设为被替换项",
			separation_set_replacer = "将选中的 {0} 个素材设为替换项",
			separation_back_to_select = "返回 Vegas 选定素材",
			separation_use_clip_group = "同时替换分组内其它剪辑",
			separation_reserve_original_name = "保留原剪辑名称",
			replacements_classic_specify = "同时指定",
			replacements_separation_specify = "分别指定",
			view = "查看",
			selected_items = "选中项",
			replace_clips_form_ensure_to_close = "在“分别指定”中已指定有部分轨道素材。\n退出之后系统可能不会保留您的更改。",
			track = "轨道",
			submit_select = "设定选中(&S)",
			every_few = "每几个选择一个",
			which_one = "选择每组第几个",
			select_how_many = "每次要选取几个",
			reset_select = "重置选择(&R)",
			quick_select_interval = "快速间隔选择",
			select_interval_info = "请先在 Vegas 轨道中选中一些素材，然后再打开本对话框，使用下面的功能。",
			select_events_count_info = "已选中 {0} 个轨道剪辑。",
			select_videotracks_count_info = "已选中 {0} 个视频轨道。",
			select_audioevents_count_info = "已选中 {0} 个音频轨道剪辑。",
			select_videoevents_count_info = "已选中 {0} 个视频轨道剪辑。",
			select_source_count_info = "已选中 {0} 项媒体素材。",
			select_tracks_count_info = "已选中 {0} 个轨道。",
			square = "平方",
			custom = "自定义",
			row_count = "行数",
			column_count = "列数",
			fill = "填充",
			adapt = "适应",
			increase_padding = "边距",
			min = "最小值",
			max = "最大值",
			mirror_edges = "镜像边缘",
			disable_flip = "不翻转",
			even_column = "偶数列",
			odd_column = "奇数列",
			even_row = "偶数行",
			odd_row = "奇数行",
			auto_layout_tracks = "自动布局轨道",
			grid_layout = "网格布局",
			box_3d_layout = "3D 方盒布局",
			selected_tracks_too_much = "您所选取的轨道数目过多，有 {0} 个，超出使用功能范围。\n请选取少量轨道后重试。",
			selected_tracks_too_much_title = "选取轨道数目过多",
			bottom_surface = "底面",
			top_surface = "顶面",
			right_surface = "右面",
			left_surface = "左面",
			back_surface = "后面",
			front_surface = "前面",
			box_3d_layout_info = "由于脚本功能限制，将会新建轨道并将选定轨道中的剪辑移动过去，原轨道中的轨道运动、效果等信息将会丢失。\n请在下方选定立方体的各个面所使用的轨道，如果为空则表示不设定该面。",
			delete_original_tracks = "删除原轨道",
			use_video_longer_side = "使用视频的长边作为立方体的棱长",
			use_video_longer_side_tooltip = "勾选后，将以项目设置中视频最长的一条边（即宽度与高度的最大值）作为立方体的棱长。",
			gradient_tracks = "渐变轨道",
			gradient_tracks_info = "选择一种渐变效果应用到所选的视频轨道：",
			rainbow_color = "彩虹色",
			gradually_saturated = "逐渐饱和",
			gradually_contrasted = "逐渐对比",
			threshold = "阈值",
			alternately_chromatic = "彩灰交替",
			alternately_negative = "正负交替",
			descending = "降序排序",
			ascending = "升序排序",
			change_tune_method = "更改调音算法",
			change_tune_method_info = "仅支持音频事件属性中的调音方法，不支持“移调”插件中的调音方法。",
			time_stretch_pitch_shift = "时间拉伸/音调转换",
			formant_change = "共振峰移位",
			pitch_change = "音调更改",
			method = "方法",
			pitch_lock = "锁定以拉伸",
			lock_pitch_instead_of_rate = "锁定音高而不是速度",
			none = "无",
			elastique = "Élastique",
			classic = "古典",
			elastique_pro = "专业",
			elastique_efficient = "高效",
			elastique_soloist_monophonic = "独奏（单声道）",
			elastique_soloist_speech = "独奏（语音）",
			classic_a01 = "A01. 音乐 1（最小变调，可能有回音）",
			classic_a02 = "A02. 音乐 2",
			classic_a03 = "A03. 音乐 3（回音较小）",
			classic_a04 = "A04. 音乐 4（快速，适合低音）",
			classic_a05 = "A05. 音乐 5",
			classic_a06 = "A06. 音乐 6",
			classic_a07 = "A07. 语音 1",
			classic_a08 = "A08. 语音 2",
			classic_a09 = "A09. 语音 3（快速）",
			classic_a10 = "A10. 独奏乐器 1",
			classic_a11 = "A11. 独奏乐器 2",
			classic_a12 = "A12. 独奏乐器 3",
			classic_a13 = "A13. 独奏乐器 4（回音较小）",
			classic_a14 = "A14. 独奏乐器 5",
			classic_a15 = "A15. 独奏乐器 6",
			classic_a16 = "A16. 独奏乐器 7（快速）",
			classic_a17 = "A17. 鼓，无音高（最小回音）",
			classic_a18 = "A18. 鼓（更适用于通鼓）",
			classic_a19 = "A19. 鼓（微弱回音）",
			batch_subtitle_generation = "批量生成字幕",
			batch_subtitle_generation_presets = "选择一个预先设定好的“字幕和文字”媒体发生器的预设：",
			batch_subtitle_generation_subtitles = "输入要插入的字幕文本（一行一个，忽略空行）：",
			batch_subtitle_generation_single_duration = "每个字幕持续时间",
			batch_subtitle_generation_suggestion_info = "稍后可开启“自动跟进”功能以便后续调整时间。",
			open = "打开",
			text_document = "文本文档",
			file_too_large_info = "文件过大，是否仍要打开？",
			will_clear_existing_text_info = "将会清除现有的文本内容，系统可能不会保留您的更改。",
			import_from_file = "从文件中导入",
			find_clips = "查找轨道素材",
			find_clips_select_info = "选中的第一个轨道剪辑",
			find_clips_info = "在上方选中相匹配的剪辑，确定之后将会选中这些剪辑。",
			find_clips_header_name = "名称",
			find_clips_header_num = "数目",
			find_clips_match_source = "与选中轨道剪辑相同的所有剪辑",
			find_clips_match_source_and_offset = "与选中轨道剪辑相同且开始偏移量相等的所有剪辑",
			find_clips_match_name = "与指定名称相匹配的剪辑",
			convert_music_beats = "转换音乐节拍",
			convert_music_beats_complete = "完成转换音乐节拍。",
			convert_music_beats_info = "即将对选中的音乐音频剪辑从{0}转换到{1}。",
			metre_4_4 = "四四拍",
			metre_3_4 = "四三拍",
			metre_6_8 = "八六拍",
			custom_fade_gain = "自定渐入增益",
			from = "从",
			to = "至",
			midi_channel_advanced = "MIDI 轨道高级属性",
			channel = "通道",
			name = "名称",
			edit_notes = "编辑所选轨道音符...",
			auto_layout_tracks_midi_channel_advanced_info = "仅在生成视频且不启用五线谱可视化效果时有效。",
			reset = "重置",
			select_all = "全选",
			select_none = "全不选",
			invert_selection = "反选",
			replace = "替换(&R)",
			apply = "应用(&A)",
			close = "关闭(&C)",
			complete = "完成(&O)",
			cancel = "取消(&C)",
			about = "关于(&A)",
			ok = "确定(&O)",
			balloon_title = "填写说明",
			midi_start_second_tooltip = "用于截取 MIDI 音乐的一部分。\n单位：秒。",
			midi_end_second_tooltip = "此处填写需要读取 MIDI 文件的时间长度。\n注意如果填写的值过小，将截去多余时间部分的音符。\n如果此处填写的值比起始秒数小或相等，则始终表示持续到整个音乐时长末尾。\n单位：秒。",
			midi_beat_conbo_tooltip = "目前仅用于五线谱的分页功能。\n暂时无法通过 MIDI 文件自动推测。",
			source_start_time_tooltip = "此处填写媒体素材裁剪的开始时间。\n单位：秒。",
			source_end_time_tooltip = "注意如果此处填写的数值比入点秒数小或相等，则始终表示持续到素材时间末尾。\n单位：秒。",
			no_tune = "不调音",
			pitch_shift_plugin = "移调效果插件",
			elastique_method = "弹性音调更改",
			classic_method = "古典音调更改",
			fool_tuning_method = "无音阶调音",
			sine_wave = "正弦波",
			triangle_wave = "三角波",
			square_wave = "方波",
			sawtooth_wave = "锯齿波",
			tune_method_tooltip = "“移调效果插件”表示使用“音频 FX”中的“移调”效果插件改变音调，需要配置预设。\n“弹性音调更改”表示使用“Élastique”拉伸方式改变音调，也就是键盘上 +、- 键直接改变音调，\n有音高范围限制。",
			audio_lock_stretch_pitch_tooltip = "采用重采样方式，随着速度变化而改变音高。如果使用的是“弹性音调\n更改”方法，那么将会禁用拉伸音频功能。",
			preview_beep_duration_tooltip = "预听标准音高所持续的时间。\n单位：毫秒。",
			preview_tune_audio_tooltip = "勾选后，预听音频时会将音频素材调整到主音高中央 C。\n否则，预听标准音高将会播放原始音高处所设定的音高。",
			sheet_position_tooltip = "五线谱中间第三根线到屏幕中心的距离，上正下负。\n单位：像素。",
			sheet_width_tooltip = "将在屏幕中间所填的宽度内显示音符，用于左右留白，给左侧的谱号留间距。\n单位：像素。",
			sheet_gap_tooltip = "五线谱线与线之间的间距。\n单位：像素。",
			sheet_line_thickness_tooltip = "生成五线谱的谱线时，五线谱谱线的粗细。当粗细值达到 100 % 后，谱线将会占满整个谱线间距。\n单位：百分比。",
			sheet_relative_tooltip = "勾选后，下方所填参数的像素单位将以相对于 1920 × 1080\n的尺寸进行定位；反之则以项目尺寸定位。",
			sheet_relative = "使用相对值",
			preview_base_pitch_tooltip = "请确保开启声音并且未将声音方案设置为无声。\n如果仍没有声音，请重启系统。",
			ytp_max_length_tooltip = "指定单个轨道剪辑的最大长度。\n单位：毫秒。",
			ytp_min_length_tooltip = "指定单个轨道剪辑的最小长度。\n单位：毫秒。",
			file = "文件(&F)",
			save_config = "保存配置(&S)",
			reset_config = "重置配置(&R)",
			exit_discarding_changes = "放弃更改并退出(&D)",
			exit = "退出(&X)",
			pitch_shift_preset = "移调插件预设(&P)",
			load_presets = "加载预设(&L)",
			unload_presets = "卸载预设(&U)",
			form_size = "窗体大小(&F)",
			remember_form_size = "记住窗体大小",
			remember_always_form_size = "每次都记住窗体大小",
			remember_once_form_size = "记住一次窗体大小",
			restore_default_form_size = "下次恢复默认窗体大小",
			export_config = "导出配置(&E)",
			import_config = "导入配置(&I)",
			export = "导出",
			import = "导入",
			configuration_settings = "配置设置",
			about_to_import_config = "即将导入配置。\n注意：如果配置设置文件不合规范，可能导致脚本无法正常启动。\n是否继续？",
			import_config_complete = "导入完成，请手动重启脚本。",
			help = "帮助(&H)",
			user_help = "使用说明",
			trouble_shooting = "疑难解答",
			update_info = "更新说明",
			repository_link = "仓库地址",
			latest_version_link = "最新版本链接",
			roadmap = "路线图",
			send_issues = "反馈问题或建议",
			update_logs = "更新日志",
			tutorial_video = "教程视频",
			release_notes = "发行说明",
			staff_visualizer_documentation = "五线谱可视化文档",
			english_documentations = "英语说明文档",
			chinese_documentations = "中文说明文档",
			check_update = "检查更新(&U)",
			why_ok_btn_is_disabled = "为什么无法点击完成按钮？",
			experimental_theme = "实验性主题",
			media = "媒体",
			audio = "音频",
			video = "视频",
			staff = "五线谱",
			ytp = "YTP",
			helper = "工具",
			midi_settings = "MIDI 属性",
			midi_start_time = "起始秒数",
			midi_end_time = "终止秒数",
			bpm_setting = "设定 BPM 速度为",
			midi_beat = "节拍　　",
			midi_channel_setting = "使用 MIDI 轨道",
			browse = "浏览...",
			advanced = "高级...",
			presets = "预设",
			no_midi_selected = "<未选择 MIDI 文件>",
			choose_midi_file = "选择 MIDI 文件",
			midi_dynamic_midi_bpm = "动态 MIDI 速度",
			midi_midi_bpm = "MIDI 速度",
			midi_project_bpm = "项目速度",
			midi_custom_bpm = "自定义",
			dynamic_midi_bpm_info = "{0} 起始的动态速度",
			dynamic_midi_beat_info = "{0} 起始的动态节拍",
			colon = "：",
			semicolon = "；",
			source_settings = "素材属性",
			generate_at_begin = "项目开始处",
			generate_at_cursor = "光标处",
			generate_position = "设定生成开始位置",
			generate_below_top_adjustment_tracks = "生成在顶层调整轨道的下方",
			remove_source_track_events = "生成完成后移除作为源素材的轨道事件",
			select_all_generated_events = "生成完成后选中生成的所有事件",
			choose_source_file = "选择媒体素材",
			selected_media = "选中的媒体文件",
			selected_clip = "选中的轨道素材",
			source_start_time = "入点秒数",
			source_end_time = "出点秒数",
			parameters = "参数",
			linear = "线性",
			fast = "快速",
			slow = "慢速",
			smooth = "平滑",
			sharp = "急剧",
			hold = "保留",
			fade_in = "渐入　　",
			fade_out = "渐出　　",
			tune = "调音",
			tune_method = "调音方法",
			base_pitch = "原始音高",
			preview_listen = "预听",
			preview_base_pitch = "预听标准音高(&B)",
			preview_audio = "预听音频(&P)",
			stop_preview_audio = "停止预听(&P)",
			lock_attr = "锁定属性",
			preview_listen_attr = "预听属性",
			preview_tune_audio = "使音频调整到主音高",
			reserve_formant = "保持共振峰",
			stretch_attr = "拉伸属性",
			create_event_group = "创建分组",
			aconfig = "生成音频",
			audio_stretch = "拉伸音频",
			audio_loop = "循环音频",
			audio_normalize = "规范化音量",
			audio_lock_stretch_pitch = "锁定伸缩与音调",
			auto_pan = "自动声像",
			velocity = "力度",
			mapping_velocity = "映射力度",
			notes_velocity = "音符力度",
			volume_gain = "音量增益",
			opacity = "不透明度",
			set_fade_by_percent = "设定为百分比",
			set_fade_by_timecode = "设定为时间码",
			video_glow_bright = "发光亮度",
			video_glow = "发光",
			video_start_size = "起始尺寸",
			video_end_size = "终止尺寸",
			video_start_rotation = "起始旋转",
			video_end_rotation = "终止旋转",
			video_start_h_trans = "起始平移",
			video_end_h_trans = "终止平移",
			video_start_v_trans = "起始直移",
			video_end_v_trans = "终止直移",
			video_start_hue = "起始色相",
			video_end_hue = "终止色相",
			video_start_saturation = "起始饱和",
			video_end_saturation = "终止饱和",
			video_start_contrast = "起始对比",
			video_end_contrast = "终止对比",
			video_start_threshold = "起始阈值",
			video_end_threshold = "终止阈值",
			multitrack_for_chords = "复音多轨",
			effect = "效果",
			visual_effect = "视觉效果",
			initial_visual_effect = "初始值",
			apply_visual_effect = "应用视觉效果",
			pv_rhythm_visual_effect = "映像节奏视觉效果",
			flip_class = "翻转类",
			rotation_class = "旋转类",
			scale_class = "缩放类",
			mirror_class = "镜像类",
			invert_class = "反转类",
			hue_class = "色相类",
			monochrome_class = "单色类",
			time_class = "时间类",
			time_class_2 = "时间类 2",
			expansion_and_compression_class = "扩缩类",
			swing_class = "摇摆类",
			blur_class = "模糊类",
			no_effects = "无效果",
			h_flip = "水平翻转",
			v_flip = "垂直翻转",
			ccw_flip = "逆时针翻转",
			cw_flip = "顺时针翻转",
			h_flip_sustain = "水平翻转保持",
			h_flip_relay = "水平翻转中继",
			h_flip_invert = "水平翻转反转",
			ccw_rotate = "逆时针旋转",
			cw_rotate = "顺时针旋转",
			turned = "颠倒",
			zoom_out_in = "缩小后放大",
			h_mirror = "水平镜像",
			v_mirror = "垂直镜像",
			ccw_mirror = "逆时针镜像",
			cw_mirror = "顺时针镜像",
			negative = "颜色反转",
			lumin_invert = "亮度反转",
			hue_invert = "色相反转",
			step_change_hue = "{0} 步色差",
			chromatic_and_monochrome = "彩灰",
			pingpong = "乒乓效应",
			whirl = "爱的魔力转圈圈",
			sharp_rewind = "急剧倒带",
			wobble_period = "摆动周期",
			vertical_expansion = "垂直扩张",
			vertical_expansion_with_rebound = "垂直扩张并回弹",
			vertical_compression = "垂直压缩",
			vertical_compression_with_rebound = "垂直压缩并回弹",
			oblique_expansion_and_compression = "斜向扩缩",
			puyo_puyo = "魔法气泡",
			pendulum = "左右摇摆",
			gaussian_blur = "高斯模糊",
			radial_blur = "径向模糊",
			vconfig = "生成视频",
			video_stretch = "拉伸视频",
			video_loop = "循环视频",
			freeze_first_frame = "静态画面",
			freeze_last_frame = "禁止延长",
			legato = "填补间隙",
			legato_staccato = "不填补",
			legato_one_beat_longest = "最长一拍",
			legato_one_bar_longest = "最长一小节",
			legato_unlimited = "无限填补",
			no_stretching = "不拉伸",
			flexing_and_extending = "可屈伸",
			extending_only = "仅伸展",
			flexing_only = "仅屈折",
			sheet_width = "谱面宽度",
			sheet_thickness = "谱线粗细",
			sheet_color = "谱线颜色",
			sheet_position = "谱面位置",
			sheet_clef = "谱号",
			sheet_gap = "谱线间距",
			sheet_g_clef = "高音",
			sheet_f_clef = "低音",
			sheet_notes_shift = "音符偏移",
			sheet_config = "启用五线谱可视化效果",
			sheet_generate_lines = "生成谱线",
			sheet_config_info = "欲开启五线谱视觉效果，需要先开启“生成视频”选项。\n开启本功能将会禁用映像节奏视觉效果和视频拉伸选项。",
			sheet_notes_params = "音符参数",
			sheet_sheet_line_params = "谱线参数",
			sheet_legacy_method = "旧版定位方式",
			sheet_legacy_method_tooltip = "将使用与旧版脚本五线谱可视化 v0.1 相同的定位方式。\n即音符和谱线的位置和形状由轨道运动定位。",
			sheet_clef_params = "谱号参数",
			sheet_generate_clef = "生成谱号",
			sheet_clef_scale = "谱号缩放",
			sheet_clef_color = "谱号颜色",
			sheet_padding_left = "谱左边距",
			sheet_padding_right = "谱右边距",
			sheet_freeze_at_noteoff = "定格在音符结尾处",
			ytp_clips_count = "剪辑数目",
			ytp_min_length = "最小长度",
			ytp_max_length = "最大长度",
			ytp_chorus = "合唱",
			ytp_pitch_change = "更改音调",
			ytp_vibrato = "颤音（概率性附加波浪效果）",
			ytp_reverse = "倒放",
			ytp_delay = "延迟",
			ytp_speed_change = "更改速度",
			ytp_hue_change = "更改色相",
			ytp_hue_rotate = "旋转色相",
			ytp_monochrome = "黑白",
			ytp_negative = "颜色反转（概率性附加降调效果）",
			ytp_high_freq_repeat = "高频重复",
			ytp_random_tone = "随机调音（附加水平翻转效果）",
			ytp_enlarge = "放大（附加增加音量）",
			ytp_spherize = "球面化",
			ytp_mirror = "镜像",
			ytp_high_contrast = "高对比（附加增加音量）",
			ytp_oversaturation = "过饱和（概率性附加升调效果）",
			ytp_emphasize_thrice = "重说三（附加放大聚焦效果）",
			ytp_info = "在当前选项卡下单击“完成”按钮，将会生成 YTP 而不是音 MAD / YTPMV。\n除“生成音频”“生成视频”外其它的参数设置并不会在 YTP 中使用。",
			video_preset_fade_out = "淡出",
			flashlight = "闪光",
			horizontal_movement = "水平移动",
			vertical_movement = "垂直移动",
			threshold_change = "阈值变化",
			video_preset_enter = "进入",
			video_preset_enter_staff = "进入（五线谱）",
			video_preset_normal = "正常",
			oversaturation = "过饱和",
			high_contrast = "高对比",
			sure_to_delete = "确定要删除选中项？",
			sure_to_reset = "确定要重置？",
			sonar = "声呐",
			sonar_config = "为鼓组启用声呐效果",
			separate_drums = "分离不同鼓声",
			difference_composite_mode = "差值轨道合成模式",
			shadow = "阴影",
			shadow_color = "阴影颜色",
			matched_drum_sound = "匹配鼓声",
			shape = "形状",
			color = "颜色",
			duration = "持续时间",
			curve = "曲线",
			start_border = "起始边框",
			end_border = "终止边框",
			start_size = "起始大小",
			end_size = "终止大小",
			x_center = "水平中心",
			y_center = "垂直中心",
			start_x_offset_odd = "起始水平偏移单数",
			start_x_offset_even = "起始水平偏移双数",
			start_y_offset_odd = "起始垂直偏移单数",
			start_y_offset_even = "起始垂直偏移双数",
			prestart_x_offset_odd = "预先水平偏移单数",
			prestart_x_offset_even = "预先水平偏移双数",
			prestart_y_offset_odd = "预先垂直偏移单数",
			prestart_y_offset_even = "预先垂直偏移双数",
			start_rotation_odd = "起始旋转单数",
			start_rotation_even = "起始旋转双数",
			fade_in_curve = "渐入曲线",
			fade_out_curve = "渐出曲线",
			cookie_cutter_shape_circle = "圆形",
			cookie_cutter_shape_oval = "椭圆形",
			cookie_cutter_shape_oval_side = "椭圆边",
			cookie_cutter_shape_rectangle = "矩形",
			cookie_cutter_shape_diamond = "菱形",
			cookie_cutter_shape_square = "方形",
			cookie_cutter_shape_triangle_up = "向上三角形",
			cookie_cutter_shape_triangle_right = "向右三角形",
			cookie_cutter_shape_triangle_down = "向下三角形",
			cookie_cutter_shape_triangle_left = "向左三角形",
			cookie_cutter_shape_arrowhead_up = "向上箭头",
			cookie_cutter_shape_arrowhead_right = "向右箭头",
			cookie_cutter_shape_arrowhead_down = "向下箭头",
			cookie_cutter_shape_arrowhead_left = "向左箭头",
			select_interval = "间隔选择",
			select_interval_configform_info = "本功能旨在辅助用户每隔一个或几个选中一个素材，然后可以执行“粘贴事件属性”等操作。",
			quick_normalize = "快速规范音量",
			quick_normalize_configform_info = "将选中的多个音频轨道剪辑全部规范化音量。",
			quick_normalize_complete = "完成规范化音量。",
			replace_clips_configform_info = "将多个轨道剪辑替换为指定的新轨道剪辑。",
			auto_layout_tracks_configform_info = "类 YTPMV 风格自动布局选中的轨道。",
			change_tune_method_configform_info = "将多个音频轨道剪辑统一更改为指定的调音算法。",
			batch_subtitle_generation_configform_info = "预先设定好“字幕和文字”的预设，然后在此添加多行文本。",
			find_clips_configform_info = "根据指定的条件（如剪辑名称、与选中剪辑相同的素材等）选中符合条件的所有轨道剪辑。",
			apply_visual_effect_configform_info = "将指定的视频轨道剪辑应用映像节奏视觉效果。",
			convert_music_beats_configform_info = "将指定的音乐的节拍在四四拍、四三拍、八六拍等之间进行转换。",
			custom_fade_gain_configform_info = "将多个轨道剪辑根据指定的规则来更改增益值。",
			select_exactly_one_audio_event_configform_info = "必须恰好选择 1 个音频轨道剪辑，不得多选或少选。",
			select_exactly_one_video_event_configform_info = "必须恰好选择 1 个视频轨道剪辑，不得多选或少选。",
			clear_tracks_motion = "清除轨道运动",
			clear_tracks_effect = "清除轨道效果",
			track_legato = "填补轨道间隙",
			track_legato_stacking = "堆积素材（应用于当前轨道）",
			track_legato_stacking_all_tracks = "堆积素材（应用于所有轨道）",
			track_legato_stacking_selected = "堆积素材（仅应用于选中素材）",
			track_legato_stacking_all_after = "堆积素材（也应用于后续所有素材）",
			track_legato_limit_stretch = "拉伸素材（限制在拉伸极限范围之内）",
			track_legato_stretch = "拉伸素材（超出拉伸极限范围之后再延长素材）",
			track_legato_lengthen = "延长素材（改变素材持续时间）",
			increase_spacing = "增加间隙（应用于当前轨道）",
			increase_spacing_all_tracks = "增加间隙（应用于所有轨道）",
			increase_spacing_info = "在指定的剪辑之间增加的间隙时间",
			effect_to_selected_events = "仅应用于选中的轨道剪辑",
			include_events_within_group = "也应用于同分组内的其它轨道剪辑",
			reverse_direction = "反转方向",
			select_multiple_tracks_warning = "警告：您选中的轨道或轨道剪辑所位于的轨道数目超过 1 个，处理结果可能与您的预期不符。\n是否继续执行？",
			drag_here_to_import = "拖动到这里以导入",
			helper_info = "以下功能只是一些独立的辅助功能，与其它生成音视频的参数无关。",
			helper_info_warning = "注意：操作之后将会关闭本对话框，您可以稍后再重新打开，部分您未保存的更改可能会丢失！",
			close_after_open_helper = "操作完成之后关闭本对话框",
			mosh = "抹失",
			datamosh_clips_folder = "数据抹失片段目录",
			datamosh_not_installed_info = "未安装数据抹失扩展包，下载后方可使用全部功能。",
			datamosh_install = "下载扩展包",
			datamosh_no_clips_folder_info = "请先指定一个用于存放生成的数据抹失片段的文件夹。",
			datamosh_info = "锘挎藪琚沬妷是一种磨损素材以产生故障效果的技术。",
			datamosh = "数据抹失",
			datamix = "数据抹拭",
			layering = "多层叠化",
			rendering = "预渲染化",
			scramble = "随机扰乱",
			automator = "自动生效",
			stutter = "结巴效果",
			camera_shake = "镜头摇晃",
			datamosh_configform_info = "快速自动地对视频选中区域进行数据抹失。",
			datamix_configform_info = "快速自动地对视频选中区域进行数据抹失（将一个剪辑抹入另一个剪辑）。",
			layering_configform_info = "快速自动地对选中剪辑进行多层叠化。",
			rendering_configform_info = "快速自动地对视频选中区域进行渲染。",
			scramble_configform_info = "快速自动地对选中剪辑进行打乱。",
			automator_configform_info = "快速自动地为选中视频效果设定随机值。",
			stutter_configform_info = "口吃剪辑（向前向后播放）。",
			camera_shake_configform_info = "使用平移/裁切来摇晃选中剪辑。",
			otomad_helper_config = "Otomad Helper for Vegas - 配置",
			reset_config_successful = "重置完成，请重新启动脚本。",
			reset_config_successful_title = "重置用户配置",
			sure_to_reset_config = "确定要重置用户配置吗？\n\n重置后您的用户配置数据将会丢失。",
			about_title = "关于",
			script_author = "脚本作者",
			script_original_author = "脚本原作者",
			script_translator = "脚本翻译",
			documentation = "说明文档",
			ranne = "兰音",
			why_ok_btn_is_disabled_info = "请按照下列步骤依次检查问题：",
			why_ok_btn_is_disabled_no_audio_and_video_enabled = "“生成音频”与“生成视频”被同时取消勾选。请至少勾选生成其中一项。",
			why_ok_btn_is_disabled_no_media_take = "所选的媒体素材来源不包含任何有效媒体资源。",
			why_ok_btn_is_disabled_no_midi_select = "若要生成音 MAD / YTPMV，请先选择一个 MIDI 序列文件。",
			why_ok_btn_is_disabled_in_helper_tab = "为避免误操作，切勿在“工具”和“抹失”选项卡下进行提交生成操作。",
			why_ok_btn_is_disabled_unknown_problem = "未知原因。",
			no_selected_media_warning = "警告：您没有在项目媒体窗口中选中任何有效媒体素材！",
			no_selected_clip_warning = "警告：您没有在轨道窗口中选中任何剪辑片段！",
			preview_audio_track_name = "预听音频轨道（应该被删除！）",
			no_midi_exception = "错误：未选择 MIDI 文件。\n\n请重新打开脚本参数配置对话框，然后在“MIDI 属性”分组中点击“浏览”按钮，打开一个有效的 MIDI 文件。",
			no_media_exception = "错误：未选择媒体文件。\n\n请重新打开脚本参数配置对话框，然后在“媒体属性”分组中点击“浏览”按钮，打开一个有效的媒体文件。",
			no_track_info_exception = "错误：没有 MIDI 音轨。\n\n可能的原因：\n1. 您没有选择一个 MIDI 音轨；\n2. 该 MIDI 文件中没有任何音轨；\n3. 该 MIDI 文件已损坏或文件格式不受支持。",
			no_plugin_pitch_shift_exception = "错误：无法调用移调插件。\n\n请按照教程文档 {0} 的指引正确操作。\n不过，根据这个更新版本的脚本，按理应当是中英文版本均可正常运行的。\n因此很有可能您是使用其它语言的 Vegas 造成的（逃",
			no_plugin_presets_exception = "错误：无法调用移调插件的预设效果。\n\n请按照教程文档 {0} 的指引正确操作。\n确保在移调插件中手动添加了所有的 25 个预设，且命名正确。\n\n补充说明：具体可见上述链接专栏中对于安装方法的说明。这 25 个预设是上下一个八度以内的所有变调种类，\n缺少任何一个都有可能出错。手动添加预设的确非常麻烦，但 Vegas 无法使用脚本来指定变调的具体参数，\n因此只好绕这个弯子。",
			no_plugin_name_exception = "错误：无法调用{0}插件。\n\n可能您使用的 Vegas 版本不支持该插件。",
			no_take_exception_ps = "补充说明：若仍不能解决，说明该素材文件可能是 Vegas 不支持的格式，\n可以手动把该文件拖入 Vegas 中看一下是否视频音频都正常。",
			no_audio_take_exception = "错误：无法读取音频媒体流。\n\n在设置界面，纯视频/图片素材不要勾选“生成音频”。\n\n",
			no_video_take_exception = "错误：无法读取视频媒体流。\n\n在设置界面，纯音频素材不要勾选“生成视频”。\n\n",
			no_media_take_exception = "错误：无法读取媒体。\n\n您所选的文件格式不受 Vegas 支持，请检查该媒体文件是否损坏，或未安装对应的 Vegas 解码器。\n\n",
			not_a_midi_file_exception = "错误：无法读取 MIDI 文件。\n\n解决方法：用宿主软件导入该 MIDI，然后重新输出一个新的 MIDI 文件。\n\n补充说明：MIDI 文件有多种格式，脚本不保证都能够正确读取。所幸主流宿主软件在\n默认设置下导出的 MIDI 文件一般是可以读取的。（目前测试过 FL Studio、LMMS \n与 Music Studio for iPad。）",
			no_selected_exception_ps = "补充说明：如果您想手动在文件夹中选择一个媒体素材，那么请点击其右边的“浏览”按钮，\n选择一个媒体素材。并确保左侧的下拉菜单中选中的是您所选文件所在的路径。",
			no_selected_media_exception = "错误：没有在项目媒体窗口中选择任何媒体。\n\n请在项目媒体窗口中选择一个媒体，然后重新打开参数配置窗口，并在素材设置中选择“选中的媒体文件”。\n\n",
			no_selected_clip_exception_short = "错误：没有在轨道中选择任何剪辑。",
			no_selected_clip_exception = "错误：没有在轨道中选择任何剪辑。\n\n请在轨道中选择一个剪辑，然后重新打开参数配置窗口，并在素材设置中选择“选中的轨道素材”。\n\n",
			no_time_stretch_pitch_shift_exception = "错误：选定素材音调转换方法被设置为不调音。\n\n很有可能您使用的是“选中的轨道素材”。出现了这个错误不怪你，要怪就怪 Vegas 这个脑残设计。\n\n解决方法：请重新选中您的轨道素材，右键音频部分，选择底部的“属性”。将“时间拉伸/音调转换”的“方法”设定为“élastique”。\n然后点击确定即可。\n\n补充说明：如果某个音频事件没有进行变调操作，然后打开了它的属性，那么其属性中的“时间拉伸/音调转换”的“方法”会被\n自动修改为“无”，点击确定就会生效。这时你会发现键盘上的 +、- 键调音操作无效了。这时必须重新打开音频事件的属性，\n将“时间拉伸/音调转换”的“方法”设定为“élastique”，不必设置“音调更改”，点击确定即可。",
			read_config_fail_exception = "错误：读取参数配置文件失败。\n\n很遗憾您遇到了这个不可预见的错误。我们将会清除用户配置设置并恢复为默认值以便解决问题。\n建议将这个错误告诉作者以便快速解决问题。\n将会退出此脚本，然后劳烦阁下手动重新打开此脚本。",
			fail_to_select_clips_exception = "错误：选取轨道剪辑出错。\n\n请先在轨道窗口中选取部分轨道剪辑。",
			fail_to_select_tracks_exception = "错误：选取轨道出错。\n\n请先在轨道窗口中选取部分视频轨道。",
			ytp_over_length_exception = "错误：指定的 YTP 最小长度超过了媒体长度。\n\n指定的 YTP 最小长度过大，请尝试更小的值。或所选媒体素材长度过小。",
			ytp_in_media_generator_exception = "错误：对媒体生成器产生的媒体应用 YTP。\n\n应用 YTP 必须使用本地媒体文件，不要使用媒体生成器生成的媒体。",
			ytp_eliminate_duplicates_finally_null_exception = "技术异常：对 YTP 素材列表进行去重操作，最后列表为空了！（雾‽）\n\n这是一个不应该发生的错误。",
			unknown_exception = "错误：未知异常。\n\n请展开详细信息查看具体错误内容，并将错误信息反馈给作者。",
			use_pic_in_pic_on_unsupported_vegas_exception = "错误：不支持在低版本 Vegas 中使用该画中画插件的效果。\n\n根本原因：Vegas 在新版本“画中画”效果插件中增加了一些新的功能和参数，这些新参数不能在低版本的 Vegas 插件中使用。\n\n解决方法：在当前 Vegas 版本不能使用该映像节奏视觉效果（如扩缩类等），请使用其它视觉效果。或更新 Vegas 软件。",
			unsupported_curve_enum_exception = "错误：使用不支持的曲线枚举类型作为参数。\n\n{0} 不是曲线枚举类型。",
			convert_music_beats_not_one_audio_event_exception = "错误：在转换音乐节拍工具中选择了的音频剪辑数目不恰好等于一个。\n\n应当选择 1 个音频，却选择了 {0} 个音频。",
			convert_music_beats_unsupported_beats_exception = "错误：当前 Vegas 设定的节拍不是在四四拍、四三拍、八六拍之中的其一。",
			invalid_mapping_velocity_values_exception = "错误：使用不合法的映射力度参数。\n\n解决方法：确保音频和视频的映射力度参数中，\n1. 较小值不能大于较大值；\n2. “力度”的较小值和较大值不能相等。\n否则将无法完成映射力度的操作。",
			invalid_glissando_amount_exception = "错误：使用不合法的滑音大小参数。\n\n滑音大小不能为 0。",
			cannot_get_script_dir_exception = "错误：无法获取脚本目录路径！",
			cannot_get_xvid_path_exception = "错误：无法获取 XviD 安装路径！",
			install_xvid_info = "未安装 XviD 编解码器。脚本将立即安装它，并可能会要求管理员权限。",
			install_xvid_admin_failed = "错误：安装 XviD 时管理员权限被拒绝。",
			install_xvid_succeed = "XviD 已安装，并为当前帧率生成了渲染模板。请重新启动 Vegas 并再次运行该脚本。",
			render_template_generate_completed = "已为当前帧速率生成了渲染模板。请重新启动 Vegas 并再次运行该脚本。",
			unexpected_exception = "未知异常：",
			unexpected_render_status = "非预期的渲染状态：",
			datamix_selection_position_exception = "错误：选区必须从大于或等于第 1 帧开始！",
			datamix_selection_length_exception = "错误：选区长度必须大于 1 帧！",
			datamosh_frames_repeats_exception = "错误：帧重复必须大于 0！",
			datamosh_selection_length_exception = "错误：选区长度必须与帧计数一样长！",
			datamosh_selection_position_exception = "错误：选区不能从项目的第一帧开始！",
			no_track_found_exception = "错误：未找到轨道！",
			excessively_video_events_selected_exception = "错误：只能选择一个视频剪辑！",
			no_video_event_selected_exception = "错误：请先选择一个视频剪辑！",
			no_ofx_effects_included_exception = "错误：所选视频剪辑不包含任何效果或效果均不为 OFX 效果！",
			layering_offset_exception = "错误：层叠偏移不能为 0！",
			layering_count_exception = "错误：层数必须大于 0！",
			scramble_size_exception = "错误：扰乱大小必须大于 0！",
			stutter_length_exception = "错误：长度必须大于 0！",
			stutter_window_bias_exception = "错误：窗口偏移必须大于 0！",
			render_template_frame_rate_exception = "错误：帧率必须小于 100！",
			appdata_not_set_exception = "错误：无法获取 AppData 路径！",
			stutter_generator_media_info = "“结巴效果”无法自动为媒体生成器生成的媒体生成反向剪辑（如字幕和文字等）。请手动反转它再反转回来从而创建它们的反向剪辑，或者先渲染到文件（例如使用“预渲染化”）。",
			automator_parameters = "自动生效 - 参数",
			datamoshing_parameters = "数据抹失 - 参数",
			layering_parameters = "多层叠化 - 参数",
			scrambling_parameters = "随机扰乱 - 参数",
			stutter_parameters = "结巴效果 - 参数",
			frame_count = "帧计数",
			frames_repeats = "帧重复",
			layer_count = "层数",
			layering_offset = "层叠偏移",
			scramble_size = "扰乱大小",
			length_in_seconds = "长度（秒）",
			stutter_window_bias = "结巴窗口偏移",
			canceled = "已取消。",
			automator_info = "勾选需要自动随机设置值的效果参数。",
			pre_render = "预渲染",
			enable_legacy_progress_dialog = "启用旧版进度对话框",
			camera_shake_parameters = "镜头摇晃 - 参数",
			shake_skew_in = "速度",
			shake_skew_xy = "水平/垂直同步系数",
			shake_skew_out = "数量",
			shake_x_to_y_ratio = "水平/垂直位移比",
			shake_should_reset_pan = "在第一帧上重置平移/裁切",
			shake_should_clear_frames = "在摇晃前重置所有帧",
			shake_skew_in_tooltip = "更改摇晃的频率。",
			shake_skew_xy_tooltip = "更改相对垂直速度。设置为 1，则以圆圈的方式运动。",
			shake_skew_out_tooltip = "镜头偏离中心的像素数。亦是放大的边距。",
			shake_x_to_y_tooltip = "与水平距离相乘。大于 1 的值将会放得更大。",
			shake_should_reset_pan_tooltip = "若不勾选，可在当前视频缩放范围内摇晃。",
			shake_should_clear_frames_tooltip = "若不勾选，可将新的摇晃效果与之前的摇晃效果相乘。",
			restrict_note_length = "限制音符长度",
			unrestricted = "不限制",
			restrict_max_length = "最大长度",
			restrict_fixed_length = "固定长度",
			preferred_track = "首选轨道",
			new_track = "新增轨道",
			glissando = "滑音效果",
			swirl = "漩涡";

		static Lang() {
			SChinese = new Lang();
			English = new Lang {
				__name__ = "English",
				__translator__ = NO_TRANSLATOR,
				info_label_font = "Segoe UI",
				ui_font = "Segoe UI",
				restart_to_effect_language = "Restart for language to take effect?",
				yes_to_restart_to_effect_language = "Restart",
				no_to_restart_to_effect_language = "Re-render",
				version_number = "Version",
				revision_date = "Last revision date",
				vegas_version = "Vegas version",
				script_supported_vegas_version = "Script supported version",
				unsupported_vegas_version = "Warning: The current script does not match the version of Vegas you are currently using. Some features may not work properly! Please reinstall the correct version of the script.\nSupported version: Vegas Pro {0}\nCurrent version: Vegas Pro {1}",
				unsupported_vegas_version_title = "Version mismatch",
				unsupported_vegas_version_feature = "Versions below Vegas Pro {0} do not support this feature.",
				check_update_title = "Update script",
				check_update_found = "New version detected, update now?\n\nLatest version: {0}\nCurrent version: {1}",
				check_update_not_found = "Already the latest version!\n\nLatest version: {0}",
				check_update_on_startup = "Check for updates at startup",
				download_latest_version = "Download the latest",
				quick_config = "Quickly configure",
				midi_file_name = "MIDI sequence",
				all_files = "All files",
				choose_a_midi_file = "Please select a MIDI file",
				media_file_name = "Supported media files",
				choose_a_source_file = "Please select a video or picture clip",
				error = "Error",
				details = "Details:",
				brightness_and_contrast = "Brightness and Contrast",
				invert = "Invert",
				black_and_white = "Black and White",
				lab_adjust = "LAB Adjust",
				hsl_adjust = "HSL Adjust",
				mirror = "Mirror",
				pic_in_pic = "Picture in Picture",
				crop = "Crop",
				bz_masking = "Bézier Masking",
				cookie_cutter = "Cookie Cutter",
				check_pitch_shift_presets = "Checking whether the presets of the Pitch Shift plugin are available...",
				no_pitch_shift_presets = "Since you tried to tune using the \"Pitch Shift\" effect plugin, the system found that you did not fully configure all the audio presets you needed. The script can attempt to add presets for you, which may fail. If that fails, follow the instructions for using the tutorial manually. Would you like the script to automatically add presets for you?",
				yes_to_add_pitch_shift_presets = "Auto Add",
				no_to_add_pitch_shift_presets = "Back",
				no_pitch_shift_presets_title = "Not all Pitch Shift presets found",
				add_pitch_shift_presets_successful = "Finish adding presets!",
				add_pitch_shift_presets_fail = "Failed to add presets!",
				add_pitch_shift_presets_fail_title = "Unfortunately",
				ensure_load_presets = "Are you sure you want to load presets?",
				ensure_unload_presets = "Are you sure you want to unload presets?",
				reverse_suffix_tag = " (Reversed)",
				effect_init_forward = "Forward",
				effect_init_reversed = "Reversed",
				effect_init_turned = "Turned",
				effect_init_left = "Left",
				effect_init_right = "Right",
				effect_init_up = "Top",
				effect_init_down = "Bottom",
				effect_init_left_up = "Upper left",
				effect_init_right_up = "Upper right",
				effect_init_left_down = "Lower left",
				effect_init_right_down = "Lower right",
				effect_init_invert = "Invert",
				effect_init_conform = "Conform",
				effect_init_opposite = "Opposite",
				effect_init_chromatic = "Chromatic",
				effect_init_monochrome = "Monochrome",
				effect_init_counter = "Counter",
				effect_init_stepon = "Continue",
				effect_init_flat = "Flat",
				effect_init_thin = "Thin",
				effect_init_blur = "Blur",
				effect_init_zoom_out = "Zoom out",
				effect_init_zoom_in = "Zoom in",
				enable_all_effects = "Enable All Effects",
				chorus = "Chorus",
				vibrato = "Vibrato",
				wave = "Wave",
				multi_beat_delay = "Multi-Tap Delay",
				spherize = "Spherize",
				warning_missing_plugin = "Warning: The plugin \"{0}\" could not be found!",
				midi_channel = "CH",
				midi_notes_count = "Notes Count",
				midi_begin_note = "Begin Note",
				midi_instrument = "Inst",
				instrument = "Instrument",
				drum_kit = "Drum Kit",
				pan = "Pan",
				pan_left_abbr = "L",
				pan_right_abbr = "R",
				pan_center_abbr = "C",
				pan_dynamic_abbr = "D",
				yes = "Yes",
				no = "No",
				error_code = "Error Code:",
				processing_otomad = "Generating Otomad/YTPMV...",
				processing_otomad_swirl = "Generating glissando visuals...",
				processing_ytp = "Generating YTP...",
				processing_it = "Processing it",
				processing_tracks = "Generating track {0} of {1}, channel {2}{3}...",
				processing_tracks_swirl = "Generating glissando for track {0} of {1}, channel {2}{3}...",
				real_time_update = "Real time update current progress (it will slow down the generation)",
				replacer_is = "The specified replacement is",
				replacer_info = "Please select the clips which to be replaced and replaced in the track window first, and then specify a clip as the replacement clip, and the remaining clips are all replaced clips.\nPlease create a group for the audio and video of the replacement clip first, and make sure that the replacement clip is placed later in time and not on the same track as other replaced clips.",
				replace_clips = "Replace Track Events",
				replaced_info = "Then the remaining {0} track clips will be replaced with the selected clip.",
				replaced_label = "Replaced",
				replacer_label = "Replacement",
				separation_replaced_info = "{0} track clips selected, containing {1} audio clip, {2} video clips.",
				separation_set_replaced = "Set the selected {0} clips as the replaced",
				separation_set_replacer = "Set the selected {0} clips as the replacement",
				separation_back_to_select = "Back to Vegas to select clips",
				separation_use_clip_group = "Also replace other clips in the track group",
				separation_reserve_original_name = "Reserve original clip name",
				replacements_classic_specify = "Specify simultaneously",
				replacements_separation_specify = "Specify separately",
				view = "View",
				selected_items = "Selected",
				replace_clips_form_ensure_to_close = "Some track clips have been specified in \"Specify separately\".\nYour changes may not be retained after exit.",
				track = "Track",
				submit_select = "&Set selected",
				every_few = "Select one for every few",
				which_one = "Select which one of group",
				select_how_many = "Select how many at a time",
				reset_select = "&Reset selection",
				quick_select_interval = "Quickly Select Interval",
				select_interval_info = "Please select some clips in the Vegas track window first, and then open this dialog box to use the following functions.",
				select_events_count_info = "{0} track events have been selected.",
				select_videotracks_count_info = "{0} video tracks have been selected.",
				select_audioevents_count_info = "{0} audio track events have been selected.",
				select_videoevents_count_info = "{0} video track events have been selected.",
				select_source_count_info = "{0} media sources has been selected.",
				select_tracks_count_info = "{0} tracks have been selected.",
				square = "Square",
				custom = "Custom",
				row_count = "Rows",
				column_count = "Columns",
				fill = "Fill",
				adapt = "Fit",
				increase_padding = "Padding",
				min = "MIN",
				max = "MAX",
				mirror_edges = "Mirror edges",
				disable_flip = "Disabled",
				even_column = "Even columns",
				odd_column = "Odd columns",
				even_row = "Even rows",
				odd_row = "Odd rows",
				auto_layout_tracks = "Auto Layout Tracks",
				grid_layout = "Grid Layout",
				box_3d_layout = "3D Box Layout",
				selected_tracks_too_much = "You've selected {0} tracks, which is beyond the scope of available functions. That's too many!\nPlease select fewer tracks and try again.",
				selected_tracks_too_much_title = "Too many tracks selected",
				bottom_surface = "Bottom",
				top_surface = "Top",
				right_surface = "Right",
				left_surface = "Left",
				back_surface = "Back",
				front_surface = "Front",
				box_3d_layout_info = "Due to the limitation of the script function, a new track will be created and the clips in the selected track will be moved over, and the track motion, effects or other in the original track will be lost.\nPlease select the track used by each face of the cube below. If it is empty, it means that the face is unset.",
				delete_original_tracks = "Delete original tracks",
				use_video_longer_side = "Use longer side of edge length",
				use_video_longer_side_tooltip = "After checking, the longest side of the video in the project settings (that is, the maximum of width and height) will be used as the edge length of the cube.",
				gradient_tracks = "Gradient Tracks",
				gradient_tracks_info = "Choose a gradient effect to apply to the selected video tracks:",
				rainbow_color = "Rainbow Colors",
				gradually_saturated = "Gradually Saturated",
				gradually_contrasted = "Gradually Contrasted",
				threshold = "Threshold",
				alternately_chromatic = "Alternately Chromatic",
				alternately_negative = "Alternate Negative",
				descending = "Descending",
				ascending = "Ascending",
				change_tune_method = "Change Tuning Method",
				change_tune_method_info = "Only tuning methods in audio event properties are supported, not in the Pitch Shift plugin.",
				time_stretch_pitch_shift = "Time stretch / pitch shift",
				formant_change = "Formant shift",
				pitch_change = "Pitch",
				method = "Method",
				pitch_lock = "Lock to strech",
				lock_pitch_instead_of_rate = "Lock pitch instead of rate",
				none = "None",
				classic = "Classic",
				elastique_pro = "Professional",
				elastique_efficient = "Efficient",
				elastique_soloist_monophonic = "Soloist (Monophonic)",
				elastique_soloist_speech = "Soloist (Speech)",
				classic_a01 = "A01. Music 1 (minimum flange, may echo)",
				classic_a02 = "A02. Music 2",
				classic_a03 = "A03. Music 3 (less echo)",
				classic_a04 = "A04. Music 4 (fast, good for bass)",
				classic_a05 = "A05. Music 5",
				classic_a06 = "A06. Music 6",
				classic_a07 = "A07. Speech 1",
				classic_a08 = "A08. Speech 2",
				classic_a09 = "A09. Speech 3 (fast)",
				classic_a10 = "A10. Solo instruments 1",
				classic_a11 = "A11. Solo instruments 2",
				classic_a12 = "A12. Solo instruments 3",
				classic_a13 = "A13. Solo instruments 4 (less echo)",
				classic_a14 = "A14. Solo instruments 5",
				classic_a15 = "A15. Solo instruments 6",
				classic_a16 = "A16. Solo instruments 7 (fast)",
				classic_a17 = "A17. Drums, unpitched (munimum echo)",
				classic_a18 = "A18. Drums (better for toms)",
				classic_a19 = "A19. Drums (tiny echo)",
				batch_subtitle_generation = "Batch Subtitle Generation",
				batch_subtitle_generation_presets = "Select a Title & Text media generator preset:",
				batch_subtitle_generation_subtitles = "Enter the subtitle text (line by line, blank lines ignored):",
				batch_subtitle_generation_single_duration = "Duration of each subtitle",
				batch_subtitle_generation_suggestion_info = "Turn on the Auto Follow-up function to adjust the time later.",
				open = "Open",
				text_document = "Text Document",
				file_too_large_info = "The file is too large. Do you want to open it anyway?",
				will_clear_existing_text_info = "Existing text content will be cleared and your changes may not be retained.",
				import_from_file = "Import from file",
				find_clips = "Find Track Events",
				find_clips_select_info = "First track event selected",
				find_clips_info = "Select the matching clips above and they will be selected when you are sure.",
				find_clips_header_name = "Name",
				find_clips_header_num = "Number",
				find_clips_match_source = "Matching the same source",
				find_clips_match_source_and_offset = "Matching the same source with the same starting offset",
				find_clips_match_name = "Matching the specified name",
				convert_music_beats = "Convert Music Beats",
				convert_music_beats_complete = "Completed convert music beats.",
				convert_music_beats_info = "The selected music audio clip will be converted from {0} to {1}.",
				metre_4_4 = "4/4",
				metre_3_4 = "3/4",
				metre_6_8 = "6/8",
				custom_fade_gain = "Custom Fade Gain",
				from = "From",
				to = "To",
				midi_channel_advanced = "MIDI Tracks Advanced Properties",
				channel = "Channel",
				name = "Name",
				edit_notes = "Edit selected track notes...",
				auto_layout_tracks_midi_channel_advanced_info = "Effective only when generating video without enabling Staff Visualizer.",
				reset = "Reset",
				select_all = "Select all",
				select_none = "Select none",
				invert_selection = "Invert selection",
				replace = "&Replace",
				apply = "&Apply",
				close = "&Close",
				complete = "C&omplete",
				cancel = "&Cancel",
				about = "&About",
				ok = "&OK",
				balloon_title = "Filling Instructions",
				midi_start_second_tooltip = "Used to intercept part of MIDI music.\nUnit: seconds.",
				midi_end_second_tooltip = "Fill in the length of time needed to read the MIDI file here.\nNote that if the value filled in is too small, the notes in the excess time will be cut off.\nIf the value entered here is less than or equal to the start seconds, it always means that it lasts to the end of the entire music duration.\nUnit: seconds.",
				midi_beat_conbo_tooltip = "Currently only used for the pagination function of staff.\nAutomatic speculation from MIDI files is temporarily unavailable.",
				source_start_time_tooltip = "Fill in the start time of media material cutting here.\nUnit: seconds.",
				source_end_time_tooltip = "Note that if the value entered here is less than or equal to the number of start seconds, it always means that it lasts until the end of the media time.\nUnit: seconds.",
				no_tune = "No Tuning",
				pitch_shift_plugin = "Pitch Shift Audio Effect Plugin",
				elastique_method = "Elastic Pitch Change",
				classic_method = "Classic Pitch Change",
				fool_tuning_method = "Tuning without Scale",
				sine_wave = "Sinusoid",
				triangle_wave = "Triangle",
				square_wave = "Square",
				sawtooth_wave = "Sawtooth",
				tune_method_tooltip = "\"Pitch Shift Audio Effect Plugin\" means to use the \"Pitch Shift\" effect plugin in \"Audio FX\" to change the pitch, and the presets needs to be configured.\n\"Elastic Pitch Change\" means to use the \"Élastique\" stretching method to change the pitch, that is, the + and-keys on the keyboard directly change the pitch, and the pitch range is limited.",
				audio_lock_stretch_pitch_tooltip = "Use resampling to change pitch as speed changes. Stretch audio will be disabled if the \"Elastic Pitch Change\" method is used.",
				preview_beep_duration_tooltip = "The duration of pre-listening to the base pitch.\nUnit: milliseconds.",
				preview_tune_audio_tooltip = "If checked, the audio source will be tuned to the tonic central C when pre-listening the audio.\nOtherwise, the tone which set by the base pitch will be produced when pre-listening the base pitch.",
				sheet_position_tooltip = "The distance from the third line in the middle of the staff to the center of the screen. Up plus down minus.\nUnit: pixel.",
				sheet_width_tooltip = "The notes will be displayed in the width filled in the middle of the screen, used for left and right white space, and left space for the clef on the left.\nUnit: pixel.",
				sheet_gap_tooltip = "The distance between the lines in the staff.\nUnit: pixel.",
				sheet_line_thickness_tooltip = "The thickness of the sheet lines while generating staff. When the thickness reaches 100%, the sheet lines will occupy the entire sheet lines spacing.\nUnit: percentage.",
				sheet_relative_tooltip = "After checking, the pixel unit of the parameters filled below will be positioned relative to the size of 1920 × 1080;\notherwise, it will be positioned based on the project size.",
				sheet_relative = "Using relative values",
				preview_base_pitch_tooltip = "Please make sure that the sound is turned on and the sound scheme is not set to the silent.\nIf there is still no work, please restart your system.",
				ytp_max_length_tooltip = "Specify the maximum length of a single track clip.\nUnit: milliseconds.",
				ytp_min_length_tooltip = "Specify the minimum length of a single track clip.\nUnit: milliseconds.",
				file = "&File",
				save_config = "&Save configuration",
				reset_config = "&Reset configuration",
				exit_discarding_changes = "&Discard changes and exit",
				exit = "E&xit",
				pitch_shift_preset = "&Pitch shift plugin presets",
				load_presets = "&Load presets",
				unload_presets = "&Unload presets",
				form_size = "&Form size",
				remember_form_size = "Remember form size",
				remember_always_form_size = "Remember form size each time",
				remember_once_form_size = "Remember form size once",
				restore_default_form_size = "Restore default form size next time",
				export_config = "&Export configuration",
				import_config = "&Import configuration",
				export = "Export",
				import = "Import",
				configuration_settings = "Configuration settings",
				about_to_import_config = "Configuration will be imported soon.\nNotice: If the configuration settings file is not standard, the script may not work properly.\nDo you want to continue?",
				import_config_complete = "Completed import, please restart the script manually.",
				help = "&Help",
				user_help = "Instructions",
				trouble_shooting = "Troubleshooting",
				update_info = "Release notes",
				repository_link = "Repository link",
				latest_version_link = "Latest version link",
				roadmap = "Roadmap",
				send_issues = "Send feedback",
				update_logs = "Update logs",
				tutorial_video = "Tutorial video",
				release_notes = "Release notes",
				staff_visualizer_documentation = "Documentation for Staff Visualizer",
				english_documentations = "English documentations",
				chinese_documentations = "Chinese documentations",
				check_update = "Check for &updates",
				why_ok_btn_is_disabled = "Why is the Complete button disabled?",
				experimental_theme = "Experimental theme",
				media = "Media",
				audio = "Audio",
				video = "Visual",
				staff = "Staff",
				ytp = "YTP",
				helper = "Tools",
				midi_settings = "MIDI configuration",
				midi_start_time = "Start seconds",
				midi_end_time = "End seconds",
				bpm_setting = "Set the BPM tempo to",
				midi_beat = "Beat",
				midi_channel_setting = "Using MIDI track",
				browse = "Browse...",
				advanced = "Advanced...",
				presets = "Presets",
				no_midi_selected = "<No MIDI file selected>",
				choose_midi_file = "Select MIDI file",
				midi_dynamic_midi_bpm = "Dynamic MIDI tempo",
				midi_midi_bpm = "MIDI tempo",
				midi_project_bpm = "Project tempo",
				midi_custom_bpm = "Custom",
				dynamic_midi_bpm_info = "Dynamic tempo from {0}",
				dynamic_midi_beat_info = "Dynamic beat from {0}",
				colon = ": ",
				semicolon = "; ",
				source_settings = "Material configuration",
				generate_at_begin = "Project start",
				generate_at_cursor = "Cursor",
				generate_position = "Generate at",
				generate_below_top_adjustment_tracks = "Below top adjustment tracks",
				remove_source_track_events = "Remove track events assigned as source material after the generation completed",
				select_all_generated_events = "Select all generated events after the generation completed",
				choose_source_file = "Select media source",
				selected_media = "Selected media file",
				selected_clip = "Selected track event",
				source_start_time = "Start seconds",
				source_end_time = "End seconds",
				parameters = "Parameters",
				linear = "Linear",
				fast = "Fast",
				slow = "Slow",
				smooth = "Smooth",
				sharp = "Sharp",
				hold = "Hold",
				fade_in = "Fade in",
				fade_out = "Fade out",
				tune = "Tuning",
				tune_method = "Tuning method",
				base_pitch = "Base pitch",
				preview_listen = "Preview",
				preview_base_pitch = "Preview the &base pitch",
				preview_audio = "&Preview audio",
				stop_preview_audio = "Stop &previewing",
				lock_attr = "Lock attrs",
				preview_listen_attr = "Preview attrs",
				preview_tune_audio = "Adjust audio to base pitch",
				reserve_formant = "Preserve formant",
				stretch_attr = "Stretch attrs",
				create_event_group = "Create groups",
				aconfig = "Enabled",
				audio_stretch = "Stretch",
				audio_loop = "Loop",
				audio_normalize = "Normalize",
				audio_lock_stretch_pitch = "Lock stretch and pitch",
				auto_pan = "Auto pan",
				velocity = "Velocity",
				mapping_velocity = "Mapping Velocity",
				notes_velocity = "Velocity",
				volume_gain = "Volume",
				opacity = "Opacity",
				set_fade_by_percent = "Set fade by percent",
				set_fade_by_timecode = "Set fade by timecode",
				video_glow_bright = "Glow brightness",
				video_glow = "Glow",
				video_start_size = "Start size",
				video_end_size = "End size",
				video_start_rotation = "Start rotation",
				video_end_rotation = "End rotation",
				video_start_h_trans = "Start X shift",
				video_end_h_trans = "End X shift",
				video_start_v_trans = "Start Y shift",
				video_end_v_trans = "End Y shift",
				video_start_hue = "Start hue",
				video_end_hue = "End hue",
				video_start_saturation = "Start saturation",
				video_end_saturation = "End saturation",
				video_start_contrast = "Start contrast",
				video_end_contrast = "End contrast",
				video_start_threshold = "Start threshold",
				video_end_threshold = "End threshold",
				multitrack_for_chords = "Multitrack for chords",
				effect = "Effects",
				visual_effect = "Visual effects",
				initial_visual_effect = "Initial value",
				apply_visual_effect = "Apply Visual Effect",
				pv_rhythm_visual_effect = "PV Rhythm Visual Effect",
				flip_class = "Flip Class",
				rotation_class = "Rotation Class",
				scale_class = "Scale Class",
				mirror_class = "Mirror Class",
				invert_class = "Invert Class",
				hue_class = "Hue Class",
				monochrome_class = "Monochrome Class",
				time_class = "Time Class",
				time_class_2 = "Time Class 2",
				expansion_and_compression_class = "Expansion & Compression Class",
				swing_class = "Swing Class",
				blur_class = "Blur Class",
				no_effects = "No Effects",
				h_flip = "Horizontal Flip",
				v_flip = "Vertical Flip",
				ccw_flip = "Counterclockwise Flip",
				cw_flip = "Clockwise Flip",
				h_flip_sustain = "Horizontal Flip Sustain",
				h_flip_relay = "Horizontal Flip Relay",
				h_flip_invert = "Horizontal Flip Invert",
				ccw_rotate = "Counterclockwise Rotation",
				cw_rotate = "Clockwise Rotation",
				turned = "Turned",
				zoom_out_in = "Zoom Out In",
				h_mirror = "Horizontal Mirror",
				v_mirror = "Vertical Mirror",
				ccw_mirror = "Counterclockwise Mirror",
				cw_mirror = "Clockwise Mirror",
				negative = "Negative",
				lumin_invert = "Luminance Invert",
				hue_invert = "Hue Invert",
				step_change_hue = "{0} Steps Chromatic Aberration",
				chromatic_and_monochrome = "Chromatic and Monochrome",
				pingpong = "Ping-pong Effect",
				whirl = "Whirl",
				sharp_rewind = "Sharp Rewind",
				wobble_period = "Wobble Period",
				vertical_expansion = "Vertical Expansion",
				vertical_expansion_with_rebound = "Vertical Expansion with Rebound",
				vertical_compression = "Vertical Compression",
				vertical_compression_with_rebound = "Vertical Compression with Rebound",
				oblique_expansion_and_compression = "Oblique Expansion and Compression",
				puyo_puyo = "Puyo Pop",
				pendulum = "Play Pendulum",
				gaussian_blur = "Gaussian Blur",
				radial_blur = "Radial Blur",
				vconfig = "Enabled",
				video_stretch = "Stretch",
				video_loop = "Loop",
				freeze_first_frame = "Static visual",
				freeze_last_frame = "No lengthening",
				legato = "Legato",
				legato_staccato = "Staccato",
				legato_one_beat_longest = "1 beat longest",
				legato_one_bar_longest = "1 bar longest",
				legato_unlimited = "Unlimited",
				no_stretching = "No Stretching",
				flexing_and_extending = "Flexing & Extending",
				extending_only = "Extending Only",
				flexing_only = "Flexing Only",
				sheet_width = "Surface width",
				sheet_thickness = "Lines thickness",
				sheet_color = "Lines color",
				sheet_position = "Surface position",
				sheet_clef = "Clef",
				sheet_gap = "Lines gap",
				sheet_g_clef = "Treble",
				sheet_f_clef = "Bass",
				sheet_notes_shift = "Notes shift",
				sheet_config = "Enabled",
				sheet_generate_lines = "Generate lines",
				sheet_config_info = "If you want to turn on the staff visual effect, you need to enabled video option.\nEnable this option will disable PV rhythm visual effects and video stretching option.",
				sheet_notes_params = "Notes parameters",
				sheet_sheet_line_params = "Lines parameters",
				sheet_legacy_method = "Legacy positioning method",
				sheet_legacy_method_tooltip = "The same positioning method as the old script Staff Visualizer v0.1 will be used.\nThe notes and lines will be positioned and shaped by track motion.",
				sheet_clef_params = "Clef parameters",
				sheet_generate_clef = "Generate clef",
				sheet_clef_scale = "Clef scale",
				sheet_clef_color = "Clef color",
				sheet_padding_left = "Padding left",
				sheet_padding_right = "Padding right",
				sheet_freeze_at_noteoff = "Freeze at note off",
				ytp_clips_count = "Number of clips",
				ytp_min_length = "Minimum length",
				ytp_max_length = "Maximum length",
				ytp_chorus = "Chorus",
				ytp_pitch_change = "Change Pitch",
				ytp_vibrato = "Vibrato (likely attach wave effect)",
				ytp_reverse = "Reverse",
				ytp_delay = "Delay",
				ytp_speed_change = "Change Speed",
				ytp_hue_change = "Change Hue",
				ytp_hue_rotate = "Rotate Hue",
				ytp_monochrome = "Monochrome",
				ytp_negative = "Negative (likely attach pitch-down effect)",
				ytp_high_freq_repeat = "Repeat Rapidly",
				ytp_random_tone = "Random Tuning (attach horizontal flip effect)",
				ytp_enlarge = "Upsize (attach loud)",
				ytp_spherize = "Spherize",
				ytp_mirror = "Mirror",
				ytp_high_contrast = "High Contrast (attach loud)",
				ytp_oversaturation = "Oversaturation (likely attach pitch-up effect)",
				ytp_emphasize_thrice = "Thrice to Emphasize (attach sporadic upsize focus motion)",
				ytp_info = "Click the \"Complete\" button under the current tab, the YTP will be generated instead of Otomad/YTPMV.\nThe parameter settings other than \"Enabled Audio\" and \"Enabled Video\" will not effective in YTP.",
				video_preset_fade_out = "Fade Out",
				flashlight = "Flashlight",
				horizontal_movement = "Horizontal Movement",
				vertical_movement = "Vertical Movement",
				threshold_change = "Threshold Change",
				video_preset_enter = "Entrance",
				video_preset_enter_staff = "Entrance (Staff)",
				video_preset_normal = "Normal",
				oversaturation = "Oversaturation",
				high_contrast = "High Contrast",
				sure_to_delete = "Are you sure you want to delete the selected items?",
				sure_to_reset = "Are you sure you want to reset?",
				sonar = "Sonar",
				sonar_config = "Enable sonar effects for drum kits",
				separate_drums = "Separate drums",
				difference_composite_mode = "Difference composite mode",
				shadow = "Shadow",
				shadow_color = "Shadow color",
				matched_drum_sound = "Matched drum sound",
				shape = "Shape",
				color = "Color",
				duration = "Duration",
				curve = "Curve",
				start_border = "Start border",
				end_border = "End border",
				start_size = "Start size",
				end_size = "End size",
				x_center = "X center",
				y_center = "Y center",
				start_x_offset_odd = "Start X offset odd",
				start_x_offset_even = "Start X offset even",
				start_y_offset_odd = "Start Y offset odd",
				start_y_offset_even = "Start Y offset even",
				prestart_x_offset_odd = "Prestart X offset odd",
				prestart_x_offset_even = "Prestart X offset even",
				prestart_y_offset_odd = "Prestart Y offset odd",
				prestart_y_offset_even = "Prestart Y offset even",
				start_rotation_odd = "Start rotation odd",
				start_rotation_even = "Start rotation even",
				fade_in_curve = "Fade in curve",
				fade_out_curve = "Fade out curve",
				cookie_cutter_shape_circle = "Circle",
				cookie_cutter_shape_oval = "Oval",
				cookie_cutter_shape_oval_side = "Oval side",
				cookie_cutter_shape_rectangle = "Rectangle",
				cookie_cutter_shape_diamond = "Diamond",
				cookie_cutter_shape_square = "Square",
				cookie_cutter_shape_triangle_up = "Triangle up",
				cookie_cutter_shape_triangle_right = "Triangle right",
				cookie_cutter_shape_triangle_down = "Triangle down",
				cookie_cutter_shape_triangle_left = "Triangle left",
				cookie_cutter_shape_arrowhead_up = "Arrowhead up",
				cookie_cutter_shape_arrowhead_right = "Arrowhead right",
				cookie_cutter_shape_arrowhead_down = "Arrowhead down",
				cookie_cutter_shape_arrowhead_left = "Arrowhead left",
				select_interval = "Select interval",
				select_interval_configform_info = "This function is designed to assist the user to select clips every one or more few, and then perform operations such as \"Paste Event Attributes\".",
				quick_normalize = "Quickly Normalize",
				quick_normalize_configform_info = "Normalize all selected audio events volume.",
				quick_normalize_complete = "Completed normalize.",
				replace_clips_configform_info = "Replace multiple track clips with specified new track clips.",
				auto_layout_tracks_configform_info = "Automatic layout of selected tracks in YTPMV-like style.",
				change_tune_method_configform_info = "Change multiple audio events to the specified tuning algorithm.",
				batch_subtitle_generation_configform_info = "Preset the \"Titles & Text\" preset, and then add multiple lines of text here.",
				find_clips_configform_info = "Select all track events that match the specified, such as the clip name, the same source as the selected clip, etc.",
				apply_visual_effect_configform_info = "Apply PV rhythm visual effect to the specified video events.",
				convert_music_beats_configform_info = "Convert the specified music beats between 4/4, 3/4, 6/8, etc.",
				custom_fade_gain_configform_info = "Change the gain value of multiple track clips according to the specified rules.",
				select_exactly_one_audio_event_configform_info = "You must select exactly ONE audio event, not more or less.",
				select_exactly_one_video_event_configform_info = "You must select exactly ONE video event, not more or less.",
				clear_tracks_motion = "Clear Tracks Motion",
				clear_tracks_effect = "Clear Tracks Effect",
				track_legato = "Tracks Legato",
				track_legato_stacking = "Stacking clips (for current tracks)",
				track_legato_stacking_all_tracks = "Stacking clips (for all tracks)",
				track_legato_stacking_selected = "Stacking clips (for selected clips)",
				track_legato_stacking_all_after = "Stacking clips (for clips all after)",
				track_legato_limit_stretch = "Stretching clips (within stretch limits)",
				track_legato_stretch = "Stretching clips (lengthening when outside stretch limits)",
				track_legato_lengthen = "Lengthening clips (change clips length)",
				increase_spacing = "Increase spacing (for current tracks)",
				increase_spacing_all_tracks = "Increase spacing (for all tracks)",
				increase_spacing_info = "Puts specified time in between each clips",
				effect_to_selected_events = "For selected track events only",
				include_events_within_group = "Include the track events within a group",
				reverse_direction = "Reverse direction",
				select_multiple_tracks_warning = "Warning: The tracks or track clips you have selected are more than one, so the results may not match your expectations.\nDo you want to continue?",
				drag_here_to_import = "Drag here to import",
				helper_info = "The following functions are just some independent auxiliary functions, and have nothing to do with other parameters that generate audio and video.",
				helper_info_warning = "Note: This dialog box will be closed after the operation, you can reopen it later, and some unsaved changes may be lost!\n",
				close_after_open_helper = "Close this dialog after the operation completed",
				mosh = "Mosh",
				datamosh_clips_folder = "Datamosh clips folder",
				datamosh_not_installed_info = "The Datamosh extension pack is not installed and will not be available for full features until it is downloaded.",
				datamosh_install = "Download the expansion pack",
				datamosh_no_clips_folder_info = "Please select a folder to put generated datamoshed clips into.",
				datamosh_info = "Datą̬͉̫̐͑̓̄ͅa̸͎͇͗̌͂̈̀ą̸̝̼̦̤̇̐ǎ̛͍́̑a̸̲͙͛̐̄̎̚͜a̢̨̝̟͎̾̔̊ǎ̤̞͈͑a͈̪̣̍mo̻̪̬̘̲͆͂͠o̸͍̞͔̓̆̊̀o̗͊̇̇̈́̇ǫ͇͗̏̕͜ơ̬͍͚̦̯̓̊͌ò͈̦̫̈́̓o̦̣̲̊̀o̪̪͚̺̘͛̽̏̈́sh is a technique of damaging clips to create glitchy effects.",
				datamosh = "Datamosh",
				datamix = "Datamix",
				layering = "Layer",
				rendering = "Render",
				scramble = "Scramble",
				automator = "Automator",
				stutter = "Stutter",
				camera_shake = "Shake",
				datamosh_configform_info = "Datamoshes a part of a video quickly and automatically.",
				datamix_configform_info = "Datamoshes a part of a video quickly and automatically (mosh a clip onto another).",
				layering_configform_info = "Does multilayering on a part of a video quickly and automatically.",
				rendering_configform_info = "Renders a part of a video quickly and automatically.",
				scramble_configform_info = "Scrambles clips/events quickly and automatically.",
				automator_configform_info = "Sets random automation values for video effects quickly and automatically.",
				stutter_configform_info = "Stutters clips/events (play forward, backward, ...).",
				camera_shake_configform_info = "Uses Pan/crop to make the selected layers shake.",
				otomad_helper_config = "Otomad Helper for Vegas - Config",
				reset_config_successful = "The reset is complete, please restart the script.",
				reset_config_successful_title = "Reset User Configuration",
				sure_to_reset_config = "Are you sure you want to reset the user configuration?\n\nYour user configuration data will be lost.",
				about_title = "About",
				script_author = "Author",
				script_original_author = "Original author",
				script_translator = "Translator",
				documentation = "Documentation",
				ranne = "Ranne",
				why_ok_btn_is_disabled_info = "Please follow these steps to check the problem in turn:",
				why_ok_btn_is_disabled_no_audio_and_video_enabled = "Enabled Audio and Enabled Video are both unchecked. Please check to enable at least one of them.",
				why_ok_btn_is_disabled_no_media_take = "The selected media sources does not contain any valid media takes.",
				why_ok_btn_is_disabled_no_midi_select = "To generate Otomad/YTPMV, select a MIDI sequence file first.",
				why_ok_btn_is_disabled_in_helper_tab = "To avoid misoperation, do not submit a build under the Tools and Mosh tab.",
				why_ok_btn_is_disabled_unknown_problem = "Unknown reason.",
				no_selected_media_warning = "Warning: You have not selected any valid media in the project media window!",
				no_selected_clip_warning = "Warning: You have not selected any clips in the track window!",
				preview_audio_track_name = "Preview Audio Track (Should be DELETED!)",
				no_midi_exception = "Error: No MIDI file selected.\n\nPlease reopen the script configuration dialog box, and then click the \"Browse\" button in the \"MIDI Configuration\" group to open a valid MIDI file.",
				no_media_exception = "Error: No media file selected.\n\nPlease reopen the script configuration dialog box, and then click the \"Browse\" button in the \"Media Configuration\" group to open a valid media file.",
				no_track_info_exception = "Error: There is no MIDI track.\n\nPossible reasons:\n1. You did not select a MIDI track;\n2. There is no channel in the MIDI file;\n3. The MIDI file is damaged or the file format is not supported.",
				no_plugin_pitch_shift_exception = "Error: Unable to call the Pitch Shift plugin.\n\nPlease follow the instructions of the tutorial document {0} to operate correctly.\nHowever, according to this updated version of the script, the Chinese and English versions should work properly.\nSo it is very likely that you are using Vegas in other languages.",
				no_plugin_presets_exception = "Error: Cannot call the preset effect of the Pitch Shift plugin.\n\nPlease follow the instructions of the tutorial document {0} to operate correctly.\nMake sure that all 25 presets are manually added in the transposition plugin and named correctly.\n\nSupplementary explanation: For details, please refer to the explanation of the installation method in the above link column. These 25 presets are all the types of pitch changes within the next octave.\nMissing any of them may cause errors. It is indeed very troublesome to manually add presets, but Vegas cannot use scripts to specify the specific parameters of\nthe pitch shift, so I had to go around this trick.",
				no_plugin_name_exception = "Error: The {0} plugin could not be called.\n\nMaybe the version of Vegas you are using does not support that plugin.",
				no_take_exception_ps = "Supplementary note: If it still cannot be resolved, it means that the media file may be in a format not supported by Vegas.\nYou can manually drag the file into Vegas to see if the video and audio files are working properly.",
				no_audio_take_exception = "Error: Unable to read audio media stream.\n\nIn the setting interface, do not check \"Enabled Audio\" for pure video/picture media.\n\n",
				no_video_take_exception = "Error: Unable to read the video media stream.\n\nIn the settings user interface, do not check \"Enabled Video\" for pure audio media.\n\n",
				no_media_take_exception = "Error: Unable to read the media.\n\nThe file format you selected is not supported by Vegas. Please check if the media file is damaged or the corresponding Vegas decoder is not installed.\n\n",
				not_a_midi_file_exception = "Error: Unable to read MIDI file.\n\nSolution: Import the MIDI with the host software, and then re-output a new MIDI file.\n\nSupplementary note: There are multiple formats of MIDI files, and the script does not guarantee that all of them can be read correctly. Fortunately,\nMIDI files exported by mainstream host software under default settings are generally readable. (Currently tested FL Studio, LMMS \nand Music Studio for iPad.)",
				no_selected_exception_ps = "Additional note: If you want to manually select a media in the folder, please click the \"Browse\" button on the right to\nselect a media. And make sure that the path of the file you selected is selected in the drop-down menu on the left.",
				no_selected_media_exception = "Error: No media is selected in the project media window.\n\nPlease select a media in the project media window, then reopen the configuration dialog, and select \"selected media file\" in the source configuration.\n\n",
				no_selected_clip_exception_short = "Error: No clips are selected in the track.",
				no_selected_clip_exception = "Error: No clips are selected in the track.\n\nPlease select a clip in the track, then reopen the configuration dialog, and select \"selected track clips\" in the source configuration.\n\n",
				no_time_stretch_pitch_shift_exception = "Error: The pitch conversion method of the selected clip is set to no tuning.\n\nMost likely you are using \"selected track clips\". You are not to blame for this error, but for the brain-dead design of Vegas.\n\nSolution: Please reselect your track clips, right-click the audio part, and select \"Properties\" at the bottom. Set the \"Method\" of \"Time Stretch/Pitch Conversion\" to \"élastique\".\nThen click OK.\n\nSupplementary note: If an audio event has not been transposed and its properties are opened, then the “Method” of “Time Stretch/Pitch Conversion” in its properties will be\nautomatically modified to “None”, and click OK. Take effect. At this time, you will find that the + and-key tuning operations on the keyboard are invalid. At this time, you must reopen the properties of the audio event,\nset the \"Method\" of \"Time Stretch/Pitch Conversion\" to \"élastique\", you don't need to set \"Pitch Change\", just click OK.",
				read_config_fail_exception = "Error: Failed to read the parameter configuration file.\n\nUnfortunately you encountered this unforeseen error. We will clear the user configuration settings and restore them to default settings in order to solve the problem.\nIt is recommended to tell the author of this error in order to solve the problem quickly.\nThis script will be exited, and then I will bother you to reopen it manually.",
				fail_to_select_clips_exception = "Error: Error selecting track clips.\n\nPlease select some track clips in the track window first.",
				fail_to_select_tracks_exception = "Error: Error selecting tracks.\n\nPlease select some video tracks in the track window first.",
				ytp_over_length_exception = "Error: The specified YTP minimum length exceeds the media length.\n\nThe specified YTP minimum length is too large, please try a smaller value. Or the length of the selected media is too small.",
				ytp_in_media_generator_exception = "Error: Apply YTP to the media generated by the media generator.\n\nThe application of YTP must use local media files, do not use the media generated by the media generator.",
				ytp_eliminate_duplicates_finally_null_exception = "Technical Exception: Remove duplicate from YTP source list. Finally, the list is empty!\n\nThis is an error that should not happen.",
				unknown_exception = "Error: Unknown exception.\n\nPlease expand the details to see the specific error content and feed the error information back to the author.",
				use_pic_in_pic_on_unsupported_vegas_exception = "Error: Use of the Picture-in-Picture plugin effect in lower versions of Vegas is not supported.\n\nRoot cause: Vegas has added some new features and parameters to the new Picture-in-Picture effect plugin, which cannot be used in lower versions of Vegas plugin.\n\nSolution: The current version of Vegas cannot use this PV rhythm visual effects (such as expansion aspects), please use other visual effects. Or update your Vegas software.",
				unsupported_curve_enum_exception = "Error: Use unsupported curve enumeration types as parameters.\n\n{0} is not a curve enumeration type.",
				convert_music_beats_not_one_audio_event_exception = "Error: The number of audio clips selected in the convert music beats tool is not exactly equal to one.\n\n1 audio should be selected, but {0} audio are selected.",
				convert_music_beats_unsupported_beats_exception = "Error: Current Vegas beats are not in 4/4, 3/4, 6/8.",
				invalid_mapping_velocity_values_exception = "Error: Illegal mapping velocity parameters used.\n\nSolution: Make sure the mapping velocity parameters of audio and video,\n1. The smaller value cannot be greater than the larger value;\n2. The smaller and larger values of VELOCITY cannot be equal.\nOtherwise, this will not complete the mapping velocity operation.",
				invalid_glissando_amount_exception = "Error: Illegal glissando amount parameter used.\n\nGlissando amount cannot be zero.",
				cannot_get_script_dir_exception = "Error: Couldn't get script directory path!",
				cannot_get_xvid_path_exception = "Error: Couldn't get XviD install path!",
				install_xvid_info = "XviD codec not installed. The script will install it now and may ask for admin access to install it.",
				install_xvid_admin_failed = "Error: Admin privilege for XviD installation refused.",
				install_xvid_succeed = "XviD installed and render template generated for the current frame rate. Please restart Vegas and run the script again.",
				render_template_generate_completed = "Render template generated for the current frame rate. Please restart Vegas and run the script again.",
				unexpected_exception = "Unexpected exception: ",
				unexpected_render_status = "Unexpected render status: ",
				datamix_selection_position_exception = "Error: Selection must start at frame ≥ 1!",
				datamix_selection_length_exception = "Error: Selection length must be > 1 frame!",
				datamosh_frames_repeats_exception = "Error: Frames repeats must be > 0!",
				datamosh_selection_length_exception = "Error: The selection must be as long as the frame count!",
				datamosh_selection_position_exception = "Error: The selection mustn't start on the first frame of the project!",
				no_track_found_exception = "Error: No tracks found!",
				excessively_video_events_selected_exception = "Error: Only a single video event can be selected!",
				no_video_event_selected_exception = "Error: Select a video event first!",
				no_ofx_effects_included_exception = "Error: The selected video clips do not contain any effects or the effects are not OFX effects!",
				layering_offset_exception = "Error: Layering offset must not be 0!",
				layering_count_exception = "Error: Layer count must be > 0!",
				scramble_size_exception = "Error: Scrambling size must be > 0!",
				stutter_length_exception = "Error: Length must be > 0!",
				stutter_window_bias_exception = "Error: Window bias must be > 0!",
				render_template_frame_rate_exception = "Error: Frame rate must be < 100!",
				appdata_not_set_exception = "Error: Couldn't get AppData path!",
				stutter_generator_media_info = "Stutter cannot automatically generate reverse clips for media generated from media generators (Titles & Text, …). Please create their reverse clips by reversing them and reversing them back, or render to a file first (for example using the Render).",
				automator_parameters = "Automator Parameters",
				datamoshing_parameters = "Datamoshing Parameters",
				layering_parameters = "Layering Parameters",
				scrambling_parameters = "Scrambling Parameters",
				stutter_parameters = "Stutter Parameters",
				frame_count = "Frame count",
				frames_repeats = "Frames repeats",
				layer_count = "Layer count",
				layering_offset = "Layering offset",
				scramble_size = "Scramble size",
				length_in_seconds = "Length in seconds",
				stutter_window_bias = "Stutter window bias",
				canceled = "Canceled.",
				automator_info = "Check the effect parameters that require scrambled",
				pre_render = "Render",
				enable_legacy_progress_dialog = "Enable legacy progress dialog",
				camera_shake_parameters = "Camera Shake Parameters",
				shake_skew_in = "Speed",
				shake_skew_xy = "H/V synchronicity",
				shake_skew_out = "Amount",
				shake_x_to_y_ratio = "H/V ratio of displacement",
				shake_should_reset_pan = "Reset Pan/Crop on first frame",
				shake_should_clear_frames = "Reset all frames before shaking",
				shake_skew_in_tooltip = "Changes the frequency of the shake.",
				shake_skew_xy_tooltip = "Changes the relative vertical speed. Set to 1 to move in a circle.",
				shake_skew_out_tooltip = "Number of pixels the camera will shift away from the center. It is also the margin of zoom-in.",
				shake_x_to_y_tooltip = "Multiply horizontal distance. Values above 1 will produce a greater zoom-in.",
				shake_should_reset_pan_tooltip = "Leave unchecked to shake within the current video zoom.",
				shake_should_clear_frames_tooltip = "Leave unchecked to multiply the new shake effect with a previous shake effect.",
				restrict_note_length = "Restrict note length",
				unrestricted = "Unrestricted",
				restrict_max_length = "Max length",
				restrict_fixed_length = "Fixed length",
				preferred_track = "Preferred track",
				new_track = "New track",
				glissando = "Glissando",
				swirl = "Swirl",
			};
			TChinese = new Lang {
				__name__ = "繁體中文",
				__translator__ = NO_TRANSLATOR,
				info_label_font = "Microsoft JhengHei",
				ui_font = "Microsoft JhengHei UI",
				restart_to_effect_language = "重新啟動以使語言生效？",
				yes_to_restart_to_effect_language = "立即手動重啟",
				no_to_restart_to_effect_language = "不重啟以生效",
				version_number = "版本號",
				revision_date = "最後修訂日期",
				vegas_version = "Vegas 版本",
				script_supported_vegas_version = "腳本支持版本",
				unsupported_vegas_version = "警告：當前腳本與您當前所使用的 Vegas 版本不匹配，部分功能可能不能正常工作！請重新安裝正確版本的腳本。\n腳本支持的版本為：Vegas Pro {0}\n當前軟件的版本為：Vegas Pro {1}",
				unsupported_vegas_version_title = "版本不匹配",
				unsupported_vegas_version_feature = "低於 Vegas Pro {0} 的版本不支持本功能。",
				check_update_title = "更新腳本",
				check_update_found = "檢測到新版本，是否立即更新？ \n\n最新版本：{0}\n當前版本：{1}",
				check_update_not_found = "已是最新版本！\n\n最新版本：{0}",
				check_update_on_startup = "啟動時自動檢查更新",
				download_latest_version = "下載最新版本",
				quick_config = "快速配置",
				midi_file_name = "MIDI 序列",
				all_files = "所有檔案",
				choose_a_midi_file = "請選擇一個 MIDI 檔案",
				media_file_name = "支持的媒體檔案",
				choose_a_source_file = "請選擇一個視訊或圖片素材片段",
				error = "錯誤",
				details = "詳細資訊：",
				brightness_and_contrast = "亮度和對比度",
				invert = "反轉",
				black_and_white = "黑白",
				lab_adjust = "LAB 調整",
				hsl_adjust = "HSL 調整",
				mirror = "鏡像",
				pic_in_pic = "畫中畫",
				crop = "修剪",
				bz_masking = "貝茲蒙版",
				cookie_cutter = "區域裁切",
				check_pitch_shift_presets = "正在檢查移調插件的預設是否可用⋯⋯",
				no_pitch_shift_presets = "由於您試圖使用「移調」效果插件調音，但是系統發現您並沒有完全配置好所需的所有音效預設。您可嘗試由腳本嘗試為您自動添加預設，可能會添加失敗。如果失敗，則請按照使用教程的說明來手動操作。是否由腳本為您自動添加預設？",
				yes_to_add_pitch_shift_presets = "自動添加",
				no_to_add_pitch_shift_presets = "返回配置",
				no_pitch_shift_presets_title = "未找到所有的移調音效預設",
				add_pitch_shift_presets_successful = "添加預設完成！",
				add_pitch_shift_presets_fail = "添加預設失敗！",
				add_pitch_shift_presets_fail_title = "很遺憾",
				ensure_load_presets = "確定加載預設？",
				ensure_unload_presets = "確定卸載預設？",
				reverse_suffix_tag = "（反轉）",
				effect_init_forward = "正",
				effect_init_reversed = "反",
				effect_init_turned = "倒",
				effect_init_left = "左",
				effect_init_right = "右",
				effect_init_up = "上",
				effect_init_down = "下",
				effect_init_left_up = "左上",
				effect_init_right_up = "右上",
				effect_init_left_down = "左下",
				effect_init_right_down = "右下",
				effect_init_invert = "負",
				effect_init_conform = "符",
				effect_init_opposite = "對",
				effect_init_chromatic = "彩",
				effect_init_monochrome = "灰",
				effect_init_counter = "逆",
				effect_init_stepon = "繼",
				effect_init_flat = "扁",
				effect_init_thin = "細",
				effect_init_blur = "糊",
				effect_init_zoom_out = "縮小",
				effect_init_zoom_in = "放大",
				enable_all_effects = "開啟所有效果",
				chorus = "合唱",
				vibrato = "顫音",
				wave = "波浪",
				multi_beat_delay = "多拍延遲",
				spherize = "球面化",
				warning_missing_plugin = "警告：找不到插件「{0}」！",
				midi_channel = "通道",
				midi_notes_count = "音符數",
				midi_begin_note = "起音",
				midi_instrument = "樂器",
				instrument = "樂器",
				drum_kit = "鼓組",
				pan = "聲像",
				pan_left_abbr = "左",
				pan_right_abbr = "右",
				pan_center_abbr = "中",
				pan_dynamic_abbr = "起",
				yes = "是",
				no = "否",
				error_code = "錯誤代碼：",
				processing_otomad = "正在生成音 MAD / YTPMV⋯⋯",
				processing_otomad_swirl = "正在生成滑音效果⋯⋯",
				processing_ytp = "正在生成 YTP⋯⋯",
				processing_it = "正在處理它",
				processing_tracks = "正在生成第 {0} 個軌道，共 {1} 個。通道 {1}{2}⋯⋯",
				processing_tracks_swirl = "正在生成第 {0} 個軌道的滑音效果，共 {1} 個。通道 {1}{2}⋯⋯",
				real_time_update = "即時更新當前進度（會减慢生成速度）",
				replacer_is = "指定的替換項為",
				replacer_info = "請先在軌道視窗中選中替換與被替換的素材，然後指定一個素材為替換的素材，剩餘素材均為被替換素材。\n請先將替換素材的音視訊創建分組，並確保替換素材放置在時間靠後的位置並且儘量不與其它被替換素材位於同一軌道。",
				replace_clips = "替換軌道素材",
				replaced_info = "則剩餘 {0} 項軌道剪輯將被替換為選定素材。",
				replaced_label = "被替換項",
				replacer_label = "替換項",
				separation_replaced_info = "已選中 {0} 個軌道素材，其中 {1} 個音訊剪輯，{2} 個視訊剪輯。",
				separation_set_replaced = "將選中的 {0} 個素材設為被替換項",
				separation_set_replacer = "將選中的 {0} 個素材設為替換項",
				separation_back_to_select = "返回 Vegas 選定素材",
				separation_use_clip_group = "同時替換分組內其它剪輯",
				separation_reserve_original_name = "保留原始剪輯名稱",
				replacements_classic_specify = "同時指定",
				replacements_separation_specify = "分別指定",
				view = "檢視",
				selected_items = "選中項",
				replace_clips_form_ensure_to_close = "在「分別指定」中已指定有部分軌道素材。\n退出之後系統可能不會保留您的更改。",
				track = "軌道",
				submit_select = "設定選中(&S)",
				every_few = "每幾個選擇一個",
				which_one = "選擇每組第幾個",
				select_how_many = "每次要選取幾個",
				reset_select = "重設選擇(&R)",
				quick_select_interval = "快速間隔選擇",
				select_interval_info = "請先在 Vegas 軌道中選中一些素材，然後再啟動本對話方塊，使用下面的功能。",
				select_events_count_info = "已選中 {0} 個軌道剪輯。",
				select_videotracks_count_info = "已選中 {0} 個視訊軌道。",
				select_audioevents_count_info = "已选中 {0} 個音訊軌道剪輯。",
				select_videoevents_count_info = "已选中 {0} 個視訊軌道剪輯。",
				select_source_count_info = "已選中 {0} 項媒體素材。",
				select_tracks_count_info = "已選中 {0} 個軌道。",
				square = "平方",
				custom = "自定義",
				row_count = "行數",
				column_count = "列數",
				fill = "填充",
				adapt = "適應",
				increase_padding = "邊距",
				min = "最小值",
				max = "最大值",
				mirror_edges = "鏡像邊緣",
				disable_flip = "不翻轉",
				even_column = "偶數列",
				odd_column = "奇數列",
				even_row = "偶數行",
				odd_row = "奇數行",
				auto_layout_tracks = "自動佈局軌道",
				grid_layout = "網格佈局",
				box_3d_layout = "3D 方盒佈局",
				selected_tracks_too_much = "您所選取的軌道數目過多，有 {0} 個，超出使用功能範圍。\n請選取少量軌道後重試。",
				selected_tracks_too_much_title = "選取軌道數目過多",
				bottom_surface = "底面",
				top_surface = "頂面",
				right_surface = "右面",
				left_surface = "左面",
				back_surface = "後面",
				front_surface = "前面",
				box_3d_layout_info = "由於腳本功能限制，將會新建軌道並將選定軌道中的剪輯移動過去，原軌道中的軌道運動、效果等訊息將會遺失。\n請在下方選定立方體的各個面所使用的軌道，如果為空則表示不設定該面。",
				delete_original_tracks = "删除原軌道",
				use_video_longer_side = "使用視訊的長邊作為立方體的棱長",
				use_video_longer_side_tooltip = "勾選後，將以專案設定中視訊最長的一條邊（即寬度與高度的最大值）作為立方體的棱長。",
				gradient_tracks = "漸變軌道",
				gradient_tracks_info = "選擇一種漸變效果應用到所選的視訊軌道：",
				rainbow_color = "彩虹色",
				gradually_saturated = "逐漸飽和",
				gradually_contrasted = "逐漸對比",
				threshold = "閾值",
				alternately_chromatic = "彩灰交替",
				alternately_negative = "正負交替",
				descending = "降序排序",
				ascending = "昇序排序",
				change_tune_method = "更改調音算法",
				change_tune_method_info = "僅支持音訊事件内容中的調音方法，不支持「移調」插件中的調音方法。",
				time_stretch_pitch_shift = "時間拉伸/音調轉換",
				formant_change = "共振峰移位",
				pitch_change = "音調更改",
				method = "方法",
				pitch_lock = "鎖定以拉伸",
				lock_pitch_instead_of_rate = "鎖定音高而不是速度",
				none = "無",
				classic = "古典",
				elastique_pro = "專業",
				elastique_efficient = "高效",
				elastique_soloist_monophonic = "獨奏（單聲道）",
				elastique_soloist_speech = "獨奏（語音）",
				classic_a01 = "A01. 音樂 1（最小變調，可能有回音）",
				classic_a02 = "A02. 音樂 2",
				classic_a03 = "A03. 音樂 3（回音較小）",
				classic_a04 = "A04. 音樂 4（快速，適合低音）",
				classic_a05 = "A05. 音樂 5",
				classic_a06 = "A06. 音樂 6",
				classic_a07 = "A07. 語音 1",
				classic_a08 = "A08. 語音 2",
				classic_a09 = "A09. 語音 3（快速）",
				classic_a10 = "A10. 獨奏樂器 1",
				classic_a11 = "A11. 獨奏樂器 2",
				classic_a12 = "A12. 獨奏樂器 3",
				classic_a13 = "A13. 獨奏樂器 4（回音較小）",
				classic_a14 = "A14. 獨奏樂器 5",
				classic_a15 = "A15. 獨奏樂器 6",
				classic_a16 = "A16. 獨奏樂器 7（快速）",
				classic_a17 = "A17. 鼓，無音高（最小回音）",
				classic_a18 = "A18. 鼓（更適用於通鼓）",
				classic_a19 = "A19. 鼓（微弱回音）",
				batch_subtitle_generation = "批量生成字幕",
				batch_subtitle_generation_presets = "選擇一個預先設定好的“字幕和文字”媒體產生器的預設：",
				batch_subtitle_generation_subtitles = "輸入要插入的字幕文字（一行一個，忽略空行）：",
				batch_subtitle_generation_single_duration = "每個字幕持續時間",
				batch_subtitle_generation_suggestion_info = "稍後可開啟“自動跟進”功能以便後續調整時間。",
				open = "開啟",
				text_document = "文字文件",
				file_too_large_info = "檔案過大，是否仍要開啟？",
				will_clear_existing_text_info = "將會清除現有的文字內容，系統可能不會保留您的更改。",
				import_from_file = "從檔案中導入",
				find_clips = "查找軌道素材",
				find_clips_select_info = "選中的第一個軌道剪輯",
				find_clips_info = "在上方選中相匹配的剪輯，確定之後將會選中這些剪輯。",
				find_clips_header_name = "名稱",
				find_clips_header_num = "數目",
				find_clips_match_source = "與選中軌道剪輯相同的所有剪輯",
				find_clips_match_source_and_offset = "與選中軌道剪輯相同且開始偏移量相等的所有剪輯",
				find_clips_match_name = "與指定名稱相匹配的剪輯",
				convert_music_beats = "轉換音樂節拍",
				convert_music_beats_complete = "完成轉換音樂節拍。",
				convert_music_beats_info = "即將對選中的音樂音訊剪輯從{0}轉換到{1}。",
				metre_4_4 = "四四拍",
				metre_3_4 = "四三拍",
				metre_6_8 = "八六拍",
				custom_fade_gain = "自定漸入增益",
				from = "從",
				to = "至",
				midi_channel_advanced = "MIDI 軌道高級內容",
				channel = "通道",
				name = "名稱",
				edit_notes = "編輯所選軌道音符...",
				auto_layout_tracks_midi_channel_advanced_info = "僅在生成視訊且不啟用五線譜視覺化效果時有效。",
				reset = "重設",
				select_all = "全選",
				select_none = "全不選",
				invert_selection = "反選",
				replace = "替換(&R)",
				apply = "應用(&A)",
				close = "關閉(&C)",
				complete = "完成(&O)",
				cancel = "取消(&C)",
				about = "關於(&A)",
				ok = "確定(&O)",
				balloon_title = "填寫說明",
				midi_start_second_tooltip = "用於截取 MIDI 音樂的一部分。\n單位：秒。",
				midi_end_second_tooltip = "此處填寫需要讀取 MIDI 檔案的時間長度。\n注意如果填寫的值過小，將截去多餘時間部分的音符。\n如果此處填寫的值比起始秒數小或相等，則始終表示持續到整個音樂時長末尾。\n單位：秒。",
				midi_beat_conbo_tooltip = "現時僅用於五線譜的分頁功能。\n暫時無法通過 MIDI 檔案自動推測。",
				source_start_time_tooltip = "此處填寫媒體素材裁剪的開始時間。\n單位：秒。",
				source_end_time_tooltip = "注意如果此處填寫的數值比入點秒數小或相等，則始終表示持續到素材時間末尾。\n單位：秒。",
				no_tune = "不調音",
				pitch_shift_plugin = "移調效果插件",
				elastique_method = "彈性音調更改",
				classic_method = "古典音調更改",
				fool_tuning_method = "無音階調音",
				sine_wave = "正弦波",
				triangle_wave = "三角波",
				square_wave = "方波",
				sawtooth_wave = "鋸齒波",
				tune_method_tooltip = "「移調效果插件」表示使用「音訊FX」中的「移調」效果插件改變音調，需要配置預設。\n「彈性音調更改」表示使用“Élastique”拉伸管道改變音調，也就是鍵盤上 +、- 鍵直接改變音調，\n有音高範圍限制。",
				audio_lock_stretch_pitch_tooltip = "採用重採樣管道，隨著速度變化而改變音高。如果使用的是「彈性音調\n更改」方法，那麼將會禁用拉伸音訊功能。",
				preview_beep_duration_tooltip = "預聽標準音高所持續的時間。\n單位：毫秒。",
				preview_tune_audio_tooltip = "勾選後，預聽音訊時會將音訊素材調整到主音高中央 C。\n否則，預聽標準音高將會播放原始音高處所設定的音高。",
				sheet_position_tooltip = "五線譜中間第三根線到荧幕中心的距離，上正下負。\n單位：點數。",
				sheet_width_tooltip = "將在荧幕中間所填的寬度內顯示音符，用於左右留白，給左側的譜號留間距。\n單位：點數。",
				sheet_gap_tooltip = "五線譜線與線之間的間距。\n單位：點數。",
				sheet_line_thickness_tooltip = "生成五線譜的譜線時，五線譜譜線的粗細。 當粗細值達到 100 % 後，譜線將會占滿整個譜線間距。\n單位：百分比。",
				sheet_relative_tooltip = "勾選後，下方所填參數的點數單位將以相對於 1920 × 1080\n的尺寸進行定位；反之則以專案尺寸定位。",
				sheet_relative = "使用相對值",
				preview_base_pitch_tooltip = "請確保開啟聲音並且未將聲音方案設定為無聲。\n如果仍沒有聲音，請重啟系統。",
				ytp_max_length_tooltip = "指定單個軌道剪輯的最大長度。\n單位：毫秒。",
				ytp_min_length_tooltip = "指定單個軌道剪輯的最小長度。\n單位：毫秒。",
				file = "檔案(&F)",
				save_config = "储存組態(&S)",
				reset_config = "重設組態(&R)",
				exit_discarding_changes = "放棄更改並退出(&D)",
				exit = "退出(&X)",
				pitch_shift_preset = "移調插件預設(&P)",
				load_presets = "加載預設(&L)",
				unload_presets = "卸載預設(&U)",
				form_size = "表單大小(&F)",
				remember_form_size = "記住表單大小",
				remember_always_form_size = "每次都記住表單大小",
				remember_once_form_size = "記住一次表單大小",
				restore_default_form_size = "下次恢復默認表單大小",
				export_config = "導出組態(&E)",
				import_config = "導入組態(&I)",
				export = "導出",
				import = "導入",
				configuration_settings = "組態設定",
				about_to_import_config = "即將導入組態。\n注意：如果組態設定檔不合規範，可能導致腳本無法正常啟動。\n是否繼續？",
				import_config_complete = "導入完成，請手動重啟腳本。",
				help = "幫助(&H)",
				user_help = "使用說明",
				trouble_shooting = "故障排解",
				update_info = "更新說明",
				repository_link = "倉庫地址",
				latest_version_link = "最新版本連結",
				roadmap = "路線圖",
				send_issues = "反饋問題或建議",
				update_logs = "更新日誌",
				tutorial_video = "教程視訊",
				release_notes = "發行說明",
				staff_visualizer_documentation = "五線譜視覺化文件",
				english_documentations = "英語說明文件",
				chinese_documentations = "中文說明文件",
				check_update = "檢查更新(&U)",
				why_ok_btn_is_disabled = "為什麼無法點擊完成按鈕？",
				experimental_theme = "實驗性主題",
				media = "媒體",
				audio = "音訊",
				video = "視訊",
				staff = "五線譜",
				ytp = "YTP",
				helper = "工具",
				midi_settings = "MIDI 設定",
				midi_start_time = "起始秒數",
				midi_end_time = "終止秒數",
				bpm_setting = "設定 BPM 速度為",
				midi_beat = "節拍",
				midi_channel_setting = "使用 MIDI 軌道",
				browse = "瀏覽...",
				advanced = "高級...",
				presets = "預設",
				no_midi_selected = "<未選擇 MIDI 檔案>",
				choose_midi_file = "選擇 MIDI 檔案",
				midi_dynamic_midi_bpm = "動態 MIDI 速度",
				midi_midi_bpm = "MIDI 速度",
				midi_project_bpm = "專案速度",
				midi_custom_bpm = "自定義",
				dynamic_midi_bpm_info = "{0} 起始的動態速度",
				dynamic_midi_beat_info = "{0} 起始的動態節拍",
				colon = "：",
				semicolon = "；",
				source_settings = "素材設定",
				generate_at_begin = "專案開始處",
				generate_at_cursor = "游標處",
				generate_position = "設定生成開始位置",
				generate_below_top_adjustment_tracks = "生成在頂層調整軌道的下方",
				remove_source_track_events = "生成完成後移除作為源素材的軌道事件",
				select_all_generated_events = "生成完成後選中生成的所有事件",
				choose_source_file = "選擇媒體素材",
				selected_media = "選中的媒體檔案",
				selected_clip = "選中的軌道素材",
				source_start_time = "入點秒數",
				source_end_time = "出點秒數",
				parameters = "參數",
				linear = "線性",
				fast = "快速",
				slow = "慢速",
				smooth = "平滑",
				sharp = "急劇",
				hold = "保留",
				fade_in = "漸入　　",
				fade_out = "漸出　　",
				tune = "調音",
				tune_method = "調音管道",
				base_pitch = "原始音高",
				preview_listen = "預聽",
				preview_base_pitch = "預聽標準音高(&B)",
				preview_audio = "預聽音訊(&P)",
				stop_preview_audio = "停止預聽(&P)",
				lock_attr = "鎖定內容",
				preview_listen_attr = "預聽内容",
				preview_tune_audio = "使音訊調整到主音高",
				reserve_formant = "保留共振峰",
				stretch_attr = "拉伸內容",
				create_event_group = "創建分組",
				aconfig = "生成音訊",
				audio_stretch = "拉伸音訊",
				audio_loop = "循環音訊",
				audio_normalize = "規範化音量",
				audio_lock_stretch_pitch = "鎖定伸縮與音調",
				auto_pan = "自動聲像",
				velocity = "力度",
				mapping_velocity = "映射力度",
				notes_velocity = "音符力度",
				volume_gain = "音量增益",
				opacity = "不透明度",
				set_fade_by_percent = "按百分比設定",
				set_fade_by_timecode = "按時間碼設定",
				video_glow_bright = "發光亮度",
				video_glow = "發光",
				video_start_size = "起始尺寸",
				video_end_size = "終止尺寸",
				video_start_rotation = "起始旋轉",
				video_end_rotation = "終止旋轉",
				video_start_h_trans = "起始平移",
				video_end_h_trans = "終止平移",
				video_start_v_trans = "起始直移",
				video_end_v_trans = "終止直移",
				video_start_hue = "起始色相",
				video_end_hue = "终止色相",
				video_start_saturation = "起始飽和",
				video_end_saturation = "终止飽和",
				video_start_contrast = "起始對比",
				video_end_contrast = "终止對比",
				video_start_threshold = "起始閾值",
				video_end_threshold = "终止閾值",
				multitrack_for_chords = "複音多軌",
				effect = "效果",
				visual_effect = "視覺效果",
				initial_visual_effect = "初始值",
				apply_visual_effect = "應用視覺效果",
				pv_rhythm_visual_effect = "映像節奏視覺效果",
				flip_class = "翻轉類",
				rotation_class = "旋轉類",
				scale_class = "縮放類",
				mirror_class = "鏡像類",
				invert_class = "反轉類",
				hue_class = "色相類",
				monochrome_class = "單色類",
				time_class = "時間類",
				time_class_2 = "時間類 2",
				expansion_and_compression_class = "擴縮類",
				swing_class = "搖擺類",
				blur_class = "模糊類",
				no_effects = "無效果",
				h_flip = "水平翻轉",
				v_flip = "垂直翻轉",
				ccw_flip = "逆時針翻轉",
				cw_flip = "順時針翻轉",
				h_flip_sustain = "水平翻轉保持",
				h_flip_relay = "水平翻轉中繼",
				h_flip_invert = "水平翻轉反轉",
				ccw_rotate = "逆時針旋轉",
				cw_rotate = "順時針旋轉",
				turned = "顛倒",
				zoom_out_in = "縮小後放大",
				h_mirror = "水平鏡像",
				v_mirror = "垂直鏡像",
				ccw_mirror = "逆時針鏡像",
				cw_mirror = "順時針鏡像",
				negative = "顏色反轉",
				lumin_invert = "亮度反轉",
				hue_invert = "色相反轉",
				step_change_hue = "{0} 步色差",
				chromatic_and_monochrome = "彩灰",
				pingpong = "桌球效應",
				whirl = "愛的魔力轉圈圈",
				sharp_rewind = "急劇倒帶",
				wobble_period = "擺動週期",
				vertical_expansion = "垂直擴張",
				vertical_expansion_with_rebound = "垂直擴張並回彈",
				vertical_compression = "垂直壓縮",
				vertical_compression_with_rebound = "垂直壓縮並回彈",
				oblique_expansion_and_compression = "斜向擴縮",
				puyo_puyo = "魔法氣泡",
				pendulum = "左右搖擺",
				gaussian_blur = "高斯模糊",
				radial_blur = "徑向模糊",
				vconfig = "生成視訊",
				video_stretch = "拉伸視訊",
				video_loop = "循環視訊",
				freeze_first_frame = "靜態畫面",
				freeze_last_frame = "禁止延長",
				legato = "填補間隙",
				legato_staccato = "不填補",
				legato_one_beat_longest = "最長一拍",
				legato_one_bar_longest = "最長一小節",
				legato_unlimited = "無限填補",
				no_stretching = "不拉伸",
				flexing_and_extending = "可屈伸",
				extending_only = "僅伸展",
				flexing_only = "僅屈折",
				sheet_width = "譜面寬度",
				sheet_thickness = "譜線粗細",
				sheet_color = "譜線顏色",
				sheet_position = "譜面位置",
				sheet_clef = "譜號",
				sheet_gap = "譜線間距",
				sheet_g_clef = "高音",
				sheet_f_clef = "低音",
				sheet_notes_shift = "音符偏移",
				sheet_config = "啟用五線譜視覺化效果",
				sheet_generate_lines = "生成譜線",
				sheet_config_info = "欲開啟五線譜視覺效果，需要先開啟「生成視訊」選項。\n開啟本功能將會禁用映像節奏視覺效果和視訊拉伸選項。",
				sheet_notes_params = "音符參數",
				sheet_sheet_line_params = "譜線參數",
				sheet_legacy_method = "舊版定位方式",
				sheet_legacy_method_tooltip = "將使用與舊版腳本五線譜視覺化 v0.1 相同的定位方式。\n即音符和譜線的位置和形狀由軌道運動定位。",
				sheet_clef_params = "譜號參數",
				sheet_generate_clef = "生成譜號",
				sheet_clef_scale = "譜號縮放",
				sheet_clef_color = "譜號顔色",
				sheet_padding_left = "譜左邊距",
				sheet_padding_right = "譜右邊距",
				sheet_freeze_at_noteoff = "定格在音符結尾處",
				ytp_clips_count = "剪輯數目",
				ytp_min_length = "最小長度",
				ytp_max_length = "最大長度",
				ytp_chorus = "合唱",
				ytp_pitch_change = "更改音調",
				ytp_vibrato = "顫音（概率性附加波浪效果）",
				ytp_reverse = "倒放",
				ytp_delay = "延遲",
				ytp_speed_change = "更改速度",
				ytp_hue_change = "更改色相",
				ytp_hue_rotate = "旋轉色相",
				ytp_monochrome = "黑白",
				ytp_negative = "顏色反轉（概率性附加降調效果）",
				ytp_high_freq_repeat = "高頻重複",
				ytp_random_tone = "隨機調音（附加水平翻轉效果）",
				ytp_enlarge = "放大（附加增大音量）",
				ytp_spherize = "球面化",
				ytp_mirror = "鏡像",
				ytp_high_contrast = "高對比（附加增大音量）",
				ytp_oversaturation = "過飽和（概率性附加升調效果）",
				ytp_emphasize_thrice = "重說三（附加放大聚焦效果）",
				ytp_info = "在當前選項卡下按一下「完成」按鈕，將會生成 YTP 而不是音 MAD / YTPMV。\n除「生成音訊」「生成視訊」外其它的參數設定並不會在 YTP 中使用。",
				video_preset_fade_out = "淡出",
				flashlight = "閃光",
				horizontal_movement = "水平移動",
				vertical_movement = "垂直移動",
				threshold_change = "閾值變化",
				video_preset_enter = "進入",
				video_preset_enter_staff = "進入（五線譜）",
				video_preset_normal = "正常",
				oversaturation = "過飽和",
				high_contrast = "高對比",
				sure_to_delete = "確定要删除選中項？",
				sure_to_reset = "確定要重設？",
				sonar = "聲呐",
				sonar_config = "為鼓組啟用聲呐效果",
				separate_drums = "分離不同鼓聲",
				difference_composite_mode = "差值軌道合成模式",
				shadow = "陰影",
				shadow_color = "陰影顔色",
				matched_drum_sound = "匹配鼓聲",
				shape = "形狀",
				color = "顔色",
				duration = "持續時間",
				curve = "曲線",
				start_border = "起始邊框",
				end_border = "終止邊框",
				start_size = "起始大小",
				end_size = "終止大小",
				x_center = "水平中心",
				y_center = "垂直中心",
				start_x_offset_odd = "起始水平偏移單數",
				start_x_offset_even = "起始水平偏移雙數",
				start_y_offset_odd = "起始垂直偏移單數",
				start_y_offset_even = "起始垂直偏移雙數",
				prestart_x_offset_odd = "預先水平偏移單數",
				prestart_x_offset_even = "預先水平偏移雙數",
				prestart_y_offset_odd = "預先垂直偏移單數",
				prestart_y_offset_even = "預先垂直偏移雙數",
				start_rotation_odd = "起始旋轉單數",
				start_rotation_even = "起始旋轉雙數",
				fade_in_curve = "漸入曲線",
				fade_out_curve = "漸出曲線",
				cookie_cutter_shape_circle = "圓形",
				cookie_cutter_shape_oval = "橢圓形",
				cookie_cutter_shape_oval_side = "橢圓邊",
				cookie_cutter_shape_rectangle = "矩形",
				cookie_cutter_shape_diamond = "菱形",
				cookie_cutter_shape_square = "方形",
				cookie_cutter_shape_triangle_up = "向上三角形",
				cookie_cutter_shape_triangle_right = "向右三角形",
				cookie_cutter_shape_triangle_down = "向下三角形",
				cookie_cutter_shape_triangle_left = "向左三角形",
				cookie_cutter_shape_arrowhead_up = "向上箭頭",
				cookie_cutter_shape_arrowhead_right = "向右箭頭",
				cookie_cutter_shape_arrowhead_down = "向下箭頭",
				cookie_cutter_shape_arrowhead_left = "向左箭頭",
				select_interval = "間隔選擇",
				select_interval_configform_info = "本功能旨在輔助使用者每隔一個或幾個選中一個素材，然後可以執行「粘貼事件内容」等操作。",
				quick_normalize = "快速規範音量",
				quick_normalize_configform_info = "將選中的多個音訊軌道剪輯全部規範化音量。",
				quick_normalize_complete = "完成規範化音量。",
				replace_clips_configform_info = "將多個軌道剪輯替換為指定的新軌道剪輯。",
				auto_layout_tracks_configform_info = "類 YTPMV 風格自動佈局選中的軌道。",
				change_tune_method_configform_info = "將多個音訊軌道剪輯統一更改為指定的調音算法。",
				batch_subtitle_generation_configform_info = "預先設定好“字幕和文字”的預設，然後在此添加多行文字。",
				find_clips_configform_info = "根據指定的條件（如剪輯名稱、與選中剪輯相同的素材等）選中符合條件的所有軌道剪輯。",
				apply_visual_effect_configform_info = "將指定的視訊軌道剪輯應用映像節奏視覺效果。",
				convert_music_beats_configform_info = "將指定的音樂的節拍在四四拍、四三拍、八六拍等之間進行轉換。",
				custom_fade_gain_configform_info = "將多個軌道剪輯根據指定的規則來更改增益值。",
				select_exactly_one_audio_event_configform_info = "必須恰好選擇 1 個音訊軌道剪輯，不得多選或少選。",
				select_exactly_one_video_event_configform_info = "必須恰好選擇 1 個視訊軌道剪輯，不得多選或少選。",
				clear_tracks_motion = "清除軌道運動",
				clear_tracks_effect = "清除軌道效果",
				track_legato = "填補軌道間隙",
				track_legato_stacking = "堆積素材（應用於當前軌道）",
				track_legato_stacking_all_tracks = "堆積素材（應用於所有軌道）",
				track_legato_stacking_selected = "堆積素材（僅應用於選中素材）",
				track_legato_stacking_all_after = "堆積素材（也應用於後續所有素材）",
				track_legato_limit_stretch = "拉伸素材（限制在拉伸極限範圍之內）",
				track_legato_stretch = "拉伸素材（超出拉伸極限範圍之後再延長素材）",
				track_legato_lengthen = "延長素材（改變素材持續時間）",
				increase_spacing = "增加間隙（應用於當前軌道）",
				increase_spacing_all_tracks = "增加間隙（應用於所有軌道）",
				increase_spacing_info = "在指定的剪輯之間增加的間隙時間",
				effect_to_selected_events = "僅應用於選中的軌道剪輯",
				include_events_within_group = "也應用於同分組内的其它軌道剪輯",
				reverse_direction = "反轉方向",
				select_multiple_tracks_warning = "警告：您選中的軌道或軌道剪輯所位於的軌道數目超過 1 個，處理結果可能與您的預期不符。\n是否繼續執行？",
				drag_here_to_import = "拖動到這裡以導入",
				helper_info = "以下功能只是一些獨立的協助工具，與其它生成音視訊的參數無關。",
				helper_info_warning = "注意：操作之後將會關閉本對話方塊，您可以稍後再重新啟動，部分您未儲存的更改可能會遺失！\n",
				close_after_open_helper = "操作完成之後關閉本對話方塊",
				mosh = "抹失",
				datamosh_clips_folder = "數據抹失片段目錄",
				datamosh_not_installed_info = "未安裝數據抹失擴展包，下載後方可使用全部功能",
				datamosh_install = "下載擴展包",
				datamosh_no_clips_folder_info = "請先指定一個用於存放生成的數據抹失片段的資料夾。",
				datamosh_info = "嚜踵藪璩沬妷是一種磨損素材以產生故障效果的技術。",
				datamosh = "數據抹失",
				datamix = "數據抹拭",
				layering = "多層疊化",
				rendering = "預渲染化",
				scramble = "隨機擾亂",
				automator = "自動生效",
				stutter = "結巴效果",
				camera_shake = "鏡頭搖晃",
				datamosh_configform_info = "快速自動地對視訊選中區域進行數據抹失。",
				datamix_configform_info = "快速自動地對視訊選中區域進行數據抹失（將一個剪輯抹入另一個剪輯）。",
				layering_configform_info = "快速自動地對選中剪輯進行多層疊化。",
				rendering_configform_info = "快速自動地對視訊選中區域進行渲染。",
				scramble_configform_info = "快速自動地對選中剪輯進行打亂。",
				automator_configform_info = "快速自動地為選中視訊效果設定隨機值。",
				stutter_configform_info = "口吃剪輯（向前向後播放）。",
				camera_shake_configform_info = "使用平移/裁切來搖晃選中剪輯。",
				otomad_helper_config = "Otomad Helper for Vegas - 設定",
				reset_config_successful = "重設完成，請重新啟動腳本。",
				reset_config_successful_title = "重設使用者組態",
				sure_to_reset_config = "確定要重設使用者組態嗎？\n\n重設後您的使用者組態設定數據將會遺失。",
				about_title = "關於",
				script_author = "腳本作者",
				script_original_author = "腳本原作者",
				script_translator = "腳本翻譯",
				documentation = "說明文件",
				ranne = "蘭音",
				why_ok_btn_is_disabled_info = "請按照下列步驟依次檢查問題：",
				why_ok_btn_is_disabled_no_audio_and_video_enabled = "「生成音訊」與「生成視訊」被同時取消勾選。請至少勾選生成其中一項。",
				why_ok_btn_is_disabled_no_media_take = "所選的媒體素材來源不包含任何有效媒體資源。",
				why_ok_btn_is_disabled_no_midi_select = "若要生成音 MAD / YTPMV，請先選擇一個 MIDI 序列檔案。",
				why_ok_btn_is_disabled_in_helper_tab = "為避免誤操作，切勿在「工具」和「抹失」選項卡下進行提交生成操作。",
				why_ok_btn_is_disabled_unknown_problem = "未知原因。",
				no_selected_media_warning = "警告：您沒有在專案媒體視窗中選中任何有效媒體素材！",
				no_selected_clip_warning = "警告：您沒有在軌道視窗中選中任何剪輯片段！",
				preview_audio_track_name = "預聽音訊軌道（應該被删除！）",
				no_midi_exception = "錯誤：未選擇 MIDI 檔案。\n\n請重新啟動腳本參數設定對話方塊，然後在「MIDI 設定」分組中點擊「瀏覽」按鈕，開啟一個有效的 MIDI 檔案。",
				no_media_exception = "錯誤：未選擇媒體檔案。\n\n請重新啟動腳本參數設定對話方塊，然後在「媒體設定」分組中點擊「瀏覽」按鈕，開啟一個有效的媒體檔案。",
				no_track_info_exception = "錯誤：沒有 MIDI 音軌。\n\n可能的原因：\n1.您沒有選擇一個 MIDI 音軌；\n2.該 MIDI 檔案中沒有任何音軌；\n3.該 MIDI 檔案已損壞或檔案格式不受支持。",
				no_plugin_pitch_shift_exception = "錯誤：無法調用移調插件。\n\n請按照教程檔案 {0} 的指引正確操作。\n不過，根據這個更新版本的腳本，按理應當是中英文版本均可正常運行的。\n因此很有可能您是使用其它語言的 Vegas 造成的（逃",
				no_plugin_presets_exception = "錯誤：無法調用移調插件的預設效果。\n\n請按照教程檔案 {0} 的指引正確操作。\n確保在移調插件中手動添加了所有的 25 個預設，且命名正確。\n\n補充說明：具體可見上述連結專欄中對於安裝方法的說明。這 25 個預設是上下一個八度以內的所有變調種類，\n缺少任何一個都有可能出錯。手動添加預設的確非常麻煩，但 Vegas 無法使用腳本來指定變調的具體參數，\n囙此只好繞這個彎子。",
				no_plugin_name_exception = "錯誤：無法調用 {0} 插件。\n\n可能您使用的 Vegas 版本不支持該插件。",
				no_take_exception_ps = "補充說明：若仍不能解决，說明該素材檔案可能是 Vegas 不支持的格式，\n可以手動把該檔案拖入 Vegas 中看一下是否視訊音訊都正常。",
				no_audio_take_exception = "錯誤：無法讀取音訊媒體流。\n\n在設定介面，純視訊/圖片素材不要勾選「生成音訊」。\n\n",
				no_video_take_exception = "錯誤：無法讀取視訊媒體流。\n\n在設定介面，純音訊素材不要勾選「生成視訊」。\n\n",
				no_media_take_exception = "錯誤：無法讀取媒體。\n\n您所選的檔案格式不受 Vegas 支持，請檢查該媒體檔案是否損壞，或未安裝對應的 Vegas 解碼器。\n\n",
				not_a_midi_file_exception = "錯誤：無法讀取 MIDI 檔案。\n\n解決方法：用宿主軟件導入該 MIDI，然後重新輸出一個新的 MIDI 檔案。\n\n補充說明：MIDI 檔案有多種格式，腳本不保證都能够正確讀取。所幸主流宿主軟件在\n默認設定下匯出的 MIDI 檔案一般是可以讀取的。（現時測試過 FL Studio、LMMS\n與 Music Studio for iPad。）",
				no_selected_exception_ps = "補充說明：如果您想手動在資料夾中選擇一個媒體素材，那麼請點擊其右邊的「瀏覽」按鈕，\n選擇一個媒體素材。並確保左側的下拉式功能表中選中的是您所選檔案所在的路徑。",
				no_selected_media_exception = "錯誤：沒有在專案媒體視窗中選擇任何媒體。\n\n請在專案媒體視窗中選擇一個媒體，然後重新啟動參數設定視窗，並在素材設定中選擇「選中的媒體檔案」。\n\n",
				no_selected_clip_exception_short = "錯誤：沒有在軌道中選擇任何剪輯。",
				no_selected_clip_exception = "錯誤：沒有在軌道中選擇任何剪輯。\n\n請在軌道中選擇一個剪輯，然後重新啟動參數設定視窗，並在素材設定中選擇「選中的軌道素材」。\n\n",
				no_time_stretch_pitch_shift_exception = "錯誤：選定素材音調轉換方法被設定為不調音。\n\n很有可能您使用的是「選中的軌道素材」。出現了這個錯誤不怪你，要怪就怪 Vegas 這個腦殘設計。\n\n解決方法：請重新選中您的軌道素材，右鍵音訊部分，選擇底部的「內容」。將「時間拉伸/音調轉換」的「方法」設定為“élastique”。\n然後點擊確定即可。\n\n補充說明：如果某個音訊事件沒有進行變調操作，然後開啟了它的內容，那麼其內容中的「時間拉伸/音調轉換」的「方法」會被\n自動修改為「無」，點擊確定就會生效。這時你會發現鍵盤上的 +、- 鍵調音操作無效了。這時必須重新開啟音訊事件的內容，\n將「時間拉伸/音調轉換」的「方法」設定為“élastique”，不必設定「音調更改」，點擊確定即可。",
				read_config_fail_exception = "錯誤：讀取參數設定檔失敗。\n\n很遺憾您遇到了這個不可預見的錯誤。我們將會清除使用者組態設定並恢復為預設值以便解决問題。\n建議將這個錯誤告訴作者以便快速解决問題。\n將會退出此腳本，然後勞煩閣下手動重新啟動此腳本。",
				fail_to_select_clips_exception = "錯誤：選取軌道剪輯出錯。\n\n請先在軌道視窗中選取部分軌道剪輯。",
				fail_to_select_tracks_exception = "錯誤：選取軌道出錯。\n\n請先在軌道視窗中選取部分視訊軌道。",
				ytp_over_length_exception = "錯誤：指定的 YTP 最小長度超過了媒體長度。\n\n指定的 YTP 最小長度過大，請嘗試更小的值。或所選媒體素材長度過小。",
				ytp_in_media_generator_exception = "錯誤：對媒體產生器產生的媒體應用 YTP。\n\n應用 YTP 必須使用本地媒體檔案，不要使用媒體產生器生成的媒體。",
				ytp_eliminate_duplicates_finally_null_exception = "技術异常：對 YTP 素材清單進行去重操作，最後清單為空了！\n\n這是一個不應該被發生的錯誤。",
				unknown_exception = "錯誤：未知异常。\n\n請展開詳細資訊查看具體錯誤內容，並將錯誤資訊回饋給作者。",
				use_pic_in_pic_on_unsupported_vegas_exception = "錯誤：不支持在低版本 Vegas 中使用該畫中畫插件的效果。\n\n根本原因：Vegas 在新版本“畫中畫”效果插件中新增了一些新的功能和參數，這些新參數不能在低版本的 Vegas 插件中使用。\n\n解決方法：在當前 Vegas 版本不能使用該映像節奏視覺效果（如擴縮類等），請使用其它視覺效果。或更新您的 Vegas 軟件。",
				unsupported_curve_enum_exception = "錯誤：使用不支持的曲線枚舉類型作為參數。\n\n{0} 不是曲線枚舉類型。",
				convert_music_beats_not_one_audio_event_exception = "錯誤：在轉換音樂節拍工具中選擇了的音訊剪輯數目不恰好等於一個。\n\n應當選擇 1 個音訊，卻選擇了 {0} 個音訊。",
				convert_music_beats_unsupported_beats_exception = "錯誤：當前 Vegas 設定的節拍不是在四四拍、四三拍、八六拍之中的其一。",
				invalid_mapping_velocity_values_exception = "錯誤：使用不合法的映射力度參數。\n\n解決方法：確保音訊和視訊的映射力度參數中，\n1. 較小值不能大於較大值；\n2. 「力度」的較小值和較大值不能相等。\n否則將無法完成映射力度的操作。",
				invalid_glissando_amount_exception = "錯誤：使用不合法的滑音大小參數。\n\n滑音大小不能為 0。",
				cannot_get_script_dir_exception = "錯誤：無法獲取腳本目錄路徑！",
				cannot_get_xvid_path_exception = "錯誤：無法獲取 XviD 安裝路徑！",
				install_xvid_info = "未安裝 XviD 轉碼器。腳本將立即安裝它，並可能會要求管理員權限。",
				install_xvid_admin_failed = "錯誤：安裝 XviD 時管理員權限被拒絕。",
				install_xvid_succeed = "XviD 已安裝，並為當前幀率生成了渲染範本。請重新啟動 Vegas 並再次運行該腳本。",
				render_template_generate_completed = "已為當前畫面播放速率生成了渲染範本。請重新啟動 Vegas 並再次運行該腳本。",
				unexpected_exception = "未知异常：",
				unexpected_render_status = "非預期的渲染狀態：",
				datamix_selection_position_exception = "錯誤：選區必須從大於或等於第 1 幀開始！",
				datamix_selection_length_exception = "錯誤：選區長度必須大於 1 幀！",
				datamosh_frames_repeats_exception = "錯誤：幀重複必須大於 0！",
				datamosh_selection_length_exception = "錯誤：選區長度必須與幀計數一樣長！",
				datamosh_selection_position_exception = "錯誤：選區不能從項目的第一幀開始！",
				no_track_found_exception = "錯誤：未找到軌道！",
				excessively_video_events_selected_exception = "錯誤：只能選擇一個視訊剪輯！",
				no_video_event_selected_exception = "錯誤：請先選擇一個視訊剪輯！",
				no_ofx_effects_included_exception = "錯誤：所選視訊剪輯不包含任何效果或效果均不為 OFX 效果！",
				layering_offset_exception = "錯誤：層曡偏移不能為 0！",
				layering_count_exception = "錯誤：層數必須大於 0！",
				scramble_size_exception = "錯誤：擾亂大小必須大於 0！",
				stutter_length_exception = "錯誤：長度必須大於 0！",
				stutter_window_bias_exception = "錯誤：視窗偏移必須大於 0！",
				render_template_frame_rate_exception = "錯誤：幀率必須小於 100！",
				appdata_not_set_exception = "錯誤：無法獲取 AppData 路徑！",
				stutter_generator_media_info = "「結巴效果」無法自動為媒體產生器生成的媒體生成反向剪輯（如字幕和文字等）。請手動反轉它再反轉回來從而創建它們的反向剪輯，或者先渲染到檔案（例如使用「預渲染化」）。",
				automator_parameters = "自動生效 - 參數",
				datamoshing_parameters = "數據抹失 - 參數",
				layering_parameters = "多層疊化 - 參數",
				scrambling_parameters = "隨機擾亂 - 參數",
				stutter_parameters = "結巴效果 - 參數",
				frame_count = "幀計數",
				frames_repeats = "幀重複",
				layer_count = "層數",
				layering_offset = "層曡偏移",
				scramble_size = "擾亂大小",
				length_in_seconds = "長度（秒）",
				stutter_window_bias = "結巴視窗偏移",
				canceled = "已取消。",
				automator_info = "勾選需要自動隨機設定值的效果參數。",
				pre_render = "預渲染",
				enable_legacy_progress_dialog = "啟用舊版進度對話方塊",
				camera_shake_parameters = "鏡頭搖晃 - 參數",
				shake_skew_in = "速度",
				shake_skew_xy = "水平/垂直同步係數",
				shake_skew_out = "數量",
				shake_x_to_y_ratio = "水平/垂直位移比",
				shake_should_reset_pan = "在第一幀上重設平移/裁切",
				shake_should_clear_frames = "在搖晃前重設所有幀",
				shake_skew_in_tooltip = "更改搖晃的頻率。",
				shake_skew_xy_tooltip = "更改相對垂直速度。設定為 1，則以圓圈的管道運動。",
				shake_skew_out_tooltip = "鏡頭偏離中心的圖元數。亦是放大的邊距。",
				shake_x_to_y_tooltip = "與水准距離相乘。大於 1 的值將會放得更大。",
				shake_should_reset_pan_tooltip = "若不勾選，可在當前視頻縮放範圍內搖晃。",
				shake_should_clear_frames_tooltip = "若不勾選，可將新的搖晃效果與之前的搖晃效果相乘。",
				restrict_note_length = "限制音符長度",
				unrestricted = "不限制",
				restrict_max_length = "最大長度",
				restrict_fixed_length = "固定長度",
				preferred_track = "首選軌道",
				new_track = "新增軌道",
				glissando = "滑音效果",
				swirl = "漩渦",
			};
			Japanese = new Lang {
				__name__ = "日本語",
				__translator__ = NO_TRANSLATOR,
				info_label_font = "Yu Gothic",
				ui_font = "Yu Gothic UI",
				restart_to_effect_language = "言語を有効にするために再起動しますか？",
				yes_to_restart_to_effect_language = "今すぐ手動で再起動",
				no_to_restart_to_effect_language = "有効にするために再起動しません",
				version_number = "バージョン番号",
				revision_date = "最終改訂日",
				vegas_version = "Vegasバージョン",
				script_supported_vegas_version = "スクリプトでサポートされているバージョン",
				unsupported_vegas_version = "警告：現在のスクリプトは現在使用しているVegasバージョンと一緻せず、一部の機能が正常に動作しない可能性があります！正しいバージョンのスクリプトを再インストールしてください。\nサポートされているバージョン：Vegas Pro {0}\n現在のバージョン：Vegas Pro {1}",
				unsupported_vegas_version_title = "バージョンが一緻しません",
				unsupported_vegas_version_feature = "Vegas Pro {0} 以下のバージョンは、本機能をサポートしていません。",
				check_update_title = "スクリプトの更新",
				check_update_found = "新しいバージョンが検出されました。すぐに更新しますか？\n\n最新バージョン：{0}\n現行のバージョン：{1}",
				check_update_not_found = "すでに最新バージョン！\n\n最新バージョン：{0}",
				check_update_on_startup = "起動時に更新を確認",
				download_latest_version = "最新のダウンロード",
				quick_config = "迅速な設定",
				midi_file_name = "MIDIシーケンス",
				all_files = "すべてのファイル",
				choose_a_midi_file = "MIDIファイルを選択してください",
				media_file_name = "サポートされているメディアファイル",
				choose_a_source_file = "ビデオまたは画像クリップを選択してください",
				error = "エラー",
				details = "詳細：",
				brightness_and_contrast = "明るさとコントラスト",
				invert = "反転",
				black_and_white = "モノクロ",
				lab_adjust = "LAB 調整",
				hsl_adjust = "HSL 調整",
				mirror = "ミラー",
				pic_in_pic = "ピクチャ・イン・ピクチャ",
				crop = "クロップ",
				bz_masking = "ベジェマスキング",
				cookie_cutter = "クッキーカッター",
				check_pitch_shift_presets = "ピッチシフトプラグインのプリセットが使用可能かどうかを確認しています...",
				no_pitch_shift_presets = "「ピッチシフト」エフェクトプラグインを使用してチューニングしようとしたため、システムは、必要なすべてのオーディオプリセットを完全に構成していないことを検出しました。スクリプトはプリセットの追加を試みることができますが、失敗する可能性があります。それが失敗した場合は、チュートリアルを手動で使用するための指示に従ってください。スクリプトでプリセットを自動的に追加しますか？",
				yes_to_add_pitch_shift_presets = "自動的に追加",
				no_to_add_pitch_shift_presets = "構成に戻る",
				no_pitch_shift_presets_title = "すべてのピッチシフトプリセットが見つからない",
				add_pitch_shift_presets_successful = "プリセットの追加を完了してください！",
				add_pitch_shift_presets_fail = "プリセットの追加に失敗しました！",
				add_pitch_shift_presets_fail_title = "不幸にも",
				ensure_load_presets = "プリセットをロードしてもよろしいですか？",
				ensure_unload_presets = "プリセットをアンロードしてもよろしいですか？",
				reverse_suffix_tag = "（逆方向）",
				effect_init_forward = "正",
				effect_init_reversed = "反",
				effect_init_turned = "逆",
				effect_init_left = "左",
				effect_init_right = "右",
				effect_init_up = "上",
				effect_init_down = "下",
				effect_init_left_up = "左上",
				effect_init_right_up = "右上",
				effect_init_left_down = "左下",
				effect_init_right_down = "右下",
				effect_init_invert = "負",
				effect_init_conform = "適",
				effect_init_opposite = "対",
				effect_init_chromatic = "色",
				effect_init_monochrome = "灰",
				effect_init_counter = "逆",
				effect_init_stepon = "続",
				effect_init_flat = "幅",
				effect_init_thin = "細",
				effect_init_blur = "ぼかし",
				effect_init_zoom_out = "縮小",
				effect_init_zoom_in = "拡大",
				enable_all_effects = "すべての効果をオンにします",
				chorus = "コーラス",
				vibrato = "ビブラート",
				wave = "波浪",
				multi_beat_delay = "マルチタップ ディレイ",
				spherize = "球形",
				warning_missing_plugin = "警告：プラグイン「{0}」が見つかりませんでした！",
				midi_channel = "チャネル",
				midi_notes_count = "音符の数",
				midi_begin_note = "冒頭の音符",
				midi_instrument = "樂器",
				instrument = "樂器",
				drum_kit = "ドラムキット",
				pan = "パン",
				pan_left_abbr = "左",
				pan_right_abbr = "右",
				pan_center_abbr = "中",
				pan_dynamic_abbr = "から",
				yes = "はい",
				no = "いいえ",
				error_code = "エラーコード：",
				processing_otomad = "音MAD/YTPMVを生成中⋯⋯",
				processing_otomad_swirl = "グリッサンドを生成中⋯⋯",
				processing_ytp = "YTPを生成中⋯⋯",
				processing_it = "それを処理する",
				processing_tracks = "レール {0}/{1}、チャネル{2}{3}を生成中⋯⋯",
				processing_tracks_swirl = "レール {0}/{1}、チャネル{2}{3}のグリッサンドを生成中⋯⋯",
				real_time_update = "現在の進捗状況をリアルタイムで更新（生成速度が低下）",
				replacer_is = "指定された代替品は",
				replacer_info = "最初にトラックウィンドウで置換および置換するクリップを選択してから、置換クリップとしてクリップを指定してください。残りのクリップはすべて置換されたクリップです。\n最初に交換用クリップのオーディオとビデオのグループを作成し、交換用クリップが他の交換済みクリップと同じトラック上に配置されていないことを確認してください。",
				replace_clips = "トラックイベントを置き換える",
				replaced_info = "次に、残りの{0}トラッククリップが選択したクリップに置き換えられます。",
				replaced_label = "置換されたみ",
				replacer_label = "置換項",
				separation_replaced_info = "{0}トラッククリップが選択されました。そのうち{1}オーディオクリップ、{2}ビデオクリップ。",
				separation_set_replaced = "選択した{0}アセットを置換されたみ",
				separation_set_replacer = "選択した{0}アセットを置換项",
				separation_back_to_select = "Vegasに戻る選択した素材",
				separation_use_clip_group = "グループ内の他のクリップも交換してください",
				separation_reserve_original_name = "元のクリップ名を保持",
				replacements_classic_specify = "同時指定",
				replacements_separation_specify = "個別指定",
				view = "表示",
				selected_items = "選択項",
				replace_clips_form_ensure_to_close = "「個別指定」でレール素材の一部が指定されています。\n終了しても変更は保持されない場合があります。",
				track = "追跡",
				submit_select = "選択した値を送信(&S)",
				every_few = "数個ごとに1つ選択してください",
				which_one = "グループのどれを選択します",
				select_how_many = "一度にいくつ選択する",
				reset_select = "リセット選択(&R)",
				quick_select_interval = "クイックセレクト間隔",
				select_interval_info = "最初にVegasトラックウィンドウでいくつかのクリップを選択してから、このダイアログボックスを開いて次の機能を使用してください。",
				select_events_count_info = "{0}トラックイベントが選択されました。",
				select_videotracks_count_info = "{0}ビデオトラックが選択されました。",
				select_audioevents_count_info = "{0}オーディオトラックイベントが選択されました。",
				select_videoevents_count_info = "{0}ビデオトラックイベントが選択されました。",
				select_source_count_info = "{0}メディア素材が選択されました。",
				select_tracks_count_info = "{0}トラックが選択されました。",
				square = "四角",
				custom = "カスタム",
				row_count = "行の数",
				column_count = "列の数",
				fill = "塗りつぶし",
				adapt = "フィット",
				increase_padding = "パディング",
				min = "最小値",
				max = "最大値",
				mirror_edges = "ミラーエッジ",
				disable_flip = "無効化",
				even_column = "偶数列",
				odd_column = "奇数列",
				even_row = "偶数行",
				odd_row = "奇数行",
				auto_layout_tracks = "自動レイアウトトラック",
				grid_layout = "グリッドレイアウト",
				box_3d_layout = "3Dボックスレイアウト",
				selected_tracks_too_much = "利用可能な機能の範囲を超えている{0}トラックを選択しました。多すぎる！\n選択するトラックの数を減らして、もう一度やり直してください。",
				selected_tracks_too_much_title = "選択したトラックが多すぎます",
				bottom_surface = "下の方",
				top_surface = "上の方",
				right_surface = "右の方",
				left_surface = "左の方",
				back_surface = "後の方",
				front_surface = "前の方",
				box_3d_layout_info = "スクリプト機能の制限により、新しいトラックが作成され、選択したトラックのクリップが移動し、元のトラックのトラックモーション、エフェクトなどが失われます。\n以下の立方体の各面で使用されるトラックを選択してください。空の場合は、顔が設定されていないことを意味します。",
				delete_original_tracks = "元のトラックを削除",
				use_video_longer_side = "立方体のエッジの長さとして長い方の辺を使用します",
				use_video_longer_side_tooltip = "チェック後、プロジェクト設定のビデオの最も長い辺（つまり、幅と高さの最大値）が立方体のエッジの長さとして使用されます。",
				gradient_tracks = "グラデーショントラック",
				gradient_tracks_info = "選択したビデオトラックに適用するグラデーション効果を選択します。",
				rainbow_color = "虹色",
				gradually_saturated = "徐々に飽和",
				gradually_contrasted = "徐々に対照",
				threshold = "スレッショルド",
				alternately_chromatic = "交互にクロマチック",
				alternately_negative = "交互にネガティブ",
				descending = "降順",
				ascending = "昇順",
				change_tune_method = "チューニング方法の変更",
				change_tune_method_info = "オーディオイベントのプロパティでのみチューニングメソッドは、ピッチシフトプラグインではサポートされていません。",
				time_stretch_pitch_shift = "タイム ストレッチ/ピッチ シフト",
				formant_change = "フォルマントを保つ",
				pitch_change = "ピッチの変更",
				method = "方法",
				pitch_lock = "ストレッチにロック",
				lock_pitch_instead_of_rate = "速度ではなくピッチをロック",
				none = "なし",
				elastique = "エラスティック",
				classic = "クラシック",
				elastique_pro = "プロ",
				elastique_efficient = "効率的",
				elastique_soloist_monophonic = "ソロイスト（モノフォニック）",
				elastique_soloist_speech = "ソロイスト（スビーチ）",
				classic_a01 = "A01. 曲 1（最小フランジ、エコー可）",
				classic_a02 = "A02. 曲 2",
				classic_a03 = "A03. 曲 3（エコー小）",
				classic_a04 = "A04. 曲 4（速い、バスニ最適）",
				classic_a05 = "A05. 曲 5",
				classic_a06 = "A06. 曲 6",
				classic_a07 = "A07. スピーチ 1",
				classic_a08 = "A08. スピーチ 2",
				classic_a09 = "A09. スピーチ 3（速い）",
				classic_a10 = "A10. ソロ楽器 1",
				classic_a11 = "A11. ソロ楽器 2",
				classic_a12 = "A12. ソロ楽器 3",
				classic_a13 = "A13. ソロ楽器 4（エコー小）",
				classic_a14 = "A14. ソロ楽器 5",
				classic_a15 = "A15. ソロ楽器 6",
				classic_a16 = "A16. ソロ楽器 7（速い）",
				classic_a17 = "A17. ドラム、ピッチなし（エコー最小）",
				classic_a18 = "A18. ドラム（ダム向け）",
				classic_a19 = "A19. ドラム（エコー小）",
				batch_subtitle_generation = "字幕の一括生成",
				batch_subtitle_generation_presets = "予め設定された「字幕と文字」メディアジェネレータのプリセットを選択します。",
				batch_subtitle_generation_subtitles = "挿入する字幕テキストを入力します（1行1字幕、空白行は無視）：",
				batch_subtitle_generation_single_duration = "各字幕期間",
				batch_subtitle_generation_suggestion_info = "後で[自動フォローアップ]機能をオンにして、時間を調整します。",
				open = "開く",
				text_document = "テキスト ファイル",
				file_too_large_info = "ファイルが大きすぎて開きますか？",
				will_clear_existing_text_info = "既存のテキストコンテンツが消去され、変更内容が保持されない場合があります。",
				import_from_file = "ファイルからインポート",
				find_clips = "レール素材を探す",
				find_clips_select_info = "最初に選んだイベント",
				find_clips_info = "一致するクリップを上から選択し、確定したら選択します。",
				find_clips_header_name = "名",
				find_clips_header_num = "数",
				find_clips_match_source = "選択したトラッククリップと同じすべてのクリップ",
				find_clips_match_source_and_offset = "選択したトラッククリップと同じオフセット開始量のすべてのクリップ",
				find_clips_match_name = "指定した名前に一致するクリップ",
				convert_music_beats = "音楽ビートを変換",
				convert_music_beats_complete = "音楽ビートの変換を終了する。",
				convert_music_beats_info = "選択した音楽オーディオクリップを{0}から{1}に変換しようとしています。",
				metre_4_4 = "四四拍",
				metre_3_4 = "四三拍",
				metre_6_8 = "八六拍",
				custom_fade_gain = "カスタムフェードゲイン",
				from = "から",
				to = "へ",
				midi_channel_advanced = "MIDIトラックの詳細プロパティ",
				channel = "チャネル",
				name = "名",
				edit_notes = "選択したトラックの音符を編集...",
				auto_layout_tracks_midi_channel_advanced_info = "ビデオを生成し、ステーブ視覚化効果を有効にしない場合にのみ有効です。",
				reset = "リセット",
				select_all = "すべて選択",
				select_none = "選択解除",
				invert_selection = "選択の切り替え",
				replace = "交換(&R)",
				apply = "申し込み(&A)",
				close = "選ぶ(&C)",
				complete = "完了(&O)",
				cancel = "キャンセル(&C)",
				about = "だいたい(&A)",
				ok = "&OK",
				balloon_title = "記入手順",
				midi_start_second_tooltip = "MIDI音楽の一部を傍受するために使用されます。\n単位：秒。",
				midi_end_second_tooltip = "MIDIファイルの読み取りに必要な時間をここに入力します。\n入力した値が小さすぎると、超過時間の音符が途切れる場合がありますのでご注意ください。\nここに入力した値が開始秒以下の場合、それは常に音楽の全持続時間の終わりまで続くことを意味します。\n単位：秒。",
				midi_beat_conbo_tooltip = "現在、五線譜のページネーション機能にのみ使用されています。\nMIDIファイルからの自動推測は一時的に利用できません。",
				source_start_time_tooltip = "メディア素材のカットの開始時間をここに入力します。\n単位：秒。",
				source_end_time_tooltip = "ここに入力された値が開始秒数以下の場合、それは常にメディア時間の終わりまで続くことを意味することに注意してください。\n単位：秒。",
				no_tune = "チューニングなし",
				pitch_shift_plugin = "ピッチシフトオーディオエフェクトプラグイン",
				elastique_method = "エラスティックなピッチ変化",
				classic_method = "クラシックなピッチ変化",
				fool_tuning_method = "スケールなしのチューニング",
				sine_wave = "正弦波",
				triangle_wave = "三角波",
				square_wave = "方形波",
				sawtooth_wave = "鋸歯状波",
				tune_method_tooltip = "「ピッチシフトオーディオエフェクトプラグイン」とは、「オーディオFX」の「ピッチシフト」エフェクトプラグインを使用してピッチを変更することを意味し、プリセットを設定する必要があります。\n「エラスティックピッチチェンジ」とは、「エラスティック」ストレッチ方式でピッチを変更することを意味します。つまり、キーボードの+キーと-キーで直接ピッチを変更し、ピッチ範囲を制限します。",
				audio_lock_stretch_pitch_tooltip = "速度の変化に応じてピッチを変更するためにリサンプリング方式を採用していることを意味します。「エラスティックピッチチェンジ」を使用している場合、\nストレッチオーディオオプションは無効になります。",
				preview_beep_duration_tooltip = "ベースピッチにプレビューの持続時間。\n単位：ミリ秒。",
				preview_tune_audio_tooltip = "チェックを付けると、オーディオの予聴時に、オーディオ素材を主音の高い中央Cに調整します。\n標準音の高さを予聴すると、元の音の高さに設定された音の高さが再生されます。",
				sheet_position_tooltip = "五線譜中央の第三線から画面中央までの距離。アッププラスダウンマイナス。\n単位：ピクセル。",
				sheet_width_tooltip = "メモは、画面の中央に入力された幅で表示され、左右の空白に使用され、左側の音部記号の左側のスペースに使用されます。\n単位：ピクセル。",
				sheet_gap_tooltip = "五線譜の線の間の距離。\n単位：ピクセル。",
				sheet_line_thickness_tooltip = "五線譜生成時のシートラインの太さ。 厚さが100％に達すると、シートラインはシートラインの間隔全体を占めます。\n単位：パーセンテージ。",
				sheet_relative_tooltip = "チェック後、以下に入力されたパラメータのピクセル単位は、1920×1080のサイズを基準にして配置されます。\nそれ以外の場合は、プロジェクトのサイズに基づいて配置されます。",
				sheet_relative = "相対値の使用",
				preview_base_pitch_tooltip = "サウンドがオンになっていて、サウンドスキームがサイレントに設定されていないことを確認してください。\nそれでも問題が解決しない場合は、システムを再起動してください。",
				ytp_max_length_tooltip = "1つのトラッククリップの最大長を指定します。\n単位：ミリ秒。",
				ytp_min_length_tooltip = "単一のトラッククリップの最小の長さを指定します。\n単位：ミリ秒。",
				file = "ファイル(&F)",
				save_config = "構成の保存(&S)",
				reset_config = "構成のリセット(&R)",
				exit_discarding_changes = "変更を破棄して終了します(&D)",
				exit = "終了(&X)",
				pitch_shift_preset = "ピッチシフトプラグインプリセット(&P)",
				load_presets = "プリセットをロード(&L)",
				unload_presets = "プリセットをアンロード(&U)",
				form_size = "フォームサイズ(&F)",
				remember_form_size = "フォームサイズを記憶",
				remember_always_form_size = "フォームサイズを毎回記憶",
				remember_once_form_size = "フォームサイズを1回記憶",
				restore_default_form_size = "次回デフォルトのフォームサイズに戻す",
				export_config = "構成のエクスポート(&E)",
				import_config = "構成のインポート(&I)",
				export = "エクスポート",
				import = "インポート",
				configuration_settings = "構成設定",
				about_to_import_config = "構成をインポートしようとしています。\n注：構成設定ファイルが仕様外の場合、スクリプトが正しく起動しない場合があります。\n続けるか？",
				import_config_complete = "インポートが完了しました。スクリプトを手動で再起動してください。",
				help = "ヘルプ(&H)",
				user_help = "手順",
				trouble_shooting = "トラブルシューティング",
				update_info = "リリースノート",
				repository_link = "リポジトリリンク",
				latest_version_link = "最新バージョンのリンク",
				roadmap = "ロードマップ",
				send_issues = "フィードバックの送信",
				update_logs = "ログを更新",
				tutorial_video = "チュートリアルビデオ",
				release_notes = "リリースノート",
				staff_visualizer_documentation = "ステーブ視覚化のドキュメンテーション",
				english_documentations = "英語のドキュメンテーション",
				chinese_documentations = "中国語のドキュメンテーション",
				check_update = "更新を確認(&U)",
				why_ok_btn_is_disabled = "なぜ［完了］ボタンをクリックできないですか？",
				experimental_theme = "実験的テーマ",
				media = "メディア",
				audio = "音声",
				video = "映像",
				staff = "五線譜",
				ytp = "ヤタプ",
				helper = "ツール",
				midi_settings = "MIDIプロパティ",
				midi_start_time = "秒を開始",
				midi_end_time = "秒を终了",
				bpm_setting = "BPMテンポをに設定します",
				midi_beat = "ビート",
				midi_channel_setting = "MIDIトラックの使用",
				browse = "参照...",
				advanced = "詳細...",
				presets = "プリセット",
				no_midi_selected = "<MIDIファイルが選択されていません>",
				choose_midi_file = "MIDIファイルを選択",
				midi_dynamic_midi_bpm = "ダイナミックMIDIテンポ",
				midi_midi_bpm = "MIDIテンポ",
				midi_project_bpm = "プロジェクトテンポ",
				midi_custom_bpm = "カスタム",
				dynamic_midi_bpm_info = "{0}からのダイナミックテンポ",
				dynamic_midi_beat_info = "{0}からのダイナミックビート",
				colon = "：",
				semicolon = "；",
				source_settings = "素材プロパティ",
				generate_at_begin = "プロジェクト開始",
				generate_at_cursor = "カーソル",
				generate_position = "どこを生成しますか",
				generate_below_top_adjustment_tracks = "最上層調整トラックの下に生成",
				remove_source_track_events = "生成完了後に素材に割り当てられたトラックイベントを削除",
				select_all_generated_events = "生成完了後に生成されたイベントを全て選択",
				choose_source_file = "メディアソースを選択",
				selected_media = "選択したメディアファイル",
				selected_clip = "選択されたトラッククリップ",
				source_start_time = "秒を開始",
				source_end_time = "秒を终了",
				parameters = "パラメーター",
				linear = "リニア",
				fast = "高速",
				slow = "低速",
				smooth = "スムーズ",
				sharp = "シャープ",
				hold = "ホールド",
				fade_in = "フェードイン",
				fade_out = "フェードアウト",
				tune = "チューニング",
				tune_method = "チューニング方法",
				base_pitch = "ベースピッチ",
				preview_listen = "プレビュー",
				preview_base_pitch = "ベースピッチをプレビュー(&B)",
				preview_audio = "音声のプレビュー(&P)",
				stop_preview_audio = "プレビューを停止(&P)",
				lock_attr = "ロック属性",
				preview_listen_attr = "プレビュー属性",
				preview_tune_audio = "オーディオを主音の高さに調整",
				reserve_formant = "フォルマントを保つ",
				stretch_attr = "引張り属性",
				create_event_group = "グループの作成",
				aconfig = "オーディオを有効",
				audio_stretch = "ストレッチ",
				audio_loop = "ループ",
				audio_normalize = "ノーマライズ",
				audio_lock_stretch_pitch = "伸縮と音調をロック",
				auto_pan = "オートパン",
				velocity = "ベロシティ",
				mapping_velocity = "ベロシティのマッピング",
				notes_velocity = "音符ベロシティ",
				volume_gain = "音量",
				opacity = "不透明度",
				set_fade_by_percent = "パーセントで設定",
				set_fade_by_timecode = "タイムコードで設定",
				video_glow_bright = "グローの明度",
				video_glow = "グロー",
				video_start_size = "開始サイズ",
				video_end_size = "終了サイズ",
				video_start_rotation = "開始回転",
				video_end_rotation = "終了回転",
				video_start_h_trans = "開始水平移動",
				video_end_h_trans = "終了水平移動",
				video_start_v_trans = "開始垂直移動",
				video_end_v_trans = "終了垂直移動",
				video_start_hue = "開始色相",
				video_end_hue = "終了色相",
				video_start_saturation = "開始鮮やかち",
				video_end_saturation = "終了鮮やかち",
				video_start_contrast = "開始コントラスト",
				video_end_contrast = "終了コントラスト",
				video_start_threshold = "開始スレッショルド",
				video_end_threshold = "終了スレッショルド",
				multitrack_for_chords = "和音の複数トラック",
				effect = "効果",
				visual_effect = "視覚効果",
				initial_visual_effect = "初期値",
				apply_visual_effect = "視覚効果を適用",
				pv_rhythm_visual_effect = "映像リズム視覚効果",
				flip_class = "フリップクラス",
				rotation_class = "回転クラス",
				scale_class = "スケールクラス",
				mirror_class = "ミラークラス",
				invert_class = "反転クラス",
				hue_class = "色相クラス",
				monochrome_class = "モノクロクラス",
				time_class = "時間クラス",
				time_class_2 = "時間クラス 2",
				expansion_and_compression_class = "拡縮クラス",
				swing_class = "スイングクラス",
				blur_class = "ブラークラス",
				no_effects = "効果なし",
				h_flip = "水平方向にフリップ",
				v_flip = "垂直方向にフリップ",
				ccw_flip = "反時計回りにフリップ",
				cw_flip = "時計回りにフリップ",
				h_flip_sustain = "持続的に水平方向にフリップ",
				h_flip_relay = "中継した水平方向にフリップ",
				h_flip_invert = "反転時の水平方向にフリップ",
				ccw_rotate = "反時計回りの回転",
				cw_rotate = "時計回りの回転",
				turned = "向きを変えた",
				zoom_out_in = "縮小後に拡大",
				h_mirror = "水平方向のミラー",
				v_mirror = "垂直方向のミラー",
				ccw_mirror = "反時計回りのミラー",
				cw_mirror = "時計回りのミラー",
				negative = "色を反転",
				lumin_invert = "輝度を反転",
				hue_invert = "色相を反転",
				step_change_hue = "{0} 段階色収差",
				chromatic_and_monochrome = "彩色と単色",
				pingpong = "ピンポン効果",
				whirl = "愛の魔力が輪回し",
				sharp_rewind = "シャープな巻き戻し",
				wobble_period = "ぐらつき期",
				vertical_expansion = "縦拡張",
				vertical_expansion_with_rebound = "縦拡張とリバウンド",
				vertical_compression = "縦圧縮",
				vertical_compression_with_rebound = "縦圧縮とリバウンド",
				oblique_expansion_and_compression = "斜め拡縮",
				puyo_puyo = "ぷよぷよ",
				pendulum = "振り子",
				gaussian_blur = "ガウスブラー",
				radial_blur = "放射状ブラー",
				vconfig = "ビデオを有効",
				video_stretch = "ストレッチ",
				video_loop = "ループ",
				freeze_first_frame = "静止画像",
				freeze_last_frame = "延長しない",
				legato = "レガート",
				legato_staccato = "スタッカート",
				legato_one_beat_longest = "最長1拍",
				legato_one_bar_longest = "最長1小節",
				legato_unlimited = "無制限",
				no_stretching = "ストレッチなし",
				flexing_and_extending = "屈折と伸展",
				extending_only = "伸展のみ",
				flexing_only = "屈折のみ",
				sheet_width = "譜表の幅",
				sheet_thickness = "譜線の厚",
				sheet_color = "譜線の色",
				sheet_position = "譜表位置",
				sheet_clef = "音部記号",
				sheet_gap = "譜線のギャップ",
				sheet_g_clef = "ト音",
				sheet_f_clef = "ヘ音",
				sheet_notes_shift = "音符シフト",
				sheet_config = "五線譜の効果を有効",
				sheet_generate_lines = "譜線を生成",
				sheet_config_info = "五線譜の視覚効果をオンにする場合は、ビデオオプションを有効にする必要があります。\nこのオプションを有効にすると、映像リズム視覚効果とビデオのストレッチオプションが無効になります。",
				sheet_notes_params = "音符パラメータ",
				sheet_sheet_line_params = "譜線パラメータ",
				sheet_legacy_method = "旧の位置決め方法",
				sheet_legacy_method_tooltip = "従来のスクリプトステーブ視覚化v0.1と同じ配置。\nつまり音符とスペクトル線の位置と形状が軌道運動によって配置されます。",
				sheet_clef_params = "記号パラメータ",
				sheet_generate_clef = "音部記号を生成",
				sheet_clef_scale = "記号スケール",
				sheet_clef_color = "記号の色",
				sheet_padding_left = "左パディング",
				sheet_padding_right = "右パディング",
				sheet_freeze_at_noteoff = "音符の終了でフリーズ",
				ytp_clips_count = "クリップの数",
				ytp_min_length = "最小の長さ",
				ytp_max_length = "最大の長さ",
				ytp_chorus = "コーラス",
				ytp_pitch_change = "ピッチを変更",
				ytp_vibrato = "ビブラート（おそらく波浪の効果を付ける）",
				ytp_reverse = "逆再生",
				ytp_delay = "ディレイ",
				ytp_speed_change = "速度を変更",
				ytp_hue_change = "色相を変更",
				ytp_hue_rotate = "色相を回転させる",
				ytp_monochrome = "モノクロ",
				ytp_negative = "ネガティブ（おそらくピッチダウン効果を付ける）",
				ytp_high_freq_repeat = "急速に繰り返す",
				ytp_random_tone = "ランダムチューニング（水平方向にフリップ効果を付ける）",
				ytp_enlarge = "拡大（大声で添付）",
				ytp_spherize = "球形",
				ytp_mirror = "ミラー",
				ytp_high_contrast = "ハイコントラスト（大声で添付）",
				ytp_oversaturation = "過飽和（おそらくピッチアップ効果を付ける）",
				ytp_emphasize_thrice = "三回強調（焦点を拡大効果を付ける）",
				ytp_info = "現在のタブの下にある［完了］ボタンをクリックすると、音MAD/YTPMVの代わりにYTPが生成されます。\n「オーディオを有効」と「ビデオを有効」以外のパラメータ設定は、YTPでは有効になりません。",
				video_preset_fade_out = "フェードアウト",
				flashlight = "フラッシュライト",
				horizontal_movement = "水平方向に移動",
				vertical_movement = "垂直方向に移動",
				threshold_change = "スレッショルドの変更",
				video_preset_enter = "開始",
				video_preset_enter_staff = "開始（スタッフ）",
				video_preset_normal = "通常",
				oversaturation = "過飽和",
				high_contrast = "ハイコントラスト",
				sure_to_delete = "選択したアイテムを削除しますか？",
				sure_to_reset = "リセットしますか？",
				sonar = "ソナー",
				sonar_config = "ソナー効果のドラムキットを有効に",
				separate_drums = "ぶんりドラム",
				difference_composite_mode = "差分合成モード",
				shadow = "影",
				shadow_color = "影色",
				matched_drum_sound = "マッチしたドラムサウンド",
				shape = "形状",
				color = "色",
				duration = "持続期間",
				curve = "曲線",
				start_border = "開始ボーダー",
				end_border = "終了ボーダー",
				start_size = "開始サイズ",
				end_size = "終了サイズ",
				x_center = "水平中心",
				y_center = "垂直中心",
				start_x_offset_odd = "開始水平オフセット奇数",
				start_x_offset_even = "開始水平オフセット偶数",
				start_y_offset_odd = "開始垂直オフセット奇数",
				start_y_offset_even = "開始垂直オフセット偶数",
				prestart_x_offset_odd = "開始前水平オフセット奇数",
				prestart_x_offset_even = "開始前水平オフセット偶数",
				prestart_y_offset_odd = "開始前垂直オフセット奇数",
				prestart_y_offset_even = "開始前垂直オフセット偶数",
				start_rotation_odd = "開始回転奇数",
				start_rotation_even = "開始回転偶数",
				fade_in_curve = "フェードイン曲線",
				fade_out_curve = "フェードアウト曲線",
				cookie_cutter_shape_circle = "円形",
				cookie_cutter_shape_oval = "楕円形",
				cookie_cutter_shape_oval_side = "横向き楕円",
				cookie_cutter_shape_rectangle = "矩形",
				cookie_cutter_shape_diamond = "ひし形",
				cookie_cutter_shape_square = "正方形",
				cookie_cutter_shape_triangle_up = "正向き三角形",
				cookie_cutter_shape_triangle_right = "右向き三角形",
				cookie_cutter_shape_triangle_down = "逆向き三角形",
				cookie_cutter_shape_triangle_left = "左向き三角形",
				cookie_cutter_shape_arrowhead_up = "正向き矢印",
				cookie_cutter_shape_arrowhead_right = "右向き矢印",
				cookie_cutter_shape_arrowhead_down = "逆向き矢印",
				cookie_cutter_shape_arrowhead_left = "左向き矢印",
				select_interval = "間隔を選択",
				select_interval_configform_info = "この機能は、ユーザーが1つまたは複数のクリップごとにクリップを選択し、「イベント属性の貼り付け」などの操作を実行できるように設計されています。",
				quick_normalize = "クイックノーマライズ",
				quick_normalize_configform_info = "選択した複数のオーディオトラッククリップをすべて音量に正規化します。",
				quick_normalize_complete = "音量の正規化を完了します。",
				replace_clips_configform_info = "複数のトラッククリップを指定された新しいトラッククリップと交換します。",
				auto_layout_tracks_configform_info = "選択したトラックをYTPMVのようなスタイルで自動レイアウトします。",
				change_tune_method_configform_info = "複数のオーディオトラックのクリップを一括して指定されたトーンアルゴリズムに変更します。",
				batch_subtitle_generation_configform_info = "「字幕と文字」のプリセットを設定し、ここに複数行の文字を追加します。",
				find_clips_configform_info = "指定した条件（クリップ名、選択したクリップと同じ素材など）に基づいて、条件に一致するすべてのトラッククリップを選択します。",
				apply_visual_effect_configform_info = "指定したビデオトラッククリップに映画リズム視覚効果を適用します。",
				convert_music_beats_configform_info = "指定された音楽のビートを四四拍、四三拍、八六拍などの間で変換します。",
				custom_fade_gain_configform_info = "複数のトラッククリップを指定した規則に基づいてゲイン値を変更します。",
				select_exactly_one_audio_event_configform_info = "オーディオトラッククリップを適切に1つ選択する必要があり、複数選択または複数選択しないでください。",
				select_exactly_one_video_event_configform_info = "ビデオトラッククリップを適切に1つ選択する必要があり、複数選択または複数選択しないでください。",
				clear_tracks_motion = "クリアトラックモーション",
				clear_tracks_effect = "クリアトラック効果",
				track_legato = "ラックの間隙を埋める",
				track_legato_stacking = "スタッキング素材（現在のトラック）",
				track_legato_stacking_all_tracks = "スタッキング素材（すべてのトラック）",
				track_legato_stacking_selected = "スタッキング素材（選択した材料）",
				track_legato_stacking_all_after = "スタッキング素材（すべて後材料）",
				track_legato_limit_stretch = "ストレッチ素材（ストレッチ制限内に拘束）",
				track_legato_stretch = "ストレッチ素材（ストレッチ制限外での延長）",
				track_legato_lengthen = "延長素材（素材の長さを変更）",
				increase_spacing = "間隙を増やす（現在のトラック）",
				increase_spacing_all_tracks = "間隙を増やす（すべてのトラック）",
				increase_spacing_info = "それぞれのクリップの間に指定された時間を置きます",
				effect_to_selected_events = "選択したトラックイベントにのみ適用",
				include_events_within_group = "グループ内のトラックイベントを含める",
				reverse_direction = "逆方向",
				select_multiple_tracks_warning = "警告：選択したトラックまたはトラッククリップの位置するトラックの数が1つを超えているため、処理結果が予想と一致しない可能性があります。\n続行しますか？",
				drag_here_to_import = "ここまでドラッグしてインポート",
				helper_info = "以下の機能は、いくつかの独立した補助機能であり、オーディオとビデオを生成する他のパラメーターとは関係ありません。",
				helper_info_warning = "注：このダイアログボックスは操作後に閉じられます。後で再度開くことができ、保存されていない変更の一部が失われる可能性があります。\n",
				close_after_open_helper = "操作後にこのダイアログを閉じます",
				mosh = "モッシュ",
				datamosh_clips_folder = "データモッシュ クリップ フォルダー",
				datamosh_not_installed_info = "データモッシュ拡張パックはインストールされていないため、ダウンロードするまではフル機能を利用することはできません。",
				datamosh_install = "拡張パックをダウンロードする",
				datamosh_no_clips_folder_info = "生成されたデータモッシュクリップを格納するフォルダを選択してください。",
				datamosh_info = "縺ﾃﾞ繧ｰﾀ繝ﾓ譌ｯ縲｢ｼ譛ｭ･はクリップに損傷を与えてグリッチ効果を作成する技術です。",
				datamosh = "データモッシュ",
				datamix = "データミックス",
				layering = "レイヤー",
				rendering = "レンダー",
				scramble = "スクランブル",
				automator = "オートメーター",
				stutter = "スタッター",
				camera_shake = "ぶれ",
				datamosh_configform_info = "ビデオ選択領域に自動的にデータモッシュを実行します。",
				datamix_configform_info = "ビデオ選択領域に自動的にデータモッシュを実行します（1つのクリップを別のクリップに混ぜます）。",
				layering_configform_info = "ビデオの一部にマルチレイヤを自動的に行います。",
				rendering_configform_info = "ビデオ選択領域を自動的にレンダリングします。",
				scramble_configform_info = "スクランブルを自動的にクリップを選択します。",
				automator_configform_info = "選択したビデオエフェクトのランダムな値を自動的に設定します。",
				stutter_configform_info = "スタータークリップ/イベント（再生、逆再生……）。",
				camera_shake_configform_info = "パン/クロップを使用して、選択したレイヤーをブレさせます。",
				otomad_helper_config = "Otomad Helper for Vegas - 設定",
				reset_config_successful = "リセットが完了しました。スクリプトを再起動してください。",
				reset_config_successful_title = "ユーザ設定のリセット",
				sure_to_reset_config = "ユーザー構成をリセットしてもよろしいですか？\n\nリセット後、ユーザープロファイルデータは失われます。",
				about_title = "だいたい",
				script_author = "開発者",
				script_original_author = "元開発者",
				script_translator = "訳者",
				documentation = "説明文書",
				ranne = "蘭音",
				why_ok_btn_is_disabled_info = "次の手順に従って順番に問題を確認してください：",
				why_ok_btn_is_disabled_no_audio_and_video_enabled = "「オーディオを有効」と「ビデオを有効」は同時にチェックアウトされます。少なくとも一つを有効にしてください。",
				why_ok_btn_is_disabled_no_media_take = "選択されたメディア素材のソースには、有効なメディアリソースが含まれていません。",
				why_ok_btn_is_disabled_no_midi_select = "音MAD/YTPMVを生成するには、まずMIDIシーケンスファイルを選択してください。",
				why_ok_btn_is_disabled_in_helper_tab = "誤操作を避けるためには、「ツール」と「モッシュ」タブで作成操作を提出しないでください。",
				why_ok_btn_is_disabled_unknown_problem = "原因は不明です。",
				no_selected_media_warning = "警告：プロジェクトメディアウィンドウで有効なメディアを選択していません！",
				no_selected_clip_warning = "警告：トラックウィンドウでクリップを選択していません！",
				preview_audio_track_name = "オーディオトラックのプレビュー（削除する必要があります！）",
				no_midi_exception = "エラー：MIDIファイルが選択されていません。\n\nスクリプト設定ダイアログボックスを再度開き、「MIDI設定」グループの「参照」ボタンをクリックして、有効なMIDIファイルを開いてください。",
				no_media_exception = "エラー：メディアファイルが選択されていません。\n\nスクリプト設定ダイアログボックスを再度開き、「メディア設定」グループの「参照」ボタンをクリックして、有効なメディアファイルを開いてください。",
				no_track_info_exception = "エラー：MIDIトラックがありません。\n\n考えられる理由：\n1. MIDIトラックを選択しなかった。\n2. MIDIファイルにチャンネルがありません。\n3. MIDIファイルが破損しているか、ファイル形式がサポートされていません。",
				no_plugin_pitch_shift_exception = "エラー：ピッチシフトプラグインを呼び出すことができません。\n\n正しく動作するには、チュートリアルドキュメント{0}の指示に従ってください。\nただし、この更新されたバージョンのスクリプトによると、中国語と英語のバージョンは正常に機能するはずです。\nしたがって、他の言語でVegasを使用している可能性が非常に高くなります。",
				no_plugin_presets_exception = "エラー：ピッチシフトプラグインのプリセットエフェクトを呼び出すことはできません。\n\n正しく動作するには、チュートリアルドキュメント{0}の指示に従ってください。\n25個のプリセットすべてが転置プラグインに手動で追加され、正しく名前が付けられていることを確認してください。\n\n補足：詳細については、上記リンク欄の設定方法の説明を参照してください。これらの25のプリセットは、次のオクターブ内のすべてのタイプのピッチ変更です。\nそれらのいずれかが欠落していると、エラーが発生する可能性があります。手動でプリセットを追加するのは確かに非常に面倒ですが、Vegasはスクリプトを使用し\nてピッチシフトの特定のパラメーターを指定できないため、このトリックを回避する必要がありました。",
				no_plugin_name_exception = "エラー：{0}プラグインを呼び出すことができませんでした。\n\n使用している Vegas のバージョンがこのプラグインをサポートしていない可能性があります。",
				no_take_exception_ps = "補足：それでも解決できない場合は、メディアファイルがVegasでサポートされていない形式である可能性があることを意味します。\nファイルを手動でVegasにドラッグして、ビデオとオーディオが正常かどうかを確認できます。",
				no_audio_take_exception = "エラー：オーディオメディアストリームを読み取ることができません。\n\n設定インターフェイスで、純粋なビデオ／画像メディアの「有効なオーディオ」をチェックしないでください。\n\n",
				no_video_take_exception = "エラー：ビデオメディアストリームを読み取ることができません。\n\n設定画面で、純粋なオーディオメディアの[有効なビデオ]をチェックしないでください。\n\n",
				no_media_take_exception = "エラー：メディアを読み取ることができません。\n\n選択したファイル形式はVegasではサポートされていません。メディアファイルが破損していないか、対応するVegasデコーダーがインストールされていないか確認してください。\n\n",
				not_a_midi_file_exception = "エラー：MIDIファイルを読み取ることができません。\n\n解決策：ホストソフトウェアでMIDIをインポートしてから、新しいMIDIファイルを再出力します。\n\n補足：MIDIファイルには複数の形式があり、スクリプトはそれらすべてが正しく読み取れることを保証するものではありません。幸い、\nデフォルト設定で主流のホストソフトウェアによってエクスポートされたMIDIファイルは一般的に読み取り可能です。（現在テスト済みのFL Studio、LMMS、\nおよびMusic Studio for iPadです。）",
				no_selected_exception_ps = "追記：フォルダ内のメディアを手動で選択する場合は、右側の\n[参照]ボタンをクリックしてメディアを選択してください。また、左側のドロップダウンメニューで、選択したファイルのパスが選択されていることを確認してください。",
				no_selected_media_exception = "エラー：プロジェクトメディアウィンドウでメディアが選択されていません。\n\nプロジェクトメディアウィンドウでメディアを選択してから、構成ダイアログを再度開き、素材設定で「選択したメディアファイル」を選択してください。\n\n",
				no_selected_clip_exception_short = "エラー：トラックでクリップが選択されていません。",
				no_selected_clip_exception = "エラー：トラックでクリップが選択されていません。\n\nトラック内のクリップを選択してから、構成ダイアログを再度開き、素材設定で「選択したトラッククリップ」を選択してください。\n\n",
				no_time_stretch_pitch_shift_exception = "エラー：選択したクリップのピッチ変換方法がチューニングなしに設定されています。\n\n「選択したトラッククリップ」を使用している可能性があります。あなたはこのエラーのせいではなく、ベガスの脳死したデザインのせいです。\n\n解決策：トラッククリップを再度選択し、オーディオパーツを右クリックして、下部にある[プロパティ]を選択してください。「タイムストレッチ／ピッチ変換」の「方法」を「エラスティック」に設定します。\n次に、[OK]をクリックします。\n\n補足：オーディオイベントが移調されておらず、そのプロパティが開かれている場合、そのプロパティの「タイムストレッチ／ピッチ変換」の「メソッド」は次のようになります。\n自動的に「なし」に変更され、「OK」をクリックします。有効にします。現時点では、キーボードの+および-キーのチューニング操作が無効であることがわかります。このとき、オーディオイベントのプロパティを\n再度開き、「タイムストレッチ／ピッチ変換」の「方法」を「エラスティック」に設定する必要があります。「ピッチ変更」を設定する必要はありません。「OK」をクリックするだけです。",
				read_config_fail_exception = "エラー：パラメータ構成ファイルの読み取りに失敗しました。\n\n残念ながら、この予期しないエラーが発生しました。問題を解決するために、ユーザー構成設定をクリアしてデフォルト設定に復元します。\n問題を迅速に解決するために、このエラーの作成者に伝えることをお勧めします。\nこのスクリプトは終了します。その後、手動で再度開く必要があります。",
				fail_to_select_clips_exception = "エラー：トラッククリップの選択中にエラーが発生しました。\n\n最初にトラックウィンドウでいくつかのトラッククリップを選択してください。",
				fail_to_select_tracks_exception = "エラー：トラックの選択中にエラーが発生しました。\n\n最初にトラックウィンドウでいくつかのビデオトラックを選択してください。",
				ytp_over_length_exception = "エラー：指定されたYTPの最小の長さがメディアの長さを超えています。\n\n指定されたYTPの最小の長さが長すぎます。小さい値を試してください。または、選択したメディアの長さが短すぎます。",
				ytp_in_media_generator_exception = "エラー：メディアジェネレーターによって生成されたメディアにYTPを適用します。\n\nYTPのアプリケーションは、ローカルメディアファイルを使用する必要があります。メディアジェネレーターによって生成されたメディアは使用しないでください。",
				ytp_eliminate_duplicates_finally_null_exception = "技術異常：YTP素材リストの重複値除去操作を行い、最後のリストが空きました。\n\nこれは起こるべきではないエラーです。",
				unknown_exception = "エラー：不明の異常です。\n\n詳細を展開して、具体的なエラー内容を確認し、エラー情報を著者にフィードバックしてください。",
				use_pic_in_pic_on_unsupported_vegas_exception = "エラー：低バージョンVegasでは、この絵にプラグインを描く効果はサポートされていません。\n\n根本的な理由：Vegasは新しいバージョンの「絵に描いた」効果プラグインに新しい機能とパラメータを追加しました。これらの新しいパラメータは低バージョンのVegasプラグインでは使用できません。\n\n解決方法：現在のVegasバージョンでは、この映像リズム視覚効果（拡張クラスなど）は使用できません。他の視覚効果を使用してください。またはVegasソフトウェアを更新します。",
				unsupported_curve_enum_exception = "エラー：サポートされていないカーブ列挙タイプをパラメータとして使用します。\n\n{0} は曲線列挙型ではありません。",
				convert_music_beats_not_one_audio_event_exception = "エラー：音楽ビート変換ツールで選択されたオーディオクリップの数は1つに等しくありません。\n\nオーディオは1つ選択する必要がありますが、オーディオは{0}つ選択されています。",
				convert_music_beats_unsupported_beats_exception = "エラー：現在Vegasが設定しているビートは、四四拍、四三拍、八六拍のうちの1つではありません。",
				invalid_mapping_velocity_values_exception = "エラー：使用される違法なマッピングベロシティパラメタ。\n\n解決策：オーディオとビデオのマッピングベロシティパラメータを確認します。\n1. より小さい値は、より大きい値より大きくない；\n2. ベロシティの小さい値と大きい値は等しくはなりません。\nさもなければ、これはマッピングベロシティ操作を完了しません。",
				invalid_glissando_amount_exception = "エラー：不正なグリッサンド量パラメータが使用されています。\n\nグリッサンド量をゼロにすることはできません。",
				cannot_get_script_dir_exception = "エラー：スクリプトディレクトリのパスが取得できませんでした！",
				cannot_get_xvid_path_exception = "エラー：XviDのインストールパスが取得できませんでした！",
				install_xvid_info = "XviDコーデックがインストールされていません。スクリプトは今それをインストールし、それをインストールするために管理者権限を要求することができます。",
				install_xvid_admin_failed = "エラー：XviDインストールのための管理者権限が拒否されました。",
				install_xvid_succeed = "XviDがインストールされ、現在のフレームレート用にレンダーテンプレートが生成されました。Vegasを再起動し、スクリプトを再度実行してください。",
				render_template_generate_completed = "現在のフレームレート用にレンダーテンプレートが生成されました。Vegasを再起動し、スクリプトを再実行してください。",
				unexpected_exception = "予期しない例外が発生しました：",
				unexpected_render_status = "予期しないレンダリングステータスです：",
				datamix_selection_position_exception = "エラー：選択は、フレーム ≥ 1 で開始する必要があります！",
				datamix_selection_length_exception = "エラー：選択部分の長さは、1フレーム以上でなければなりません！",
				datamosh_frames_repeats_exception = "エラー：フレームリピートは > 0 でなければなりません！",
				datamosh_selection_length_exception = "エラー：選択範囲はフレーム数と同じ長さでなければならない！",
				datamosh_selection_position_exception = "エラー：選択範囲はプロジェクトの最初のフレームから始めてはいけません！",
				no_track_found_exception = "エラー：トラックが見つかりません！",
				excessively_video_events_selected_exception = "エラー：選択できるのは1つのビデオイベントのみです！",
				no_video_event_selected_exception = "エラー：ビデオイベントを選択してください！",
				no_ofx_effects_included_exception = "エラー：選択されたビデオクリップにエフェクトが含まれていないか、エフェクトがOFXエフェクトでありません!",
				layering_offset_exception = "エラー：レイヤーのオフセットが0であってはならない！",
				layering_count_exception = "エラー：レイヤーカウントが0以上であること！",
				scramble_size_exception = "エラー：スクランブルサイズ > 0！",
				stutter_length_exception = "エラー：長さを > 0 にする！",
				stutter_window_bias_exception = "エラー：ウィンドウ・バイアスは > 0 でなければなりません！",
				render_template_frame_rate_exception = "エラー：フレームレートは100以下でなければならない！",
				appdata_not_set_exception = "エラー：AppDataのパスを取得できませんでした。",
				stutter_generator_media_info = "［スタッター］はメディアジェネレータから生成されたメディア（字幕と文字など）に対して自動的にリバースクリップを生成することができません。リバースクリップは、反転して戻すか、先にファイルにレンダリングしてください（例えば［レンダー］を使用）。",
				automator_parameters = "オートメーター - パラメータ",
				datamoshing_parameters = "データモッシュ - パラメータ",
				layering_parameters = "レイヤー - パラメータ",
				scrambling_parameters = "スクランブル - パラメータ",
				stutter_parameters = "スタッター - パラメータ",
				frame_count = "フレーム数",
				frames_repeats = "フレームリピート",
				layer_count = "レイヤー数",
				layering_offset = "レイヤーオフセット",
				scramble_size = "スクランブルサイズ",
				length_in_seconds = "長さ（秒）",
				stutter_window_bias = "スタッターウィンドウバイアス",
				canceled = "キャンセルされました。",
				automator_info = "スクランブルが必要な効果パラメータをチェックします。",
				pre_render = "レンダー",
				enable_legacy_progress_dialog = "旧進捗ダイアログを有効化",
				camera_shake_parameters = "手ぶれ - パラメータ",
				shake_skew_in = "スピード",
				shake_skew_xy = "水平・垂直方向の同期性",
				shake_skew_out = "量",
				shake_x_to_y_ratio = "変位量の水平・垂直比率",
				shake_should_reset_pan = "最初のフレームでパン/クロップをリセット",
				shake_should_clear_frames = "シェイク前に全フレームをリセット",
				shake_skew_in_tooltip = "シェイクの周波数を変更します。",
				shake_skew_xy_tooltip = "垂直方向の相対速度を変更します。1に設定すると円形に移動します。",
				shake_skew_out_tooltip = "カメラが中心からずれる画素数。ズームインの余白でもある。",
				shake_x_to_y_tooltip = "水平距離を乗算する。1以上の値を設定すると、より大きく拡大されます。",
				shake_should_reset_pan_tooltip = "チェックを外すと、現在の映像のズーム範囲内で手ぶれします。",
				shake_should_clear_frames_tooltip = "チェックを外すと、新しいシェイクエフェクトと以前のシェイクエフェクトを掛け合わせます。",
				restrict_note_length = "音符の長さを制限",
				unrestricted = "無制限",
				restrict_max_length = "最大長",
				restrict_fixed_length = "固定長",
				preferred_track = "優先トラック",
				new_track = "新しいトラック",
				glissando = "グリッサンド",
				swirl = "渦巻き",
			};
			Russian = new Lang {
				__name__ = "Русский",
				__translator__ = NO_TRANSLATOR,
				info_label_font = "Segoe UI",
				ui_font = "Segoe UI",
				restart_to_effect_language = "Перезагрузить, чтобы язык вступил в силу?",
				yes_to_restart_to_effect_language = "Ручной перезапуск сейчас",
				no_to_restart_to_effect_language = "Не перезагружается чтобы вступить в силу",
				version_number = "Номер версии",
				revision_date = "Дата последнего изменения",
				vegas_version = "Версия Vegas",
				script_supported_vegas_version = "Версия с поддержкой скрипта",
				unsupported_vegas_version = "Предупреждение: Текущий скрипт не соответствует версии Vegas, которую вы сейчас используете. Некоторые функции могут работать некорректно! Пожалуйста, переустановите правильную версию скрипта.\nПоддерживаемая версия: Vegas Pro {0}\nТекущая версия: Vegas Pro {1}",
				unsupported_vegas_version_title = "Несоответствие версий",
				unsupported_vegas_version_feature = "Версии ниже Vegas Pro {0} не поддерживают эту функцию.",
				check_update_title = "Скрипт обновления",
				check_update_found = "Обнаружена новая версия, обновить сейчас?\nПоследняя версия: {0}\nТекущая версия:{1}",
				check_update_not_found = "Уже последняя версия!\n\nПоследняя версия: {0}",
				check_update_on_startup = "Проверять наличие обновлений при запуске",
				download_latest_version = "Загрузите последнюю",
				quick_config = "Быстрая настройка",
				midi_file_name = "MIDI последовательность",
				all_files = "Все файлы",
				choose_a_midi_file = "Пожалуйста, выберите файл MIDI",
				media_file_name = "Поддерживаемые медиа-файлы",
				choose_a_source_file = "Пожалуйста, выберите видео или картинку",
				error = "Ошибка",
				details = "Подробности:",
				brightness_and_contrast = "Яркость и контраст",
				invert = "Инвертировать",
				black_and_white = "Черное и белое",
				lab_adjust = "Настройка LAB",
				hsl_adjust = "Настройка HSL",
				mirror = "Зеркало",
				pic_in_pic = "Картинка в картинке",
				crop = "Обрезать",
				bz_masking = "Маскировка Безье",
				cookie_cutter = "Резак для печенья",
				check_pitch_shift_presets = "Проверка доступности пресетов плагина Pitch Shift...",
				no_pitch_shift_presets = "Поскольку вы пытались настроиться с помощью плагина эффекта «Pitch Shift», система обнаружила, что вы не полностью настроили все необходимые звуковые пресеты. Сценарий может попытаться добавить для вас пресеты, что может привести к сбою. Если это не помогло, следуйте инструкциям по использованию учебника вручную. Хотите, чтобы скрипт автоматически добавлял пресеты для вас?",
				yes_to_add_pitch_shift_presets = "добавить автоматически",
				no_to_add_pitch_shift_presets = "Назад к конфигурации",
				no_pitch_shift_presets_title = "Найдены не все предустановки Pitch Shift",
				add_pitch_shift_presets_successful = "Завершите добавление пресетов!",
				add_pitch_shift_presets_fail = "Не удалось добавить предустановки!",
				add_pitch_shift_presets_fail_title = "к несчастью",
				ensure_load_presets = "Вы уверены, что хотите загрузить пресеты?",
				ensure_unload_presets = "Вы уверены, что хотите выгрузить пресеты?",
				reverse_suffix_tag = " (В обратном порядке)",
				effect_init_forward = "Вперед",
				effect_init_reversed = "Обратный",
				effect_init_turned = "Повернулся",
				effect_init_left = "Левый",
				effect_init_right = "Верно",
				effect_init_up = "Верхний",
				effect_init_down = "Нижний",
				effect_init_left_up = "Верхний левый",
				effect_init_right_up = "Верхний правый",
				effect_init_left_down = "Нижний левый",
				effect_init_right_down = "Нижний правый",
				effect_init_invert = "Инвертировать",
				effect_init_conform = "Соответствующий",
				effect_init_opposite = "Противоположный",
				effect_init_chromatic = "Хроматический",
				effect_init_monochrome = "Монохромный",
				effect_init_counter = "Прилавок",
				effect_init_stepon = "Продолжать",
				effect_init_flat = "Плоский",
				effect_init_thin = "Тонкий",
				effect_init_blur = "Размывание",
				effect_init_zoom_out = "Уменьшить",
				effect_init_zoom_in = "Увеличить",
				enable_all_effects = "Открыть все эффекты",
				chorus = "Хор",
				vibrato = "Вибрато",
				wave = "Волна",
				multi_beat_delay = "Многобитовая задержка",
				spherize = "Сфериз",
				warning_missing_plugin = "Предупреждение: не удалось найти подключаемый модуль «{0}»!",
				midi_channel = "Канал",
				midi_notes_count = "Количество нот",
				midi_begin_note = "Начать заметку",
				midi_instrument = "Инст",
				instrument = "Инструмент",
				drum_kit = "Ударная установка",
				pan = "Пан",
				pan_left_abbr = "Л",
				pan_right_abbr = "Р",
				pan_center_abbr = "С",
				pan_dynamic_abbr = "Д",
				yes = "Да",
				no = "Нет",
				error_code = "Код ошибки:",
				processing_otomad = "Создание Отомад / УТРМѴ...",
				processing_otomad_swirl = "Создание глиссандо...",
				processing_ytp = "Создание УТР ...",
				processing_it = "Обработка его",
				processing_tracks = "Создание трека {0} из {1}, канала {2}{3}...",
				processing_tracks_swirl = "Создание глиссандо для трека {0} из {1}, канала {2}{3}...",
				real_time_update = "обновление текущего прогресса в реальном времени (замедлит темпы генерации)",
				replacer_is = "Указанная замена",
				replacer_info = "Сначала выберите клипы, которые необходимо заменить и заменить в окне дорожки, а затем укажите клип в качестве замещающего клипа, а остальные клипы будут замененными клипами.\nСначала создайте группу для аудио и видео замещающего клипа , и убедитесь, что замещающий клип размещен позже по времени и не на той же дорожке, что и другие замененные клипы.",
				replace_clips = "Заменить отслеживание событий",
				replaced_info = "Затем оставшиеся клипы дорожки {0} будут заменены выбранным клипом.",
				replaced_label = "Заменены",
				replacer_label = "Замена",
				separation_replaced_info = "Выбрано {0} треков, из них {1} аудиоклипов, {2} видеоклипов.",
				separation_set_replaced = "Сделать выбранные ресурсы {0} для заменены",
				separation_set_replacer = "Сделать выбранные объекты {0} для замена",
				separation_back_to_select = "Вернитесь в Вегас чтобы выбрать клип",
				separation_use_clip_group = "Также заменить другие клипы в группе",
				separation_reserve_original_name = "Зарезервировать исходное имя клипа",
				replacements_classic_specify = "Указать одновременно",
				replacements_separation_specify = "Уточняйте отдельно",
				view = "Осмотр",
				selected_items = "Избранный член",
				replace_clips_form_ensure_to_close = "Часть орбитального материала указана в разделе «Уточняйте отдельно».\nПосле выхода система может не сохранять изменения.",
				track = "Отслеживать",
				submit_select = "&Установить выбранное",
				every_few = "Выберите по одному на каждые несколько",
				which_one = "Выберите из какой группы",
				select_how_many = "Выберите, сколько за раз",
				reset_select = "&Сбросить выбор",
				quick_select_interval = "Интервал быстрого выбора",
				select_interval_info = "Сначала выберите несколько клипов в окне трека Vegas, а затем откройте это диалоговое окно, чтобы использовать следующие функции.",
				select_events_count_info = "Выбрано событий отслеживания {0}.",
				select_videotracks_count_info = "Выбрано {0} видео дорожек.",
				select_audioevents_count_info = "Выбран набор дорожек для аудио {0}.",
				select_videoevents_count_info = "Выбран набор дорожек для видео {0}.",
				select_source_count_info = "Выделен материал для медиа {0}.",
				select_tracks_count_info = "Выбрано {0} треков.",
				square = "Квадрат",
				custom = "Настроить",
				row_count = "Ряды",
				column_count = "Столбцы",
				fill = "Заполнение",
				adapt = "Адаптировать",
				increase_padding = "Прокладка",
				min = "МИН",
				max = "МАКС",
				mirror_edges = "Зеркальные края",
				disable_flip = "Инвалид",
				even_column = "четные столбцы",
				odd_column = "нечетные столбцы",
				even_row = "четные ряды",
				odd_row = "нечетные ряды",
				auto_layout_tracks = "Автоматическая компоновка дорожки",
				grid_layout = "Макет сетки",
				box_3d_layout = "Макет 3D-бокса",
				selected_tracks_too_much = "Вы выбрали треков: {0}, что выходит за рамки доступных функций. Слишком много!\nПожалуйста, выберите меньше треков и попробуйте еще раз.",
				selected_tracks_too_much_title = "Выбрано слишком много треков",
				bottom_surface = "Нижний",
				top_surface = "верхний",
				right_surface = "Верно",
				left_surface = "левый",
				back_surface = "Назад",
				front_surface = "Передний",
				box_3d_layout_info = "Из-за ограничений функции скрипта будет создана новая дорожка, и клипы на выбранной дорожке будут перемещены, а движение дорожки, эффекты и другие эффекты в исходной дорожке будут потеряны.\nПожалуйста, выберите дорожку, используемую каждой гранью куба ниже. Если он пустой, это означает, что лицо не установлено.",
				delete_original_tracks = "Удалить исходную дорожку",
				use_video_longer_side = "Используйте более длинную сторону как длину ребра куба.",
				use_video_longer_side_tooltip = "После проверки самая длинная сторона видео в настройках проекта (то есть максимальная ширина и высота) будет использоваться в качестве длины ребра куба.",
				gradient_tracks = "Градиентные дорожки",
				gradient_tracks_info = "Выберите эффект градиента для применения к выбранным видеодорожкам:",
				rainbow_color = "Цвета радуги",
				gradually_saturated = "Постепенно насыщенный",
				gradually_contrasted = "Постепенно контрастирующий",
				threshold = "Порог",
				alternately_chromatic = "Альтернативно хроматический",
				alternately_negative = "Альтернативный отрицательный",
				descending = "По убыванию",
				ascending = "Восходящий",
				change_tune_method = "Изменить Метод Настройки",
				change_tune_method_info = "поддерживает только настройки в атрибутах звуковых событий, но не поддерживает настройки модуля преобразования тональности.",
				time_stretch_pitch_shift = "временное растяжение / высота звука",
				formant_change = "резонансный пик сдвига",
				pitch_change = "высокие ноты",
				method = "метод",
				pitch_lock = "замок тангажа",
				lock_pitch_instead_of_rate = "Блокировка шага вместо скорости",
				none = "нет",
				elastique = "эластик",
				classic = "классический",
				elastique_pro = "профессиональный",
				elastique_efficient = "полезный груз",
				elastique_soloist_monophonic = "солист (монолог)",
				elastique_soloist_speech = "солист (речь)",
				classic_a01 = "A01. музыка 1 (минимальный фланец, отзыв)",
				classic_a02 = "A02. музыка 2",
				classic_a03 = "A03. музыка 3 (уменьшение эха)",
				classic_a04 = "A04. музыка 4 (быстро, подходит для басов)",
				classic_a05 = "A05. музыка 5",
				classic_a06 = "A06. музыка 6",
				classic_a07 = "A07. речь 1",
				classic_a08 = "A08. речь 2",
				classic_a09 = "A09. речь 3 (быстро)",
				classic_a10 = "A10. одиночный музыкальный инструмент 1",
				classic_a11 = "A11. одиночный музыкальный инструмент 2",
				classic_a12 = "A12. одиночный музыкальный инструмент 3",
				classic_a13 = "A13. одиночный музыкальный инструмент 4 (уменьшение эхо)",
				classic_a14 = "A14. одиночный музыкальный инструмент 5",
				classic_a15 = "A15. одиночный музыкальный инструмент 6",
				classic_a16 = "A16. одиночный музыкальный инструмент 7 (быстро)",
				classic_a17 = "A17. барабан (munimum echo)",
				classic_a18 = "A18. барабан (лучше для Тома)",
				classic_a19 = "A19. барабан (микроэхо)",
				batch_subtitle_generation = "Серийное Создание Субтитров",
				batch_subtitle_generation_presets = "Выберите предварительно установленную «Субтитры и Текст» для медиа - генератора:",
				batch_subtitle_generation_subtitles = "Введите текст для вставки субтитров (одна строка, Игнорируемая пустая строка):",
				batch_subtitle_generation_single_duration = "Продолжительность каждого субтитра",
				batch_subtitle_generation_suggestion_info = "Затем может быть запущена функция «автоматического контроля» для последующей корректировки времени.",
				open = "Открытым",
				text_document = "Текстовый документ",
				file_too_large_info = "Файл слишком большой. Вы хотите открыть его в любом случае?",
				will_clear_existing_text_info = "Существующее текстовое содержимое будет удалено, и ваши изменения могут быть потеряны.",
				import_from_file = "Импортировать из файла",
				find_clips = "Найти Отслеживать События",
				find_clips_select_info = "Выбрано первое событие трека",
				find_clips_info = "Выберите соответствующие клипы выше, и они будут выбраны, когда вы уверены.",
				find_clips_header_name = "Имя",
				find_clips_header_num = "Количество",
				find_clips_match_source = "Соответствие тому же источнику",
				find_clips_match_source_and_offset = "Сопоставление одного и того же источника с одинаковым начальным смещением",
				find_clips_match_name = "Соответствие указанному имени",
				convert_music_beats = "Конвертировать музыкальные биты",
				convert_music_beats_complete = "Завершено преобразование музыкальных битов",
				convert_music_beats_info = "О преобразовании выбранного музыкального аудиоклипа из {0} в {1}.",
				metre_4_4 = "4/4",
				metre_3_4 = "3/4",
				metre_6_8 = "6/8",
				custom_fade_gain = "Пользовательское усиление затухания",
				from = "От",
				to = "До",
				midi_channel_advanced = "Расширенные Свойства MIDI-Трек",
				channel = "Канал",
				name = "Имя",
				edit_notes = "Редактировать выбранные заметки трек...",
				auto_layout_tracks_midi_channel_advanced_info = "Действует только при создании видео без включения Визуализатор Нотный Стан.",
				reset = "Перезагрузить",
				select_all = "Выделить все",
				select_none = "Снять выделение",
				invert_selection = "Обратить выделение",
				replace = "За&менять",
				apply = "&Подать заявление",
				close = "&Закрывать",
				complete = "&Полный",
				cancel = "О&тмена",
				about = "&О",
				ok = "К&онечно",
				balloon_title = "Инструкции по заполнению",
				midi_start_second_tooltip = "Используется для перехвата части MIDI-музыки.\nЕдиница: секунды.",
				midi_end_second_tooltip = "Введите здесь время, необходимое для чтения файла MIDI.\nОбратите внимание, что если введенное значение слишком мало, ноты в лишнее время будут обрезаны.\nЕсли введенное здесь значение меньше или равно начальным секундам, это всегда означает, что оно длится до конца всей продолжительности музыки.\nЕдиница: секунды.",
				midi_beat_conbo_tooltip = "В настоящее время используется только для функции разбивки на страницы персонала.\nАвтоматическое вычисление из файлов MIDI временно недоступно.",
				source_start_time_tooltip = "Введите здесь время начала резки медиа-материала.\nЕдиница: секунды.",
				source_end_time_tooltip = "Обратите внимание: если введенное здесь значение меньше или равно количеству стартовых секунд, это всегда означает, что оно длится до конца медиа-времени.\nЕдиница: секунды.",
				no_tune = "Нет настройки",
				pitch_shift_plugin = "Плагин звукового эффекта Pitch Shift",
				elastique_method = "Эластик изменение шага",
				classic_method = "Классический изменение шага",
				fool_tuning_method = "Тюнинг без масштаба",
				sine_wave = "синусоидальная",
				triangle_wave = "треугольная",
				square_wave = "прямоугольная",
				sawtooth_wave = "пилообразная",
				tune_method_tooltip = "«Подключаемый модуль звукового эффекта« Pitch Shift »» означает использование подключаемого модуля эффекта «Pitch Shift» в «Audio FX» для изменения высоты звука, а предустановки должны быть настроены.\n«Эластичное изменение высоты звука» означает использование метода растяжения «Élastique» для изменения высоты звука, то есть клавиши + и -на клавиатуре напрямую изменяют высоту звука, а диапазон высоты звука ограничен.",
				audio_lock_stretch_pitch_tooltip = "Что используется метод повторной выборки для изменения высоты звука при изменении скорости. Если вы используете «Эластичное изменение высоты тона»,\nопция растягивания звука будет отключена.",
				preview_beep_duration_tooltip = "время ожидания стандартного фонетического сигнала.\nв миллисекундах.",
				preview_tune_audio_tooltip = "после включения, при предварительном прослушивании аудио материал будет скорректирован на основной звук средней школы с.\nВ противном случае стандартная высота звука будет воспроизвести заданную высота звука.",
				sheet_position_tooltip = "Расстояние от третьей строки посередине нотоносца до центра экрана. Вверх плюс вниз минус.\nЕдиница: пиксель.",
				sheet_width_tooltip = "Ноты будут отображаться по ширине, заполненной в середине экрана, используемой для левого и правого белого пространства, и левого пространства для ключа слева.\nЕдиница: пиксель.",
				sheet_gap_tooltip = "Расстояние между строками в кадре.\nЕдиница: пиксель.",
				sheet_line_thickness_tooltip = "Толщина линий листа при генерации кадров. Когда толщина достигает 100%, линии листа занимают все расстояние между линиями листа.\nЕдиница: процент.",
				sheet_relative_tooltip = "После проверки пиксельная единица параметров, заполненных ниже, будет расположена относительно размера 1920 × 1080;\nв противном случае он будет размещен в зависимости от размера проекта.",
				sheet_relative = "Использование относительных значений",
				preview_base_pitch_tooltip = "Убедитесь, что звук включен и звуковая схема не установлена на беззвучный режим.\nЕсли по-прежнему нет работы, перезагрузите систему.",
				ytp_max_length_tooltip = "Укажите максимальную длину клипа на одну дорожку.\nЕдиница: миллисекунды.",
				ytp_min_length_tooltip = "Укажите минимальную длину клипа на одну дорожку.\nЕдиница: миллисекунды.",
				file = "&Файл",
				save_config = "&Сохранить конфигурацию",
				reset_config = "С&бросить конфигурацию",
				exit_discarding_changes = "&Отменить изменения и выйти",
				exit = "&Выход",
				pitch_shift_preset = "&Пресеты плагина Pitch Shift",
				load_presets = "&Загрузить пресеты",
				unload_presets = "&Выгрузить пресеты",
				form_size = "&Размер формы",
				remember_form_size = "Запомнить размер формы",
				remember_always_form_size = "Запомнить размер формы каждый раз",
				remember_once_form_size = "Запомнить размер формы один раз",
				restore_default_form_size = "Восстановить размер формы по умолчанию далее",
				export_config = "&Экспорт конфигурации",
				import_config = "&Импорт конфигурации",
				export = "Экспорт",
				import = "Импорт",
				configuration_settings = "Параметры конфигурации",
				about_to_import_config = "Конфигурация будет импортирована в ближайшее время.\nПримечание. Если файл настроек конфигурации не является стандартным, сценарий может работать некорректно.\nВы хотите продолжить?",
				import_config_complete = "Импорт завершен, перезапустите скрипт вручную.",
				help = "&Помощь",
				user_help = "Инструкции",
				trouble_shooting = "Устранение неполадок",
				update_info = "Примечания к выпуску",
				repository_link = "Ссылка на репозиторий",
				latest_version_link = "Ссылка на последнюю версию",
				roadmap = "Дорожная карта",
				send_issues = "Отправить отзыв",
				update_logs = "Обновление журналов",
				tutorial_video = "Учебное видео",
				release_notes = "Выпуск заметок",
				staff_visualizer_documentation = "Документация по Визуализатор Нотный Стан",
				english_documentations = "Английские документации",
				chinese_documentations = "Китайская документация",
				check_update = "Проверять &Обновление",
				why_ok_btn_is_disabled = "Почему невозможно нажать кнопку завершения?",
				experimental_theme = "Экспериментальная тема",
				media = "СМИ",
				audio = "Аудио",
				video = "видео",
				staff = "Сотрудники",
				ytp = "УТР",
				helper = "инструмент",
				midi_settings = "Конфигурация MIDI",
				midi_start_time = "Начало секунд",
				midi_end_time = "Конец секунд",
				bpm_setting = "Установите темп BPM на",
				midi_beat = "Бить",
				midi_channel_setting = "Использование MIDI-трек",
				browse = "Просматривать...",
				advanced = "Передовой...",
				presets = "Пресеты",
				no_midi_selected = "<MIDI-файл не выбран>",
				choose_midi_file = "Выберите файл MIDI",
				midi_dynamic_midi_bpm = "динамический MIDI темп",
				midi_midi_bpm = "MIDI темп",
				midi_project_bpm = "Время проекта",
				midi_custom_bpm = "Обычай",
				dynamic_midi_bpm_info = "динамический ритм от {0}",
				dynamic_midi_beat_info = "динамический такт от {0}",
				colon = ": ",
				semicolon = "; ",
				source_settings = "Исходная конфигурация",
				generate_at_begin = "Начало проекта",
				generate_at_cursor = "Курсор",
				generate_position = "Сгенерировать в",
				generate_below_top_adjustment_tracks = "Создайте под дорожками регулировки верхнего слоя",
				remove_source_track_events = "Удалить события трека, назначенные в качестве исходного материала, после завершения генерации",
				select_all_generated_events = "Выберите все сгенерированные события после завершения генерации",
				choose_source_file = "Выберите медиафайл",
				selected_media = "Выбранный медиафайл",
				selected_clip = "Выбранное событие трека",
				source_start_time = "Начало секунд",
				source_end_time = "Конец секунд",
				parameters = "Параметры",
				linear = "Линейный",
				fast = "Быстро",
				slow = "Медленный",
				smooth = "Гладкий; плавный",
				sharp = "Острый",
				hold = "Держать",
				fade_in = "Исчезать",
				fade_out = "Исчезать",
				tune = "Тюнинг",
				tune_method = "Метод настройки",
				base_pitch = "Базовый шаг",
				preview_listen = "Просмотр",
				preview_base_pitch = "Предварительный просмотр &базового шага",
				preview_audio = "&Предварительный просмотр аудио",
				stop_preview_audio = "Остановить &предварительный просмотр",
				lock_attr = "Заблокировать атрибут",
				preview_listen_attr = "Свойства подслушивания",
				preview_tune_audio = "Настройка звука на громкость",
				reserve_formant = "зарезервированный резонансный пик",
				stretch_attr = "Свойства растяжения",
				create_event_group = "Создать группировку",
				aconfig = "Включено",
				audio_stretch = "Потягиваться",
				audio_loop = "Петля",
				audio_normalize = "Нормализовать",
				audio_lock_stretch_pitch = "Заблокировать расширение и тональность",
				auto_pan = "Авто пан",
				velocity = "Скорость",
				mapping_velocity = "Скорость отображения",
				notes_velocity = "Отмечает скорость",
				volume_gain = "Усиление громкости",
				opacity = "Непрозрачность",
				set_fade_by_percent = "Установить затухание в процентах",
				set_fade_by_timecode = "Установить затухание по тайм-коду",
				video_glow_bright = "Яркость свечения",
				video_glow = "Светиться",
				video_start_size = "Начальный размер",
				video_end_size = "Конечный размер",
				video_start_rotation = "Начать вращение",
				video_end_rotation = "Конец вращения",
				video_start_h_trans = "Начать перевод",
				video_end_h_trans = "Конец перевода",
				video_start_v_trans = "Начать переключение",
				video_end_v_trans = "Конец переключения",
				video_start_hue = "Начать оттенок",
				video_end_hue = "Конечный оттенок",
				video_start_saturation = "Начните насыщенность",
				video_end_saturation = "Конец насыщения",
				video_start_contrast = "Начать контраст",
				video_end_contrast = "Конечный контраст",
				video_start_threshold = "Начальный порог",
				video_end_threshold = "Конечный порог",
				multitrack_for_chords = "Мультитрак для аккордов",
				effect = "Эффекты",
				visual_effect = "Визуальные эффекты",
				initial_visual_effect = "Начальное значение",
				apply_visual_effect = "Применить визуальный эффект",
				pv_rhythm_visual_effect = "PV Ритм Визуальный Эффект",
				flip_class = "Флип Класс",
				rotation_class = "Вращение Класс",
				scale_class = "Шкала Класс",
				mirror_class = "Зеркало Класс",
				invert_class = "Инвертировать Класс",
				hue_class = "Оттенок Класс",
				monochrome_class = "Монохромный Класс",
				time_class = "Время Класс",
				time_class_2 = "Время Класс 2",
				expansion_and_compression_class = "Расширение и Сжатие Класс",
				swing_class = "Качать Класс",
				blur_class = "Размытие Класс",
				no_effects = "Без эффектов",
				h_flip = "Горизонтальный флип",
				v_flip = "Вертикальный переворот",
				ccw_flip = "Переворот против часовой стрелки",
				cw_flip = "Переворот по часовой стрелке",
				h_flip_sustain = "Сустейн с горизонтальным переворотом",
				h_flip_relay = "Реле горизонтального переворота",
				h_flip_invert = "Горизонтальное переворачивание инверсия",
				ccw_rotate = "Вращение против часовой стрелки",
				cw_rotate = "Вращение по часовой стрелке",
				turned = "Повернулся",
				zoom_out_in = "Увеличение после уменьшения",
				h_mirror = "Горизонтальное зеркало",
				v_mirror = "Вертикальное зеркало",
				ccw_mirror = "Зеркало против часовой стрелки",
				cw_mirror = "Зеркало по часовой стрелке",
				negative = "Отрицательный",
				lumin_invert = "Инвертировать яркость",
				hue_invert = "Инвертировать оттенок",
				step_change_hue = "{0} ступенчатая аберрация",
				chromatic_and_monochrome = "цветной и монохромный",
				pingpong = "Эффект пинг-понга",
				whirl = "Вращение",
				sharp_rewind = "Резкая перемотка назад",
				wobble_period = "Период колебания",
				vertical_expansion = "Вертикальное расширение",
				vertical_expansion_with_rebound = "Вертикальное расширение и отскок",
				vertical_compression = "Вертикальное сжатие",
				vertical_compression_with_rebound = "Вертикальное сжатие и отскок",
				oblique_expansion_and_compression = "Косое расширение",
				puyo_puyo = "Пуйо Пуйо",
				pendulum = "Маятник",
				gaussian_blur = "Размытие по Гауссу",
				radial_blur = "Радиальное размытие",
				vconfig = "Включено",
				video_stretch = "Потягиваться",
				video_loop = "Петля",
				freeze_first_frame = "Статический визуальный",
				freeze_last_frame = "Без удлинения",
				legato = "Связанный",
				legato_staccato = "Стаккато",
				legato_one_beat_longest = "1 доля самый длинный",
				legato_one_bar_longest = "1 такт самый длинный",
				legato_unlimited = "Неограниченный",
				no_stretching = "Без растяжки",
				flexing_and_extending = "Сгибание и разгибание",
				extending_only = "Расширение только",
				flexing_only = "Только сгибание",
				sheet_width = "Ширина поверхности",
				sheet_thickness = "Толщина линии",
				sheet_color = "Цвет линии",
				sheet_position = "Положение на поверхности",
				sheet_clef = "Персональный ключ",
				sheet_gap = "Разрыв линий",
				sheet_g_clef = "Скрипичный",
				sheet_f_clef = "Басовый",
				sheet_notes_shift = "Сдвиг нот",
				sheet_config = "Включено",
				sheet_generate_lines = "Генерировать линии",
				sheet_config_info = "Если вы хотите включить визуальный эффект персонала, вам необходимо включить опцию видео.\nВключение этой опции отключает рекламный ролик ритм визуальные эффекты и опцию растяжения видео.",
				sheet_notes_params = "Параметры нот",
				sheet_sheet_line_params = "Параметры линий",
				sheet_legacy_method = "Устаревший метод позиционирования",
				sheet_legacy_method_tooltip = "Будет использован тот же метод позиционирования,\nчто и Визуализатор Нотный Стан v0.1, примечания и линии будут расположены и формируются путем движения трека.",
				sheet_clef_params = "Параметры ключа",
				sheet_generate_clef = "Сгенерировать ключ",
				sheet_clef_scale = "Шкала ключа",
				sheet_clef_color = "Цвет ключа",
				sheet_padding_left = "Отступ слева",
				sheet_padding_right = "Отступ справа",
				sheet_freeze_at_noteoff = "Заморозить в конце заметки",
				ytp_clips_count = "Количество клипов",
				ytp_min_length = "Минимальная длина",
				ytp_max_length = "Максимальная длина",
				ytp_chorus = "хор",
				ytp_pitch_change = "Изменить высоту",
				ytp_vibrato = "Вибрато (вероятно, придать волновой эффект)",
				ytp_reverse = "Задний ход",
				ytp_delay = "Задерживать",
				ytp_speed_change = "Изменить скорость",
				ytp_hue_change = "Изменить оттенок",
				ytp_hue_rotate = "Повернуть оттенок",
				ytp_monochrome = "Черное и белое",
				ytp_negative = "Отрицательный (возможно, добавлен эффект понижения высоты тона)",
				ytp_high_freq_repeat = "Высокочастотное повторение",
				ytp_random_tone = "Случайная настройка (добавление эффекта горизонтального переворота)",
				ytp_enlarge = "Увеличить (приложить громко)",
				ytp_spherize = "Сферизация",
				ytp_mirror = "Зеркальное отображение",
				ytp_high_contrast = "Высокая контрастность (добавляйте громко)",
				ytp_oversaturation = "Перенасыщение (возможно, добавление эффекта тангажа)",
				ytp_emphasize_thrice = "тройной акцент (дополнительный эффект усиления)",
				ytp_info = "Нажмите кнопку «Завершить» под текущей вкладкой, YTP будет создан вместо Otomad / YTPMV.\nНастройки параметров, отличные от «Enabled Audio» и «Enabled Video», не будут действовать в YTP.",
				video_preset_fade_out = "Исчезать",
				flashlight = "Фонарик",
				horizontal_movement = "Горизонтальное Движение",
				vertical_movement = "Вертикальное Движение",
				threshold_change = "Изменение Порога",
				video_preset_enter = "Вход",
				video_preset_enter_staff = "Вход (персонал)",
				video_preset_normal = "Обычный",
				oversaturation = "Перенасыщение",
				high_contrast = "Высокая Контрастность",
				sure_to_delete = "Вы уверены, что хотите удалить выбранные элементы?",
				sure_to_reset = "Вы уверены, что хотите выполнить сброс?",
				sonar = "Сонар",
				sonar_config = "Включить эффекты сонара для наборов ударных",
				separate_drums = "Отдельные барабаны",
				difference_composite_mode = "Разностный составной режим",
				shadow = "Тень",
				shadow_color = "Цвет тени",
				matched_drum_sound = "Соответствующий звук барабана",
				shape = "Форма",
				color = "Цвет",
				duration = "Продолжительность",
				curve = "Изгиб",
				start_border = "Начальная граница",
				end_border = "Конечная граница",
				start_size = "Начальный размер",
				end_size = "Конечный размер",
				x_center = "Х центр",
				y_center = "Y центр",
				start_x_offset_odd = "Начальное смещение X нечетное",
				start_x_offset_even = "Начальное смещение X даже",
				start_y_offset_odd = "Начальное смещение Y нечетное",
				start_y_offset_even = "Начальное смещение Y даже",
				prestart_x_offset_odd = "Предстартовое смещение X нечетное",
				prestart_x_offset_even = "Предстартовое смещение X даже",
				prestart_y_offset_odd = "Предстартовое смещение Y нечетное",
				prestart_y_offset_even = "Предстартовое смещение Y даже",
				start_rotation_odd = "Начать ротацию нечетное",
				start_rotation_even = "Начать ротацию даже",
				fade_in_curve = "Исчезновение кривой",
				fade_out_curve = "Кривая затухания",
				cookie_cutter_shape_circle = "Круг",
				cookie_cutter_shape_oval = "Овал",
				cookie_cutter_shape_oval_side = "Овальная сторона",
				cookie_cutter_shape_rectangle = "Прямоугольник",
				cookie_cutter_shape_diamond = "Алмаз",
				cookie_cutter_shape_square = "Площадь",
				cookie_cutter_shape_triangle_up = "Треугольник вверх",
				cookie_cutter_shape_triangle_right = "Треугольник вправо",
				cookie_cutter_shape_triangle_down = "Треугольник вниз",
				cookie_cutter_shape_triangle_left = "Треугольник слева",
				cookie_cutter_shape_arrowhead_up = "Стрелка вверх",
				cookie_cutter_shape_arrowhead_right = "Стрелка вправо",
				cookie_cutter_shape_arrowhead_down = "Стрелка вниз",
				cookie_cutter_shape_arrowhead_left = "Стрелка слева",
				select_interval = "Выберите интервал",
				select_interval_configform_info = "Эта функция разработана, чтобы помочь пользователю выбирать клипы каждые несколько или несколько, а затем выполнять такие операции, как «Вставить Атрибуты События».",
				quick_normalize = "Быстрая нормализация",
				quick_normalize_configform_info = "Нормализация громкости всех выбранных аудиособытий.",
				quick_normalize_complete = "Завершена нормализация.",
				replace_clips_configform_info = "Замените несколько клипов дорожки указанными новыми клипами дорожки.",
				auto_layout_tracks_configform_info = "Автоматическая компоновка выбранных треков в стиле YTPMV.",
				change_tune_method_configform_info = "преобразовать несколько звуковых дорожек в указанные алгоритмы тонального регулирования.",
				batch_subtitle_generation_configform_info = "Заранее установите предустановку «Субтитры и Текст», после чего добавьте несколько строк текста.",
				find_clips_configform_info = "Выберите все клипы дорожки, соответствующие указанным критериям, таким как название клипа, тот же материал, что и у выбранного клипа и т.д.",
				apply_visual_effect_configform_info = "Применить визуальный эффект ритма PV к указанным видеособытиям.",
				convert_music_beats_configform_info = "Преобразование указанных музыкальных битов между 4/4, 3/4, 6/8 и т. д.",
				custom_fade_gain_configform_info = "Измените значение усиления нескольких клипов дорожек в соответствии с указанными правилами.",
				select_exactly_one_audio_event_configform_info = "Вы должны выбрать ровно ОДНО звуковое событие, не больше и не меньше.",
				select_exactly_one_video_event_configform_info = "Вы должны выбрать именно ОДНО видео событие, не больше и не меньше.",
				clear_tracks_motion = "Очистить отслеживание движения",
				clear_tracks_effect = "Эффект удаления траекторнн",
				track_legato = "Заполнение орбитального зазора",
				track_legato_stacking = "Наложение клипов (для текущих дорожек)",
				track_legato_stacking_all_tracks = "Наложение клипов (для всех дорожек)",
				track_legato_stacking_selected = "Наложение клипов (для выбранных клипов)",
				track_legato_stacking_all_after = "Наложение клипов (для клипов все после)",
				track_legato_limit_stretch = "Растяжка клипов (в пределах растяжения)",
				track_legato_stretch = "Растяжка клипов (удлиняются при выходе за пределы растяжения)",
				track_legato_lengthen = "Удлинение клипов (изменение длины зажимов)",
				increase_spacing = "Увеличить интервал (для текущих дорожек)",
				increase_spacing_all_tracks = "Увеличить интервал (для всех дорожек)",
				increase_spacing_info = "Помещает указанное время между каждым клипом",
				effect_to_selected_events = "Применить только к выбранным клипам трека",
				include_events_within_group = "Включить события отслеживания в группу",
				reverse_direction = "Обратное направление",
				select_multiple_tracks_warning = "Предупреждение. Количество выбранных дорожек или фрагментов дорожек превышает одну, поэтому результаты могут не соответствовать вашим ожиданиям.\nВы хотите продолжить?",
				drag_here_to_import = "Перетащите сюда, чтобы импортировать",
				helper_info = "Следующие ниже функции являются лишь некоторыми независимыми вспомогательными функциями и не имеют ничего общего с другими параметрами, генерирующими аудио и видео.",
				helper_info_warning = "Примечание: это диалоговое окно будет закрыто после операции, вы можете открыть его позже, и некоторые несохраненные изменения могут быть потеряны!\n",
				close_after_open_helper = "Закрыть диалог после завершения операции",
				mosh = "Мош",
				datamosh_clips_folder = "Папка клипов датамош",
				datamosh_not_installed_info = "Пакет расширения датамош не установлен и не будет доступен для полных функций, пока он не будет загружен.",
				datamosh_install = "Скачать пакет расширения",
				datamosh_no_clips_folder_info = "Пожалуйста, выберите папку, в которую будут помещены созданные клипы датамош.",
				datamosh_info = "дⷶⷢтⷶмⷪш҄҉ — это метод повреждения клипов для создания глючных эффектов.",
				datamosh = "Датамош",
				datamix = "Датамикс",
				layering = "Слой",
				rendering = "Рендер",
				scramble = "Скрамбл",
				automator = "Автомат",
				stutter = "Заикаться",
				camera_shake = "Дрожание",
				datamosh_configform_info = "Датамозаика части видео быстро и автоматически.",
				datamix_configform_info = "Быстрая и автоматическая датамозаика части видео (наложение одного клипа на другой).",
				layering_configform_info = "Быстро и автоматически выполняет многослойность на части видео.",
				rendering_configform_info = "Быстрое и автоматическое рендеринг части видео.",
				scramble_configform_info = "Быстро и автоматически скремблирует клипы/события.",
				automator_configform_info = "Быстро и автоматически устанавливает случайные значения автоматизации для видеоэффектов.",
				stutter_configform_info = "Заикание клипов/событий (воспроизведение вперед, назад, ...).",
				camera_shake_configform_info = "Использует функцию панорама/урожай, чтобы заставить выбранные слои дрожать.",
				otomad_helper_config = "Otomad Helper for Vegas - Конфигурация",
				reset_config_successful = "Сброс завершен, перезапустите скрипт.",
				reset_config_successful_title = "Сбросить конфигурацию пользователя",
				sure_to_reset_config = "Вы уверены, что хотите сбросить настройки пользователя?\n\nДанные вашего профиля пользователя будут потеряны после сброса.",
				about_title = "О",
				script_author = "Автор",
				script_original_author = "Автор оригинала",
				script_translator = "Переводчик",
				documentation = "Описание документа",
				ranne = "Ранне",
				why_ok_btn_is_disabled_info = "Пожалуйста, проверьте вопрос по порядку:",
				why_ok_btn_is_disabled_no_audio_and_video_enabled = "создание аудио и создание видео были отменены одновременно. Выберите хотя бы один из них.",
				why_ok_btn_is_disabled_no_media_take = "выбранный источник материалов для СМИ не содержит никаких эффективных средств массовой информации.",
				why_ok_btn_is_disabled_no_midi_select = "для создания Otomad/YTPMV Выберите файл последовательности MIDI.",
				why_ok_btn_is_disabled_in_helper_tab = "во избежание неправильной операции не следует представлять генерирующие операции на вкладке «Инструменты» и «Мош».",
				why_ok_btn_is_disabled_unknown_problem = "Неизвестная причина.",
				no_selected_media_warning = "Предупреждение: Вы не выбрали ни одного допустимого носителя в окне мультимедиа проекта!",
				no_selected_clip_warning = "Предупреждение: Вы не выбрали ни одного клипа в окне трека!",
				preview_audio_track_name = "Предварительный просмотр аудиодорожки (УДАЛЕНО!)",
				no_midi_exception = "Ошибка: не выбран MIDI-файл.\n\nПожалуйста, снова откройте диалоговое окно конфигурации сценария, а затем нажмите кнопку «Обзор» в группе «Конфигурация MIDI», чтобы открыть допустимый файл MIDI.",
				no_media_exception = "Ошибка: медиафайл не выбран.\n\nСнова откройте диалоговое окно конфигурации сценария, а затем нажмите кнопку «Обзор» в группе «Конфигурация мультимедиа», чтобы открыть допустимый файл мультимедиа.",
				no_track_info_exception = "Ошибка: отсутствует MIDI-трек.\n\nВозможные причины:\n1. Вы не выбрали MIDI-трек;\n2. В MIDI-файле нет канала;\n3. Файл MIDI поврежден или формат файла не поддерживается.",
				no_plugin_pitch_shift_exception = "Ошибка: невозможно вызвать плагин Pitch Shift.\n\nДля правильной работы следуйте инструкциям учебного документа {0}.\nОднако, согласно этой обновленной версии скрипта, китайская и английская версии должны работать нормально.\nПоэтому очень вероятно, что вы используете Vegas на других языках.",
				no_plugin_presets_exception = "Ошибка: невозможно вызвать предустановленный эффект плагина Pitch Shift.\n\nДля правильной работы следуйте инструкциям учебного документа {0}.\nУбедитесь, что все 25 пресетов вручную добавлены в плагин транспонирования и названы правильно.\n\nДополнительное объяснение: Для получения подробной информации, пожалуйста, обратитесь к объяснению метода установки в приведенном выше столбце ссылок. Эти 25 предустановок представляют собой все типы изменения высоты звука в пределах следующей октавы.\nОтсутствие любого из них может вызвать ошибки. Действительно, добавлять пресеты вручную очень сложно, но Vegas не может использовать скрипты для определения конкретных параметров\nизменения высоты звука, поэтому мне пришлось обойти этот трюк.",
				no_plugin_name_exception = "Ошибка: не удалось вызвать подключаемый модуль {0}.\n\nВозможно, используемая вами версия Vegas не поддерживает этот плагин.",
				no_take_exception_ps = "Дополнительное примечание: если проблема по-прежнему не может быть решена, это означает, что медиа-файл может иметь формат, не поддерживаемый Vegas.\nВы можете вручную перетащить файл в Лас-Вегас, чтобы проверить, в порядке ли видео и звук.",
				no_audio_take_exception = "Ошибка: невозможно прочитать аудиопоток.\n\nВ интерфейсе настроек не устанавливайте флажок «Включено аудио» для чистых видео / изображений.\n\n",
				no_video_take_exception = "Ошибка: невозможно прочитать видеопоток.\n\nВ пользовательском интерфейсе настроек не устанавливайте флажок «Включенное видео» для чистого аудио.\n\n",
				no_media_take_exception = "Ошибка: невозможно прочитать носитель.\n\nВыбранный формат файла не поддерживается Vegas. Пожалуйста, проверьте, не поврежден ли медиафайл или не установлен ли соответствующий декодер Vegas.\n\n",
				not_a_midi_file_exception = "Ошибка: невозможно прочитать файл MIDI.\n\nРешение: импортируйте MIDI с помощью программного обеспечения хоста, а затем повторно выведите новый файл MIDI.\n\nДополнительное примечание: существует несколько форматов файлов MIDI, и сценарий не гарантирует, что все они могут быть правильно прочитаны. К счастью,\nфайлы MIDI, экспортированные основным программным обеспечением хоста с настройками по умолчанию, обычно читаются. (В настоящее время протестированы FL Studio, LMMS\nи Music Studio для iPad.)",
				no_selected_exception_ps = "Дополнительное примечание: если вы хотите вручную выбрать носитель в папке, нажмите кнопку «Обзор» справа, чтобы\nвыбрать носитель. И убедитесь, что путь к выбранному вами файлу выбран в раскрывающемся меню слева.",
				no_selected_media_exception = "Ошибка: в окне мультимедиа проекта не выбран ни один носитель.\n\nВыберите носитель в окне мультимедиа проекта, затем снова откройте диалоговое окно конфигурации и выберите «выбранный файл мультимедиа» в настройках источника.\n\n",
				no_selected_clip_exception_short = "Ошибка: на дорожке не выбраны клипы.",
				no_selected_clip_exception = "Ошибка: на дорожке не выбраны клипы.\n\nПожалуйста, выберите клип на дорожке, затем снова откройте диалоговое окно конфигурации и выберите «выбранные клипы дорожки» в настройках источника.\n\n",
				no_time_stretch_pitch_shift_exception = "Ошибка: метод преобразования высоты звука выбранного клипа не настроен.\n\nСкорее всего, вы используете «выбранные клипы треков». Вы виноваты не в этой ошибке, а в безумном дизайне Вегаса.\n\nРешение: повторно выберите клипы дорожки, щелкните правой кнопкой мыши по аудиочасти и выберите «Свойства» внизу. Установите «Метод» «Преобразование растяжения во времени / шага» на «élastique».\nЗатем нажмите ОК.\n\nДополнительное примечание: если звуковое событие не было транспонировано и его свойства открыты, тогда «Метод» «Преобразование растяжения / высоты звука» в его свойствах будет\nавтоматически изменяется на «Нет», и нажмите «ОК». Возьмите эффект. В это время вы обнаружите, что операции настройки + и-клавиши на клавиатуре недействительны. В это время вы должны повторно открыть свойства звукового события,\nустановить «Метод» «Преобразование растяжения / высоты звука» на «élastique», вам не нужно устанавливать «Изменение высоты тона», просто нажмите «ОК».",
				read_config_fail_exception = "Ошибка: не удалось прочитать файл конфигурации параметров.\n\nК сожалению, вы столкнулись с этой непредвиденной ошибкой. Мы очистим пользовательские настройки конфигурации и восстановим их до настроек по умолчанию, чтобы решить проблему.\nРекомендуется сообщить автору об этой ошибке, чтобы быстро решить проблему.\nЭтот скрипт будет закрыт, и я побеспокою вас, чтобы вы снова открыли его вручную.",
				fail_to_select_clips_exception = "Ошибка: ошибка при выборе клипов дорожки.\n\nПожалуйста, сначала выберите несколько дорожек клипов в окне дорожек.",
				fail_to_select_tracks_exception = "Ошибка: ошибка при выборе треков.\n\nПожалуйста, сначала выберите несколько видеодорожек в окне дорожек.",
				ytp_over_length_exception = "Ошибка: указанная минимальная длина YTP превышает длину носителя.\n\nУказанная минимальная длина YTP слишком велика, попробуйте меньшее значение. Или длина выбранного носителя слишком мала.",
				ytp_in_media_generator_exception = "Ошибка: примените YTP к носителю, созданному генератором мультимедиа.\n\nПриложение YTP должно использовать локальные медиа-файлы, а не медиа, созданные медиа-генератором.",
				ytp_eliminate_duplicates_finally_null_exception = "Технические Аномалии: для удаления повторяющихся значений в списке материалов YTP последний список пуст! \n\nЭто ошибка, которая не должна была произойти.",
				unknown_exception = "Ошибка: неизвестная ошибка.\n\nВключите подробную информацию, чтобы просмотреть содержимое конкретной ошибки, и отправьте сообщение об ошибке автору.",
				use_pic_in_pic_on_unsupported_vegas_exception = "Ошибка: Использование эффекта плагина «Картинка в картинке» в более ранних версиях Vegas не поддерживается.\n\nОсновная причина: Vegas добавила некоторые новые функции и параметры в новый подключаемый модуль эффекта «картинка в картинке», которые нельзя использовать в более ранних версиях подключаемого модуля Vegas.\n\nРешение: Текущая версия Vegas не может использовать визуальные эффекты этого ритма PV (например, аспекты расширения), пожалуйста, используйте другие визуальные эффекты. Или обновите программное обеспечение Vegas.",
				unsupported_curve_enum_exception = "Ошибка: Используйте неподдерживаемые типы перечисления кривых в качестве параметров.\n\n{0} не является типом перечисления кривых.",
				convert_music_beats_not_one_audio_event_exception = "Ошибка: количество аудиоклипов, выбранных в инструменте преобразования музыкальных ритмов, не равно единице.\n\nДолжен быть выбран 1 звук, но выбрано {0} звука.",
				convert_music_beats_unsupported_beats_exception = "Ошибка: Текущие биты Вегаса не в размере 4/4, 3/4, 6/8.",
				invalid_mapping_velocity_values_exception = "Ошибка: Используйте незаконное отображение параметров скорости.\n\nРешения: Убедитесь, что параметры скорости отображения аудио и видео,\n1. Меньшие значения не могут превышать более крупные;\n2. Скорость не может быть одинаковой для малых и больших величин.\nВ противном случае, это не будет завершено с учётом скорости.",
				invalid_glissando_amount_exception = "Ошибка: Использован неправомерный параметр количества глиссандо.\n\nКоличество глиссандо не может быть нулевым.",
				cannot_get_script_dir_exception = "Ошибка: Не удается получить путь к каталогу скриптов!",
				cannot_get_xvid_path_exception = "Ошибка: Не удалось получить путь установки XviD!",
				install_xvid_info = "Кодек XviD не установлен. Сценарий установит его сейчас и может запросить доступ администратора для его установки.",
				install_xvid_admin_failed = "Ошибка: Привилегия администратора для установки XviD отклонена.",
				install_xvid_succeed = "XviD установлен и сгенерирован шаблон рендеринга для текущей частоты кадров. Пожалуйста, перезапустите Vegas и запустите скрипт снова.",
				render_template_generate_completed = "Создан шаблон рендеринга для текущей частоты кадров. Пожалуйста, перезапустите Vegas и запустите скрипт снова.",
				unexpected_exception = "Неожиданное исключение: ",
				unexpected_render_status = "Неожиданное состояние рендеринга: ",
				datamix_selection_position_exception = "Ошибка: Выборка должна начинаться с кадра ≥ 1!",
				datamix_selection_length_exception = "Ошибка: Длина выделения должна быть > 1 кадра!",
				datamosh_frames_repeats_exception = "Ошибка: Повторы кадров должны быть > 0!",
				datamosh_selection_length_exception = "Ошибка: Длина выделения должна быть равна количеству кадров!",
				datamosh_selection_position_exception = "Ошибка: Выделение не должно начинаться с первого кадра проекта!",
				no_track_found_exception = "Ошибка: Треки не найдены!",
				excessively_video_events_selected_exception = "Ошибка: Можно выбрать только одно видеособытие!",
				no_video_event_selected_exception = "Ошибка: Сначала выберите видеособытие!",
				no_ofx_effects_included_exception = "Ошибка: Выбранные видеоклипы не содержат эффектов или эффекты не являются эффектами OFX!",
				layering_offset_exception = "Ошибка: Смещение наслоения не должно быть 0!",
				layering_count_exception = "Ошибка: Количество слоев должно быть > 0!",
				scramble_size_exception = "Ошибка: Размер скремблирования должен быть > 0!",
				stutter_length_exception = "Ошибка: Длина должна быть > 0!",
				stutter_window_bias_exception = "Ошибка: Смещение окна должно быть > 0!",
				render_template_frame_rate_exception = "Ошибка: Частота кадров должна быть < 100!",
				appdata_not_set_exception = "Ошибка: Не удалось получить путь к AppData!",
				stutter_generator_media_info = "Заикаться не может автоматически генерировать обратные клипы для медиа, созданных с помощью медиагенераторов (Субтитры и Текст, …). Пожалуйста, создайте их обратные клипы, перевернув их и вернув обратно, или сначала выполните рендеринг в файл (например, используя Рендер).",
				automator_parameters = "Параметры Автомат",
				datamoshing_parameters = "Параметры Датамошинга",
				layering_parameters = "Параметры Наслоения",
				scrambling_parameters = "Параметры Скремблирования",
				stutter_parameters = "Параметры Заикания",
				frame_count = "Количество кадров",
				frames_repeats = "Повторы кадров",
				layer_count = "Количество слоев",
				layering_offset = "Смещение слоя",
				scramble_size = "Размер скремблера",
				length_in_seconds = "Длина в секундах",
				stutter_window_bias = "Смещение окна заикания",
				canceled = "Отменено.",
				automator_info = "Проверьте параметры эффекта, которые требуют скремблирования.",
				pre_render = "Рендер",
				enable_legacy_progress_dialog = "Включить диалоговое окно прогресса наследия",
				camera_shake_parameters = "Параметры Дрожание Камеры",
				shake_skew_in = "Скорость",
				shake_skew_xy = "Г/В синхронность",
				shake_skew_out = "Сумма",
				shake_x_to_y_ratio = "Соотношение Г/В смещения",
				shake_should_reset_pan = "Сброс панорама/урожай по первому кадру",
				shake_should_clear_frames = "Сброс всех кадров перед встряхиванием",
				shake_skew_in_tooltip = "Изменяет частоту встряхивания.",
				shake_skew_xy_tooltip = "Изменяет относительную вертикальную скорость.\nУстановите значение 1, чтобы двигаться по кругу.",
				shake_skew_out_tooltip = "Количество пикселей, на которое камера сместится от центра.\nЭто также предел увеличения.",
				shake_x_to_y_tooltip = "Умножение горизонтального расстояния.\nЗначения больше 1 обеспечивают большее увеличение.",
				shake_should_reset_pan_tooltip = "Оставьте флажок не отмеченным, чтобы трястись в пределах текущего масштаба видео.",
				shake_should_clear_frames_tooltip = "Если флажок не установлен,\nновый эффект встряхивания будет умножен на предыдущий эффект встряхивания.",
				restrict_note_length = "Ограничить длину нот",
				unrestricted = "Неограниченный",
				restrict_max_length = "Максимальная длина",
				restrict_fixed_length = "Фиксированная длина",
				preferred_track = "Предпочтительный трек",
				new_track = "Новый трек",
				glissando = "Глиссандо",
				swirl = "Водоворот",
			};
			Vietnamese = new Lang {
				__name__ = "Tiếng Việt",
				__translator__ = "Cyahega",
				info_label_font = "Segoe UI",
				ui_font = "Segoe UI",
				restart_to_effect_language = "Khởi động lại để ngôn ngữ có hiệu lực ngay?",
				yes_to_restart_to_effect_language = "K.động lại thủ công",
				no_to_restart_to_effect_language = "Không k.động lại",
				version_number = "Phiên bản",
				revision_date = "Ngày sửa đổi lần cuối",
				vegas_version = "Phiên bản Vegas",
				script_supported_vegas_version = "Phiên bản được hỗ trợ script",
				unsupported_vegas_version = "Cảnh báo: Script hiện tại không khớp với phiên bản Vegas bạn đang dùng. Một số tính năng có thể không hoạt động đúng cách! Vui lòng cài đặt lại đúng phiên bản của script.\nPhiên bản được hỗ trợ: Vegas Pro {0}\nPhiên bản hiện tại: Vegas Pro {1}",
				unsupported_vegas_version_title = "Phiên bản không khớp",
				unsupported_vegas_version_feature = "Những phiên bản dưới Vegas Pro {0} không hỗ trợ tính năng này.",
				check_update_title = "Cập nhật script",
				check_update_found = "Đã phát hiện phiên bản mới, cập nhật ngay?\n\nPhiên bản mới nhất: {0}\nPhiên bản hiện tại: {1}",
				check_update_not_found = "Hiện đã ở phiên bản mới nhất!\n\nPhiên bản mới nhất: {0}",
				check_update_on_startup = "Kiểm tra bản cập nhật khi khởi động",
				download_latest_version = "Tải xuống phiên bản mới nhất",
				quick_config = "Nhanh chóng thiết lập",
				midi_file_name = "Trình tự MIDI",
				all_files = "Tất cả tệp",
				choose_a_midi_file = "Vui lòng chọn 1 file MIDI",
				media_file_name = "File phương tiện được hỗ trợ",
				choose_a_source_file = "Vui lòng chọn một clip video hoặc ảnh",
				error = "Lỗi",
				details = "Chi tiết:",
				brightness_and_contrast = "Độ sáng và Độ tương phản",
				invert = "Đảo ngược",
				black_and_white = "Đen và Trắng",
				lab_adjust = "Điều chỉnh LAB",
				hsl_adjust = "Điều chỉnh HSL",
				mirror = "Phản chiếu",
				pic_in_pic = "Hình trong Hình (PiP)",
				crop = "Cắt",
				bz_masking = "Bézier Masking",
				cookie_cutter = "Cookie Cutter",
				check_pitch_shift_presets = "Đang kiểm tra các preset của plugin Pitch Shift có sẵn hay không...",
				no_pitch_shift_presets = "Vì bạn đã cố tune bằng plugin hiệu ứng \"Pitch Shift\", hệ thống nhận thấy rằng bạn đã không định cấu hình đầy đủ tất cả các preset âm thanh mà bạn cần. Script có thể thử thêm preset cho bạn nhưng có thể thất bại. Nếu thất bại, làm theo chỉ dẫn trong hướng dẫn thủ công. Bạn có muốn script tự động thêm preset cho bạn?",
				yes_to_add_pitch_shift_presets = "Tự động thêm",
				no_to_add_pitch_shift_presets = "Quay lại",
				no_pitch_shift_presets_title = "Không tìm thấy tất cả các preset Pitch Shift",
				add_pitch_shift_presets_successful = "Hoàn thành thêm preset!",
				add_pitch_shift_presets_fail = "Thêm preset thất bại!",
				add_pitch_shift_presets_fail_title = "Không may",
				ensure_load_presets = "Bạn có chắc chắn muốn tải preset?",
				ensure_unload_presets = "Bạn có chắc chắn muốn ngừng tải preset?",
				reverse_suffix_tag = " (Đảo ngược)",
				effect_init_forward = "Thẳng",
				effect_init_reversed = "Đảo ngược",
				effect_init_turned = "Quay",
				effect_init_left = "Trái",
				effect_init_right = "Phải",
				effect_init_up = "Trên",
				effect_init_down = "Dưới",
				effect_init_left_up = "Phía trên bên trái",
				effect_init_right_up = "Phía trên bên phải",
				effect_init_left_down = "Phía dưới bên trái",
				effect_init_right_down = "Phía dưới bên phải",
				effect_init_invert = "Đảo ngược màu",
				effect_init_conform = "Di chuyển chậm",
				effect_init_opposite = "Đối nghịch chiều hướng",
				effect_init_chromatic = "Đa sắc",
				effect_init_monochrome = "Đơn sắc",
				effect_init_counter = "Đếm",
				effect_init_stepon = "Tiếp tục",
				effect_init_flat = "Làm phẳng",
				effect_init_thin = "Làm mỏng",
				effect_init_blur = "Làm mờ",
				effect_init_zoom_out = "Phóng to ra",
				effect_init_zoom_in = "Phóng to vào",
				enable_all_effects = "Bật tất cả hiệu ứng",
				chorus = "Chorus",
				vibrato = "Rung",
				wave = "Sóng",
				multi_beat_delay = "Độ trễ Multi-Tap",
				spherize = "Tạo hình cầu",
				warning_missing_plugin = "Cảnh báo: Không tìm thấy plugin \"{0}\"!",
				midi_channel = "CH",
				midi_notes_count = "Số nốt đếm được",
				midi_begin_note = "Nốt bắt đầu",
				midi_instrument = "N.Cụ",
				instrument = "Nhạc cụ",
				drum_kit = "Drum Kit",
				pan = "Xoay (Pan)",
				pan_left_abbr = "L",
				pan_right_abbr = "R",
				pan_center_abbr = "C",
				pan_dynamic_abbr = "D",
				yes = "Có",
				no = "Không",
				error_code = "Mã lỗi:",
				processing_otomad = "Đang khởi tạo ra Otomad/YTPMV...",
				processing_otomad_swirl = "Đang khởi tạo ra glissando...",
				processing_ytp = "Đang khởi tạo ra YTP...",
				processing_it = "Đang xử lý",
				processing_tracks = "Đang khởi tạo ra track {0} của {1}, kênh {2}{3}...",
				processing_tracks_swirl = "Đang khởi tạo ra glissando cho track {0} của {1}, kênh {2}{3}...",
				real_time_update = "Cập nhật tiến độ hiện tại theo thời gian thực (nó sẽ làm chậm quá trình khởi tạo)",
				replacer_is = "Thứ cần thay thế được chỉ định là",
				replacer_info = "Vui lòng chọn clip đã được thay thế và thay thế trong cửa sổ track (track window) trước, và chỉ định 1 clip như clip thay thế, và những clip còn lại là tất cả những clip đã thay thế.\nVui lòng tạo 1 group cho audio và video của clip thay thế trước, và đảm bảo rằng clip thay thế đã được đặt sau khoảng thời gian và không ở cùng 1 track như các clip thay thế khác.",
				replace_clips = "Thay Thế Track Event",
				replaced_info = "Vậy thì {0} track clip còn lại sẽ được thay thế bằng clip đã chọn.",
				replaced_label = "Đã thay thế",
				replacer_label = "Thay thế",
				separation_replaced_info = "{0} track clip đã chọn, bao gồm {1} audio clip, {2} video clip.",
				separation_set_replaced = "Đặt {0} clip đã chọn là đã thay thế",
				separation_set_replacer = "Đặt {0} clip đã chọn là thay thế",
				separation_back_to_select = "Trở lại Vegas để chọn các clip",
				separation_use_clip_group = "Ngoài ra thay thế các clip khác trong track group",
				separation_reserve_original_name = "Giữ tên clip gốc",
				replacements_classic_specify = "Chỉ định đồng thời",
				replacements_separation_specify = "Chỉ định riêng",
				view = "Xem",
				selected_items = "Đã chọn",
				replace_clips_form_ensure_to_close = "Một số track clip đã được chỉ định trong \"Chỉ định riêng\".\nThay đổi của bạn có thể không được giữ lại sau khi thoát.",
				track = "Track",
				submit_select = "&Đặt lựa chọn",
				every_few = "Chọn một cho mỗi thứ",
				which_one = "Chọn cái nào trong group",
				select_how_many = "Chọn bao nhiêu cùng một lúc",
				reset_select = "&Đặt lại lựa chọn",
				quick_select_interval = "Chọn Nhanh Khoảng Thời Gian",
				select_interval_info = "Vui lòng chọn một số clip trong track window của Vegas trước, và mở hộp thoại này để sử dụng các chức năng.",
				select_events_count_info = "{0} track event đã chọn.",
				select_videotracks_count_info = "{0} video track đã chọn.",
				select_audioevents_count_info = "{0} audio track event đã chọn.",
				select_videoevents_count_info = "{0} video track event đã chọn.",
				select_source_count_info = "{0} nguồn tư liệu đã chọn.",
				select_tracks_count_info = "{0} track đã chọn.",
				square = "Vuông",
				custom = "Tuỳ chỉnh",
				row_count = "Hàng",
				column_count = "Cột",
				fill = "Đầy",
				adapt = "Vừa",
				increase_padding = "Đệm",
				min = "TỐI THIỂU (MIN)",
				max = "TỐI ĐA (MAX)",
				mirror_edges = "Cạnh phản chiếu",
				disable_flip = "Đã vô hiệu hoá",
				even_column = "Cột chẵn",
				odd_column = "Cột lẻ",
				even_row = "Hàng chẵn",
				odd_row = "Hàng lẻ",
				auto_layout_tracks = "Tự động Layout Tracks",
				grid_layout = "Grid Layout",
				box_3d_layout = "3D Box Layout",
				selected_tracks_too_much = "Bạn đã chọn {0} track, nằm ngoài phạm vi của các chức năng có sẵn. Quá nhiều!\nVui lòng chọn ít track hơn và thử lại.",
				selected_tracks_too_much_title = "Quá nhiều track đã chọn",
				bottom_surface = "Dưới",
				top_surface = "Trên",
				right_surface = "Trái",
				left_surface = "Phải",
				back_surface = "Sau",
				front_surface = "Trước",
				box_3d_layout_info = "Do giới hạn chức năng của script, một track mới sẽ được tạo và các clip trong track đã chọn sẽ được di chuyển qua, và track motion, hiệu ứng hoặc những thứ khác của track gốc sẽ mất.\nVui lòng chọn track được sử dụng bởi mỗi mặt của khối lập phương bên dưới. Nếu nó trống, nghĩa là phần mặt chưa đặt.",
				delete_original_tracks = "Xoá các track gốc",
				use_video_longer_side = "Sử dụng cạnh dài hơn của chiều dài cạnh",
				use_video_longer_side_tooltip = "Sau khi kiểm tra, phần dài nhất của video trong project setting (là độ dài và độ rộng tối đa) sẽ được sử dụng là chiều dài cạnh của khối lập phương.",
				gradient_tracks = "Gradient track",
				gradient_tracks_info = "Chọn 1 hiệu ứng gradient để áp dụng cho các video track đã chọn:",
				rainbow_color = "Màu cầu vồng",
				gradually_saturated = "Dần dần bão hòa",
				gradually_contrasted = "Tương phản dần dần",
				threshold = "Threshold",
				alternately_chromatic = "Đa sắc khác",
				alternately_negative = "Âm bản khác",
				descending = "Giảm dần",
				ascending = "Tăng dần",
				change_tune_method = "Thay Đổi Phương Thức Tune",
				change_tune_method_info = "Chỉ có những phương thức tune trong audio event propeties được hỗ trợ, không phải trong plugin Pitch Shift.",
				time_stretch_pitch_shift = "Kéo căng thời gian / pitch shift",
				formant_change = "Formant shift",
				pitch_change = "Pitch (Cao độ)",
				method = "Phương pháp",
				pitch_lock = "Khóa để kéo dài",
				lock_pitch_instead_of_rate = "Khoá pitch thay vì rate",
				none = "Không có",
				classic = "Classic",
				elastique_pro = "Professional",
				elastique_efficient = "Efficient",
				elastique_soloist_monophonic = "Soloist (Monophonic)",
				elastique_soloist_speech = "Soloist (Speech)",
				classic_a01 = "A01. Music 1 (flange tổi thiểu, có thể vang lên <echo>)",
				classic_a02 = "A02. Music 2",
				classic_a03 = "A03. Music 3 (ít vang)",
				classic_a04 = "A04. Music 4 (nhanh, dùng tốt với bass)",
				classic_a05 = "A05. Music 5",
				classic_a06 = "A06. Music 6",
				classic_a07 = "A07. Speech 1",
				classic_a08 = "A08. Speech 2",
				classic_a09 = "A09. Speech 3 (nhanh)",
				classic_a10 = "A10. Solo instruments 1",
				classic_a11 = "A11. Solo instruments 2",
				classic_a12 = "A12. Solo instruments 3",
				classic_a13 = "A13. Solo instruments 4 (ít vang)",
				classic_a14 = "A14. Solo instruments 5",
				classic_a15 = "A15. Solo instruments 6",
				classic_a16 = "A16. Solo instruments 7 (nhanh)",
				classic_a17 = "A17. Drums, unpitched (vang tối thiểu)",
				classic_a18 = "A18. Drums (Tốt hơn với toms <tìm google toms-toms drum nhé>)",
				classic_a19 = "A19. Drums (tiếng vang nhỏ)",
				batch_subtitle_generation = "Tạo Phụ Đề Hàng Loạt",
				batch_subtitle_generation_presets = "Chọn một preset cho trình tạo Tiêu đề&Văn bản:",
				batch_subtitle_generation_subtitles = "Nhập văn bản phụ đề (từng dòng một, bỏ qua các dòng trống):",
				batch_subtitle_generation_single_duration = "Độ dài của mỗi phụ đề",
				batch_subtitle_generation_suggestion_info = "Bật chức năng Auto Follow-up để chỉnh thời gian lúc sau.",
				open = "Mở",
				text_document = "Tài liệu văn bản",
				file_too_large_info = "File này quá lớn. Bạn có muốn mở nó không?",
				will_clear_existing_text_info = "Nội dung văn bản tồn tại sẽ bị xoá và thay đổi của bạn có thể không được giữ lại.",
				import_from_file = "Nhập từ file",
				find_clips = "Tìm Các Track Event",
				find_clips_select_info = "Track event đầu tiên đã chọn",
				find_clips_info = "Chọn những đoạn clip trùng khớp trên đây và chúng sẽ được chọn khi bạn chắc chắn.",
				find_clips_header_name = "Tên",
				find_clips_header_num = "Số",
				find_clips_match_source = "Trùng khớp cùng nguồn tư liệu",
				find_clips_match_source_and_offset = "Trùng khớp cùng nguồn tư liệu với cùng thời điểm bắt đầu",
				find_clips_match_name = "Trùng khớp với tên chỉ định",
				convert_music_beats = "Chuyển Đổi Music Beats",
				convert_music_beats_complete = "Đã hoàn thành chuyển đổi music beats.",
				convert_music_beats_info = "Clip âm thanh đã chọn sẽ được chuyển đổi từ {0} thành {1}.",
				metre_4_4 = "4/4",
				metre_3_4 = "3/4",
				metre_6_8 = "6/8",
				custom_fade_gain = "Tuỳ Chỉnh Độ Mờ/Rõ Của Gain",
				from = "Từ",
				to = "Thành",
				midi_channel_advanced = "Thuộc tính MIDI Track nâng cao <Propeties>",
				channel = "Channel",
				name = "Tên",
				edit_notes = "Chỉnh sửa các nốt của track đã chọn...",
				auto_layout_tracks_midi_channel_advanced_info = "Chỉ hiệu quả khi tạo video mà không bật Staff Visualizer.",
				reset = "Đặt lại",
				select_all = "Chọn toàn bộ",
				select_none = "Không chọn",
				invert_selection = "Lựa chọn đối nghịch",
				replace = "&Thay thế",
				apply = "&Áp dụng",
				close = "&Đóng",
				complete = "H&oàn thành",
				cancel = "&Huỷ",
				about = "&Thông tin",
				ok = "&OK",
				balloon_title = "Hướng dẫn điền",
				midi_start_second_tooltip = "Được sử dụng để cắt một phần nhạc MIDI.\nĐơn vị: Giây.",
				midi_end_second_tooltip = "Điền khoảng thời gian cần thiết để đọc tệp MIDI tại đây.\nLưu ý rằng nếu giá trị điền vào quá nhỏ, các nốt trong khoảng thời gian dư thừa sẽ bị cắt bỏ.\nNếu giá trị được nhập ở đây nhỏ hơn hoặc bằng giây bắt đầu, điều đó luôn có nghĩa là giá trị đó kéo dài đến hết toàn bộ thời lượng nhạc.\nĐơn vị: Giây.",
				midi_beat_conbo_tooltip = "Hiện chỉ dùng cho chức năng phân trang của staff.\nSuy đoán tự động từ tệp MIDI tạm thời không khả dụng.",
				source_start_time_tooltip = "Điền vào thời gian bắt đầu cắt tài liệu phương tiện ở đây.\nĐơn vị: giây.",
				source_end_time_tooltip = "Lưu ý rằng nếu giá trị được nhập ở đây nhỏ hơn hoặc bằng số giây bắt đầu, điều đó luôn có nghĩa là giá trị đó sẽ kéo dài cho đến khi kết thúc thời gian của phương tiện.\nĐơn vị: Giây.",
				no_tune = "Không tuning",
				pitch_shift_plugin = "Plugin hiệu ứng Pitch Shift Audio",
				elastique_method = "Elastic Pitch Change",
				classic_method = "Classic Pitch Change",
				fool_tuning_method = "Tuning mà không có tỷ lệ",
				sine_wave = "Sinusoid",
				triangle_wave = "Triangle",
				square_wave = "Square",
				sawtooth_wave = "Sawtooth",
				tune_method_tooltip = "\"Plugin hiệu ứng Pitch Shift Audio\" nghĩa là dùng plugin hiệu ứng \"Pitch Shift\" trong \"Audio FX\" để thay đổi cao độ, và các preset cần được cấu hình.\n\"Elastic Pitch Change\" nghĩa là dùng phương pháp kéo dài \"Élastique\" để thay đổi cao độ, đó là nút + và - trên bàn phím thay đổi cao độ ngay lập tức, và khoảng cao độ bị giới hạn.",
				audio_lock_stretch_pitch_tooltip = "Sử dụng resampling để thay đổi cao độ như thay đổi tốc độ. Đoạn audio kéo căng sẽ bị vô hiệu hoá nếu phương pháp \"Elastic Pitch Change\" được sử dụng.",
				preview_beep_duration_tooltip = "Thời lượng nghe trước cao độ cơ bản.\nĐơn vị: milli giây.",
				preview_tune_audio_tooltip = "Nếu được chọn, audio nguồn sẽ được điều chỉnh thành tonic center C khi nghe trước âm thanh.\nNếu không, tone được đặt bởi cao độ cơ bản sẽ được tạo ra khi nghe trước cao độ cơ bản.",
				sheet_position_tooltip = "Khoảng cách từ vạch thứ ba ở giữa khung đến tâm màn hình. Lên là cộng, xuống là trừ.\nĐơn vị: pixel.",
				sheet_width_tooltip = "Các nốt sẽ được hiển thị theo chiều rộng được lấp đầy ở giữa màn hình, được sử dụng cho khoảng trắng bên trái và bên phải, và khoảng trống bên trái cho khóa nhạc ở bên trái.\nĐơn vị: pixel.",
				sheet_gap_tooltip = "Khoảng cách giữa các dòng trong khung.\nUnit: pixel.",
				sheet_line_thickness_tooltip = "Độ dày của các dòng sheet trong khi tạo khung. Khi độ dày đạt 100%, các dòng sheet sẽ chiếm toàn bộ khoảng cách giữa các dòng sheet.\nĐơn vị: phần trăm.",
				sheet_relative_tooltip = "Sau khi kiểm tra, đơn vị pixel của các thông số điền bên dưới sẽ được định vị tương ứng với kích thước 1920 × 1080;\nnếu không, nó sẽ được định vị dựa trên kích cỡ project.",
				sheet_relative = "Sử dụng các giá trị tương đối",
				preview_base_pitch_tooltip = "Vui lòng đảm bảo rằng âm thanh được bật và âm thanh không được đặt ở chế độ im lặng.\nNếu không được, vui lòng khởi động lại hệ thống.",
				ytp_max_length_tooltip = "Chỉ định độ dài tối đa của một clip đơn.\nĐơn vị: milliseconds.",
				ytp_min_length_tooltip = "Chỉ định độ dài tối thiểu của một clip đơn.\nĐơn vị: milliseconds.",
				file = "&File",
				save_config = "&Lưu thiết lập",
				reset_config = "&Đặt lại thiết lập",
				exit_discarding_changes = "&Bỏ thay đổi và thoát",
				exit = "&Thoát",
				pitch_shift_preset = "&Preset plugin pitch shift",
				load_presets = "&Tải preset",
				unload_presets = "&Ngừng tải preset",
				form_size = "&Kích thước mẫu",
				remember_form_size = "Nhớ kích thước mẫu",
				remember_always_form_size = "Nhớ kích thước mẫu mỗi lần",
				remember_once_form_size = "Nhớ kích thước mẫu chỉ một lần",
				restore_default_form_size = "Khôi phục kích thước mẫu mặc định vào lần tới",
				export_config = "&Xuất thiết lập",
				import_config = "&Nhập thiết lập",
				export = "Xuất",
				import = "Nhập",
				configuration_settings = "Cài đặt thiết lập",
				about_to_import_config = "Thiết lập sẽ sớm được nhập vào.\nLưu ý: Nếu file cài đặt thiết lập không chuẩn, script có thể không hoạt động bình thường.\nBạn muốn tiếp tục chứ?",
				import_config_complete = "Nhập vào hoàn thành, vui lòng khởi động lại script thủ công.",
				help = "&Trợ giúp",
				user_help = "Hướng dẫn",
				trouble_shooting = "Xử lý sự cố",
				update_info = "Ghi chú phát hành",
				repository_link = "Link đến lưu trữ",
				latest_version_link = "Link đến phiên bản mới nhất",
				roadmap = "Roadmap",
				send_issues = "Gửi phản hồi",
				update_logs = "Nhật ký cập nhật",
				tutorial_video = "Video hướng dẫn",
				release_notes = "Ghi chú phát hành",
				staff_visualizer_documentation = "Tài liệu cho Staff Visualizer",
				english_documentations = "Các tài liệu tiếng Anh",
				chinese_documentations = "Các tài liệu tiếng Trung",
				check_update = "&Kiểm tra bản cập nhật",
				why_ok_btn_is_disabled = "Tại sao nút Hoàn thành bị vô hiệu hoá?",
				experimental_theme = "Chủ đề thử nghiệm",
				media = "Phương tiện",
				audio = "Âm thanh",
				video = "Visual",
				staff = "Staff",
				ytp = "YTP",
				helper = "Công cụ",
				midi_settings = "Thiết lập MIDI",
				midi_start_time = "Giây bắt đầu",
				midi_end_time = "Giây kết thúc",
				bpm_setting = "Đặt BPM tempo thành",
				midi_beat = "Beat",
				midi_channel_setting = "Dùng MIDI track",
				browse = "Duyệt tìm...",
				advanced = "Nâng cao...",
				presets = "Preset",
				no_midi_selected = "<Không có file MIDI đã chọn>",
				choose_midi_file = "Chọn file MIDI",
				midi_dynamic_midi_bpm = "Dynamic MIDI tempo",
				midi_midi_bpm = "MIDI tempo",
				midi_project_bpm = "Project tempo",
				midi_custom_bpm = "Tuỳ chỉnh",
				dynamic_midi_bpm_info = "Dynamic tempo từ {0}",
				dynamic_midi_beat_info = "Dynamic beat từ {0}",
				colon = ": ",
				semicolon = "; ",
				source_settings = "Tuỳ chỉnh nguồn",
				generate_at_begin = "Project bắt đầu",
				generate_at_cursor = "Con trỏ",
				generate_position = "Tạo ra ở",
				generate_below_top_adjustment_tracks = "Tạo ra các top track điều chỉnh bên dưới",
				remove_source_track_events = "Xóa các track event được chỉ định làm nguyên liệu nguồn sau khi quá trình tạo hoàn tất",
				select_all_generated_events = "Chọn tất cả các event được tạo sau khi quá trình tạo hoàn tất",
				choose_source_file = "Chọn phương tiện nguồn",
				selected_media = "File phương tiện đã chọn",
				selected_clip = "Track event đã chọn",
				source_start_time = "Giây bắt đầu",
				source_end_time = "Giây kết thúc",
				parameters = "Thông số",
				linear = "Tuyến tính",
				fast = "Nhanh",
				slow = "Chậm",
				smooth = "Mượt",
				sharp = "Sắc nét",
				hold = "Giữ",
				fade_in = "Rõ dần",
				fade_out = "Mờ dần",
				tune = "Tuning",
				tune_method = "Phương pháp tuning",
				base_pitch = "Cao độ ban đầu",
				preview_listen = "Xem trước",
				preview_base_pitch = "&Xem trước cao độ cơ bản",
				preview_audio = "&Xem trước audio",
				stop_preview_audio = "&Dừng xem trước",
				lock_attr = "Khoá attrs",
				preview_listen_attr = "Xem trước attrs",
				preview_tune_audio = "Chỉnh audio thành cao độ cơ bản",
				reserve_formant = "Giữ lại formant",
				stretch_attr = "Kéo căng attrs",
				create_event_group = "Tạo group",
				aconfig = "Đã bật",
				audio_stretch = "Kéo căng",
				audio_loop = "Lặp lại",
				audio_normalize = "Normalize",
				audio_lock_stretch_pitch = "Khoá kéo căng và cao độ",
				auto_pan = "Tự động xoay pan",
				velocity = "Velocity",
				mapping_velocity = "Lập bản đồ Velocity",
				notes_velocity = "Velocity",
				volume_gain = "Âm lượng",
				opacity = "Độ mờ",
				set_fade_by_percent = "Đặt độ mờ theo phần trăm",
				set_fade_by_timecode = "Đặt độ mờ theo timecode",
				video_glow_bright = "Độ sáng phát sáng",
				video_glow = "Ánh sáng",
				video_start_size = "Kích cỡ bắt đầu",
				video_end_size = "Kích cỡ kết thúc",
				video_start_rotation = "Bắt đầu xoay",
				video_end_rotation = "Kết thúc xoay",
				video_start_h_trans = "Bắt đầu đổi vị trí X",
				video_end_h_trans = "Kết thúc đổi vị trí X",
				video_start_v_trans = "Bắt đầu đổi vị trí Y",
				video_end_v_trans = "Kết thúc đổi vị trí Y",
				video_start_hue = "Bắt đầu đổi màu sắc",
				video_end_hue = "Kết thúc đổi màu sắc",
				video_start_saturation = "Bắt đầu bão hòa",
				video_end_saturation = "Kết thúc bão hòa",
				video_start_contrast = "Bắt đầu tương phản",
				video_end_contrast = "Kết thúc tương phản",
				video_start_threshold = "Bắt đầu threshold",
				video_end_threshold = "Kết thúc threshold",
				multitrack_for_chords = "Đa track cho hợp âm (chord)",
				effect = "Các hiệu ứng",
				visual_effect = "Các hiệu ứng visual",
				initial_visual_effect = "Giá trị ban đầu",
				apply_visual_effect = "Áp Dụng Hiệu Ứng Visual",
				pv_rhythm_visual_effect = "Hiệu ứng nhịp điệu PV Visual",
				flip_class = "Lật",
				rotation_class = "Xoay",
				scale_class = "Tỷ lệ",
				mirror_class = "Phản chiếu",
				invert_class = "Đảo ngược",
				hue_class = "Màu",
				monochrome_class = "Đơn sắc",
				time_class = "Thời gian",
				time_class_2 = "Thời gian 2",
				expansion_and_compression_class = "Mở rộng & Nén",
				swing_class = "Lung lắc",
				blur_class = "Làm mờ",
				no_effects = "Không hiệu ứng",
				h_flip = "Lật ngang",
				v_flip = "Lật dọc",
				ccw_flip = "Lật ngược chiều kim đồng hồ",
				cw_flip = "Lật theo chiều kim đồng hồ",
				h_flip_sustain = "Duy trì lật ngang",
				h_flip_relay = "Trễ lật ngang",
				h_flip_invert = "Đảo ngược lật ngang",
				ccw_rotate = "Xoay ngược chiều kim đồng hồ",
				cw_rotate = "Xoay theo chiều kim đồng hồ",
				turned = "Quay",
				zoom_out_in = "Phóng to thu nhỏ",
				h_mirror = "Phản chiếu ngang",
				v_mirror = "Phản chiếu dọc",
				ccw_mirror = "Phản chiếu ngược chiều kim đồng hồ",
				cw_mirror = "Phản chiếu theo chiều kim đồng hồ",
				negative = "Âm bản",
				lumin_invert = "Đảo ngược độ sáng",
				hue_invert = "Đảo ngược màu",
				step_change_hue = "{0} bước quang sai màu",
				chromatic_and_monochrome = "Đa sắc và đơn sắc",
				pingpong = "Hiệu ứng Ping-pong",
				whirl = "Quay cuồng",
				sharp_rewind = "Tua lại sắc nét",
				wobble_period = "Dao động chu kỳ",
				vertical_expansion = "Mở rộng theo chiều dọc",
				vertical_expansion_with_rebound = "Mở rộng theo chiều dọc với nảy lại",
				vertical_compression = "Nén theo chiều dọc",
				vertical_compression_with_rebound = "Nén theo chiều dọc với nảy lại",
				oblique_expansion_and_compression = "Mở rộng nghiêng ra và nén lại",
				puyo_puyo = "Puyo Pop",
				pendulum = "Con lắc",
				gaussian_blur = "Mờ kiểu Gaussian",
				radial_blur = "Mờ xuyên tâm",
				vconfig = "Đã bật",
				video_stretch = "Kéo căng",
				video_loop = "Lặp lại",
				freeze_first_frame = "Hình ảnh tĩnh",
				freeze_last_frame = "Không kéo dài",
				legato = "Legato",
				legato_staccato = "Staccato",
				legato_one_beat_longest = "1 beat dài nhất",
				legato_one_bar_longest = "1 thanh dài nhất",
				legato_unlimited = "Không giới hạn",
				no_stretching = "Không kéo căng",
				flexing_and_extending = "Kéo căng & Mở rộng",
				extending_only = "Chỉ mở rộng",
				flexing_only = "Chỉ kéo căng",
				sheet_width = "Chiều rộng bề mặt",
				sheet_thickness = "Độ dày đường kẻ",
				sheet_color = "Màu đường kẻ",
				sheet_position = "Vị trí bề mặt",
				sheet_clef = "Khoá",
				sheet_gap = "Khoảng cách đường kẻ",
				sheet_g_clef = "Treble",
				sheet_f_clef = "Bass",
				sheet_notes_shift = "Notes shift",
				sheet_config = "Đã bật",
				sheet_generate_lines = "Tạo đường kẻ",
				sheet_config_info = "Nếu bạn muốn bật hiệu ứng visual staff, bạn nên bật tuỳ chọn video.\nBật tuỳ chọn này sẽ vô hiệu hoá hiệu ứng nhịp điệu PV visual và tuỳ chọn kéo dài video.",
				sheet_notes_params = "Thông số các nốt",
				sheet_sheet_line_params = "Thông số đường kẻ",
				sheet_legacy_method = "Phương pháp định vị legacy",
				sheet_legacy_method_tooltip = "Cùng phương pháp định vị giống như script cũ Staff Visualizer v0.1 sẽ được sử dụng.\nNốt và đường kẻ sẽ được định vị và tạo ra bởi track motion.",
				sheet_clef_params = "Thông số khoá",
				sheet_generate_clef = "Tạo khoá",
				sheet_clef_scale = "Kích cỡ khoá",
				sheet_clef_color = "Màu khoá",
				sheet_padding_left = "Đệm trái",
				sheet_padding_right = "Đệm phải",
				sheet_freeze_at_noteoff = "Đóng băng tại noteoff",
				ytp_clips_count = "Số clip",
				ytp_min_length = "Độ dài tối thiểu",
				ytp_max_length = "Độ dài tối đa",
				ytp_chorus = "Chorus",
				ytp_pitch_change = "Thay đổi cao độ",
				ytp_vibrato = "Rung (thường kèm theo hiệu ứng sóng)",
				ytp_reverse = "Đảo ngược",
				ytp_delay = "Trễ (Delay)",
				ytp_speed_change = "Thay đổi tốc độ",
				ytp_hue_change = "Thay đổi màu",
				ytp_hue_rotate = "Xoay màu",
				ytp_monochrome = "Đơn sắc",
				ytp_negative = "Âm bản (thường kèm theo hiệu ứng pitch-down)",
				ytp_high_freq_repeat = "Lặp lại liên tục",
				ytp_random_tone = "Tuning ngẫu nhiên (kèm theo hiệu ứng lật ngang)",
				ytp_enlarge = "Tăng kích thước (kèm theo tiếng ồn)",
				ytp_spherize = "Tạo hình cầu",
				ytp_mirror = "Phản chiếu",
				ytp_high_contrast = "Độ tương phản cao (kèm theo tiếng ồn)",
				ytp_oversaturation = "Quá bão hòa (thường kèm theo hiệu ứng pitch-up)",
				ytp_emphasize_thrice = "Nổi lên ba lần (kèm theo motion tập trung tăng độ phóng to một cách rời rạc)",
				ytp_info = "Nhấn vào nút \"Hoàn thành\" dưới tab hiện tại, YTP sẽ được tạo ra thay vì Otomad/YTPMV.\nCác thông số cài đặt ngoài \"Bật Âm thanh\" và \"Bật Video\" ra sẽ không có hiệu lực trong YTP.",
				video_preset_fade_out = "Mờ dần",
				flashlight = "Nhấp nhoáng (Flashlight)",
				horizontal_movement = "Di chuyển theo chiều ngang",
				vertical_movement = "Di chuyển theo chiều dọc",
				threshold_change = "Thay đổi Threshold",
				video_preset_enter = "Thu phóng",
				video_preset_enter_staff = "Thu phóng (Staff)",
				video_preset_normal = "Bình thường",
				oversaturation = "Quá bão hòa",
				high_contrast = "Độ tương phản cao",
				sure_to_delete = "Bạn có chắc muốn xoá mục đã chọn?",
				sure_to_reset = "Bạn có chắc muốn đặt lại?",
				sonar = "Sonar",
				sonar_config = "Bật hiệu ứng sonar cho drum kits",
				separate_drums = "Tách các drum",
				difference_composite_mode = "Chế độ composite khác",
				shadow = "Đổ bóng",
				shadow_color = "Màu đổ bóng",
				matched_drum_sound = "Âm thanh drum trùng khớp",
				shape = "Hình dạng",
				color = "Màu",
				duration = "Thời lượng",
				curve = "Đường cong",
				start_border = "Đường viền bắt đầu",
				end_border = "Đường viền kết thúc",
				start_size = "Kích cỡ bắt đầu",
				end_size = "Kích cỡ kết thúc",
				x_center = "Tâm X",
				y_center = "Tâm Y",
				start_x_offset_odd = "Thời gian bắt đầu X lẻ",
				start_x_offset_even = "Thời gian bắt đầu X chẵn",
				start_y_offset_odd = "Thời gian bắt đầu Y lẻ",
				start_y_offset_even = "Thời gian bắt đầu Y chẵn",
				prestart_x_offset_odd = "Thời gian bắt đầu trước X lẻ",
				prestart_x_offset_even = "Thời gian bắt đầu trước X chẵn",
				prestart_y_offset_odd = "Thời gian bắt đầu trước Y lẻ",
				prestart_y_offset_even = "Thời gian bắt đầu trước Y chẵn",
				start_rotation_odd = "Bắt đầu xoay lẻ",
				start_rotation_even = "Bắt đầu xoay chẵn",
				fade_in_curve = "Mờ dần trong đường cong",
				fade_out_curve = "Hiện dần trong đường cong",
				cookie_cutter_shape_circle = "Hình tròn",
				cookie_cutter_shape_oval = "Hình ôvan",
				cookie_cutter_shape_oval_side = "Hình bầu dục",
				cookie_cutter_shape_rectangle = "Hình chữ nhật",
				cookie_cutter_shape_diamond = "Hình kim cương",
				cookie_cutter_shape_square = "Hình vuông",
				cookie_cutter_shape_triangle_up = "Hình tam giác hướng lên",
				cookie_cutter_shape_triangle_right = "Hình tam giác hướng phải",
				cookie_cutter_shape_triangle_down = "Hình tam giác hướng xuống",
				cookie_cutter_shape_triangle_left = "Hình tam giác hướng trái",
				cookie_cutter_shape_arrowhead_up = "Hình mũi tên lên",
				cookie_cutter_shape_arrowhead_right = "Hình mũi tên phải",
				cookie_cutter_shape_arrowhead_down = "Hình mũi tên xuống",
				cookie_cutter_shape_arrowhead_left = "Hình mũi tên trái",
				select_interval = "Chọn khoảng thời gian",
				select_interval_configform_info = "Chức năng này được thiết kế để hỗ trợ người dùng chọn mỗi clip hoặc hơn, và thực hiện thao tác ví dụ như \"Paste Event Attributes\".",
				quick_normalize = "Nhanh Chóng Normalize",
				quick_normalize_configform_info = "Normalize âm lượng của tất cả các audio event đã chọn.",
				quick_normalize_complete = "Đã hoàn thành normalize.",
				replace_clips_configform_info = "Thay thế nhiều clip với các track clip mới được chỉ định.",
				auto_layout_tracks_configform_info = "Tự động layout các track đã chọn theo kiểu giống YTPMV.",
				change_tune_method_configform_info = "Thay đổi nhiều audio events thành thuật toán tuning được chỉ định.",
				batch_subtitle_generation_configform_info = "Thiết lập preset \"Tiêu đề & Văn bản\", và sau đó thêm nhiều dòng văn bản ở đây.",
				find_clips_configform_info = "Chọn tất cả các track event trùng khớp với chỉ định sẵn, ví dụ như tên clip, cùng nguồn giống clip đã chọn, v.v...",
				apply_visual_effect_configform_info = "Áp dụng hiệu ứng nhịp điệu PV visual tới video event được chỉ định.",
				convert_music_beats_configform_info = "Chuyển đổi các beat nhạc được chỉ định giữa 4/4, 3/4, 6/8, v.v..",
				custom_fade_gain_configform_info = "Thay đổi giá trị gain của nhiều track clip theo các quy tắc đã chỉ định.",
				select_exactly_one_audio_event_configform_info = "Bạn phải chọn đúng MỘT audio event, không hơn hoặc kém.",
				select_exactly_one_video_event_configform_info = "Bạn phải chọn đúng MỘT video event, không hơn hoặc kém.",
				clear_tracks_motion = "Xoá bỏ Track Motion",
				clear_tracks_effect = "Xoá bỏ Track Effect",
				track_legato = "Tracks Legato",
				track_legato_stacking = "Xếp chồng clip (cho track hiện tại)",
				track_legato_stacking_all_tracks = "Xếp chồng clip (cho tất cả track)",
				track_legato_stacking_selected = "Xếp chồng clip (cho clip đã chọn)",
				track_legato_stacking_all_after = "Xếp chồng clip (cho tất cả clip phía sau)",
				track_legato_limit_stretch = "Kéo căng clip (trong giới hạn kéo căng)",
				track_legato_stretch = "Kéo dài clip (kéo dài khi nằm ngoài giới hạn kéo căng)",
				track_legato_lengthen = "Kéo dài clip (thay đổi độ dài clip)",
				increase_spacing = "Tăng khoảng cách (cho track hiện tại)",
				increase_spacing_all_tracks = "Tăng khoảnh cách (cho tất cả track)",
				increase_spacing_info = "Đặt thời gian được chỉ định ở giữa mỗi clip",
				effect_to_selected_events = "Chỉ dành cho track event đã chọn",
				include_events_within_group = "Bao gồm các track event trong một group",
				reverse_direction = "Đảo ngược hướng",
				select_multiple_tracks_warning = "Cảnh báo: Các track hoặc track clip bạn đã chọn có nhiều hơn một, vì vậy kết quả có thể không phù hợp với mong đợi của bạn.\nBạn có muốn tiếp tục?",
				drag_here_to_import = "Kéo vào đây để nhập",
				helper_info = "Các chức năng sau đây chỉ là một số chức năng phụ trợ độc lập và không liên quan gì đến các thông số khác tạo ra âm thanh và video.",
				helper_info_warning = "Ghi chú: Hộp thoại này sẽ đóng lại sau khi thao tác, bạn có thể mở lại sau và một số thay đổi chưa được lưu có thể bị mất!\n",
				close_after_open_helper = "Đóng hộp thoại này sau khi thao tác hoàn tất",
				mosh = "Mosh",
				datamosh_clips_folder = "Thư mục clip Datamosh",
				datamosh_not_installed_info = "Datamosh extension pack chưa được cài đặt và sẽ không khả dụng với đầy đủ tính năng cho đến khi nó được tải xuống.",
				datamosh_install = "Tải xuống expansion pack",
				datamosh_no_clips_folder_info = "Vui lòng chọn một thư mục để đặt các clip datamoshed đã tạo vào.",
				datamosh_info = "Datą̬͉̫̐͑̓̄ͅa̸͎͇͗̌͂̈̀ą̸̝̼̦̤̇̐ǎ̛͍́̑a̸̲͙͛̐̄̎̚͜a̢̨̝̟͎̾̔̊ǎ̤̞͈͑a͈̪̣̍mo̻̪̬̘̲͆͂͠o̸͍̞͔̓̆̊̀o̗͊̇̇̈́̇ǫ͇͗̏̕͜ơ̬͍͚̦̯̓̊͌ò͈̦̫̈́̓o̦̣̲̊̀o̪̪͚̺̘͛̽̏̈́sh là một kĩ thuật làm biến dạng video để tạo hiệu ứng glitch.",
				datamosh = "Datamosh",
				datamix = "Datamix",
				layering = "Layer",
				rendering = "Render",
				scramble = "Scramble",
				automator = "Automator",
				stutter = "Stutter",
				camera_shake = "Rung Lắc",
				datamosh_configform_info = "Datamosh một phần của video nhanh chóng và tự động.",
				datamix_configform_info = "Datamosh một phần của video nhanh chóng và tự động (mosh một clip trên clip khác).",
				layering_configform_info = "Phủ nhiều lớp (layer) lên một phần của video nhanh chóng và tự động.",
				rendering_configform_info = "Render một phần của video nhanh chóng và tự động.",
				scramble_configform_info = "Scramble clips/event nhanh chóng và tự động.",
				automator_configform_info = "Đặt giá trị automation ngẫu nhiên cho hiệu ứng video nhanh chóng và tự động.",
				stutter_configform_info = "Stutter clips/events (phát về trước, lùi, ...).",
				camera_shake_configform_info = "Dùng Pan/crop để làm cho các lớp phủ (layer) đã chọn rung lắc.",
				otomad_helper_config = "Otomad Helper dành cho Vegas - Thiết Lập (Việt hoá bởi Cyahega)",
				reset_config_successful = "Đặt lại hoàn tất, vui lòng khởi động lại script.",
				reset_config_successful_title = "Đặt lại thiết lập người dùng",
				sure_to_reset_config = "Bạn có chắc muốn đặt lại thiết lập người dùng?\n\nDữ liệu thiết lập người dùng của bạn sẽ bị mất.",
				about_title = "Thông tin",
				script_author = "Tác giả",
				script_original_author = "Tác giả gốc",
				script_translator = "Dịch giả",
				documentation = "Tài liệu",
				ranne = "Lan Âm",
				why_ok_btn_is_disabled_info = "Hãy lần lượt làm theo các bước sau để kiểm tra sự cố:",
				why_ok_btn_is_disabled_no_audio_and_video_enabled = "Chưa tích vào Bật Âm thanh và Bật video. Vui lòng kiểm tra và bật ít nhất một trong số chúng.",
				why_ok_btn_is_disabled_no_media_take = "Các nguồn phương tiện được chọn không chứa bất kỳ phương tiện hợp lệ nào.",
				why_ok_btn_is_disabled_no_midi_select = "Để tạo Otomad/YTPMV, trước tiên hãy chọn một file trình tự MIDI.",
				why_ok_btn_is_disabled_in_helper_tab = "Để tránh hoạt động sai, không gửi bản dựng trong tab Công cụ và Mosh.",
				why_ok_btn_is_disabled_unknown_problem = "Không rõ lý do.",
				no_selected_media_warning = "Cảnh báo: Bạn chưa chọn bất kỳ phương tiện hợp lệ nào trong track window của project!",
				no_selected_clip_warning = "Cảnh báo: Bạn chưa chọn bất kỳ clip nào trong track window!",
				preview_audio_track_name = "Xem trước Audio Track (Nên bị XOÁ!)",
				no_midi_exception = "Lỗi: Không có file MIDI đã chọn.\n\nVui lòng mở lại hộp thoại thiết lập script, rồi bấm vào nút \"Duyệt tìm\" trong group \"Thiết lập MIDI\" để mở một file MIDI có hiệu lực.",
				no_media_exception = "Lỗi: Không có file phương tiện đã chọn.\n\nVui lòng mở lại hộp thoại thiết lập script, rồi bấm vào nút \"Duyệt tìm\" trong group \"Thiết lập media\" để mở một file phương tiện có hiệu lực.",
				no_track_info_exception = "Lỗi: Không có MIDI track.\n\nLý do có thể là:\n1. Bạn không chọn một MIDI track;\n2. Không có channel trong file MIDI;\n3. Tệp MIDI bị hỏng hoặc định dạng tệp không được hỗ trợ;\nHiện tại chỉ hỗ trợ file MIDI được xuất từ FL Studio",
				no_plugin_pitch_shift_exception = "Lỗi: Không thể gọi được plugin Pitch Shift.\n\nVui lòng làm theo hướng dẫn của tài liệu hướng dẫn {0} để thao tác một cách chính xác.\nTuy nhiên, theo phiên bản cập nhật này của script, phiên bản tiếng Trung và tiếng Anh sẽ hoạt động bình thường.\nVì vậy, rất có thể bạn đang sử dụng Vegas bằng ngôn ngữ khác.",
				no_plugin_presets_exception = "Lỗi: Không thể gọi preset hiệu ứng của plugin Pitch Shift.\n\nVui lòng làm theo hướng dẫn của tài liệu hướng dẫn {0} để thao tác một cách chính xác.\nĐảm bảo rằng tất cả 25 preset đều được thêm thủ công vào plugin chuyển vị và được đặt tên chính xác.\n\nGiải thích bổ sung: Để biết chi tiết, vui lòng tham khảo phần giải thích về phương pháp cài đặt trong cột link ở trên. 25 preset này là tất cả các loại thay đổi cao độ trong quãng tám tiếp theo.\nThiếu một trong số chúng có thể xảy ra lỗi. Thực sự rất rắc rối khi thêm các preset theo cách thủ công, nhưng Vegas không thể sử dụng script\nđể chỉ định các tham số cụ thể của sự thay đổi cao độ, vì vậy tôi phải thực hiện trick này.",
				no_plugin_name_exception = "Lỗi: Không thể gọi plugin {0}.\n\nCó thể phiên bản Vegas bạn đang dùng không hỗ trợ plugin này.",
				no_take_exception_ps = "Lưu ý bổ sung: Nếu vẫn không giải quyết được, điều đó có nghĩa là file phương tiện có thể ở định dạng không được Vegas hỗ trợ.\nBạn có thể kéo file vào Vegas theo cách thủ công để xem file video và âm thanh có hoạt động bình thường không.",
				no_audio_take_exception = "Lỗi: Không thể đọc phương tiện audio stream.\n\nTrong giao diện cài đặt, không tích vào \"Bật âm thanh\" để cho ra chỉ duy nhất phương tiện video/hình ảnh.\n\n",
				no_video_take_exception = "Lỗi: Không thể đọc phương tiện video stream.\n\nTrong giao diện cài đặt, không tích vào \"Bật Video\" để cho ra chỉ duy nhất phương tiện âm thanh.\n\n",
				no_media_take_exception = "Lỗi: Không thể đọc phương tiện.\n\nĐịnh dạng file bạn đã chọn không được Vegas hỗ trợ. Vui lòng kiểm tra xem file phương tiện có bị hỏng hoặc bộ giải mã (decoder) Vegas tương ứng chưa được cài đặt hay không.\n\n",
				not_a_midi_file_exception = "Lỗi: Không thể đọc file MIDI.\n\nGiải pháp: Nhập MIDI bằng phần mềm máy chủ, sau đó xuất lại file MIDI mới.\n\nLưu ý bổ sung: Có nhiều định dạng tệp MIDI và script không đảm bảo rằng tất cả chúng đều có thể được đọc chính xác. May thay,\nCác file MIDI được xuất bởi phần mềm máy chủ chính trong cài đặt mặc định thường có thể đọc được. (Hiện đã thử với FL Studio, LMMS \nvà Music Studio dành cho iPad.)",
				no_selected_exception_ps = "Lưu ý thêm: Nếu bạn muốn chọn thủ công một phương tiện trong thư mục, vui lòng bấm vào nút \"Duyệt tìm\" ở bên phải để\nchọn một phương tiện. Và đảm bảo rằng đường dẫn của file bạn đã chọn được chọn trong menu ở dưới bên trái.",
				no_selected_media_exception = "Lỗi: Không có phương tiện đã chọn trong project media window.\n\nVui lòng chọn một phương tiện trong project media window, sau đó mở lại hộp thoại thiết lập script, và chọn \"File phương tiện đã chọn\" trong thiết lập nguồn.\n\n",
				no_selected_clip_exception_short = "Lỗi: Không có clip đã chọn trong track.",
				no_selected_clip_exception = "Lỗi: Không có clip đã chọn trong track.\n\nVui lòng chọn một clip trong track, sau đó mở lại hộp thoại thiết lập script, và chọn \"Track clip đã chọn\" trong thiết lập nguồn.\n\n",
				no_time_stretch_pitch_shift_exception = "Lỗi: Phương thức chuyển đổi cao độ của clip đã chọn được đặt thành không tuning.\n\nNhiều khả năng bạn đang dùng \"Track clip đã chọn\". Bạn không cần đổ lỗi cho lỗi này, mà đổ lỗi cho thiết kế ncct của Vegas.\n\nGiải pháp: Vui lòng chọn lại track clip của bạn, chuột phải vào đoạn âm thanh, và chọn \"Properties\" ở dưới cùng. Đặt \"Method\" của \"Time Stretch/Pitch Conversion\" thành \"élastique\".\nSau đó bấm OK.\n\nLưu ý bổ sung: Nếu một audio event chưa được chuyển đổi và các thuộc tính (propeties) của nó được mở, Thì “Method” của “Time Stretch/Pitch Conversion” trong propeties của nó sẽ được\ntự động đổi thành “None”, và bấm OK. Có hiệu lực. Ngay lúc đó, bạn sẽ thấy rằng các thao tác điều chỉnh phím + và - trên bàn phím không hợp lệ. Ngay lúc đó, bạn phải mở lại phần propeties của audio event,\nđặt \"Method\" của \"Time Stretch/Pitch Conversion\" thành \"élastique\", bạn không cần phải đặt \"Pitch Change\", cứ bấm OK.",
				read_config_fail_exception = "Lỗi: Không thể đọc file thiết lập thông số.\n\nThật không may, bạn đã gặp phải lỗi không lường trước này. Chúng tôi sẽ xóa cài đặt thiết lập người dùng và khôi phục chúng về cài đặt mặc định để giải quyết vấn đề.\nĐề nghị báo cho tác giả lỗi này để khắc phục sự cố nhanh chóng.\nScript này sẽ bị thoát ra, và sau đó phiền bạn mở lại nó theo cách thủ công.",
				fail_to_select_clips_exception = "Lỗi: Lỗi chọn các track clip\n\nVui lòng chọn một vài track clip trong track window trước.",
				fail_to_select_tracks_exception = "Lỗi: Lỗi chọn các track\n\nVui lòng chọn một vài video track trong track window trước.",
				ytp_over_length_exception = "Lỗi: Độ dài tối thiểu của YTP được chỉ định vượt quá độ dài phương tiện.\n\nĐộ dài tối thiểu của YTP được chỉ định quá lớn, vui lòng thử một giá trị nhỏ hơn. Hoặc độ dài của phương tiện đã chọn quá nhỏ.",
				ytp_in_media_generator_exception = "Lỗi: Áp dụng YTP cho phương tiện được tạo bởi trình tạo phương tiện.\n\nỨng dụng của YTP phải sử dụng các tệp phương tiện cục bộ (local file), không sử dụng phương tiện được tạo bởi trình tạo phương tiện.",
				ytp_eliminate_duplicates_finally_null_exception = "Lỗi kỹ thuật ngoại lệ: Xóa các trùng lặp (duplicate) khỏi danh sách nguồn YTP. Cuối cùng, danh sách trống!\n\nĐây là lỗi không nên xuất hiện",
				unknown_exception = "Lỗi: Lỗi ngoại lệ không rõ.\n\nVui lòng mở rộng chi tiết để xem nội dung lỗi cụ thể và cung cấp thông tin lỗi lại cho tác giả.",
				use_pic_in_pic_on_unsupported_vegas_exception = "Lỗi: Không hỗ trợ sử dụng hiệu ứng plugin Picture-in-Picture (PiP) trong các phiên bản thấp hơn của Vegas.\n\nNguyên nhân gốc rễ: Vegas đã thêm một số tính năng và thông số mới cho plugin hiệu ứng Picture-in-Picture mới, không thể sử dụng tính năng này trong các phiên bản plugin Vegas thấp hơn.\n\nGiải pháp: Phiên bản hiện tại của Vegas không thể sử dụng hiệu ứng nhịp điệu PV visual này (chẳng hạn như mở rộng khung hình), vui lòng sử dụng các hiệu ứng visual khác. Hoặc cập nhật phần mềm Vegas của bạn.",
				unsupported_curve_enum_exception = "Lỗi: Sử dụng các kiểu trích xuất đường cong không được hỗ trợ làm tham số.\n\n{0} không phải là kiểu trích xuất đường cong.",
				convert_music_beats_not_one_audio_event_exception = "Lỗi: Số lượng clip âm thanh được chọn trong công cụ chuyển đổi beat nhạc không chính xác bằng một.\n\n1 đoạn âm thanh đáng lẽ đã chọn, nhưng {0} đoạn âm thanh đã chọn.",
				convert_music_beats_unsupported_beats_exception = "Lỗi: Beat của Vegas hiện tại không trong khoảng 4/4, 3/4, hoặc 6/8.",
				invalid_mapping_velocity_values_exception = "Lỗi: Thông số lập bản đồ velocity không hợp lệ được sử dụng.\n\nGiải pháp: Đảm bảo các thông số lập bản đồ velocity của âm thanh và video,\n1. Giá trị nhỏ hơn không thể lớn hơn giá trị lớn hơn;\n2. Các giá trị nhỏ hơn và lớn hơn của VELOCITY không thể bằng nhau.\nNếu không, nó sẽ không hoàn thành thao tác lập bản đồ velocity.",
				invalid_glissando_amount_exception = "Lỗi: Đã sử dụng thông số lượng glissando sai.\n\nSố lượng glissando không thể bằng 0.",
				cannot_get_script_dir_exception = "Lỗi: Không nhận được đường dẫn của script!",
				cannot_get_xvid_path_exception = "Lỗi: Không nhận được đường dẫn cài đặt XviD!",
				install_xvid_info = "XviD codec chưa được cài đặt. Script sẽ cài đặt nó ngay và có thể hỏi bạn quyền truy cập admin để cài đặt nó.",
				install_xvid_admin_failed = "Lỗi: Quyền admin để cài đặt XviD bị từ chối.",
				install_xvid_succeed = "XviD đã cài đặt và render template được tạo cho tốc độ khung hình hiện tại. Vui lòng khởi động lại Vegas và khởi chạy lại script.",
				render_template_generate_completed = "Render template được tạo cho tốc độ khung hình hiện tại. Vui lòng khởi động lại Vegas và khởi chạy lại script.",
				unexpected_exception = "Ngoại lệ không mong muốn: ",
				unexpected_render_status = "Tình trạng render không mong muốn: ",
				datamix_selection_position_exception = "Lỗi: Phần được chọn phải bắt đầu ở khung hình ≥ 1!",
				datamix_selection_length_exception = "Lỗi: Độ dài phần được chọn phải > 1 khung hình!",
				datamosh_frames_repeats_exception = "Lỗi: Lặp lại khung hình phải lớn hơn > 0!",
				datamosh_selection_length_exception = "Lỗi: Phần được chọn phải dài bằng số lượng khung hình!",
				datamosh_selection_position_exception = "Lỗi: Phần được chọn không được bắt đầu trên khung hình đầu tiên của project!",
				no_track_found_exception = "Lỗi: Không tìm thấy track nào!",
				excessively_video_events_selected_exception = "Lỗi: Chỉ duy nhất một video event có thể được chọn!",
				no_video_event_selected_exception = "Lỗi: Chọn một video event đầu tiên!",
				no_ofx_effects_included_exception = "Lỗi: Các video clip được chọn không chứa bất kỳ hiệu ứng nào hoặc các hiệu ứng không phải là hiệu ứng OFX!",
				layering_offset_exception = "Lỗi: Layering offset không được bằng 0!",
				layering_count_exception = "Lỗi: Số layer phải > 0!",
				scramble_size_exception = "Lỗi: Kích cỡ scrambling phải > 0!",
				stutter_length_exception = "Lỗi: Độ dài phải > 0!",
				stutter_window_bias_exception = "Lỗi: Window bias phải > 0!",
				render_template_frame_rate_exception = "Lỗi: Tỉ lệ khung hình phải < 100!",
				appdata_not_set_exception = "Lỗi: Không thể nhận đường dẫn đến AppData!",
				stutter_generator_media_info = "Stutter không thể tự động tạo clip đảo ngược cho phương tiện được tạo từ trình tạo phương tiện (Tiêu đề & Văn bản, …). Vui lòng tạo các clip đảo ngược của chúng bằng cách đảo ngược chúng và rồi đảo ngược chúng trở lại, hoặc render ra file trước (ví dụ như dùng Render).",
				automator_parameters = "Thông số Automator",
				datamoshing_parameters = "Thông số Datamosh",
				layering_parameters = "Thông số Layering",
				scrambling_parameters = "Thông số Scrambling",
				stutter_parameters = "Thông số Stutter",
				frame_count = "Số khung hình",
				frames_repeats = "Khung lặp lại",
				layer_count = "Số layer",
				layering_offset = "Layering offset",
				scramble_size = "Kích cỡ scramble",
				length_in_seconds = "Độ dài tính bằng giây",
				stutter_window_bias = "Stutter window bias",
				canceled = "Đã huỷ.",
				automator_info = "Kiểm tra các thông số hiệu ứng cần được scramble",
				pre_render = "Render",
				enable_legacy_progress_dialog = "Bật legacy progress dialog",
				camera_shake_parameters = "Thông số rung lắc camera",
				shake_skew_in = "Tốc độ",
				shake_skew_xy = "Đồng bộ H/V",
				shake_skew_out = "Số lượng",
				shake_x_to_y_ratio = "Tỷ lệ dịch chuyển H/V",
				shake_should_reset_pan = "Đặt lại Pan/Crop trên khung hình đầu tiên",
				shake_should_clear_frames = "Đặt lại tất cả khung hình trước khi rung lắc",
				shake_skew_in_tooltip = "Thay đổi tần số rung lắc.",
				shake_skew_xy_tooltip = "Thay đổi tốc độ dọc tương đối. Đặt thành 1 để di chuyển trong một vòng tròn.",
				shake_skew_out_tooltip = "Số pixel mà camera sẽ dịch chuyển ra khỏi vùng trung tâm. Nó cũng là cách phóng to.",
				shake_x_to_y_tooltip = "Nhân khoảng cách ngang. Giá trị trên 1 sẽ tạo ra khả năng phóng to lớn hơn.",
				shake_should_reset_pan_tooltip = "Bỏ chọn để rung trong chế độ thu phóng video hiện tại.",
				shake_should_clear_frames_tooltip = "Bỏ chọn để nhân hiệu ứng rung lắc mới với hiệu ứng rung lắc trước đó.",
				restrict_note_length = "Hạn chế độ dài nốt",
				unrestricted = "Không giới hạn",
				restrict_max_length = "Độ dài tối đa",
				restrict_fixed_length = "Độ dài cố định",
				preferred_track = "Track ưa thích",
				new_track = "Track mới",
				glissando = "Glisssando", // Thuật ngữ chỉ sự lướt qua lên hoặc xuống giữa hai nốt nhạc
				swirl = "Xoáy",
			};
			Indonesian = new Lang {
				__name__ = "Bahasa Indonesia",
				__translator__ = "Ade Edogawa & JujunG",
				info_label_font = "Segoe UI",
				ui_font = "Segoe UI",
				restart_to_effect_language = "Restart agar bahasa dapat diterapkan?",
				yes_to_restart_to_effect_language = "Restart",
				no_to_restart_to_effect_language = "Re-render",
				version_number = "Versi",
				revision_date = "Tanggal revisi terakhir",
				vegas_version = "Versi Vegas",
				script_supported_vegas_version = "Versi yang didukung skrip",
				unsupported_vegas_version = "Peringatan: Skrip ini tidak cocok dengan versi Vegas ini. Beberapa fitur tidak akan berkerja dengan baik. Harap install ulang sesuai dengan versi Vegas ini!.\nVersi didukung: Vegas Pro {0}\nVersi Vegas: Vegas Pro {1}",
				unsupported_vegas_version_title = "Ketidakcocokan versi",
				unsupported_vegas_version_feature = "Versi di bawah Vegas Pro {0} tidak mendukung fitur ini.",
				check_update_title = "Update script",
				check_update_found = "Versi baru terdeteksi! Update sekarang?\n\nVersi terbaru: {0}\nVersi sekarang: {1}",
				check_update_not_found = "Sudah versi terbaru!\n\nVersi terbaru: {0}",
				check_update_on_startup = "Periksa update saat startup",
				download_latest_version = "Download yang terbaru",
				quick_config = "Konfigurasikan dengan cepat",
				midi_file_name = "MIDI sequence",
				all_files = "Semua file",
				choose_a_midi_file = "Pilih file MIDI!",
				media_file_name = "file Media yang didukung",
				choose_a_source_file = "Pilih klip video atau gambar",
				error = "Error",
				details = "Detail:",
				brightness_and_contrast = "Kecerahan dan kontras",
				invert = "Balik",
				black_and_white = "Hitam putih",
				lab_adjust = "LAB Adjust",
				hsl_adjust = "HSL Adjust",
				mirror = "Cermin",
				pic_in_pic = "Picture in Picture",
				crop = "Crop",
				bz_masking = "Bézier Masking",
				cookie_cutter = "Cookie Cutter",
				check_pitch_shift_presets = "Memeriksa apakah preset plugin Pitch Shift tersedia...",
				no_pitch_shift_presets = "Sejak mencoba menyetel menggunakan plugin efek \"Pitch Shift\", sistem menemukan bahwa kamu tidak sepenuhnya mengonfigurasi semua prasetel audio yang diperlukan. Skrip dapat mencoba menambahkan preset untuk kamu, yang mungkin gagal. Jika gagal, ikuti petunjuk untuk menggunakan tutorial secara manual. Apakah kamu ingin skrip menambahkan preset secara otomatis?",
				yes_to_add_pitch_shift_presets = "Tambah otomatis",
				no_to_add_pitch_shift_presets = "Kembali",
				no_pitch_shift_presets_title = "Tidak semua preset Pitch Shift ditemukan",
				add_pitch_shift_presets_successful = "Selesai menambahkan preset!",
				add_pitch_shift_presets_fail = "Gagal menambahkan preset!",
				add_pitch_shift_presets_fail_title = "Sayangnya",
				ensure_load_presets = "Yakin ingin memuat preset?",
				ensure_unload_presets = "Yakin ingin membongkar preset?",
				reverse_suffix_tag = " (Direverse)",
				effect_init_forward = "Maju",
				effect_init_reversed = "Direverse",
				effect_init_turned = "Diblaik",
				effect_init_left = "Kiri",
				effect_init_right = "Kanan",
				effect_init_up = "Atas",
				effect_init_down = "Bawah",
				effect_init_left_up = "Kiri atas",
				effect_init_right_up = "Kanan atas",
				effect_init_left_down = "Bawah kiri",
				effect_init_right_down = "Bawah kanan",
				effect_init_invert = "Invert",
				effect_init_conform = "Conform",
				effect_init_opposite = "Didepan",
				effect_init_chromatic = "Chromatic",
				effect_init_monochrome = "Monochrome",
				effect_init_counter = "Counter",
				effect_init_stepon = "Continue",
				effect_init_flat = "Datar",
				effect_init_thin = "Kurus",
				effect_init_blur = "Kabur",
				effect_init_zoom_out = "Zoom keluar",
				effect_init_zoom_in = "Zoom masuk",
				enable_all_effects = "Hidupkan semua efek",
				chorus = "Chorus",
				vibrato = "Vibrato",
				wave = "Gelombang",
				multi_beat_delay = "Multi-Tap Delay",
				spherize = "Spherize",
				warning_missing_plugin = "Peringatan: plugin \"{0}\" tidak dapat ditemukan!",
				midi_channel = "CH",
				midi_notes_count = "Jumlah not",
				midi_begin_note = "Mulai Not",
				midi_instrument = "Inst",
				instrument = "Instrumen",
				drum_kit = "Drum Kit",
				pan = "Pan",
				pan_left_abbr = "L",
				pan_right_abbr = "R",
				pan_center_abbr = "C",
				pan_dynamic_abbr = "D",
				yes = "Ya",
				no = "Tidak",
				error_code = "Kode Error:",
				processing_otomad = "Membuat Otomad/YTPMV...",
				processing_otomad_swirl = "Membuat glissando",
				processing_ytp = "Membuat YTP...",
				processing_it = "Memprosesnya",
				processing_tracks = "Membuat trek {0} dari {1}, channel {2}{3}...",
				processing_tracks_swirl = "Membuat glissando untuk trek {0} dari {1}, channel {2}{3}...",
				real_time_update = "Update progress saat ini secara real time (itu akan memperlambat generate)",
				replacer_is = "Replacement yang dimaksud adalah",
				replacer_info = "Harap pilih klip yang akan diganti dan diganti di jendela trek terlebih dahulu, lalu tentukan klip sebagai klip pengganti, dan klip yang tersisa adalah semua klip yang diganti.\nHarap buat grup untuk audio dan video dari klip pengganti terlebih dahulu , dan pastikan klip pengganti ditempatkan di lain waktu dan tidak di trek yang sama dengan klip lain yang diganti.",
				replace_clips = "Ubah Track Events",
				replaced_info = "Kemudian sisa {0} klip trek akan diganti dengan klip yang dipilih.",
				replaced_label = "Diganti",
				replacer_label = "Replacement",
				separation_replaced_info = "{0} klip lagu dipilih, berisi {1} klip audio, {2} klip video.",
				separation_set_replaced = "Atur {0} klip yang dipilih sebagai yang diganti",
				separation_set_replacer = "Tetapkan {0} klip yang dipilih sebagai pengganti",
				separation_back_to_select = "Kembali ke Vegas untuk memilih klip",
				separation_use_clip_group = "Ganti juga klip lain di grup trek",
				separation_reserve_original_name = "Reverse nama klip asli",
				replacements_classic_specify = "Tentukan secara bersamaan",
				replacements_separation_specify = "Tentukan secara terpisah",
				view = "View",
				selected_items = "Dipilih",
				replace_clips_form_ensure_to_close = "Beberapa klip trek telah ditentukan di \"Tentukan secara terpisah\".\nPerubahan mungkin tidak disimpan setelah keluar.",
				track = "Trek",
				submit_select = "&Atur dipilih",
				every_few = "Pilih satu untuk setiap beberapa",
				which_one = "Pilih yang mana dari grup",
				select_how_many = "Pilih berapa banyak sekaligus",
				reset_select = "&Setel ulang pilihan",
				quick_select_interval = "Cepat Pilih Interval",
				select_interval_info = "Silakan pilih beberapa klip di jendela trek Vegas terlebih dahulu, lalu buka kotak dialog ini untuk menggunakan fungsi berikut.",
				select_events_count_info = "{0} track events telah dipilih.",
				select_videotracks_count_info = "{0} trek video telah dipilih.",
				select_audioevents_count_info = "{0} audio track events telah dipilih.",
				select_videoevents_count_info = "{0} video track events telah dipilih.",
				select_source_count_info = "{0} sumber media telah dipilih.",
				select_tracks_count_info = "{0} trek telah dipilih.",
				square = "Kotak",
				custom = "Custom",
				row_count = "Baris",
				column_count = "Kolom",
				fill = "Isi",
				adapt = "Mencocokan",
				increase_padding = "lapisan",
				min = "MIN",
				max = "MAX",
				mirror_edges = "Tepi cermin",
				disable_flip = "Matikan",
				even_column = "Kolom genap",
				odd_column = "Kolom ganjil",
				even_row = "Garis genap",
				odd_row = "Garis ganjil",
				auto_layout_tracks = "Trek Tata Letak Otomatis",
				grid_layout = "Tata Letak Kisi",
				box_3d_layout = "Tata Letak Kotak 3D",
				selected_tracks_too_much = "Anda telah memilih {0} trek, yang berada di luar cakupan fungsi yang tersedia. Itu terlalu banyak!\nSilakan pilih lebih sedikit trek dan coba lagi.",
				selected_tracks_too_much_title = "Terlalu banyak trek yang di pilih",
				bottom_surface = "Bawah",
				top_surface = "Atas",
				right_surface = "Kanan",
				left_surface = "Kiri",
				back_surface = "Belakang",
				front_surface = "Depan",
				box_3d_layout_info = "Karena keterbatasan fungsi skrip, trek baru akan dibuat dan klip di trek yang dipilih akan dipindahkan, dan gerakan trek, efek, atau lainnya di trek asli akan hilang.\nSilakan pilih trek yang digunakan oleh setiap sisi kubus di bawah ini. Jika kosong, berarti wajah tidak disetel.",
				delete_original_tracks = "Hapus trek asli",
				use_video_longer_side = "Gunakan sisi panjang tepi yang lebih panjang",
				use_video_longer_side_tooltip = "Setelah diperiksa, sisi terpanjang video dalam pengaturan proyek (yaitu, lebar dan tinggi maks) akan digunakan sebagai panjang tepi kubus.",
				gradient_tracks = "Trek Gradien",
				gradient_tracks_info = "Pilih efek gradien untuk diterapkan ke trek video yang dipilih:",
				rainbow_color = "Warna pelangi",
				gradually_saturated = "Saturasi secara bertahap",
				gradually_contrasted = "Kontras secara bertahap",
				threshold = "Ambang",
				alternately_chromatic = "Ganti kroma",
				alternately_negative = "Negatif alternatif",
				descending = "Menurun",
				ascending = "Naik",
				change_tune_method = "Ubah Metode Tuning",
				change_tune_method_info = "Hanya metode penyetelan di properti peristiwa audio yang didukung, bukan di plugin Pitch Shift.",
				time_stretch_pitch_shift = "Time stretch / pitch shift",
				formant_change = "Formant shift",
				pitch_change = "Pitch",
				method = "Metode",
				pitch_lock = "Lock untuk strech",
				lock_pitch_instead_of_rate = "lock pitch, bukan rate",
				none = "Tidak ada",
				classic = "Classic",
				elastique_pro = "Professional",
				elastique_efficient = "Efficient",
				elastique_soloist_monophonic = "Soloist (Monophonic)",
				elastique_soloist_speech = "Soloist (Speech)",
				classic_a01 = "A01. Music 1 (flensa minimum, dapat bergema)",
				classic_a02 = "A02. Music 2",
				classic_a03 = "A03. Music 3 (kurang gema)",
				classic_a04 = "A04. Music 4 (cepat,cocok buat bass)",
				classic_a05 = "A05. Music 5",
				classic_a06 = "A06. Music 6",
				classic_a07 = "A07. Speech 1",
				classic_a08 = "A08. Speech 2",
				classic_a09 = "A09. Speech 3 (fast)",
				classic_a10 = "A10. Solo instruments 1",
				classic_a11 = "A11. Solo instruments 2",
				classic_a12 = "A12. Solo instruments 3",
				classic_a13 = "A13. Solo instruments 4 (kurang gema)",
				classic_a14 = "A14. Solo instruments 5",
				classic_a15 = "A15. Solo instruments 6",
				classic_a16 = "A16. Solo instruments 7 (cepat)",
				classic_a17 = "A17. Drums, unpitched (gema kecil)",
				classic_a18 = "A18. Drums (bagus buat tom)",
				classic_a19 = "A19. Drums (gema kecil)",
				batch_subtitle_generation = "Batch Subtitle Generation",
				batch_subtitle_generation_presets = "Pilih Preset Title & Text media generator:",
				batch_subtitle_generation_subtitles = "Masukkan teks subtitle (baris demi baris, baris kosong diabaikan):",
				batch_subtitle_generation_single_duration = "Durasi setiap subtitle",
				batch_subtitle_generation_suggestion_info = "Aktifkan fungsi Tindak Lanjut Otomatis untuk menyesuaikan waktu nanti.",
				open = "Buka",
				text_document = "Dokumen Teks",
				file_too_large_info = "Filenya gede banget,tetap buka?",
				will_clear_existing_text_info = "Konten teks yang ada akan dihapus dan perubahan mungkin tidak dipertahankan.",
				import_from_file = "Impor dari file",
				find_clips = "Cari Track Events",
				find_clips_select_info = "track event pertama dipilh",
				find_clips_info = "Pilih klip yang cocok di atas dan mereka akan dipilih saat Anda yakin.",
				find_clips_header_name = "Nama",
				find_clips_header_num = "Nomor",
				find_clips_match_source = "Mencocokkan sumber yang sama",
				find_clips_match_source_and_offset = "Mencocokkan sumber yang sama dengan offset awal yang sama",
				find_clips_match_name = "Sesuai dengan nama yang ditentukan",
				convert_music_beats = "Mengkonversi Ketukan Musik",
				convert_music_beats_complete = "Ketukan musik konversi selesai.",
				convert_music_beats_info = "Klip audio musik yang dipilih akan diubah dari {0} menjadi {1}.",
				metre_4_4 = "4/4",
				metre_3_4 = "3/4",
				metre_6_8 = "6/8",
				custom_fade_gain = "Fade Gain Kustom",
				from = "Dari",
				to = "Ke",
				midi_channel_advanced = "Trek MIDI Properti Lanjutan",
				channel = "Channel",
				name = "Nama",
				edit_notes = "Edit not trek yang dipilih...",
				auto_layout_tracks_midi_channel_advanced_info = "Efektif hanya saat membuat video tanpa mengaktifkan Staff Visualizer.",
				reset = "Ulang",
				select_all = "Pilih semua",
				select_none = "Pilih tidak ada",
				invert_selection = "Balik pilihan",
				replace = "&Ubah",
				apply = "&Terapkan",
				close = "&Tutup",
				complete = "&Selesai",
				cancel = "&Batal",
				about = "&Tentang",
				ok = "&OKE",
				balloon_title = "Instruksi Pengisian",
				midi_start_second_tooltip = "Digunakan untuk mencegat bagian musik MIDI.\nSatuan: detik.",
				midi_end_second_tooltip = "Isikan lama waktu yang diperlukan untuk membaca file MIDI disini.\nPerhatikan jika nilai yang diisi terlalu kecil, maka not pada kelebihan waktu akan terpotong.\nJika nilai yang dimasukkan disini kurang dari atau sama dengan detik mulai, artinya selalu berlangsung hingga akhir durasi musik.\nSatuan: detik.",
				midi_beat_conbo_tooltip = "Saat ini hanya digunakan untuk fungsi paginasi staf.\nSpekulasi otomatis dari file MIDI untuk sementara tidak tersedia.",
				source_start_time_tooltip = "Isikan waktu mulai pemotongan bahan media disini.\nSatuan: detik.",
				source_end_time_tooltip = "Perhatikan bahwa jika nilai yang dimasukkan di sini kurang dari atau sama dengan jumlah detik mulai, itu selalu berarti nilai tersebut bertahan hingga akhir waktu media.\nSatuan: detik.",
				no_tune = "Tanpa Tuning",
				pitch_shift_plugin = "Pitch Shift Efek Audio Plugin",
				elastique_method = "Ganti Elastic Pitch",
				classic_method = "Ganti Classic Pitch",
				fool_tuning_method = "Tuning tanpa Scale",
				sine_wave = "Sinusoid",
				triangle_wave = "Triangle",
				square_wave = "Square",
				sawtooth_wave = "Sawtooth",
				tune_method_tooltip = "\"Efek audio pitch shift\" ingin menggunakan plugin efek \"pitch shift\" di \"Audio FX\" untuk mengubah nada, dan prasetel perlu dikonfigurasi.\n\"Perubahan Nada Elastis\" artinya menggunakan \"Élastique\" metode peregangan untuk mengubah nada, yaitu tombol + dan-pada keyboard langsung mengubah nada, dan rentang nada terbatas.",
				audio_lock_stretch_pitch_tooltip = "Gunakan resampling untuk mengubah pitch saat kecepatan berubah. Peregangan audio akan dinonaktifkan jika metode \"Elastic Pitch Change\" digunakan.",
				preview_beep_duration_tooltip = "Durasi pra-mendengarkan nada dasar.\nUnit: milidetik.",
				preview_tune_audio_tooltip = "Jika dicentang, sumber audio akan disetel ke nada dasar tonik C saat mendengarkan audio terlebih dahulu.\nJika tidak, nada yang diatur oleh nada dasar akan dihasilkan saat mendengarkan nada dasar terlebih dahulu.",
				sheet_position_tooltip = "Jarak dari baris ketiga di tengah tongkat ke tengah layar. Naik plus turun dikurangi.\nSatuan: piksel.",
				sheet_width_tooltip = "Catatan akan ditampilkan dalam lebar yang diisi di tengah layar, digunakan untuk ruang putih kiri dan kanan, dan ruang kiri untuk kunci musik di sebelah kiri.\nSatuan: piksel.",
				sheet_gap_tooltip = "Jarak antara garis dalam tongkat.\nSatuan: piksel.",
				sheet_line_thickness_tooltip = "Ketebalan garis lembaran sambil menghasilkan staf. Saat ketebalan mencapai 100%, garis lembaran akan menempati seluruh jarak garis lembaran.\nUnit: persentase.",
				sheet_relative_tooltip = "Setelah diperiksa, satuan piksel dari parameter yang diisi di bawah ini akan diposisikan relatif terhadap ukuran 1920 × 1080\njika tidak, unit tersebut akan diposisikan berdasarkan ukuran proyek.",
				sheet_relative = "Menggunakan nilai relatif",
				preview_base_pitch_tooltip = "Harap pastikan bahwa suara diaktifkan dan skema suara tidak dimute.\nJika masih tidak berfungsi, harap mulai ulang sistem.",
				ytp_max_length_tooltip = "Tentukan panjang maksimum satu klip trek.\nUnit: milidetik.",
				ytp_min_length_tooltip = "Tentukan panjang minimum klip trek tunggal.\nUnit: milidetik.",
				file = "&File",
				save_config = "&Simpan konfigurasi",
				reset_config = "&Ulang konfigurasi",
				exit_discarding_changes = "&Abaikan perubahan dan keluar",
				exit = "E&xit",
				pitch_shift_preset = "&Preset Plugin Pitch shift",
				load_presets = "&Muat preset",
				unload_presets = "&Bongkar preset",
				form_size = "&Ukuran bentuk",
				remember_form_size = "Ingat ukuran bentuk",
				remember_always_form_size = "Ingat ukuran bentuk setiap kali",
				remember_once_form_size = "Ingat ukuran bentuk sekali",
				restore_default_form_size = "Kembalikan ukuran bentuk default di lain waktu",
				export_config = "&Ekspor konfigurasi",
				import_config = "&Impor konfigurasi",
				export = "Ekspor",
				import = "Impor",
				configuration_settings = "Pengaturan konfigurasi",
				about_to_import_config = "Konfigurasi akan segera diimpor.\nPerhatikan: Jika file pengaturan konfigurasi tidak standar, skrip mungkin tidak berfungsi dengan baik.\nApakah tetap ingin melanjutkan?",
				import_config_complete = "Impor selesai, harap mulai ulang skrip secara manual.",
				help = "&Bantuan",
				user_help = "Instruksi",
				trouble_shooting = "Penyelesaian masalah",
				update_info = "Catatan rilis",
				repository_link = "Tautan repositori",
				latest_version_link = "Tautan versi terbaru",
				roadmap = "Roadmap",
				send_issues = "Kirim umpan balik",
				update_logs = "Update logs",
				tutorial_video = "Video tutorial",
				release_notes = "Catatan rilis",
				staff_visualizer_documentation = "Dokumentasi untuk Staff Visualizer",
				english_documentations = "Dokumentasi bahasa Inggris",
				chinese_documentations = "Dokumentasi bahasa Cina",
				check_update = "Cek update",
				why_ok_btn_is_disabled = "Mengapa tombol Selesai dinonaktifkan?",
				experimental_theme = "Tema eksperimental",
				media = "Media",
				audio = "Audio",
				video = "Visual",
				staff = "Staff",
				ytp = "YTP",
				helper = "Alat",
				midi_settings = "Konfigurasi MIDI",
				midi_start_time = "Mulai detik",
				midi_end_time = "Detik akhir",
				bpm_setting = "Atur tempo BPM ke",
				midi_beat = "Ketukan",
				midi_channel_setting = "Menggunakan trek MIDI",
				browse = "Jelajahi...",
				advanced = "lanjutan...",
				presets = "Preset",
				no_midi_selected = "<Tidak ada file MIDI yang dipilih>",
				choose_midi_file = "Pilih MIDI",
				midi_dynamic_midi_bpm = "Tempo MIDI yang dinamis",
				midi_midi_bpm = "Tempo MIDI",
				midi_project_bpm = "Tempo projek",
				midi_custom_bpm = "Kustom",
				dynamic_midi_bpm_info = "Tempo dinamis dari {0}",
				dynamic_midi_beat_info = "Ketukan dinamis dari {0}",
				colon = ": ",
				semicolon = "; ",
				source_settings = "Konfigurasi bahan",
				generate_at_begin = "Proyek dimulai",
				generate_at_cursor = "Kursor",
				generate_position = "Hasilkan di",
				generate_below_top_adjustment_tracks = "Di bawah trek penyesuaian atas",
				remove_source_track_events = "Hapus track events yang ditetapkan sebagai materi sumber setelah pembuatan selesai",
				select_all_generated_events = "Pilih semua event yang dihasilkan setelah pembuatan selesai",
				choose_source_file = "Pilih sumber media",
				selected_media = "File media yang dipilih",
				selected_clip = "Track event yang dipilih",
				source_start_time = "Mulai detik",
				source_end_time = "Detik akhir",
				parameters = "Parameter",
				linear = "Linear(Lurus)",
				fast = "Fast(Cepat)",
				slow = "Slow(Lambat)",
				smooth = "Smooth(Halus)",
				sharp = "Sharp(Tajam)",
				hold = "Hold(Tahan)",
				fade_in = "Fade in",
				fade_out = "Fade out",
				tune = "Tuning",
				tune_method = "Metode Tuning",
				base_pitch = "Nada dasar",
				preview_listen = "Preview",
				preview_base_pitch = "Preview &Nada dasar",
				preview_audio = "&Preview audio",
				stop_preview_audio = "Berhenti &previewing",
				lock_attr = "Kunci attr",
				preview_listen_attr = "Preview attrs",
				preview_tune_audio = "Sesuaikan audio ke nada dasar",
				reserve_formant = "Pertahankan forman",
				stretch_attr = "Peregangan attr",
				create_event_group = "buat grup",
				aconfig = "Aktif",
				audio_stretch = "Stretch",
				audio_loop = "Loop",
				audio_normalize = "Normalize",
				audio_lock_stretch_pitch = "kunci stretch dan pitch",
				auto_pan = "Pan otomatis",
				velocity = "Velocity",
				mapping_velocity = "Pemetaan Velocity",
				notes_velocity = "Velocity",
				volume_gain = "Volume",
				opacity = "Opacity",
				set_fade_by_percent = "atur fade dengan persen",
				set_fade_by_timecode = "atur fade dengan timecode",
				video_glow_bright = "Glow brightness",
				video_glow = "Glow",
				video_start_size = "Mulai ukuran",
				video_end_size = "Ukuran akhir",
				video_start_rotation = "Mulai Rotasi",
				video_end_rotation = "Rotasi akhir",
				video_start_h_trans = "Mulai X shift",
				video_end_h_trans = "X shift akhir",
				video_start_v_trans = "Mulai Y shift",
				video_end_v_trans = "Y shift Akhir",
				video_start_hue = "Mulai hue",
				video_end_hue = "Hue akhir",
				video_start_saturation = "Mulai saturasi",
				video_end_saturation = "Saturasi akhir",
				video_start_contrast = "Start kontras",
				video_end_contrast = "End contrast",
				video_start_threshold = "Awal ambang",
				video_end_threshold = "Ambang akhir",
				multitrack_for_chords = "Multitrack untuk chords",
				effect = "Efek",
				visual_effect = "Efek visual",
				initial_visual_effect = "Nilai awal",
				apply_visual_effect = "Terapkan Efek Visual",
				pv_rhythm_visual_effect = "Efek Visual Rhythm PV",
				flip_class = "KelasFlip",
				rotation_class = "Rotasi Class",
				scale_class = "Kelas Skala",
				mirror_class = "Kelas Mirror",
				invert_class = "Kelas Invert",
				hue_class = "Kelas Hue",
				monochrome_class = "Kelas Monokrom",
				time_class = "Kelas Waktu",
				time_class_2 = "Kelas Waktu 2",
				expansion_and_compression_class = "Kelas Ekspansi dan Kompresi",
				swing_class = "Kelas Ayunan",
				blur_class = "Kelas buram",
				no_effects = "Tidak ada efek",
				h_flip = "Flip Horizontal",
				v_flip = "Flip Vertikal",
				ccw_flip = "Putar berlawanan arah jarum jam",
				cw_flip = "Putar searah jarum jam",
				h_flip_sustain = "Mempertahankan Flip Horizontal",
				h_flip_relay = "Relai Flip Horizontal",
				h_flip_invert = "Balikan Balik Horizontal",
				ccw_rotate = "Rotasi berlawanan arah jarum jam",
				cw_rotate = "Rotasi searah jarum jam",
				turned = "Berbalik",
				zoom_out_in = "Zoom Keluar Masuk",
				h_mirror = "Mirror Horizontal",
				v_mirror = "Mirror Vertikal",
				ccw_mirror = "Mirror berlawanan arah jarum jam",
				cw_mirror = "Mirror Searah Jarum Jam",
				negative = "Negatif",
				lumin_invert = "Balik Pencahayaan",
				hue_invert = "Balik Hue",
				step_change_hue = "{0} Langkah Penyimpangan Kromatik",
				chromatic_and_monochrome = "Chromatic dan Monochrome",
				pingpong = "Efek Ping-pong",
				whirl = "Berputar",
				sharp_rewind = "Putar balik tajam",
				wobble_period = "Periode goyah",
				vertical_expansion = "Ekspansi Vertikal",
				vertical_expansion_with_rebound = "Ekspansi Vertikal dengan Rebound",
				vertical_compression = "Kompresi Vertikal",
				vertical_compression_with_rebound = "Kompresi Vertikal dengan Rebound",
				oblique_expansion_and_compression = "Ekspansi dan Kompresi Miring",
				puyo_puyo = "Pop Puyo",
				pendulum = "Mainkan Pendulum",
				gaussian_blur = "Gaussian Blur",
				radial_blur = "Radial Blur",
				vconfig = "Diaktifkan",
				video_stretch = "Stretch",
				video_loop = "Loop",
				freeze_first_frame = "Visual statik",
				freeze_last_frame = "Tidak ada perpanjangan",
				legato = "Legato",
				legato_staccato = "Staccato",
				legato_one_beat_longest = "1 ketukan terpanjang",
				legato_one_bar_longest = "1 batang terpanjang",
				legato_unlimited = "Tak terbatas",
				no_stretching = "Tanpa Stretching",
				flexing_and_extending = "Meregangkan dan Memperpanjang",
				extending_only = "Memperpanjang Saja",
				flexing_only = "Regangkan Saja",
				sheet_width = "Lebar permukaan",
				sheet_thickness = "Ketebalan garis",
				sheet_color = "Warna garis",
				sheet_position = "Posisi permukaan",
				sheet_clef = "Kunci musik",
				sheet_gap = "Kesenjangan garis",
				sheet_g_clef = "Treble",
				sheet_f_clef = "Bass",
				sheet_notes_shift = "Shift not",
				sheet_config = "Dihidupkan",
				sheet_generate_lines = "Buat garis",
				sheet_config_info = "Jika kamu ingin mengaktifkan staff visual effect, kamu perlu mengaktifkan video option.\nEnable opsi ini akan menonaktifkan PV rhythm visual effects dan opsi video stretching.",
				sheet_notes_params = "Parameter not",
				sheet_sheet_line_params = "Garis parameter",
				sheet_legacy_method = "Metode pemosisian lama",
				sheet_legacy_method_tooltip = "Metode pemosisian yang sama dengan skrip lama Staff Visualizer v0.1 akan dipakai.\nThe notes dan garis akan diposisikan dan dibentuk oleh gerakan track.",
				sheet_clef_params = "Parameter kunci",
				sheet_generate_clef = "Bikin kunci musik",
				sheet_clef_scale = "Skala Clef",
				sheet_clef_color = "Warna Clef",
				sheet_padding_left = "Padding kiri",
				sheet_padding_right = "Padding kanan",
				sheet_freeze_at_noteoff = "Freeze saat note dimatikan",
				ytp_clips_count = "Jumlah klip",
				ytp_min_length = "Panjang minimal",
				ytp_max_length = "Panjang maksimal",
				ytp_chorus = "Chorus",
				ytp_pitch_change = "Ubah Pitch",
				ytp_vibrato = "Vibrato (kemungkinan melampirkan efek gelombang)",
				ytp_reverse = "Reverse",
				ytp_delay = "Delay",
				ytp_speed_change = "Ubah Speed",
				ytp_hue_change = "Ubah Hue",
				ytp_hue_rotate = "Rotate Hue",
				ytp_monochrome = "Monochrome",
				ytp_negative = "Negative (kemungkinan memberikan efek pitch-down)",
				ytp_high_freq_repeat = "Ulangi dengan Cepat",
				ytp_random_tone = "Tuning Random (memberikan efek flip horizontal)",
				ytp_enlarge = "Upsize (lampirkan keras)",
				ytp_spherize = "Spherize",
				ytp_mirror = "Mirror",
				ytp_high_contrast = "Kontras Tinggi (memberikan nyaring)",
				ytp_oversaturation = "Oversaturation (kemungkinan memberikan efek pitch-up)",
				ytp_emphasize_thrice = "Tiga kali untuk Menekankan (memberikan gerakan fokus upsize sporadis)",
				ytp_info = "Click the \"Complete\" tombol di bawah tab ini, YTP akan dibuat sebagai gantinya dari Otomad/YTPMV.\nThe parameter settings selain itu \"Enabled Audio\" dan \"Enabled Video\" tidak akan efektif di YTP.",
				video_preset_fade_out = "Fade Out",
				flashlight = "Flashlight",
				horizontal_movement = "Gerakan Horizontal",
				vertical_movement = "Gerakan Vertikal",
				threshold_change = "Perubahan Ambang Batas",
				video_preset_enter = "Masuk",
				video_preset_enter_staff = "Masuk (Staff)",
				video_preset_normal = "Normal",
				oversaturation = "Oversaturation",
				high_contrast = "Kontras tinggi",
				sure_to_delete = "Apakah kamu yakin ingin menghapus item yang dipilih?",
				sure_to_reset = "kamu yakin ingin mereset ulang?",
				sonar = "Sonar",
				sonar_config = "Aktifkan efek sonar ke trek drum",
				separate_drums = "Drum terpisah",
				difference_composite_mode = "Perbedaan modus komposit",
				shadow = "Bayangan",
				shadow_color = "Warna bayangan",
				matched_drum_sound = "Suara drum yang cocok",
				shape = "Bentuk",
				color = "Warna",
				duration = "Durasi",
				curve = "Kurva",
				start_border = "Mulai border",
				end_border = "Akhir border",
				start_size = "Awal ukuran",
				end_size = "Akhir ukuran",
				x_center = "Pusat X",
				y_center = "Pusat Y",
				start_x_offset_odd = "Mulai X mengimbangi ganjil",
				start_x_offset_even = "Start X mengimbangi genap",
				start_y_offset_odd = "Mulai Y mengimbangi ganjil",
				start_y_offset_even = "Mulai Y mengimbangi genap",
				prestart_x_offset_odd = "Prestart X mengimbangi ganjil",
				prestart_x_offset_even = "Prestart X bahkan diimbangi",
				prestart_y_offset_odd = "Prestart Y offset ganjil",
				prestart_y_offset_even = "Mulai ulang Y offset genap",
				start_rotation_odd = "Mulai rotasi ganjil",
				start_rotation_even = "Mulai rotasi genap",
				fade_in_curve = "Kurva Fade in",
				fade_out_curve = "Kurva Fade out",
				cookie_cutter_shape_circle = "Lingkaran",
				cookie_cutter_shape_oval = "Oval",
				cookie_cutter_shape_oval_side = "Samping Oval",
				cookie_cutter_shape_rectangle = "Persegi panjang",
				cookie_cutter_shape_diamond = "Diamond (Ketupat)",
				cookie_cutter_shape_square = "Persegi",
				cookie_cutter_shape_triangle_up = "Segitiga atas",
				cookie_cutter_shape_triangle_right = "Segitiga kanan, Anda harus memilih tepat SATU acara audio, tidak lebih atau kurang",
				cookie_cutter_shape_triangle_down = "Segitiga bawah",
				cookie_cutter_shape_triangle_left = "Segitiga kiri",
				cookie_cutter_shape_arrowhead_up = "Arrowhead atas",
				cookie_cutter_shape_arrowhead_right = "Arrowhead kanan",
				cookie_cutter_shape_arrowhead_down = "Arrowhead bawah",
				cookie_cutter_shape_arrowhead_left = "Arrowhead kiri",
				select_interval = "Pilih sebaliknya",
				select_interval_configform_info = "Fungsi ini dirancang untuk membantu pengguna memilih klip setiap beberapa atau beberapa, dan kemudian melakukan operasi seperti \"Paste Event Attributes\".",
				quick_normalize = "Cepat Normalize",
				quick_normalize_configform_info = "Normalize semua audio events volume yang dipilih.",
				quick_normalize_complete = "Normalize selesai.",
				replace_clips_configform_info = "Ganti beberapa klip trek dengan klip trek baru yang ditentukan.",
				auto_layout_tracks_configform_info = "Tata letak otomatis trek yang dipilih dalam gaya seperti YTPMV.",
				change_tune_method_configform_info = "Ubah beberapa audio events ke algoritme penyetelan yang ditentukan.",
				batch_subtitle_generation_configform_info = "Preset \"Titles & Text\", lalu tambahkan beberapa baris teks di sini.",
				find_clips_configform_info = "Pilih semua track event yang cocok dengan yang ditentukan, seperti nama klip, sumber yang sama dengan klip yang dipilih, dll.",
				apply_visual_effect_configform_info = "Terapkan efek visual ritme PV ke video events yang ditentukan.",
				convert_music_beats_configform_info = "Ubah ketukan musik yang ditentukan antara 4/4, 3/4, 6/8, dll.",
				custom_fade_gain_configform_info = "Ubah nilai gain dari beberapa klip trek sesuai dengan aturan yang ditentukan.",
				select_exactly_one_audio_event_configform_info = "Kamu harus memilih tepat SATU audio events, tidak lebih atau kurang.",
				select_exactly_one_video_event_configform_info = "Kamu harus memilih tepat SATU video events, tidak lebih atau kurang.",
				clear_tracks_motion = "Hapus Motion Trek",
				clear_tracks_effect = "Hapus Efek Trek",
				track_legato = "Tracks Legato",
				track_legato_stacking = "Susun klip (untuk trek saat ini)",
				track_legato_stacking_all_tracks = "Susun klip (untuk semua trek)",
				track_legato_stacking_selected = "Susun klip (untuk klip yang dipilih)",
				track_legato_stacking_all_after = "Susun klip (untuk klip setelahnya)",
				track_legato_limit_stretch = "Klip peregangan (dalam batas peregangan)",
				track_legato_stretch = "Klip peregangan (memanjang saat berada di luar batas peregangan)",
				track_legato_lengthen = "Memperpanjang klip (mengubah panjang klip)",
				increase_spacing = "Tambah spasi (untuk trek saat ini)",
				increase_spacing_all_tracks = "Tambah spasi (untuk semua trek)",
				increase_spacing_info = "Menempatkan waktu tertentu di antara setiap klip",
				effect_to_selected_events = "Hanya untuk track events yang dipilih",
				include_events_within_group = "Sertakan track events dalam grup",
				reverse_direction = "Arah terbalik",
				select_multiple_tracks_warning = "Peringatan: Trek atau klip trek yang kamu pilih lebih dari satu, sehingga hasilnya mungkin tidak sesuai dengan harapan.\nIngin melanjutkan?",
				drag_here_to_import = "Seret ke sini untuk mengimpor",
				helper_info = "Fungsi berikut hanyalah beberapa fungsi tambahan independen, dan tidak ada hubungannya dengan parameter lain yang menghasilkan audio dan video.",
				helper_info_warning = "Catatan: Kotak dialog ini akan ditutup setelah operasi, Anda dapat membukanya kembali nanti, dan beberapa perubahan yang belum disimpan mungkin akan hilang!\n",
				close_after_open_helper = "Tutup dialog ini setelah operasi selesai",
				mosh = "Mosh",
				datamosh_clips_folder = "Folder klip Datamosh",
				datamosh_not_installed_info = "Paket ekstensi Datamosh tidak diinstal dan tidak akan tersedia untuk fitur lengkap hingga diunduh.",
				datamosh_install = "Download paket ekspansi",
				datamosh_no_clips_folder_info = "Silakan pilih folder untuk memasukkan klip datamoshed yang dihasilkan.",
				datamosh_info = "Datą̬͉̫̐͑̓̄ͅa̸͎͇͗̌͂̈̀ą̸̝̼̦̤̇̐ǎ̛͍́̑a̸̲͙͛̐̄̎̚͜a̢̨̝̟͎̾̔̊ǎ̤̞͈͑a͈̪̣̍mo̻̪̬̘̲͆͂͠o̸͍̞͔̓̆̊̀o̗͊̇̇̈́̇ǫ͇͗̏̕͜ơ̬͍͚̦̯̓̊͌ò͈̦̫̈́̓o̦̣̲̊̀o̪̪͚̺̘͛̽̏̈́sh adalah teknnik yang bikin video kamu jadi rusak dan ngeglitch.",
				datamosh = "Datamosh",
				datamix = "Datamix",
				layering = "Layar",
				rendering = "Render",
				scramble = "Scramble",
				automator = "Automator",
				stutter = "Stutter",
				camera_shake = "Goyang",
				datamosh_configform_info = "Datamosh bagian dari video dengan cepat dan otomatis.",
				datamix_configform_info = "Datamosh bagian dari video dengan cepat dan otomatis (mosh klip ke yang lain).",
				layering_configform_info = "Melakukan multilayering pada bagian video secara cepat dan otomatis.",
				rendering_configform_info = "Membuat bagian dari video dengan cepat dan otomatis.",
				scramble_configform_info = "Perebutan klip/acara dengan cepat dan otomatis.",
				automator_configform_info = "Menetapkan nilai otomatisasi acak untuk efek video dengan cepat dan otomatis.",
				stutter_configform_info = "Stutters klip/events (maju-mundur, ...).",
				camera_shake_configform_info = "Gunakan Pan/crop untuk membuat lapisan yang dipilih bergetar.",
				otomad_helper_config = "Otomad Helper untuk Vegas - Konfig",
				reset_config_successful = "Reset selesai! Harap mulai ulang skripnya.",
				reset_config_successful_title = "Reset Konfigurasi",
				sure_to_reset_config = "Yakin ingin menyetel ulang konfigurasi pengguna?\nData konfigurasi pengguna kamu akan hilang.",
				about_title = "Tentang",
				script_author = "Author",
				script_original_author = "Author original",
				script_translator = "Penerjemah",
				documentation = "Dokumentasi",
				ranne = "Ranne",
				why_ok_btn_is_disabled_info = "Silakan ikuti langkah-langkah ini untuk memeriksa masalahnya secara bergiliran:",
				why_ok_btn_is_disabled_no_audio_and_video_enabled = "Audio yang Diaktifkan dan Video yang Diaktifkan keduanya tidak dicentang. Harap centang untuk mengaktifkan setidaknya salah satunya.",
				why_ok_btn_is_disabled_no_media_take = "Sumber media yang dipilih tidak berisi pengambilan media yang valid.",
				why_ok_btn_is_disabled_no_midi_select = "Untuk menghasilkan Otomad/YTPMV, pilih file MIDI dulu.",
				why_ok_btn_is_disabled_in_helper_tab = "Untuk menghindari error, jangan kirim build di tab Alat dan Mosh.",
				why_ok_btn_is_disabled_unknown_problem = "Alasan tidak diketahui.",
				no_selected_media_warning = "Peringatan: Kamu belum memilih media yang valid di jendela media proyek!",
				no_selected_clip_warning = "Peringatan: Kamu belum memilih klip apa pun di jendela trek!",
				preview_audio_track_name = "Preview Trek Audio (Harus DIHAPUS!)",
				no_midi_exception = "Error: Tidak ada file MIDI yang dipilih.\n\nHarap buka kembali kotak dialog konfigurasi skrip, lalu klik tombol \"Jelajahi\" di grup \"Konfigurasi MIDI\" untuk membuka file MIDI yang valid.",
				no_media_exception = "Error: Tidak ada berkas media yang dipilih.\n\nBuka kembali kotak dialog konfigurasi skrip, lalu klik tombol \"Jelajahi\" di grup \"Konfigurasi Media\" untuk membuka berkas media yang valid.",
				no_track_info_exception = "Error: Tidak ada trek MIDI.\n\nKemungkinan alasan:\n1. Kamu tidak memilih trek MIDI;\n2. Tidak ada channel di file MIDI;\n3. File MIDI korup/rusak atau format file tidak didukung.",
				no_plugin_pitch_shift_exception = "Error: Unable to call the Pitch Shift plugin.\n\nPlease follow the instructions of the tutorial document {0} to operate correctly.\nHowever, according to this updated version of the script, the Chinese and English versions should work properly.\nSo it is very likely that you are using Vegas in other languages.",
				no_plugin_presets_exception = "Error: Tidak dapat memanggil preset efek dari plugin Ptich shift.\n\nIkuti petunjuk dari dokumen tutorial {0} untuk mengoperasikan dengan benar.\nPastikan bahwa semua 25 preset ditambahkan secara manual di plugin transposisi dan diberi nama dengan benar.\n\nPenjelasan tambahan: Untuk lebih jelasnya silahkan simak penjelasan cara pemasangan pada kolom link di atas. Ke-25 preset ini adalah semua jenis perubahan nada dalam oktaf berikutnya.\nKehilangan salah satu dari preset tersebut dapat menyebabkan kesalahan. Memang sangat merepotkan untuk menambahkan preset secara manual, tetapi Vegas tidak dapat menggunakan skrip untuk menentukan parameter spesifik\npergeseran nada, jadi saya harus menggunakan trik ini.",
				no_plugin_name_exception = "Error: Plugin {0} tidak dapat dipanggil.\n\nMungkin versi Vegas yang Kamu gunakan tidak mendukung plugin tersebut.",
				no_take_exception_ps = "Supplementary note: Jika masih tidak dapat diselesaikan, berarti file media mungkin dalam format yang tidak didukung oleh Vegas.\nCoba menyeret file secara manual ke Vegas untuk melihat apakah file video dan audio berfungsi dengan benar.",
				no_audio_take_exception = "Error: Tidak dapat membaca streaming media audio.\n\nDi antarmuka setelan, jangan centang \"Enabled Audio\" untuk media video/gambar murni.\n\n",
				no_video_take_exception = "Error: Tidak dapat membaca streaming media video.\n\nDi antarmuka setelan, jangan centang \"Enabled Video\" untuk media Audio murni.\n\n",
				no_media_take_exception = "Error: Tidak dapat membaca media.\n\nFormat file yang Anda pilih tidak didukung oleh Vegas. Silakan periksa apakah file media rusak atau dekoder Vegas yang sesuai tidak terpasang.\n\n",
				not_a_midi_file_exception = "Error: Tidak dapat membaca file MIDI.\n\nSolusi: Impor MIDI dengan perangkat lunak host, lalu keluarkan kembali file MIDI baru.\n\nCatatan tambahan: Ada beberapa format file MIDI, dan skrip tidak menjamin hal itu semuanya dapat dibaca dengan benar. Untungnya,\nfile MIDI yang diekspor oleh software host mainstream dengan setelan default biasanya dapat dibaca. (FL Studio, LMMS \ndan Studio Musik untuk iPad yang saat ini diuji.)",
				no_selected_exception_ps = "Catatan tambahan: Jika ingin memilih media dalam folder secara manual, klik tombol \"Jelajahi\" di sebelah kanan untuk\nmemilih media. Dan pastikan jalur file yang Anda pilih dipilih di menu tarik-turun di sebelah kiri.",
				no_selected_media_exception = "Error: Tidak ada media yang dipilih di jendela media proyek.\n\nSilakan pilih media di jendela media proyek, lalu buka kembali dialog konfigurasi, dan pilih \"file media yang dipilih\" di konfigurasi sumber.\n\n",
				no_selected_clip_exception_short = "Error: Tidak ada klip yang dipilih di trek.",
				no_selected_clip_exception = "Error: Tidak ada klip yang dipilih di trek.\n\nSilakan pilih klip di trek, lalu buka kembali dialog konfigurasi, dan pilih \"klip trek yang dipilih\" di konfigurasi sumber.\n\n",
				no_time_stretch_pitch_shift_exception = "Error: Metode konversi nada dari klip yang dipilih disetel ke tanpa penyetelan.\n\nKemungkinan besar Anda menggunakan \"klip trek yang dipilih\". Anda tidak dapat disalahkan atas kesalahan ini, tetapi karena desain Vegas yang mati otak.\n\nSolusi: Harap pilih ulang klip trek Anda, klik kanan bagian audio, dan pilih \"Properti\" di bagian bawah. Setel \"Metode\" dari \"Rentang Waktu/Konversi Nada\" menjadi \"élastique\". Kemudian klik Oke.\n\nCatatan tambahan: Jika peristiwa audio belum diubah urutannya dan propertinya dibuka, maka \"Metode\" dari \"Rentang Waktu/Konversi Lapangan\" di propertinya akan\nsecara otomatis diubah menjadi \"Tidak Ada\", dan klik OK. Berpengaruh. Saat ini, Anda akan menemukan bahwa operasi penyetelan + dan tombol pada keyboard tidak valid. Saat ini, Anda harus membuka kembali properti peristiwa audio,\n\nmenyetel \"Metode\" dari \"Time Stretch/Pitch Conversion\" menjadi \"élastique\", Anda tidak perlu menyetel \"Pitch shift \", klik saja OK.",
				read_config_fail_exception = "Kesalahan: Gagal membaca file konfigurasi parameter.\n\nKasian deh lo Kmengalami kesalahan tak terduga ini. Kami akan menghapus pengaturan konfigurasi pengguna dan mengembalikannya ke pengaturan default untuk menyelesaikan masalah.\nDisarankan untuk memberi tahu pembuat kesalahan ini untuk menyelesaikan masalah dengan cepat.\nSkrip ini akan dikeluarkan, dan kemudian gw akan mengganggu Kamu untuk membukanya kembali secara manual.",
				fail_to_select_clips_exception = "Error: Error saat memilih klip lagu.\n\nPilih beberapa klip lagu di jendela lagu terlebih dahulu.",
				fail_to_select_tracks_exception = "Error: Error saat memilih trek.\n\nPilih beberapa trek video di jendela trek terlebih dahulu.",
				ytp_over_length_exception = "Error: Panjang minimum YTP yang ditentukan melebihi panjang media.\n\nPanjang minimum YTP yang ditentukan terlalu besar, harap coba nilai yang lebih kecil. Atau panjang media yang dipilih terlalu kecil.",
				ytp_in_media_generator_exception = "Error: Terapkan YTP ke media yang dibuat oleh media generator.\n\nPenerapan YTP harus menggunakan file media lokal, jangan gunakan media yang dibuat oleh media generator.",
				ytp_eliminate_duplicates_finally_null_exception = "Pengecualian Teknis: Hapus duplikat dari daftar sumber YTP. Akhirnya, daftarnya kosong!\n\nIni adalah kesalahan yang seharusnya tidak terjadi.",
				unknown_exception = "Error: Pengecualian tidak diketahui.\n\nHarap luaskan detailnya untuk melihat konten kesalahan spesifik dan berikan informasi Error kembali ke pembuatnya.",
				use_pic_in_pic_on_unsupported_vegas_exception = "Error: Penggunaan efek plugin Gambar-dalam-Gambar di Vegas versi lebih rendah tidak didukung.\n\nAkar penyebab: Vegas telah menambahkan beberapa fitur dan parameter baru ke plugin efek Picture-in-Picture baru, yang tidak dapat digunakan di versi rendah versi plugin Vegas.\n\nSolusi: Versi Vegas saat ini tidak dapat menggunakan efek visual ritme PV ini (seperti aspek ekspansi), harap gunakan efek visual lainnya. Atau update Vegas Lu.",
				unsupported_curve_enum_exception = "Error: Gunakan jenis pencacahan kurva yang tidak didukung sebagai parameter.\n\n{0} bukan jenis pencacahan kurva.",
				convert_music_beats_not_one_audio_event_exception = "Error: Jumlah klip audio yang dipilih di alat konversi ketukan musik tidak sama persis dengan satu.\n\n1 audio harus dipilih, tetapi {0} audio dipilih.",
				convert_music_beats_unsupported_beats_exception = "Error: Ketukan Vegas saat ini tidak dalam 4/4, 3/4, 6/8.",
				invalid_mapping_velocity_values_exception = "Error: Parameter kecepatan pemetaan ilegal digunakan.\n\nSolusi: Pastikan parameter velocity pemetaan audio dan video,\n1. Nilai yang lebih kecil tidak boleh lebih besar dari nilai yang lebih besar;\n2. Nilai VELOCITY yang lebih kecil dan lebih besar tidak boleh sama.\nJika tidak, ini tidak akan menyelesaikan operasi kecepatan pemetaan.",
				invalid_glissando_amount_exception = "Error: Parameter jumlah glissando ilegal digunakan.\n\nJumlah Glissando tidak boleh nol.",
				cannot_get_script_dir_exception = "Error: Tidak bisa mendapatkan jalur direktori skrip!",
				cannot_get_xvid_path_exception = "Error: Tidak bisa mendapatkan jalur direktori instalasi XviD!",
				install_xvid_info = "Codec XviD tidak diinstal. Skrip akan menginstalnya sekarang dan mungkin meminta akses admin untuk menginstalnya.",
				install_xvid_admin_failed = "Error: instalasi XviD ditolak Admin.",
				install_xvid_succeed = "XviD diinstal dan render template yang dihasilkan untuk frame rate saat ini. Harap restart Vegas dan jalankan skrip lagi.",
				render_template_generate_completed = "Render template yang dibuat untuk frekuensi gambar saat ini. Harap restart Vegas dan jalankan skrip lagi.",
				unexpected_exception = "Pengecualian tak terduga: ",
				unexpected_render_status = "Status render tak terduga: ",
				datamix_selection_position_exception = "Error: Harus dimulai pada frame ≥ 1!",
				datamix_selection_length_exception = "Error: Panjang harus > 1 frame!",
				datamosh_frames_repeats_exception = "Error: Pengulangan frame harus > 0!",
				datamosh_selection_length_exception = "Error: Pemilihan harus sepanjang jumlah frame!",
				datamosh_selection_position_exception = "Error: Tidak boleh dimulai pada frame pertama proyek!",
				no_track_found_exception = "Error: Trek tidak ditemukan!",
				excessively_video_events_selected_exception = "Kesalahan: Hanya satu video event yang dapat dipilih!",
				no_video_event_selected_exception = "Error: Pilih event video dulu!",
				no_ofx_effects_included_exception = "Error: Klip video yang dipilih tidak mengandung efek apa pun atau efeknya bukan efek OFX!",
				layering_offset_exception = "Error: Lapisan offset tidak boleh 0!",
				layering_count_exception = "Error: Jumlah lapisan harus > 0!",
				scramble_size_exception = "Error: Ukuran pengacakan harus > 0!",
				stutter_length_exception = "Error: Panjang harus > 0!",
				stutter_window_bias_exception = "Error:Bias jendela harus > 0!",
				render_template_frame_rate_exception = "Error: Frame rate harus < 100!",
				appdata_not_set_exception = "Error: Tidak bisa mendapatkan jalur AppData!",
				stutter_generator_media_info = "Gagap tidak dapat secara otomatis menghasilkan klip terbalik untuk media yang dihasilkan dari generator media (Titles & Text, …). Harap buat klip terbalik mereka dengan membalikkan dan membalikkannya kembali, atau render ke file terlebih dahulu (misalnya menggunakan Render).",
				automator_parameters = "Parameter Otomasi",
				datamoshing_parameters = "Parameter Datamoshing",
				layering_parameters = "Parameter Layering",
				scrambling_parameters = "Parameter Scrambling",
				stutter_parameters = "Parameter Stutter",
				frame_count = "Jumlah frame",
				frames_repeats = "Ulang frame",
				layer_count = "Hitungan layer",
				layering_offset = "offset layering",
				scramble_size = "Ukuan scramble",
				length_in_seconds = "Panjang dalam hitungan detik",
				stutter_window_bias = "bias window Stutter ",
				canceled = "Dibatalkan.",
				automator_info = "Periksa parameter efek yang memerlukan scramble",
				pre_render = "Render",
				enable_legacy_progress_dialog = "Aktifkan dialog kemajuan lama",
				camera_shake_parameters = "Parameter Goyang Kamera",
				shake_skew_in = "Kecepatan",
				shake_skew_xy = "sinkronisitas H/V",
				shake_skew_out = "Jumlah",
				shake_x_to_y_ratio = "Rasio perpindahan H/V",
				shake_should_reset_pan = "Reset Pan/Pangkas pada frame pertama",
				shake_should_clear_frames = "Reset semua bingkai sebelum getaran",
				shake_skew_in_tooltip = "Mengubah frekuensi getaran.",
				shake_skew_xy_tooltip = "Cmenggantung kecepatan vertikal relatif. Atur ke 1 untuk bergerak dalam lingkaran.",
				shake_skew_out_tooltip = "Jumlah piksel kamera akan menjauh dari tengah. Ini juga merupakan margin zoom-in.",
				shake_x_to_y_tooltip = "Kalikan jarak horizontal. Nilai di atas 1 akan menghasilkan zoom-in yang lebih besar.",
				shake_should_reset_pan_tooltip = "Biarkan tidak dicentang untuk mengguncang dalam zoom video saat ini.",
				shake_should_clear_frames_tooltip = "Biarkan tidak dicentang untuk melipatgandakan efek shake baru dengan efek shake sebelumnya.",
				restrict_note_length = "Batasi panjang nada",
				unrestricted = "Tidak dibatasi",
				restrict_max_length = "Panjang maksimal",
				restrict_fixed_length = "Panjang tetap",
				preferred_track = "Trek pilihan",
				new_track = "Trek baru",
				glissando = "Glissando",
				swirl = "Swirl(Putar)",
			};
		}
	}
	#endregion
}
